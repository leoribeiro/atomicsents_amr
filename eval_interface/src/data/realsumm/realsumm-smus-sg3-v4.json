[
  {
    "instance_id": "realsumm-0",
    "summary": "<t> Anuradha Koirala and 425 young women and girls have been sleeping outdoors because of aftershocks . </t> <t> Pushpa Basnet and 45 children she cares for were forced to evacuate their residence . </t> <t> Seven other CNN Heroes and their organizations now assisting in relief efforts . </t>",
    "summary_trees": [
      "# ::snt  Anuradha Koirala and 425 young women and girls have been sleeping outdoors because of aftershocks . \n(c / cause-01\n      :ARG0 (a / aftershock)\n      :ARG1 (s / sleep-01\n            :ARG0 (a2 / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Anuradha\"\n                              :op2 \"Koirala\"))\n                  :op2 (w / woman)\n                  :op3 (g / girl)\n                  :quant 425\n                  :mod (y / young))\n            :location (o / outdoors)))",
      "# ::snt  Pushpa Basnet and 45 children she cares for were forced to evacuate their residence . \n(f / force-01\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Pushpa\"\n                        :op2 \"Basnet\"))\n            :op2 (c / child\n                  :quant 45\n                  :ARG1-of (c2 / care-03\n                        :ARG0 p)))\n      :ARG2 (e / evacuate-01\n            :ARG1 (t / thing\n                  :ARG1-of (r / reside-01\n                        :ARG0 a))\n            :ARG2 a))",
      "# ::snt  Seven other CNN Heroes and their organizations now assisting in relief efforts . \n(a / assist-01\n      :ARG0 (a2 / and\n            :op1 (h / hero\n                  :quant 7\n                  :mod (p / publication\n                        :name (n / name\n                              :op1 \"CNN\"))\n                  :mod (o / other))\n            :op2 (o2 / organization\n                  :poss h))\n      :ARG2 (e / effort-01\n            :ARG1 (r / relieve-01))\n      :time (n2 / now))"
    ],
    "tree": [
      "(c / cause-01\n   :ARG0 (a / aftershock))",
      "(c / cause-01\n   :ARG1 (s / sleep-01\n            :ARG0 (a2 / and\n                      :op1 (p / person\n                              :name (n / name\n                                       :op1 \"Anuradha\"\n                                       :op2 \"Koirala\"))\n                      :op2 (w / woman)\n                      :op3 (g / girl)\n                      :quant 425\n                      :mod (y / young))\n            :location (o / outdoors)))",
      "(s / sleep-01\n   :ARG0 (a2 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Anuradha\"\n                              :op2 \"Koirala\"))\n             :op2 (w / woman)\n             :op3 (g / girl)\n             :quant 425\n             :mod (y / young))\n   :location (o / outdoors))",
      "(c / cause-01\n   :ARG0 (a / aftershock))",
      "(s / sleep-01\n   :ARG0 (a2 / and))",
      "(c / cause-01\n   :ARG0 (a / aftershock))",
      "(s / sleep-01\n   :ARG0 (a2 / and))",
      "(c / cause-01\n   :ARG0 (a / aftershock)\n   :ARG1 (s / sleep-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Anuradha\"\n                              :op2 \"Koirala\"))\n            :location (o / outdoors)))",
      "(c / cause-01\n   :ARG0 (a / aftershock)\n   :ARG1 (s / sleep-01\n            :ARG0 (w / woman)\n            :location (o / outdoors)))",
      "(c / cause-01\n   :ARG0 (a / aftershock)\n   :ARG1 (s / sleep-01\n            :ARG0 (g / girl\n                     :quant 425\n                     :mod (y / young))\n            :location (o / outdoors)\n            :location o))",
      "(c / cause-01\n   :ARG0 (a / aftershock)\n   :ARG1 (s / sleep-01\n            :ARG0 (a2 / and\n                      :op1 (p / person\n                              :name (n / name\n                                       :op1 \"Anuradha\"\n                                       :op2 \"Koirala\"))\n                      :op2 (w / woman)\n                      :op3 (g / girl)\n                      :quant 425\n                      :mod (y / young))))",
      "(c / cause-01)",
      "(f / force-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Pushpa\"\n                             :op2 \"Basnet\"))\n            :op2 (c / child\n                    :quant 45\n                    :ARG1-of (c2 / care-03\n                                 :ARG0 p))))",
      "(f / force-01\n   :ARG2 (e / evacuate-01\n            :ARG1 (t / thing\n                     :ARG1-of (r / reside-01\n                                 :ARG0 (a / and)))\n            :ARG2 a))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Pushpa\"\n                    :op2 \"Basnet\"))\n   :op2 (c / child\n           :quant 45\n           :ARG1-of (c2 / care-03\n                        :ARG0 p)))",
      "(e / evacuate-01\n   :ARG1 (t / thing\n            :ARG1-of (r / reside-01\n                        :ARG0 (a / and)))\n   :ARG2 a)",
      "(f / force-01\n   :ARG1 (a / and))",
      "(c2 / care-03\n    :ARG0 (p / person :name (n / name :op1 \"Pushpa\" :op2 \"Basnet\")))",
      "(e / evacuate-01\n   :ARG1 (t / thing))",
      "(r / reside-01\n   :ARG0 (a / and))",
      "(f / force-01\n   :ARG1 (a / and))",
      "(c2 / care-03\n    :ARG0 (p / person :name (n / name :op1 \"Pushpa\" :op2 \"Basnet\")))",
      "(e / evacuate-01\n   :ARG1 (t / thing))",
      "(r / reside-01\n   :ARG0 (a / and))",
      "(f / force-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Pushpa\"\n                     :op2 \"Basnet\"))\n   :ARG2 (e / evacuate-01\n            :ARG1 (t / thing\n                     :ARG1-of (r / reside-01\n                                 :ARG0 p))\n            :ARG2 p))",
      "(f / force-01\n   :ARG1 (c / child\n            :quant 45\n            :ARG1-of (c2 / care-03\n                         :ARG0 (p / person :name (n / name :op1 \"Pushpa\" :op2 \"Basnet\"))))\n   :ARG2 (e / evacuate-01\n            :ARG1 (t / thing\n                     :ARG1-of (r / reside-01\n                                 :ARG0 c))\n            :ARG2 c)\n   :ARG2 e)",
      "(f / force-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Pushpa\"\n                             :op2 \"Basnet\"))\n            :op2 (c / child\n                    :quant 45\n                    :ARG1 (c2 / care-03\n                              :ARG0 p)))\n   :ARG2 (e / evacuate-01\n            :ARG1 (t / thing\n                     :ARG1 (r / reside-01\n                              :ARG0 a))\n            :ARG2 a))",
      "(f / force-01)",
      "(a / assist-01\n   :ARG0 (a2 / and\n             :op1 (h / hero\n                     :quant 7\n                     :mod (p / publication\n                             :name (n / name\n                                      :op1 \"CNN\"))\n                     :mod (o / other))\n             :op2 (o2 / organization\n                      :poss h)))",
      "(a / assist-01\n   :ARG2 (e / effort-01\n            :ARG1 (r / relieve-01)))",
      "(a / assist-01\n   :time (n2 / now))",
      "(a2 / and\n    :op1 (h / hero\n            :quant 7\n            :mod (p / publication\n                    :name (n / name\n                             :op1 \"CNN\"))\n            :mod (o / other))\n    :op2 (o2 / organization\n             :poss h))",
      "(e / effort-01\n   :ARG1 (r / relieve-01))",
      "(a / assist-01\n   :ARG0 (a2 / and))",
      "(e / effort-01\n   :ARG1 (r / relieve-01))",
      "(r / relieve-01)",
      "(a / assist-01\n   :ARG0 (a2 / and))",
      "(e / effort-01\n   :ARG1 (r / relieve-01))",
      "(a / assist-01\n   :ARG0 (h / hero\n            :quant 7\n            :mod (p / publication\n                    :name (n / name\n                             :op1 \"CNN\"))\n            :mod (o / other))\n   :ARG2 (e / effort-01\n            :ARG1 (r / relieve-01))\n   :time (n2 / now))",
      "(a / assist-01\n   :ARG0 (o2 / organization\n             :poss (h / hero))\n   :ARG2 (e / effort-01\n            :ARG1 (r / relieve-01))\n   :ARG2 e\n   :time (n2 / now))",
      "(a / assist-01\n   :ARG0 (a2 / and\n             :op1 (h / hero\n                     :quant 7\n                     :mod (p / publication\n                             :name (n / name\n                                      :op1 \"CNN\"))\n                     :mod (o / other))\n             :op2 (o2 / organization\n                      :poss h))\n   :ARG2 (e / effort-01\n            :ARG1 (r / relieve-01)))",
      "(a / assist-01\n   :time (n2 / now))"
    ],
    "smus": [
      "Because of the aftershocks.",
      "Because Anuradha Koirala, 425 young women and girls are sleeping outdoors.",
      "Anuradha Koirala, 425 young women and girls are sleeping outdoors.",
      "Because of the aftershocks.",
      "Sleeping and...",
      "Because of the aftershocks.",
      "Sleeping and...",
      "Anuradha koirala was sleeping outdoors because of the aftershocks.",
      "The aftershocks caused the women to be sleeping outdoors.",
      "Aftershocks caused 425 young girls to be sleeping outdoors.",
      "Anuradha Koirala, 425 young women and girls were sleeping because of the aftershocks.",
      "Because...",
      "Pushpa Basnet and 45 children she cares for are forced.",
      "Residents were forced to evacuate.",
      "Pushpa Basnet and 45 children she cares for.",
      "Evacuate their residence.",
      "Forced.",
      "Pusspa Basnet cares.",
      "Evacuate.",
      "Residence of the two.",
      "Forced.",
      "Pusspa Basnet cares.",
      "Evacuate.",
      "Residence of the two.",
      "Pushpa Basnet was forced to evacuate his residence.",
      "45 children Pusspa Basnet cares for were forced to evacuate their residence.",
      "Pushpa Basnet and 45 children she cares for were forced to evacuate their residence.",
      "Forced.",
      "The other 7 CNN heroes and their organizations are assisting.",
      "Assisting relief efforts",
      "Now assist.",
      "There are seven other CNN heroes and their organizations.",
      "relief efforts",
      "Assisting by both.",
      "relief efforts",
      "relief",
      "Assisting by both.",
      "relief efforts",
      "Seven other CNN heroes are now assisting in relief efforts.",
      "Heroes' organizations are now assisting in relief efforts.",
      "7 other CNN heroes and their organizations are assisting in relief efforts.",
      "Now assist."
    ]
  },
  {
    "instance_id": "realsumm-1",
    "summary": "<t> Students from the University of Surrey discovered thousands of colonies . </t> <t> They submerged coins and notes in agar to accelerate growth pf bacteria . </t> <t> Most were harmless on the money , but one caused boils and spots . </t> <t> Previous studies have revealed MRSA bacteria on notes and coins . </t>",
    "summary_trees": [
      "# ::snt  Students from the University of Surrey discovered thousands of colonies . \n(d / discover-01\n      :ARG0 (p / person\n            :ARG0-of (s / study-01)\n            :source (u / university\n                  :name (n / name\n                        :op1 \"University\"\n                        :op2 \"of\"\n                        :op3 \"Surrey\")))\n      :ARG1 (c / colony\n            :quant (m / multiple\n                  :op1 1000)))",
      "# ::snt  They submerged coins and notes in agar to accelerate growth pf bacteria . \n(s / submerge-01\n      :ARG0 (t / they)\n      :ARG1 (a / and\n            :op1 (c / coin)\n            :op2 (n / note))\n      :ARG2 (a2 / agar)\n      :purpose (a3 / accelerate-01\n            :ARG0 t\n            :ARG1 (g / grow-03\n                  :ARG1 (b / bacterium\n                        :name (n2 / name\n                              :op1 \"Pf\")))))",
      "# ::snt  Most were harmless on the money , but one caused boils and spots . \n(c / contrast-01\n      :ARG1 (h / harmful-02\n            :polarity -\n            :ARG0 (m / most)\n            :mod (o / on-the-money))\n      :ARG2 (c2 / cause-01\n            :ARG0 (o2 / one)\n            :ARG1 (a / and\n                  :op1 (b / boil-01)\n                  :op2 (s / spot))))",
      "# ::snt  Previous studies have revealed MRSA bacteria on notes and coins . \n(r / reveal-01\n      :ARG0 (s / study-01\n            :time (p / previous))\n      :ARG1 (b / bacterium\n            :mod (d / disease\n                  :name (n / name\n                        :op1 \"MRSA\"))\n            :location (a / and\n                  :op1 (n2 / note)\n                  :op2 (c / coin))))"
    ],
    "tree": [
      "(d / discover-01\n   :ARG0 (p / person\n            :ARG0-of (s / study-01)\n            :source (u / university\n                       :name (n / name\n                                :op1 \"University\"\n                                :op2 \"of\"\n                                :op3 \"Surrey\"))))",
      "(d / discover-01\n   :ARG1 (c / colony\n            :quant (m / multiple\n                      :op1 1000)))",
      "(p / person\n   :ARG0-of (s / study-01)\n   :source (u / university\n              :name (n / name\n                       :op1 \"University\"\n                       :op2 \"of\"\n                       :op3 \"Surrey\")))",
      "(c / colony\n   :quant (m / multiple\n             :op1 1000))",
      "(d / discover-01\n   :ARG0 (p / person))",
      "(s / study-01)",
      "(d / discover-01\n   :ARG0 (p / person))",
      "(d / discover-01\n   :ARG0 (p / person\n            :ARG0 (s / study-01))\n   :ARG1 (c / colony\n            :quant (m / multiple\n                      :op1 1000)))",
      "(d / discover-01)",
      "(s / submerge-01\n   :ARG0 (t / they))",
      "(s / submerge-01\n   :ARG1 (a / and\n            :op1 (c / coin)\n            :op2 (n / note)))",
      "(s / submerge-01\n   :ARG2 (a2 / agar))",
      "(s / submerge-01\n   :purpose (a3 / accelerate-01\n                :ARG0 (t / they)\n                :ARG1 (g / grow-03\n                         :ARG1 (b / bacterium\n                                  :name (n2 / name\n                                            :op1 \"Pf\")))))",
      "(a / and\n   :op1 (c / coin)\n   :op2 (n / note))",
      "(a3 / accelerate-01\n    :ARG0 (t / they)\n    :ARG1 (g / grow-03\n             :ARG1 (b / bacterium\n                      :name (n2 / name\n                                :op1 \"Pf\"))))",
      "(s / submerge-01\n   :ARG0 (t / they))",
      "(a3 / accelerate-01\n    :ARG0 (t / they)\n    :ARG1 (g / grow-03))",
      "(g / grow-03\n   :ARG1 (b / bacterium :name (n2 / name :op1 \"Pf\")))",
      "(s / submerge-01\n   :ARG0 (t / they))",
      "(a3 / accelerate-01\n    :ARG0 (t / they))",
      "(a3 / accelerate-01\n    :ARG1 (g / grow-03))",
      "(g / grow-03\n   :ARG1 (b / bacterium :name (n2 / name :op1 \"Pf\")))",
      "(s / submerge-01\n   :ARG0 (t / they)\n   :ARG1 (c / coin)\n   :ARG2 (a2 / agar)\n   :purpose (a3 / accelerate-01\n                :ARG0 t\n                :ARG1 (g / grow-03\n                         :ARG1 (b / bacterium\n                                  :name (n2 / name\n                                            :op1 \"Pf\")))))",
      "(s / submerge-01\n   :ARG0 (t / they)\n   :ARG1 (n / note)\n   :ARG2 (a2 / agar)\n   :ARG2 a2\n   :purpose (a3 / accelerate-01\n                :ARG0 t\n                :ARG1 (g / grow-03\n                         :ARG1 (b / bacterium\n                                  :name (n2 / name\n                                            :op1 \"Pf\")))))",
      "(s / submerge-01\n   :ARG0 (t / they)\n   :ARG1 (a / and\n            :op1 (c / coin)\n            :op2 (n / note))\n   :ARG2 (a2 / agar))",
      "(s / submerge-01\n   :purpose (a3 / accelerate-01))",
      "(c / contrast-01\n   :ARG1 (h / harmful-02\n            :polarity -\n            :ARG0 (m / most)\n            :mod (o / on-the-money)))",
      "(c / contrast-01\n   :ARG2 (c2 / cause-01\n             :ARG0 (o2 / one)\n             :ARG1 (a / and\n                      :op1 (b / boil-01)\n                      :op2 (s / spot))))",
      "(h / harmful-02\n   :polarity -\n   :ARG0 (m / most)\n   :mod (o / on-the-money))",
      "(c2 / cause-01\n    :ARG0 (o2 / one)\n    :ARG1 (a / and\n             :op1 (b / boil-01)\n             :op2 (s / spot)))",
      "(c / contrast-01\n   :ARG1 (h / harmful-02))",
      "(h / harmful-02\n   :polarity -\n   :ARG0 (m / most))",
      "(c2 / cause-01\n    :ARG0 (o2 / one))",
      "(b / boil-01)",
      "(c / contrast-01\n   :ARG1 (h / harmful-02))",
      "(h / harmful-02\n   :polarity -)",
      "(h / harmful-02\n   :ARG0 (m / most))",
      "(c2 / cause-01\n    :ARG0 (o2 / one))",
      "(c / contrast-01\n   :ARG1 (h / harmful-02\n            :polarity -\n            :ARG0 (m / most)\n            :mod (o / on-the-money))\n   :ARG2 (c2 / cause-01\n             :ARG0 (o2 / one)\n             :ARG1 (b / boil-01)))",
      "(c / contrast-01\n   :ARG1 (h / harmful-02\n            :polarity -\n            :ARG0 (m / most)\n            :mod (o / on-the-money))\n   :ARG2 (c2 / cause-01\n             :ARG0 (o2 / one)\n             :ARG1 (s / spot)))",
      "(c / contrast-01\n   :ARG1 (h / harmful-02\n            :polarity -\n            :ARG0 (m / most)\n            :mod (o / on-the-money))\n   :ARG2 (c2 / cause-01\n             :ARG0 (o2 / one)\n             :ARG1 (a / and\n                      :op1 (b / boil-01)\n                      :op2 (s / spot))))",
      "(c / contrast-01)",
      "(r / reveal-01\n   :ARG0 (s / study-01\n            :time (p / previous)))",
      "(r / reveal-01\n   :ARG1 (b / bacterium\n            :mod (d / disease\n                    :name (n / name\n                             :op1 \"MRSA\"))\n            :location (a / and\n                         :op1 (n2 / note)\n                         :op2 (c / coin))))",
      "(s / study-01\n   :time (p / previous))",
      "(b / bacterium\n   :mod (d / disease\n           :name (n / name\n                    :op1 \"MRSA\"))\n   :location (a / and\n                :op1 (n2 / note)\n                :op2 (c / coin)))",
      "(r / reveal-01\n   :ARG0 (s / study-01))",
      "(s / study-01\n   :time (p / previous))",
      "(r / reveal-01\n   :ARG0 (s / study-01))",
      "(s / study-01\n   :time (p / previous))",
      "(r / reveal-01\n   :ARG0 (s / study-01\n            :time (p / previous))\n   :ARG1 (b / bacterium\n            :mod (d / disease\n                    :name (n / name\n                             :op1 \"MRSA\"))\n            :location (n2 / note)))",
      "(r / reveal-01\n   :ARG0 (s / study-01\n            :time (p / previous))\n   :ARG1 (b / bacterium\n            :mod (d / disease\n                    :name (n / name\n                             :op1 \"MRSA\"))\n            :location (c / coin)))",
      "(r / reveal-01\n   :ARG0 (s / study-01)\n   :ARG1 (b / bacterium\n            :mod (d / disease\n                    :name (n / name\n                             :op1 \"MRSA\"))))",
      "(r / reveal-01)"
    ],
    "smus": [
      "Students from the University of Surrey discovered --",
      "Thousands of colonies were discovered.",
      "Students from the University of Surrey",
      "There were thousands of colonies.",
      "People discovered.",
      "Studies.",
      "People discovered.",
      "The students discovered thousands of colonies.",
      "Discovered.",
      "They submerged.",
      "The coins and notes were submerged.",
      "Submerged in the agar.",
      "Submerged to accelerate the growth of the Pf bacteria.",
      "coins and notes",
      "They will accelerate the growth of Pf bacteria.",
      "They submerged.",
      "They will accelerate growth.",
      "Pf growth",
      "They submerged.",
      "They will accelerate.",
      "Accelerate growth.",
      "Pf growth",
      "They submerged the coins in the agar to accelerate the growth of the Pf bacteria.",
      "They submerged the notes in agar to accelerate the growth of the Pf bacteria.",
      "They submerged the coins and notes in the agar.",
      "Submerged to accelerate.",
      "But most aren't harmful on the mone.",
      "But one caused boils and spots.",
      "Most aren't harmful on the mone.",
      "One caused boils and spots.",
      "But harmful.",
      "Most aren't harmful.",
      "One caused.",
      "boils.",
      "But harmful.",
      "Not harmful.",
      "Most harmful.",
      "One caused.",
      "Most aren't harmful on the mone but one caused boils.",
      "Most aren't harmful on the mone but one caused the spots.",
      "Most aren't harmful on the mone but one caused boils and spots.",
      "But...",
      "Previous studies have revealed --",
      "MRSA bacteria have been revealed on notes and coins.",
      "previous studies",
      "MRSA bacteria on notes and coins.",
      "Studies have revealed --",
      "previous studies",
      "Studies have revealed --",
      "previous studies",
      "Previous studies have revealed MRSA bacteria on the notes.",
      "Previous studies have revealed MRSA bacteria in coins.",
      "Studies have revealed MRSA bacteria.",
      "-Destroyed"
    ]
  },
  {
    "instance_id": "realsumm-2",
    "summary": "<t> Danilo this week agreed to join Real Madrid in the summer for \u00a3 23million . </t> <t> Transfer will take total raised from player sales to \u00a3 440 m since 2004 . </t> <t> James Rodriguez , Pepe and Radamel Falcao among those sold by Porto . </t> <t> CLICK HERE for all the latest Real Madrid news . </t>",
    "summary_trees": [
      "# ::snt  Danilo this week agreed to join Real Madrid in the summer for \u00a3 23million . \n(a / agree-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Danilo\"))\n      :ARG1 (j / join-04\n            :ARG0 p\n            :ARG1 (t / team\n                  :name (n2 / name\n                        :op1 \"Real\"\n                        :op2 \"Madrid\"))\n            :time (d / date-entity\n                  :season (s / summer))\n            :prep-for (m / monetary-quantity\n                  :quant 23000000\n                  :unit (p2 / pound)))\n      :time (w / week\n            :mod (t2 / this)))",
      "# ::snt  Transfer will take total raised from player sales to \u00a3 440 m since 2004 . \n(t / take-01\n      :ARG0 (t2 / transfer-01)\n      :ARG1 (m / monetary-quantity\n            :ARG1-of (t3 / total-01)\n            :ARG1-of (r / raise-01\n                  :ARG3 (s / sell-01\n                        :ARG1 (p / person\n                              :ARG0-of (p2 / play-01)))))\n      :ARG3 (m2 / monetary-quantity\n            :quant 440000000\n            :unit (p3 / pound))\n      :time (s2 / since\n            :op1 (d / date-entity\n                  :year 2004)))",
      "# ::snt  James Rodriguez , Pepe and Radamel Falcao among those sold by Porto . \n(ii / include-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"James\"\n                        :op2 \"Roduez\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Pepe\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Radamel\"\n                        :op2 \"Falcao\")))\n      :ARG2 (t / that\n            :ARG1-of (s / sell-01\n                  :ARG0 (t2 / team\n                        :name (n4 / name\n                              :op1 \"Porto\")))))",
      "# ::snt  CLICK HERE for all the latest Real Madrid news . \n(c / CLICK-01\n      :mode imperative\n      :ARG0 (y / you)\n      :location (h / here)\n      :purpose (n / news\n            :mod (a / all)\n            :topic (t / team\n                  :name (n2 / name\n                        :op1 \"Real\"\n                        :op2 \"Madrid\"))\n            :mod (l / last)))"
    ],
    "tree": [
      "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danilo\")))",
      "(a / agree-01\n   :ARG1 (j / join-04\n            :ARG0 (p / person :name (n / name :op1 \"Danilo\"))\n            :ARG1 (t / team\n                     :name (n2 / name\n                               :op1 \"Real\"\n                               :op2 \"Madrid\"))\n            :time (d / date-entity\n                     :season (s / summer))\n            :prep-for (m / monetary-quantity\n                         :quant 23000000\n                         :unit (p2 / pound))))",
      "(a / agree-01\n   :time (w / week\n            :mod (t2 / this)))",
      "(p / person\n   :name (n / name\n            :op1 \"Danilo\"))",
      "(j / join-04\n   :ARG0 (p / person :name (n / name :op1 \"Danilo\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Real\"\n                      :op2 \"Madrid\"))\n   :time (d / date-entity\n            :season (s / summer))\n   :prep-for (m / monetary-quantity\n                :quant 23000000\n                :unit (p2 / pound)))",
      "(w / week\n   :mod (t2 / this))",
      "(a / agree-01\n   :ARG0 (p / person :name (n / name :op1 \"Danilo\")))",
      "(j / join-04\n   :ARG0 (p / person :name (n / name :op1 \"Danilo\"))\n   :ARG1 (t / team :name (n2 / name :op1 \"Real\" :op2 \"Madrid\")))",
      "(a / agree-01\n   :ARG0 (p / person :name (n / name :op1 \"Danilo\")))",
      "(j / join-04\n   :ARG0 (p / person :name (n / name :op1 \"Danilo\")))",
      "(j / join-04\n   :ARG1 (t / team :name (n2 / name :op1 \"Real\" :op2 \"Madrid\")))",
      "(a / agree-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danilo\"))\n   :ARG1 (j / join-04\n            :ARG0 p\n            :ARG1 (t / team\n                     :name (n2 / name\n                               :op1 \"Real\"\n                               :op2 \"Madrid\"))\n            :prep-for (m / monetary-quantity\n                         :quant 23000000\n                         :unit (p2 / pound))))",
      "(a / agree-01\n   :time (w / week\n            :mod (t2 / this)))",
      "(t / take-01\n   :ARG0 (t2 / transfer-01))",
      "(t / take-01\n   :ARG1 (m / monetary-quantity\n            :ARG1-of (t3 / total-01)\n            :ARG1-of (r / raise-01\n                        :ARG3 (s / sell-01\n                                 :ARG1 (p / person\n                                          :ARG0-of (p2 / play-01))))))",
      "(t / take-01\n   :ARG3 (m2 / monetary-quantity\n             :quant 440000000\n             :unit (p3 / pound)))",
      "(t / take-01\n   :time (s2 / since\n             :op1 (d / date-entity\n                     :year 2004)))",
      "(m / monetary-quantity\n   :ARG1-of (t3 / total-01)\n   :ARG1-of (r / raise-01\n               :ARG3 (s / sell-01\n                        :ARG1 (p / person\n                                 :ARG0-of (p2 / play-01)))))",
      "(m2 / monetary-quantity\n    :quant 440000000\n    :unit (p3 / pound))",
      "(s2 / since\n    :op1 (d / date-entity\n            :year 2004))",
      "(t / take-01\n   :ARG0 (t2 / transfer-01))",
      "(t2 / transfer-01)",
      "(t3 / total-01)",
      "(r / raise-01\n   :ARG3 (s / sell-01))",
      "(s / sell-01\n   :ARG1 (p / person))",
      "(p2 / play-01)",
      "(t / take-01\n   :ARG0 (t2 / transfer-01))",
      "(r / raise-01\n   :ARG3 (s / sell-01))",
      "(s / sell-01\n   :ARG1 (p / person))",
      "(t / take-01\n   :ARG0 (t2 / transfer-01)\n   :ARG1 (m / monetary-quantity\n            :ARG1 (t3 / total-01)\n            :ARG1 (r / raise-01\n                     :ARG3 (s / sell-01\n                              :ARG1 (p / person\n                                       :ARG0 (p2 / play-01)))))\n   :ARG3 (m2 / monetary-quantity\n             :quant 440000000\n             :unit (p3 / pound)))",
      "(t / take-01\n   :time (s2 / since\n             :op1 (d / date-entity\n                     :year 2004)))",
      "(ii / include-91\n    :ARG1 (a / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"James\"\n                              :op2 \"Roduez\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Pepe\"))\n             :op3 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Radamel\"\n                                :op2 \"Falcao\"))))",
      "(ii / include-91\n    :ARG2 (t / that\n             :ARG1-of (s / sell-01\n                         :ARG0 (t2 / team\n                                   :name (n4 / name\n                                             :op1 \"Porto\")))))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"James\"\n                    :op2 \"Roduez\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Pepe\"))\n   :op3 (p3 / person\n            :name (n3 / name\n                      :op1 \"Radamel\"\n                      :op2 \"Falcao\")))",
      "(t / that\n   :ARG1-of (s / sell-01\n               :ARG0 (t2 / team\n                         :name (n4 / name\n                                   :op1 \"Porto\"))))",
      "(s / sell-01\n   :ARG0 (t2 / team :name (n4 / name :op1 \"Porto\")))",
      "(s / sell-01\n   :ARG0 (t2 / team :name (n4 / name :op1 \"Porto\")))",
      "(ii / include-91\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"James\"\n                      :op2 \"Roduez\"))\n    :ARG2 (t / that\n             :ARG1-of (s / sell-01\n                         :ARG0 (t2 / team\n                                   :name (n4 / name\n                                             :op1 \"Porto\")))))",
      "(ii / include-91\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Pepe\"))\n    :ARG2 (t / that\n             :ARG1-of (s / sell-01\n                         :ARG0 (t2 / team\n                                   :name (n4 / name\n                                             :op1 \"Porto\")))))",
      "(ii / include-91\n    :ARG1 (p3 / person\n              :name (n3 / name\n                        :op1 \"Radamel\"\n                        :op2 \"Falcao\"))\n    :ARG2 (t / that\n             :ARG1-of (s / sell-01\n                         :ARG0 (t2 / team\n                                   :name (n4 / name\n                                             :op1 \"Porto\"))))\n    :ARG2 t)",
      "(ii / include-91\n    :ARG1 (a / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"James\"\n                              :op2 \"Roduez\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Pepe\"))\n             :op3 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Radamel\"\n                                :op2 \"Falcao\")))\n    :ARG2 (t / that\n             :ARG1 (s / sell-01\n                      :ARG0 (t2 / team\n                                :name (n4 / name\n                                          :op1 \"Porto\")))))",
      "(ii / include-91)",
      "(c / CLICK-01\n   :mode imperative)",
      "(c / CLICK-01\n   :ARG0 (y / you))",
      "(c / CLICK-01\n   :location (h / here))",
      "(c / CLICK-01\n   :purpose (n / news\n               :mod (a / all)\n               :topic (t / team\n                         :name (n2 / name\n                                   :op1 \"Real\"\n                                   :op2 \"Madrid\"))\n               :mod (l / last)))",
      "(n / news\n   :mod (a / all)\n   :topic (t / team\n             :name (n2 / name\n                       :op1 \"Real\"\n                       :op2 \"Madrid\"))\n   :mod (l / last))",
      "(c / CLICK-01\n   :mode imperative\n   :ARG0 (y / you))",
      "(c / CLICK-01\n   :mode imperative)",
      "(c / CLICK-01\n   :ARG0 (y / you))",
      "(c / CLICK-01\n   :mode imperative\n   :ARG0 (y / you))",
      "(c / CLICK-01\n   :mode imperative\n   :location (h / here)\n   :purpose (n / news\n               :mod (a / all)\n               :topic (t / team\n                         :name (n2 / name\n                                   :op1 \"Real\"\n                                   :op2 \"Madrid\"))\n               :mod (l / last)))"
    ],
    "smus": [
      "Danilo agreed.",
      "Danilo agreed to join Real Madrid for PS23million in the summer.",
      "This week agreed.",
      "Danilo",
      "Danilo will join Real Madrid in the summer for PS23million.",
      "This week.",
      "Danilo agreed.",
      "Danilo will join Real Madrid.",
      "Danilo agreed.",
      "Danilo will join.",
      "Join Real Madrid",
      "Danilo agreed to join Real Madrid for PS23million.",
      "This week agreed.",
      "The transfer will take place.",
      "Take the total raised from the sale of the player.",
      "Take PS44million.",
      "Take since 2004.",
      "The total was raised through the sale of the player.",
      "PS44 billion",
      "since 2004.",
      "The transfer will take place.",
      "Transfer.",
      "Total.",
      "Sales were raised.",
      "Selling people.",
      "Play.",
      "The transfer will take place.",
      "Sales were raised.",
      "Selling people.",
      "The transfer would take the total raised from the sale of the player to PS44million.",
      "Take since 2004.",
      "James Rodriguez, Pepe and Radamel Falcao are among them.",
      "Those are among those sold by Porto.",
      "James Rodriguez, Pepe and Radamel Falcao.",
      "That was sold by Porto.",
      "Porto have sold.",
      "Porto have sold.",
      "James Rodriguez was one of those sold by Porto.",
      "Pepe was one of those sold by Porto.",
      "Radamel Falcao is one of those sold by Porto.",
      "That Porto has sold is James Rodriguez, Pepe and Radamel Falcao.",
      "Among others.",
      "CLICK HERE.",
      "CLICK HERE.",
      "CLICK HERE.",
      "CLICK FOR ALL THE LUCKIEST NEWS ON REAL MADRID.",
      "All the latest news on Real Madrid.",
      "CLIENTS!",
      "CLICK HERE.",
      "CLICK HERE.",
      "CLIENTS!",
      "CLICK HERE for all the latest Real Madrid news."
    ]
  },
  {
    "instance_id": "realsumm-3",
    "summary": "<t> Dominatrix claims she shared a ' hot , deep kiss ' with Prince Harry in Vegas . </t> <t> Carrie Reichert said she felt overdressed after seeing his ' cute naked a * * ' The 43-year - old made the claim in an excerpt from her upcoming book . </t> <t> Kensington Palace has previously denied she was invited to the hotel suite . </t>",
    "summary_trees": [
      "# ::snt  Dominatrix claims she shared a ' hot , deep kiss ' with Prince Harry in Vegas . \n(c / claim-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Dominatrix\"))\n      :ARG1 (s / share-01\n            :ARG0 p\n            :ARG1 (k / kiss-01\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Prince\"\n                              :op2 \"Harry\"))\n                  :ARG1-of (h / hot-05)\n                  :ARG1-of (d / deep-03))\n            :ARG2 p2\n            :location (c2 / city\n                  :name (n3 / name\n                        :op1 \"Vegas\"))))",
      "# ::snt  Carrie Reichert said she felt overdressed after seeing his ' cute naked a * * ' The 43-year - old made the claim in an excerpt from her upcoming book . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Carrie\"\n                  :op2 \"Reichert\")\n            :age (t / temporal-quantity\n                  :quant 43\n                  :unit (y / year)))\n      :ARG1 (f / feel-01\n            :ARG0 p\n            :ARG1 (o / overdress-01\n                  :ARG1 p)\n            :time (a / after\n                  :op1 (s2 / see-01\n                        :ARG0 p\n                        :ARG1 (n2 / naked\n                              :domain (h / he)\n                              :mod (c / cute)))))\n      :ARG1-of (c2 / claim-01\n            :ARG0 p\n            :medium (e / excerpt-01\n                  :ARG2 (b / book\n                        :poss p\n                        :ARG1-of (c3 / come-up-13)))))",
      "# ::snt  Kensington Palace has previously denied she was invited to the hotel suite . \n(d / deny-01\n      :ARG0 (g / government-organization\n            :name (n / name\n                  :op1 \"Kensington\"\n                  :op2 \"Palace\"))\n      :ARG1 (ii / invite-01\n            :ARG1 (s / she)\n            :ARG2 (s2 / suite\n                  :location (h / hotel)))\n      :time (p / previous))"
    ],
    "tree": [
      "(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dominatrix\")))",
      "(c / claim-01\n   :ARG1 (s / share-01\n            :ARG0 (p / person :name (n / name :op1 \"Dominatrix\"))\n            :ARG1 (k / kiss-01\n                     :ARG0 p\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Prince\"\n                                         :op2 \"Harry\"))\n                     :ARG1-of (h / hot-05)\n                     :ARG1-of (d / deep-03))\n            :ARG2 p2\n            :location (c2 / city\n                          :name (n3 / name\n                                    :op1 \"Vegas\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Dominatrix\"))",
      "(s / share-01\n   :ARG0 (p / person :name (n / name :op1 \"Dominatrix\"))\n   :ARG1 (k / kiss-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Prince\"\n                                :op2 \"Harry\"))\n            :ARG1-of (h / hot-05)\n            :ARG1-of (d / deep-03))\n   :ARG2 p2\n   :location (c2 / city\n                 :name (n3 / name\n                           :op1 \"Vegas\")))",
      "(c / claim-01\n   :ARG0 (p / person :name (n / name :op1 \"Dominatrix\")))",
      "(s / share-01\n   :ARG0 (p / person :name (n / name :op1 \"Dominatrix\"))\n   :ARG1 (k / kiss-01))",
      "(k / kiss-01\n   :ARG0 (p / person :name (n / name :op1 \"Dominatrix\"))\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Prince\" :op2 \"Harry\")))",
      "(h / hot-05)",
      "(d / deep-03)",
      "(c / claim-01\n   :ARG0 (p / person :name (n / name :op1 \"Dominatrix\")))",
      "(s / share-01\n   :ARG0 (p / person :name (n / name :op1 \"Dominatrix\")))",
      "(s / share-01\n   :ARG1 (k / kiss-01))",
      "(k / kiss-01\n   :ARG0 (p / person :name (n / name :op1 \"Dominatrix\")))",
      "(k / kiss-01\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Prince\" :op2 \"Harry\")))",
      "(c / claim-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dominatrix\"))\n   :ARG1 (s / share-01\n            :ARG0 p\n            :ARG1 (k / kiss-01\n                     :ARG0 p\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Prince\"\n                                         :op2 \"Harry\"))\n                     :ARG1 (h / hot-05)\n                     :ARG1 (d / deep-03))\n            :ARG2 p2))",
      "(c / claim-01)",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Carrie\"\n                     :op2 \"Reichert\")\n            :age (t / temporal-quantity\n                    :quant 43\n                    :unit (y / year))))",
      "(s / say-01\n   :ARG1 (f / feel-01\n            :ARG0 (p / person :name (n / name :op1 \"Carrie\" :op2 \"Reichert\")))\n            :ARG1 (o / overdress-01\n                     :ARG1 p)\n            :time (a / after\n                     :op1 (s2 / see-01\n                              :ARG0 p\n                              :ARG1 (n2 / naked\n                                        :domain (h / he)\n                                        :mod (c / cute))))))",
      "(s / say-01\n   :ARG1-of (c2 / claim-01\n                :ARG0 (p / person :name (n / name :op1 \"Carrie\" :op2 \"Reichert\")))\n                :medium (e / excerpt-01\n                           :ARG2 (b / book\n                                    :poss p\n                                    :ARG1-of (c3 / come-up-13)))))",
      "(p / person\n   :name (n / name\n            :op1 \"Carrie\"\n            :op2 \"Reichert\")\n   :age (t / temporal-quantity\n           :quant 43\n           :unit (y / year)))",
      "(f / feel-01\n   :ARG0 (p / person :name (n / name :op1 \"Carrie\" :op2 \"Reichert\")))\n   :ARG1 (o / overdress-01\n            :ARG1 p)\n   :time (a / after\n            :op1 (s2 / see-01\n                     :ARG0 p\n                     :ARG1 (n2 / naked\n                               :domain (h / he)\n                               :mod (c / cute)))))",
      "(c2 / claim-01\n    :ARG0 (p / person :name (n / name :op1 \"Carrie\" :op2 \"Reichert\")))\n    :medium (e / excerpt-01\n               :ARG2 (b / book\n                        :poss p\n                        :ARG1-of (c3 / come-up-13))))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Carrie\" :op2 \"Reichert\"))))",
      "(f / feel-01\n   :ARG0 (p / person :name (n / name :op1 \"Carrie\" :op2 \"Reichert\")))\n   :ARG1 (o / overdress-01))",
      "(o / overdress-01\n   :ARG1 (p / person :name (n / name :op1 \"Carrie\" :op2 \"Reichert\"))))",
      "(s2 / see-01\n    :ARG0 (p / person :name (n / name :op1 \"Carrie\" :op2 \"Reichert\")))\n    :ARG1 (n2 / naked))",
      "(c2 / claim-01\n    :ARG0 (p / person :name (n / name :op1 \"Carrie\" :op2 \"Reichert\")))\n    :medium (e / excerpt-01))",
      "(e / excerpt-01\n   :ARG2 (b / book))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Carrie\" :op2 \"Reichert\"))))",
      "(f / feel-01\n   :ARG0 (p / person :name (n / name :op1 \"Carrie\" :op2 \"Reichert\"))))",
      "(f / feel-01\n   :ARG1 (o / overdress-01))",
      "(o / overdress-01\n   :ARG1 (p / person :name (n / name :op1 \"Carrie\" :op2 \"Reichert\"))))",
      "(s2 / see-01\n    :ARG0 (p / person :name (n / name :op1 \"Carrie\" :op2 \"Reichert\"))))",
      "(s2 / see-01\n    :ARG1 (n2 / naked))",
      "(c2 / claim-01\n    :ARG0 (p / person :name (n / name :op1 \"Carrie\" :op2 \"Reichert\"))))",
      "(c2 / claim-01\n    :medium (e / excerpt-01))",
      "(e / excerpt-01\n   :ARG2 (b / book))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Carrie\"\n                     :op2 \"Reichert\")\n            :age (t / temporal-quantity\n                    :quant 43\n                    :unit (y / year)))\n   :ARG1 (f / feel-01\n            :ARG0 p\n            :ARG1 (o / overdress-01\n                     :ARG1 p))\n   :ARG1 (c2 / claim-01))",
      "(s / say-01)",
      "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Kensington\"\n                     :op2 \"Palace\")))",
      "(d / deny-01\n   :ARG1 (ii / invite-01\n             :ARG1 (s / she)\n             :ARG2 (s2 / suite\n                       :location (h / hotel))))",
      "(d / deny-01\n   :time (p / previous))",
      "(g / government-organization\n   :name (n / name\n            :op1 \"Kensington\"\n            :op2 \"Palace\"))",
      "(ii / invite-01\n    :ARG1 (s / she)\n    :ARG2 (s2 / suite\n              :location (h / hotel)))",
      "(d / deny-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"Kensington\" :op2 \"Palace\")))",
      "(ii / invite-01\n    :ARG1 (s / she))",
      "(d / deny-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"Kensington\" :op2 \"Palace\")))",
      "(ii / invite-01\n    :ARG1 (s / she))",
      "(d / deny-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Kensington\"\n                     :op2 \"Palace\"))\n   :ARG1 (ii / invite-01\n             :ARG1 (s / she)\n             :ARG2 (s2 / suite)))",
      "(d / deny-01\n   :time (p / previous))"
    ],
    "smus": [
      "Dominatrix claims.",
      "a href=\"http://www.youtube.com/watch?v=dominatrix\">Dominatrix Claims He Shared Hot and Deep Kiss With Prince Harry In Vegas/a>",
      "Dominatrix",
      "Dominatrix shared a hot, deep kiss with Prince Harry in Vegas.",
      "Dominatrix claims.",
      "Dominatrix shared a kiss.",
      "Dominatrix gave Prince Harry a kiss.",
      "Hot.",
      "Deep.",
      "Dominatrix claims.",
      "dominatrix shared.",
      "Shared a kiss.",
      "Dominatrix gave a kiss.",
      "Prince Harry got a kiss.",
      "Dominatrix claims she shared a hot, deep kiss with Prince Harry.",
      "Claims.",
      "\"It's going to be a 43 year old,\" said Carrie Reichert, 43.",
      "\"After seeing him as cute and naked, I felt overdressed,\" said Carol Reichert.",
      "According to the claim by Carrie Reichert in an excerpt from her book that came up --",
      "Carrie Reichert, 43, is a retired chemist.",
      "After seeing him as cutely naked, Carol Reichert felt overdressed.",
      "In an excerpt from her book that came up, Carol Reichert made the claim:",
      "\"It's going to be a long time,\" said Carrie Reichert.",
      "Carrie Reichert felt overdressed.",
      "Carrie Reichert was overdressed.",
      "Carrie Reichert is seeing naked.",
      "In excerpt: \"Carrie Reichert's claim:",
      "Excerpt from the book:",
      "\"It's going to be a long time,\" said Carrie Reichert.",
      "\"Carrie Reichert felt.",
      "felt overdressed.",
      "Carrie Reichert was overdressed.",
      "Carrie Reichert is seeing.",
      "Seeking naked.",
      "Carrie Reichert's claim:",
      "Excerpt:",
      "Excerpt from the book:",
      "\"I felt overdressed,\" said 43-year-old Carol Reichert of the claim.",
      "said.",
      "The Kensington Palace has denied.",
      "She was denied invitation to a hotel suite.",
      "previously denied.",
      "The Kensington Palace.",
      "She was invited to a hotel suite.",
      "The Kensington Palace has denied.",
      "She was invited.",
      "The Kensington Palace has denied.",
      "She was invited.",
      "The Kensington Palace has denied that she was invited to the suite.",
      "previously denied."
    ]
  },
  {
    "instance_id": "realsumm-4",
    "summary": "<t> Eva Chapin , 34 , from West Linn , Oregon , has been accused of harassment . </t> <t> Referred to her neighbors as ' n * * * * * ' but insists she is not racist . </t> <t> One note said : ' There were no [ expletive ] in W.L until you came ' . </t> <t> Victim has said her family may be forced to move as they do n't feel safe . </t>",
    "summary_trees": [
      "# ::snt  Eva Chapin , 34 , from West Linn , Oregon , has been accused of harassment . \n(a / accuse-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Eva\"\n                  :op2 \"Chapin\")\n            :age (t / temporal-quantity\n                  :quant 34\n                  :unit (y / year))\n            :source (c / city\n                  :name (n2 / name\n                        :op1 \"West\"\n                        :op2 \"Linn\")\n                  :location (s / state\n                        :name (n3 / name\n                              :op1 \"Oregon\"))))\n      :ARG2 (h / harass-01\n            :ARG0 p))",
      "# ::snt  Referred to her neighbors as ' n * * * * * ' but insists she is not racist . \n(c / contrast-01\n      :ARG1 (r / refer-01\n            :ARG1 (p / person\n                  :ARG1-of (n / neighbor-01\n                        :ARG2 (s / she)))\n            :ARG2 (n2 / nigger))\n      :ARG2 (ii / insist-01\n            :ARG0 s\n            :ARG1 (r2 / racist\n                  :polarity -\n                  :domain s)))",
      "# ::snt  One note said : ' There were no [ expletive ] in W.L until you came ' . \n(s / say-01\n      :ARG0 (n / note\n            :quant 1)\n      :ARG1 (b / be-located-at-91\n            :polarity -\n            :ARG1 (e / expletive)\n            :ARG2 (c / city\n                  :name (n2 / name\n                        :op1 \"W.L\"))\n            :time (u / until\n                  :op1 (c2 / come-01\n                        :ARG1 (y / you)))))",
      "# ::snt  Victim has said her family may be forced to move as they do n't feel safe . \n(s / say-01\n      :ARG0 (v / victim)\n      :ARG1 (p / possible-01\n            :ARG1 (f / force-01\n                  :ARG1 (f2 / family\n                        :poss v)\n                  :ARG2 (m / move-01\n                        :ARG1 f2)\n                  :ARG1-of (c / cause-01\n                        :ARG0 (f3 / feel-01\n                              :polarity -\n                              :ARG0 f2\n                              :ARG1 (s2 / safe-01\n                                    :ARG1 f2))))))"
    ],
    "tree": [
      "(a / accuse-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Eva\"\n                     :op2 \"Chapin\")\n            :age (t / temporal-quantity\n                    :quant 34\n                    :unit (y / year))\n            :source (c / city\n                       :name (n2 / name\n                                 :op1 \"West\"\n                                 :op2 \"Linn\")\n                       :location (s / state\n                                    :name (n3 / name\n                                              :op1 \"Oregon\")))))",
      "(a / accuse-01\n   :ARG2 (h / harass-01\n            :ARG0 (p / person :name (n / name :op1 \"Eva\" :op2 \"Chapin\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"Eva\"\n            :op2 \"Chapin\")\n   :age (t / temporal-quantity\n           :quant 34\n           :unit (y / year))\n   :source (c / city\n              :name (n2 / name\n                        :op1 \"West\"\n                        :op2 \"Linn\")\n              :location (s / state\n                           :name (n3 / name\n                                     :op1 \"Oregon\"))))",
      "(a / accuse-01\n   :ARG1 (p / person :name (n / name :op1 \"Eva\" :op2 \"Chapin\"))))",
      "(h / harass-01\n   :ARG0 (p / person :name (n / name :op1 \"Eva\" :op2 \"Chapin\"))))",
      "(a / accuse-01\n   :ARG1 (p / person :name (n / name :op1 \"Eva\" :op2 \"Chapin\"))))",
      "(h / harass-01\n   :ARG0 (p / person :name (n / name :op1 \"Eva\" :op2 \"Chapin\"))))",
      "(a / accuse-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Eva\"\n                     :op2 \"Chapin\")\n            :age (t / temporal-quantity\n                    :quant 34\n                    :unit (y / year)))\n   :ARG2 (h / harass-01\n            :ARG0 p))",
      "(a / accuse-01)",
      "(c / contrast-01\n   :ARG1 (r / refer-01\n            :ARG1 (p / person\n                     :ARG1-of (n / neighbor-01\n                                 :ARG2 (s / she)))\n            :ARG2 (n2 / nigger)))",
      "(c / contrast-01\n   :ARG2 (ii / insist-01\n             :ARG0 (s / she)\n             :ARG1 (r2 / racist\n                       :polarity -\n                       :domain s)))",
      "(r / refer-01\n   :ARG1 (p / person\n            :ARG1-of (n / neighbor-01\n                        :ARG2 (s / she)))\n   :ARG2 (n2 / nigger))",
      "(ii / insist-01\n    :ARG0 (s / she)\n    :ARG1 (r2 / racist\n              :polarity -\n              :domain s))",
      "(c / contrast-01\n   :ARG1 (r / refer-01))",
      "(r / refer-01\n   :ARG1 (p / person))",
      "(n / neighbor-01\n   :ARG2 (s / she))",
      "(ii / insist-01\n    :ARG0 (s / she)\n    :ARG1 (r2 / racist))",
      "(c / contrast-01\n   :ARG1 (r / refer-01))",
      "(r / refer-01\n   :ARG1 (p / person))",
      "(n / neighbor-01\n   :ARG2 (s / she))",
      "(ii / insist-01\n    :ARG0 (s / she))",
      "(ii / insist-01\n    :ARG1 (r2 / racist))",
      "(c / contrast-01\n   :ARG1 (r / refer-01\n            :ARG1 (p / person\n                     :ARG1 (n / neighbor-01\n                              :ARG2 (s / she)))\n            :ARG2 (n2 / nigger))\n   :ARG2 (ii / insist-01\n             :ARG0 s\n             :ARG1 (r2 / racist\n                       :polarity -\n                       :domain s)))",
      "(c / contrast-01)",
      "(s / say-01\n   :ARG0 (n / note\n            :quant 1))",
      "(s / say-01\n   :ARG1 (b / be-located-at-91\n            :polarity -\n            :ARG1 (e / expletive)\n            :ARG2 (c / city\n                     :name (n2 / name\n                               :op1 \"W.L\"))\n            :time (u / until\n                     :op1 (c2 / come-01\n                              :ARG1 (y / you)))))",
      "(b / be-located-at-91\n   :polarity -\n   :ARG1 (e / expletive)\n   :ARG2 (c / city\n            :name (n2 / name\n                      :op1 \"W.L\"))\n   :time (u / until\n            :op1 (c2 / come-01\n                     :ARG1 (y / you))))",
      "(s / say-01\n   :ARG0 (n / note))",
      "(c2 / come-01\n    :ARG1 (y / you))",
      "(s / say-01\n   :ARG0 (n / note))",
      "(c2 / come-01\n    :ARG1 (y / you))",
      "(s / say-01\n   :ARG0 (n / note\n            :quant 1)\n   :ARG1 (b / be-located-at-91\n            :polarity -\n            :ARG1 (e / expletive)\n            :ARG2 (c / city\n                     :name (n2 / name\n                               :op1 \"W.L\"))))",
      "(s / say-01)",
      "(s / say-01\n   :ARG0 (v / victim))",
      "(s / say-01\n   :ARG1 (p / possible-01\n            :ARG1 (f / force-01\n                     :ARG1 (f2 / family\n                               :poss (v / victim))\n                     :ARG2 (m / move-01\n                              :ARG1 f2)\n                     :ARG1-of (c / cause-01\n                                 :ARG0 (f3 / feel-01\n                                           :polarity -\n                                           :ARG0 f2\n                                           :ARG1 (s2 / safe-01\n                                                     :ARG1 f2))))))",
      "(p / possible-01\n   :ARG1 (f / force-01\n            :ARG1 (f2 / family\n                      :poss (v / victim))\n            :ARG2 (m / move-01\n                     :ARG1 f2)\n            :ARG1-of (c / cause-01\n                        :ARG0 (f3 / feel-01\n                                  :polarity -\n                                  :ARG0 f2\n                                  :ARG1 (s2 / safe-01\n                                            :ARG1 f2)))))",
      "(s / say-01\n   :ARG0 (v / victim))",
      "(p / possible-01\n   :ARG1 (f / force-01))",
      "(f / force-01\n   :ARG1 (f2 / family))",
      "(m / move-01\n   :ARG1 (f2 / family))",
      "(c / cause-01\n   :ARG0 (f3 / feel-01))",
      "(f3 / feel-01\n    :polarity -\n    :ARG0 (f2 / family)\n    :ARG1 (s2 / safe-01))",
      "(s2 / safe-01\n    :ARG1 (f2 / family))",
      "(s / say-01\n   :ARG0 (v / victim))",
      "(p / possible-01\n   :ARG1 (f / force-01))",
      "(f / force-01\n   :ARG1 (f2 / family))",
      "(m / move-01\n   :ARG1 (f2 / family))",
      "(c / cause-01\n   :ARG0 (f3 / feel-01))",
      "(f3 / feel-01\n    :polarity -)",
      "(f3 / feel-01\n    :ARG0 (f2 / family))",
      "(f3 / feel-01\n    :ARG1 (s2 / safe-01))",
      "(s2 / safe-01\n    :ARG1 (f2 / family))",
      "(s / say-01\n   :ARG0 (v / victim)\n   :ARG1 (p / possible-01\n            :ARG1 (f / force-01\n                     :ARG1 (f2 / family\n                               :poss v)\n                     :ARG2 (m / move-01\n                              :ARG1 f2)\n                     :ARG1 (c / cause-01\n                              :ARG0 (f3 / feel-01\n                                        :polarity -\n                                        :ARG0 f2\n                                        :ARG1 (s2 / safe-01\n                                                  :ARG1 f2))))))",
      "(s / say-01)"
    ],
    "smus": [
      "Eva Chapin, 34, of West Linn, Oregon, was accused.",
      "Eva Chapin was accused of harassment.",
      "Eva Chapin, 34, of West Linn, Oregon.",
      "Eva Chapin was accused.",
      "Eva Chapin is the harasser.",
      "Eva Chapin was accused.",
      "Eva Chapin is the harasser.",
      "Eva Chapin, 34, was accused of harassment.",
      "accused.",
      "But her neighbors are referred to as nigger.",
      "But she insists she is not racist.",
      "Her neighbors were referred to as nigger.",
      "She insists she is not racist.",
      "But referred to.",
      "People are being referred to.",
      "She was one of her neighbors.",
      "She insists that it is racist.",
      "But referred to.",
      "People are being referred to.",
      "She was one of her neighbors.",
      "She insists.",
      "insists on being racist.",
      "Her neighbors are referred to as niggers but she insists she is not racist.",
      "But...",
      "One note said --",
      "No expletive was in W.L until you came, said the man.",
      "There is no expletive in W.L until you come.",
      "According to the note --",
      "Come.",
      "According to the note --",
      "Come.",
      "There was no expletive in W.L, according to one note.",
      "said.",
      "Victim said --",
      "It is said that the victim's family may be forced to move because they don't feel safe.",
      "Victim's family may be forced to move because they don't feel safe.",
      "Victim said --",
      "Forced.",
      "Family forced.",
      "Move family.",
      "Feeling.",
      "The family doesn't feel safe.",
      "Family safety",
      "Victim said --",
      "Forced.",
      "Family forced.",
      "Move family.",
      "Feeling.",
      "Don't feel.",
      "The family will feel.",
      "Feel safe.",
      "Family safety",
      "Victims have said their families may be forced to move because they don't feel safe.",
      "said."
    ]
  },
  {
    "instance_id": "realsumm-5",
    "summary": "<t> Justin Rose finished joint runner - up at the Masters 2015 on 14-under - par . </t> <t> Rose 's final total has only been bettered six times at the the Masters . </t> <t> Rose hopes to build on his display and take some big titles across the year . </t> <t> CLICK HERE for all the latest news and reaction following the Masters . </t>",
    "summary_trees": [
      "# ::snt  Justin Rose finished joint runner - up at the Masters 2015 on 14-under - par . \n(f / finish-07\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Justin\"\n                  :op2 \"Rose\"))\n      :ARG2 (r / runner-up\n            :mod (j / joint))\n      :ARG3 (e / event\n            :name (n2 / name\n                  :op1 \"Masters\")\n            :time (d / date-entity\n                  :year 2015))\n      :manner (s / score-entity\n            :op1 14\n            :op2 (p2 / par)))",
      "# ::snt  Rose 's final total has only been bettered six times at the the Masters . \n(b / best-01\n      :frequency 6\n      :ARG1 (t / total\n            :mod (f / final)\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Rose\")))\n      :mod (o / only)\n      :time (g / game\n            :name (n2 / name\n                  :op1 \"Masters\")))",
      "# ::snt  Rose hopes to build on his display and take some big titles across the year . \n(h / hope-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rose\"))\n      :ARG1 (a / and\n            :op1 (b / build-01\n                  :ARG0 p\n                  :ARG1 (d / display-01\n                        :ARG0 p))\n            :op2 (t / take-01\n                  :ARG0 p\n                  :ARG1 (t2 / title\n                        :mod (b2 / big)\n                        :quant (s / some))\n                  :time (a2 / across\n                        :op1 (y / year)))))",
      "# ::snt  CLICK HERE for all the latest news and reaction following the Masters . \n(c / CLICK-01\n      :mode imperative\n      :ARG0 (y / you)\n      :location (h / here)\n      :purpose (a / and\n            :op1 (n / news\n                  :mod (l / last))\n            :op2 (r / react-01)\n            :mod (a2 / all)\n            :ARG1-of (f / follow-01\n                  :ARG2 (g / game\n                        :name (n2 / name\n                              :op1 \"Masters\")))))"
    ],
    "tree": [
      "(f / finish-07\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Justin\"\n                     :op2 \"Rose\")))",
      "(f / finish-07\n   :ARG2 (r / runner-up\n            :mod (j / joint)))",
      "(f / finish-07\n   :ARG3 (e / event\n            :name (n2 / name\n                      :op1 \"Masters\")\n            :time (d / date-entity\n                     :year 2015)))",
      "(f / finish-07\n   :manner (s / score-entity\n              :op1 14\n              :op2 (p2 / par)))",
      "(p / person\n   :name (n / name\n            :op1 \"Justin\"\n            :op2 \"Rose\"))",
      "(r / runner-up\n   :mod (j / joint))",
      "(e / event\n   :name (n2 / name\n             :op1 \"Masters\")\n   :time (d / date-entity\n            :year 2015))",
      "(s / score-entity\n   :op1 14\n   :op2 (p2 / par))",
      "(f / finish-07\n   :ARG0 (p / person :name (n / name :op1 \"Justin\" :op2 \"Rose\")))",
      "(f / finish-07\n   :ARG0 (p / person :name (n / name :op1 \"Justin\" :op2 \"Rose\")))",
      "(f / finish-07\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Justin\"\n                     :op2 \"Rose\"))\n   :ARG2 (r / runner-up\n            :mod (j / joint))\n   :ARG3 (e / event\n            :name (n2 / name\n                      :op1 \"Masters\"))\n   :manner (s / score-entity\n              :op1 14\n              :op2 (p2 / par)))",
      "(f / finish-07\n   :manner (s / score-entity\n              :op1 14\n              :op2 (p2 / par)))",
      "(b / best-01\n   :frequency 6)",
      "(b / best-01\n   :ARG1 (t / total\n            :mod (f / final)\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Rose\"))))",
      "(b / best-01\n   :mod (o / only))",
      "(b / best-01\n   :time (g / game\n            :name (n2 / name\n                      :op1 \"Masters\")))",
      "(t / total\n   :mod (f / final)\n   :poss (p / person\n            :name (n / name\n                     :op1 \"Rose\")))",
      "(g / game\n   :name (n2 / name\n             :op1 \"Masters\"))",
      "(b / best-01\n   :frequency 6\n   :ARG1 (t / total))",
      "(b / best-01\n   :frequency 6)",
      "(b / best-01\n   :ARG1 (t / total))",
      "(b / best-01\n   :frequency 6\n   :ARG1 (t / total\n            :mod (f / final)\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Rose\")))\n   :mod (o / only))",
      "(b / best-01\n   :frequency 6\n   :mod (o / only)\n   :time (g / game\n            :name (n2 / name\n                      :op1 \"Masters\")))",
      "(h / hope-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rose\")))",
      "(h / hope-01\n   :ARG1 (a / and\n            :op1 (b / build-01\n                    :ARG0 (p / person :name (n / name :op1 \"Rose\"))\n                    :ARG1 (d / display-01\n                             :ARG0 p))\n            :op2 (t / take-01\n                    :ARG0 p\n                    :ARG1 (t2 / title\n                              :mod (b2 / big)\n                              :quant (s / some))\n                    :time (a2 / across\n                              :op1 (y / year)))))",
      "(p / person\n   :name (n / name\n            :op1 \"Rose\"))",
      "(a / and\n   :op1 (b / build-01\n           :ARG0 (p / person :name (n / name :op1 \"Rose\"))\n           :ARG1 (d / display-01\n                    :ARG0 p))\n   :op2 (t / take-01\n           :ARG0 p\n           :ARG1 (t2 / title\n                     :mod (b2 / big)\n                     :quant (s / some))\n           :time (a2 / across\n                     :op1 (y / year))))",
      "(h / hope-01\n   :ARG0 (p / person :name (n / name :op1 \"Rose\")))",
      "(b / build-01\n   :ARG0 (p / person :name (n / name :op1 \"Rose\"))\n   :ARG1 (d / display-01))",
      "(d / display-01\n   :ARG0 (p / person :name (n / name :op1 \"Rose\")))",
      "(t / take-01\n   :ARG0 (p / person :name (n / name :op1 \"Rose\"))\n   :ARG1 (t2 / title))",
      "(h / hope-01\n   :ARG0 (p / person :name (n / name :op1 \"Rose\")))",
      "(b / build-01\n   :ARG0 (p / person :name (n / name :op1 \"Rose\")))",
      "(b / build-01\n   :ARG1 (d / display-01))",
      "(d / display-01\n   :ARG0 (p / person :name (n / name :op1 \"Rose\")))",
      "(t / take-01\n   :ARG0 (p / person :name (n / name :op1 \"Rose\")))",
      "(t / take-01\n   :ARG1 (t2 / title))",
      "(h / hope-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rose\"))\n   :ARG1 (b / build-01\n            :ARG0 p\n            :ARG1 (d / display-01\n                     :ARG0 p)))",
      "(h / hope-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rose\"))\n   :ARG1 (t / take-01\n            :ARG0 p\n            :ARG1 (t2 / title\n                      :mod (b2 / big)\n                      :quant (s / some))\n            :time (a2 / across\n                      :op1 (y / year))))",
      "(h / hope-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rose\"))\n   :ARG1 (a / and\n            :op1 (b / build-01\n                    :ARG0 p\n                    :ARG1 (d / display-01\n                             :ARG0 p))\n            :op2 (t / take-01\n                    :ARG0 p\n                    :ARG1 (t2 / title\n                              :mod (b2 / big)\n                              :quant (s / some)))))",
      "(h / hope-01)",
      "(c / CLICK-01\n   :mode imperative)",
      "(c / CLICK-01\n   :ARG0 (y / you))",
      "(c / CLICK-01\n   :location (h / here))",
      "(c / CLICK-01\n   :purpose (a / and\n               :op1 (n / news\n                       :mod (l / last))\n               :op2 (r / react-01)\n               :mod (a2 / all)\n               :ARG1-of (f / follow-01\n                           :ARG2 (g / game\n                                    :name (n2 / name\n                                              :op1 \"Masters\")))))",
      "(a / and\n   :op1 (n / news\n           :mod (l / last))\n   :op2 (r / react-01)\n   :mod (a2 / all)\n   :ARG1-of (f / follow-01\n               :ARG2 (g / game\n                        :name (n2 / name\n                                  :op1 \"Masters\"))))",
      "(c / CLICK-01\n   :mode imperative\n   :ARG0 (y / you))",
      "(r / react-01)",
      "(f / follow-01\n   :ARG2 (g / game :name (n2 / name :op1 \"Masters\")))",
      "(c / CLICK-01\n   :mode imperative)",
      "(c / CLICK-01\n   :ARG0 (y / you))",
      "(f / follow-01\n   :ARG2 (g / game :name (n2 / name :op1 \"Masters\")))",
      "(c / CLICK-01\n   :mode imperative\n   :ARG0 (y / you)\n   :location (h / here)\n   :purpose (n / news\n               :mod (l / last)))",
      "(c / CLICK-01\n   :mode imperative\n   :ARG0 (y / you)\n   :location (h / here)\n   :purpose (r / react-01\n               :mod (a2 / all)\n               :ARG1-of (f / follow-01\n                           :ARG2 (g / game\n                                    :name (n2 / name\n                                              :op1 \"Masters\")))))",
      "(c / CLICK-01\n   :mode imperative\n   :ARG0 (y / you))",
      "(c / CLICK-01\n   :mode imperative\n   :location (h / here)\n   :purpose (a / and\n               :op1 (n / news\n                       :mod (l / last))\n               :op2 (r / react-01)\n               :mod (a2 / all)))"
    ],
    "smus": [
      "Justin Rose finished.",
      "finished joint runner up.",
      "finished the Masters in 2015.",
      "finished 14 under par.",
      "Justin Rose",
      "joint runner up",
      "Masters 2015",
      "14 par",
      "Justin Rose finished.",
      "Justin Rose finished.",
      "Justin Rose finished joint runner up at the Masters with a par of 14th.",
      "finished 14 under par.",
      "Best 6 times.",
      "Best final total for Rose.",
      "Only the best.",
      "Best of the Masters.",
      "The final total of Rose.",
      "Masters",
      "Best six times in total.",
      "Best 6 times.",
      "Best total.",
      "Rose's final total was only 6 times best.",
      "Only six best times in the Masters.",
      "Rose hopes.",
      "Rose hopes to build a display and take some big titles across the year.",
      "Rose",
      "Rose will build a display and take some big titles across the year.",
      "Rose hopes.",
      "Rose will build a display.",
      "Rose's display:",
      "Rose will take the titles.",
      "Rose hopes.",
      "Rose will build.",
      "build a display",
      "Rose's display:",
      "Take Rose.",
      "Take the titles.",
      "Rose hopes to build a display.",
      "Rose hopes to take some big titles across the year.",
      "Rose hopes to build a display and take some big titles.",
      "Hopefully.",
      "CLICK HERE.",
      "CLICK HERE.",
      "CLICK HERE.",
      "CLICKS for all the latest news and reaction following the Masters.",
      "All the latest news and reaction following the Masters.",
      "CLIENTS!",
      "Reaction:",
      "Following the Masters.",
      "CLICK HERE.",
      "CLICK HERE.",
      "Following the Masters.",
      "For the latest news, CLICK HERE.",
      "CLICK HERE for all the reaction following the Masters.",
      "CLIENTS!",
      "CLIMB HERE for all the latest news and reaction."
    ]
  },
  {
    "instance_id": "realsumm-6",
    "summary": "<t> Girl was playing with friend when Zbigniew Huminski forced her into car . </t> <t> Chloe 's naked body was found in nearby woods an hour - and - a - half later . </t> <t> Prosecutors say there is evidence of ' strangulation and sexual violence ' Polish immigrant , who was heading to England , has admitted to killing . </t>",
    "summary_trees": [
      "# ::snt  Girl was playing with friend when Zbigniew Huminski forced her into car . \n(p / play-01\n      :ARG0 (g / girl)\n      :ARG3 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 g\n                  :ARG2 (f / friend)))\n      :time (f2 / force-01\n            :ARG0 (p3 / person\n                  :name (n / name\n                        :op1 \"Zbigniew\"\n                        :op2 \"Huminski\"))\n            :ARG1 g\n            :ARG2 (c / car)))",
      "# ::snt  Chloe 's naked body was found in nearby woods an hour - and - a - half later . \n(f / find-01\n      :ARG1 (b / body\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Chloe\"))\n            :ARG1-of (n2 / naked-02))\n      :location (w / woods\n            :location (n3 / nearby))\n      :time (a / after\n            :quant (t / temporal-quantity\n                  :quant 1.5\n                  :unit (h / hour))))",
      "# ::snt  Prosecutors say there is evidence of ' strangulation and sexual violence ' Polish immigrant , who was heading to England , has admitted to killing . \n(m / multi-sentence\n      :snt1 (s / say-01\n            :ARG0 (p / person\n                  :ARG0-of (p2 / prosecute-01))\n            :ARG1 (e / evidence-01\n                  :ARG1 (a / and\n                        :op1 (s2 / strangulate-01)\n                        :op2 (v / violence\n                              :mod (s3 / sex)))))\n      :snt2 (a2 / admit-01\n            :ARG0 (p3 / person\n                  :ARG0-of (ii / immigrate-01\n                        :ARG2 (c / country\n                              :name (n / name\n                                    :op1 \"Poland\")))\n                  :ARG0-of (h / head-02\n                        :ARG1 (c2 / country\n                              :name (n2 / name\n                                    :op1 \"England\"))))\n            :ARG1 (k / kill-01\n                  :ARG0 p3)))"
    ],
    "tree": [
      "(p / play-01\n   :ARG0 (g / girl))",
      "(p / play-01\n   :ARG3 (p2 / person\n             :ARG0-of (h / have-rel-role-91\n                         :ARG1 (g / girl)\n                         :ARG2 (f / friend))))",
      "(p / play-01\n   :time (f2 / force-01\n             :ARG0 (p3 / person\n                       :name (n / name\n                                :op1 \"Zbigniew\"\n                                :op2 \"Huminski\"))\n             :ARG1 (g / girl)\n             :ARG2 (c / car)))",
      "(p2 / person\n    :ARG0-of (h / have-rel-role-91\n                :ARG1 (g / girl)\n                :ARG2 (f / friend)))",
      "(f2 / force-01\n    :ARG0 (p3 / person\n              :name (n / name\n                       :op1 \"Zbigniew\"\n                       :op2 \"Huminski\"))\n    :ARG1 (g / girl)\n    :ARG2 (c / car))",
      "(p / play-01\n   :ARG0 (g / girl))",
      "(f2 / force-01\n    :ARG0 (p3 / person :name (n / name :op1 \"Zbigniew\" :op2 \"Huminski\")))",
      "(p / play-01\n   :ARG0 (g / girl))",
      "(f2 / force-01\n    :ARG0 (p3 / person :name (n / name :op1 \"Zbigniew\" :op2 \"Huminski\")))",
      "(p / play-01\n   :ARG0 (g / girl)\n   :ARG3 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 g\n                      :ARG2 (f / friend))))",
      "(p / play-01\n   :time (f2 / force-01))",
      "(f / find-01\n   :ARG1 (b / body\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Chloe\"))\n            :ARG1-of (n2 / naked-02)))",
      "(f / find-01\n   :location (w / woods\n                :location (n3 / nearby)))",
      "(f / find-01\n   :time (a / after\n            :quant (t / temporal-quantity\n                      :quant 1.5\n                      :unit (h / hour))))",
      "(b / body\n   :poss (p / person\n            :name (n / name\n                     :op1 \"Chloe\"))\n   :ARG1-of (n2 / naked-02))",
      "(w / woods\n   :location (n3 / nearby))",
      "(a / after\n   :quant (t / temporal-quantity\n             :quant 1.5\n             :unit (h / hour)))",
      "(f / find-01\n   :ARG1 (b / body))",
      "(n2 / naked-02)",
      "(f / find-01\n   :ARG1 (b / body))",
      "(f / find-01\n   :ARG1 (b / body\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Chloe\"))\n            :ARG1 (n2 / naked-02)))",
      "(f / find-01\n   :location (w / woods\n                :location (n3 / nearby))\n   :time (a / after\n            :quant (t / temporal-quantity\n                      :quant 1.5\n                      :unit (h / hour))))",
      "(m / multi-sentence\n   :snt1 (s / say-01\n            :ARG0 (p / person\n                     :ARG0-of (p2 / prosecute-01))\n            :ARG1 (e / evidence-01\n                     :ARG1 (a / and\n                              :op1 (s2 / strangulate-01)\n                              :op2 (v / violence\n                                      :mod (s3 / sex))))))",
      "(m / multi-sentence\n   :snt2 (a2 / admit-01\n             :ARG0 (p3 / person\n                       :ARG0-of (ii / immigrate-01\n                                    :ARG2 (c / country\n                                             :name (n / name\n                                                      :op1 \"Poland\")))\n                       :ARG0-of (h / head-02\n                                   :ARG1 (c2 / country\n                                             :name (n2 / name\n                                                       :op1 \"England\"))))\n             :ARG1 (k / kill-01\n                      :ARG0 p3)))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0-of (p2 / prosecute-01))\n   :ARG1 (e / evidence-01\n            :ARG1 (a / and\n                     :op1 (s2 / strangulate-01)\n                     :op2 (v / violence\n                             :mod (s3 / sex)))))",
      "(a2 / admit-01\n    :ARG0 (p3 / person\n              :ARG0-of (ii / immigrate-01\n                           :ARG2 (c / country\n                                    :name (n / name\n                                             :op1 \"Poland\")))\n              :ARG0-of (h / head-02\n                          :ARG1 (c2 / country\n                                    :name (n2 / name\n                                              :op1 \"England\"))))\n    :ARG1 (k / kill-01\n             :ARG0 p3))",
      "(s / say-01\n   :ARG0 (p / person))",
      "(p2 / prosecute-01)",
      "(e / evidence-01\n   :ARG1 (a / and))",
      "(s2 / strangulate-01)",
      "(a2 / admit-01\n    :ARG0 (p3 / person))",
      "(ii / immigrate-01\n    :ARG2 (c / country :name (n / name :op1 \"Poland\")))",
      "(h / head-02\n   :ARG1 (c2 / country :name (n2 / name :op1 \"England\")))",
      "(k / kill-01\n   :ARG0 (p3 / person))",
      "(s / say-01\n   :ARG0 (p / person))",
      "(e / evidence-01\n   :ARG1 (a / and))",
      "(a2 / admit-01\n    :ARG0 (p3 / person))",
      "(ii / immigrate-01\n    :ARG2 (c / country :name (n / name :op1 \"Poland\")))",
      "(h / head-02\n   :ARG1 (c2 / country :name (n2 / name :op1 \"England\")))",
      "(k / kill-01\n   :ARG0 (p3 / person))",
      "(m / multi-sentence\n   :snt1 (s / say-01\n            :ARG0 (p / person\n                     :ARG0-of (p2 / prosecute-01))\n            :ARG1 (e / evidence-01\n                     :ARG1 (s2 / strangulate-01))))",
      "(m / multi-sentence\n   :snt1 (s / say-01\n            :ARG0 (p / person\n                     :ARG0-of (p2 / prosecute-01))\n            :ARG1 (e / evidence-01\n                     :ARG1 (v / violence\n                              :mod (s3 / sex))))\n   :snt2 (a2 / admit-01\n             :ARG0 (p3 / person\n                       :ARG0-of (ii / immigrate-01\n                                    :ARG2 (c / country\n                                             :name (n / name\n                                                      :op1 \"Poland\")))\n                       :ARG0-of (h / head-02\n                                   :ARG1 (c2 / country\n                                             :name (n2 / name\n                                                       :op1 \"England\"))))\n             :ARG1 (k / kill-01\n                      :ARG0 p3)))",
      "(m / multi-sentence\n   :snt1 (s / say-01\n            :ARG0 (p / person\n                     :ARG0 (p2 / prosecute-01))\n            :ARG1 (e / evidence-01\n                     :ARG1 (a / and\n                              :op1 (s2 / strangulate-01)\n                              :op2 (v / violence\n                                      :mod (s3 / sex)))))\n   :snt2 (a2 / admit-01\n             :ARG0 (p3 / person\n                       :ARG0 (ii / immigrate-01\n                                 :ARG2 (c / country\n                                          :name (n / name\n                                                   :op1 \"Poland\")))\n                       :ARG0 (h / head-02\n                                :ARG1 (c2 / country\n                                          :name (n2 / name\n                                                    :op1 \"England\"))))\n             :ARG1 (k / kill-01\n                      :ARG0 p3)))",
      "(m / multi-sentence\n   :snt1 (s / say-01)\n   :snt2 (a2 / admit-01))"
    ],
    "smus": [
      "The Girl was playing.",
      "Playing with a girl friend.",
      "Playing when Zbigniew Huminski forced the girl into a car.",
      "Girl friend",
      "Zbigniew Huminski forced the girl into a car.",
      "The Girl was playing.",
      "Zbigniew Huminski forced.",
      "The Girl was playing.",
      "Zbigniew Huminski forced.",
      "The Girl was playing with her friend.",
      "Playing when forced.",
      "Holly's body was found naked.",
      "Found in nearby woods.",
      "Found an hour and a half later.",
      "Holly's naked body",
      "In nearby woods.",
      "After an hour and a half.",
      "The body was found.",
      "Naked.",
      "The body was found.",
      "Holly's body was found naked.",
      "Found in nearby woods an hour and a half later.",
      "Prosecutors say there is evidence of strangulation and sexual violence.",
      "Head of immigration to England, Poland, admitted killing.",
      "Prosecutors say there is evidence of strangulation and sexual violence.",
      "Head of immigration to England, Poland, has admitted to killing.",
      "People say...",
      "Prosecutors.",
      "There is evidence of both.",
      "Strangulation.",
      "People have admitted.",
      "Immigration to Poland",
      "Heading for England.",
      "Killing people.",
      "People say...",
      "There is evidence of both.",
      "People have admitted.",
      "Immigration to Poland",
      "Heading for England.",
      "Killing people.",
      "Prosecutors say there is evidence of strangulation.",
      "Prosecutors say there is evidence of sexual violence. A Polish immigration head admitted killing.",
      "Prosecutors say there is evidence of strangulation and sexual violence. Polish immigration head admits killing.",
      "Say, admitted."
    ]
  },
  {
    "instance_id": "realsumm-7",
    "summary": "<t> Pair were left homeless after storms and met in Connecticut trailer park . </t> <t> Won lottery last year but only cashed prize in after Easter to mark new start . ' </t> <t> Because of Sandy I met the love of my life ' , said thrilled lottery winner . </t>",
    "summary_trees": [
      "# ::snt  Pair were left homeless after storms and met in Connecticut trailer park . \n(a / and\n      :op1 (l / leave-13\n            :ARG1 (p / pair)\n            :ARG2 (h / homeless\n                  :domain p)\n            :time (a2 / after\n                  :op1 (s / storm)))\n      :op2 (m / meet-03\n            :ARG0 p\n            :location (p2 / park\n                  :mod (t / trailer)\n                  :location (s2 / state\n                        :name (n / name\n                              :op1 \"Connecticut\")))))",
      "# ::snt  Won lottery last year but only cashed prize in after Easter to mark new start . ' \n(c / contrast-01\n      :ARG1 (w / win-01\n            :ARG2 (l / lottery)\n            :time (y / year\n                  :mod (l2 / last)))\n      :ARG2 (c2 / cash-in-03\n            :ARG1 (p / prize)\n            :time (a / after\n                  :op1 (f / festival\n                        :name (n / name\n                              :op1 \"Easter\")))\n            :purpose (m / mark-01\n                  :ARG1 (s / start-01\n                        :ARG1-of (n2 / new-01)))\n            :mod (o / only)))",
      "# ::snt  Because of Sandy I met the love of my life ' , said thrilled lottery winner . \n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (w / win-01\n                  :ARG1 (l / lottery))\n            :ARG1-of (t / thrill-01))\n      :ARG1 (c / cause-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Sandy\"))\n            :ARG1 (m / meet-02\n                  :ARG0 p\n                  :ARG1 (p3 / person\n                        :ARG0-of (l2 / love-01\n                              :ARG1 p)\n                        :ARG0-of (l3 / live-01\n                              :ARG1 p)))))"
    ],
    "tree": [
      "(a / and\n   :op1 (l / leave-13\n           :ARG1 (p / pair)\n           :ARG2 (h / homeless\n                    :domain p)\n           :time (a2 / after\n                     :op1 (s / storm))))",
      "(a / and\n   :op2 (m / meet-03\n           :ARG0 (p / pair)\n           :location (p2 / park\n                         :mod (t / trailer)\n                         :location (s2 / state\n                                       :name (n / name\n                                                :op1 \"Connecticut\")))))",
      "(l / leave-13\n   :ARG1 (p / pair)\n   :ARG2 (h / homeless\n            :domain p)\n   :time (a2 / after\n             :op1 (s / storm)))",
      "(m / meet-03\n   :ARG0 (p / pair)\n   :location (p2 / park\n                 :mod (t / trailer)\n                 :location (s2 / state\n                               :name (n / name\n                                        :op1 \"Connecticut\"))))",
      "(m / meet-03\n   :ARG0 (p / pair)\n   :location (p2 / park))",
      "(m / meet-03\n   :ARG0 (p / pair))",
      "(m / meet-03\n   :location (p2 / park))",
      "(l / leave-13\n   :ARG1 (p / pair)\n   :ARG2 (h / homeless\n            :domain p)\n   :time (a2 / after\n             :op1 (s / storm)))",
      "(m / meet-03\n   :ARG0 (p / pair)\n   :location (p2 / park\n                 :mod (t / trailer)\n                 :location (s2 / state\n                               :name (n / name\n                                        :op1 \"Connecticut\"))))",
      "(a / and\n   :op1 (l / leave-13\n           :ARG1 (p / pair)\n           :ARG2 (h / homeless\n                    :domain p))\n   :op2 (m / meet-03\n           :ARG0 p))",
      "(a / and\n   :op1 (l / leave-13\n           :time (a2 / after\n                     :op1 (s / storm)))\n   :op2 (m / meet-03))",
      "(c / contrast-01\n   :ARG1 (w / win-01\n            :ARG2 (l / lottery)\n            :time (y / year\n                     :mod (l2 / last))))",
      "(c / contrast-01\n   :ARG2 (c2 / cash-in-03\n             :ARG1 (p / prize)\n             :time (a / after\n                      :op1 (f / festival\n                              :name (n / name\n                                       :op1 \"Easter\")))\n             :purpose (m / mark-01\n                         :ARG1 (s / start-01\n                                  :ARG1-of (n2 / new-01)))\n             :mod (o / only)))",
      "(w / win-01\n   :ARG2 (l / lottery)\n   :time (y / year\n            :mod (l2 / last)))",
      "(c2 / cash-in-03\n    :ARG1 (p / prize)\n    :time (a / after\n             :op1 (f / festival\n                     :name (n / name\n                              :op1 \"Easter\")))\n    :purpose (m / mark-01\n                :ARG1 (s / start-01\n                         :ARG1-of (n2 / new-01)))\n    :mod (o / only))",
      "(c / contrast-01\n   :ARG1 (w / win-01))",
      "(w / win-01\n   :ARG2 (l / lottery))",
      "(c2 / cash-in-03\n    :ARG1 (p / prize))",
      "(m / mark-01\n   :ARG1 (s / start-01))",
      "(s / start-01)",
      "(n2 / new-01)",
      "(c / contrast-01\n   :ARG1 (w / win-01))",
      "(w / win-01\n   :ARG2 (l / lottery))",
      "(c2 / cash-in-03\n    :ARG1 (p / prize))",
      "(m / mark-01\n   :ARG1 (s / start-01))",
      "(c / contrast-01\n   :ARG1 (w / win-01\n            :ARG2 (l / lottery))\n   :ARG2 (c2 / cash-in-03\n             :ARG1 (p / prize)\n             :mod (o / only)))",
      "(c / contrast-01)",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0-of (w / win-01\n                        :ARG1 (l / lottery))\n            :ARG1-of (t / thrill-01)))",
      "(s / say-01\n   :ARG1 (c / cause-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Sandy\"))\n            :ARG1 (m / meet-02\n                     :ARG0 (p / person)\n                     :ARG1 (p3 / person\n                               :ARG0-of (l2 / love-01\n                                            :ARG1 p)\n                               :ARG0-of (l3 / live-01\n                                            :ARG1 p)))))",
      "(p / person\n   :ARG0-of (w / win-01\n               :ARG1 (l / lottery))\n   :ARG1-of (t / thrill-01))",
      "(c / cause-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Sandy\"))\n   :ARG1 (m / meet-02\n            :ARG0 (p / person)\n            :ARG1 (p3 / person\n                      :ARG0-of (l2 / love-01\n                                   :ARG1 p)\n                      :ARG0-of (l3 / live-01\n                                   :ARG1 p))))",
      "(s / say-01\n   :ARG0 (p / person))",
      "(w / win-01\n   :ARG1 (l / lottery))",
      "(t / thrill-01)",
      "(c / cause-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Sandy\")))",
      "(m / meet-02\n   :ARG0 (p / person)\n   :ARG1 (p3 / person))",
      "(l2 / love-01\n    :ARG1 (p / person))",
      "(l3 / live-01\n    :ARG1 (p / person))",
      "(s / say-01\n   :ARG0 (p / person))",
      "(w / win-01\n   :ARG1 (l / lottery))",
      "(c / cause-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Sandy\")))",
      "(m / meet-02\n   :ARG0 (p / person))",
      "(m / meet-02\n   :ARG1 (p3 / person))",
      "(l2 / love-01\n    :ARG1 (p / person))",
      "(l3 / live-01\n    :ARG1 (p / person))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (w / win-01\n                     :ARG1 (l / lottery))\n            :ARG1 (t / thrill-01))\n   :ARG1 (c / cause-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Sandy\"))\n            :ARG1 (m / meet-02\n                     :ARG0 p\n                     :ARG1 (p3 / person\n                               :ARG0 (l2 / love-01\n                                         :ARG1 p)\n                               :ARG0 (l3 / live-01\n                                         :ARG1 p)))))",
      "(s / say-01)"
    ],
    "smus": [
      "And the pair were left homeless after the storms.",
      "And the pair met at a trailer park in Connecticut.",
      "The pair were left homeless after the storms.",
      "The pair met at a trailer park in Connecticut.",
      "The pair met in the park.",
      "The pair met.",
      "met in the park.",
      "The pair were left homeless after the storms.",
      "The pair met at a trailer park in Connecticut.",
      "The pair had left homeless and met.",
      "Left after storms and met.",
      "But last year there was a lottery win.",
      "But the prize will only be cashed in after Easter to mark the start of a new year.",
      "Lottery win last year",
      "The prize will only be cashed in after Easter to mark the new start.",
      "But it's a win.",
      "Lottery win",
      "The prize is cash in.",
      "Mark the start.",
      "for starters...",
      "New.",
      "But it's a win.",
      "Lottery win",
      "The prize is cash in.",
      "Mark the start.",
      "Lottery wins, but the prize is only cash in.",
      "But...",
      "\"There's a thrill-seeker who has won the lottery,\" said the winner.",
      "\"because Sandy, people met a person who loved and lived with him,\" she said.",
      "A thrill-seeker who has won the lottery.",
      "Because Sandy, people met a person who loved and lived with him.",
      "People said --",
      "Lottery win",
      "Thrilling.",
      "Because of Sandy.",
      "People met people.",
      "Love of people.",
      "People live.",
      "People said --",
      "Lottery win",
      "Because of Sandy.",
      "People met.",
      "People met.",
      "Love of people.",
      "People live.",
      "The thrill of winning the lottery was that Sandy met the love of his life,",
      "said."
    ]
  },
  {
    "instance_id": "realsumm-8",
    "summary": "<t> Cesc Fabregas was caught by trailing arm of Stoke City ace Charlie Adam . </t> <t> Former Barcelona man picked up the injury during Chelsea 's home win . </t> <t> Midfielder Adam scored wonder goal during the game but it was n't enough . </t> <t> Fabregas took to Instagram to show he was all smiles despite the bruises . </t> <t> CLICK HERE for all the latest Chelsea news . </t>",
    "summary_trees": [
      "# ::snt  Cesc Fabregas was caught by trailing arm of Stoke City ace Charlie Adam . \n(c / catch-03\n      :ARG0 (a / arm\n            :part-of (p / person\n                  :name (n / name\n                        :op1 \"Charlie\"\n                        :op2 \"Adam\")\n                  :mod (a2 / ace)\n                  :part-of (t / team\n                        :name (n2 / name\n                              :op1 \"Stoke\"\n                              :op2 \"City\")))\n            :ARG0-of (t2 / trail-01))\n      :ARG1 (p2 / person\n            :name (n3 / name\n                  :op1 \"Cesc\"\n                  :op2 \"Fabregas\")))",
      "# ::snt  Former Barcelona man picked up the injury during Chelsea 's home win . \n(p / pick-up-11\n      :ARG0 (m / man\n            :time (f / former)\n            :part-of (t / team\n                  :name (n / name\n                        :op1 \"Barcelona\")))\n      :ARG1 (ii / injury)\n      :time (w / win-01\n            :ARG0 (t2 / team\n                  :name (n2 / name\n                        :op1 \"Chelsea\"))\n            :location (h / home)))",
      "# ::snt  Midfielder Adam scored wonder goal during the game but it was n't enough . \n(h / have-concession-91\n      :ARG1 (s / score-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Adam\")\n                  :ARG0-of (h2 / have-org-role-91\n                        :ARG2 (m / midfielder)))\n            :ARG1 (g / goal\n                  :mod (w / wonder))\n            :time (g2 / game))\n      :ARG2 (h3 / have-quant-91\n            :ARG1 g\n            :ARG3 (e / enough\n                  :polarity -)))",
      "# ::snt  Fabregas took to Instagram to show he was all smiles despite the bruises . \n(t / take-35\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Fabregas\"))\n      :ARG2 (p2 / publication\n            :name (n2 / name\n                  :op1 \"Instagram\"))\n      :purpose (s / show-01\n            :ARG0 p\n            :ARG1 (s2 / smile-01\n                  :ARG0 p\n                  :mod (a / all)\n                  :concession (b / bruise-01\n                        :ARG1 p))))",
      "# ::snt  CLICK HERE for all the latest Chelsea news . \n(c / CLICK-01\n      :mode imperative\n      :ARG0 (y / you)\n      :location (h / here)\n      :purpose (n / news\n            :mod (l / last)\n            :mod (a / all)\n            :topic (p / person\n                  :name (n2 / name\n                        :op1 \"Chelsea\"))))"
    ],
    "tree": [
      "(c / catch-03\n   :ARG0 (a / arm\n            :part-of (p / person\n                        :name (n / name\n                                 :op1 \"Charlie\"\n                                 :op2 \"Adam\")\n                        :mod (a2 / ace)\n                        :part-of (t / team\n                                    :name (n2 / name\n                                              :op1 \"Stoke\"\n                                              :op2 \"City\")))\n            :ARG0-of (t2 / trail-01)))",
      "(c / catch-03\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"Cesc\"\n                       :op2 \"Fabregas\")))",
      "(a / arm\n   :part-of (p / person\n               :name (n / name\n                        :op1 \"Charlie\"\n                        :op2 \"Adam\")\n               :mod (a2 / ace)\n               :part-of (t / team\n                           :name (n2 / name\n                                     :op1 \"Stoke\"\n                                     :op2 \"City\")))\n   :ARG0-of (t2 / trail-01))",
      "(p2 / person\n    :name (n3 / name\n              :op1 \"Cesc\"\n              :op2 \"Fabregas\"))",
      "(c / catch-03\n   :ARG0 (a / arm))",
      "(t2 / trail-01)",
      "(c / catch-03\n   :ARG0 (a / arm))",
      "(c / catch-03\n   :ARG0 (a / arm\n            :part (p / person\n                     :name (n / name\n                              :op1 \"Charlie\"\n                              :op2 \"Adam\")\n                     :mod (a2 / ace)\n                     :part (t / team\n                              :name (n2 / name\n                                        :op1 \"Stoke\"\n                                        :op2 \"City\")))\n            :ARG0 (t2 / trail-01))\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"Cesc\"\n                       :op2 \"Fabregas\")))",
      "(c / catch-03)",
      "(p / pick-up-11\n   :ARG0 (m / man\n            :time (f / former)\n            :part-of (t / team\n                        :name (n / name\n                                 :op1 \"Barcelona\"))))",
      "(p / pick-up-11\n   :ARG1 (ii / injury))",
      "(p / pick-up-11\n   :time (w / win-01\n            :ARG0 (t2 / team\n                      :name (n2 / name\n                                :op1 \"Chelsea\"))\n            :location (h / home)))",
      "(m / man\n   :time (f / former)\n   :part-of (t / team\n               :name (n / name\n                        :op1 \"Barcelona\")))",
      "(w / win-01\n   :ARG0 (t2 / team\n             :name (n2 / name\n                       :op1 \"Chelsea\"))\n   :location (h / home))",
      "(w / win-01\n   :ARG0 (t2 / team :name (n2 / name :op1 \"Chelsea\")))",
      "(w / win-01\n   :ARG0 (t2 / team :name (n2 / name :op1 \"Chelsea\")))",
      "(p / pick-up-11\n   :ARG0 (m / man\n            :part (t / team\n                     :name (n / name\n                              :op1 \"Barcelona\")))\n   :ARG1 (ii / injury))",
      "(p / pick-up-11\n   :time (w / win-01\n            :location (h / home)))",
      "(h / have-concession-91\n   :ARG1 (s / score-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Adam\")\n                     :ARG0-of (h2 / have-org-role-91\n                                  :ARG2 (m / midfielder)))\n            :ARG1 (g / goal\n                     :mod (w / wonder))\n            :time (g2 / game)))",
      "(h / have-concession-91\n   :ARG2 (h3 / have-quant-91\n             :ARG1 (g / goal)\n             :ARG3 (e / enough\n                      :polarity -)))",
      "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Adam\")\n            :ARG0-of (h2 / have-org-role-91\n                         :ARG2 (m / midfielder)))\n   :ARG1 (g / goal\n            :mod (w / wonder))\n   :time (g2 / game))",
      "(h3 / have-quant-91\n    :ARG1 (g / goal)\n    :ARG3 (e / enough\n             :polarity -))",
      "(s / score-01\n   :ARG0 (p / person :name (n / name :op1 \"Adam\"))))",
      "(s / score-01\n   :ARG0 (p / person :name (n / name :op1 \"Adam\"))))",
      "(h / have-concession-91\n   :ARG1 (s / score-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Adam\")\n                     :ARG0 (h2 / have-org-role-91\n                               :ARG2 (m / midfielder)))\n            :ARG1 (g / goal\n                     :mod (w / wonder)))\n   :ARG2 (h3 / have-quant-91\n             :ARG1 g\n             :ARG3 (e / enough\n                      :polarity -)))",
      "(h / have-concession-91)",
      "(t / take-35\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fabregas\")))",
      "(t / take-35\n   :ARG2 (p2 / publication\n             :name (n2 / name\n                       :op1 \"Instagram\")))",
      "(t / take-35\n   :purpose (s / show-01\n               :ARG0 (p / person :name (n / name :op1 \"Fabregas\"))\n               :ARG1 (s2 / smile-01\n                         :ARG0 p\n                         :mod (a / all)\n                         :concession (b / bruise-01\n                                        :ARG1 p))))",
      "(p / person\n   :name (n / name\n            :op1 \"Fabregas\"))",
      "(p2 / publication\n    :name (n2 / name\n              :op1 \"Instagram\"))",
      "(s / show-01\n   :ARG0 (p / person :name (n / name :op1 \"Fabregas\"))\n   :ARG1 (s2 / smile-01\n             :ARG0 p\n             :mod (a / all)\n             :concession (b / bruise-01\n                            :ARG1 p)))",
      "(s / show-01\n   :ARG0 (p / person :name (n / name :op1 \"Fabregas\"))\n   :ARG1 (s2 / smile-01))",
      "(s2 / smile-01\n    :ARG0 (p / person :name (n / name :op1 \"Fabregas\"))\n    :mod (a / all))",
      "(b / bruise-01\n   :ARG1 (p / person :name (n / name :op1 \"Fabregas\")))",
      "(s / show-01\n   :ARG0 (p / person :name (n / name :op1 \"Fabregas\")))",
      "(s / show-01\n   :ARG1 (s2 / smile-01))",
      "(s2 / smile-01\n    :ARG0 (p / person :name (n / name :op1 \"Fabregas\")))",
      "(s2 / smile-01\n    :mod (a / all))",
      "(b / bruise-01\n   :ARG1 (p / person :name (n / name :op1 \"Fabregas\")))",
      "(t / take-35\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Fabregas\"))\n   :ARG2 (p2 / publication\n             :name (n2 / name\n                       :op1 \"Instagram\")))",
      "(t / take-35\n   :purpose (s / show-01))",
      "(c / CLICK-01\n   :mode imperative)",
      "(c / CLICK-01\n   :ARG0 (y / you))",
      "(c / CLICK-01\n   :location (h / here))",
      "(c / CLICK-01\n   :purpose (n / news\n               :mod (l / last)\n               :mod (a / all)\n               :topic (p / person\n                         :name (n2 / name\n                                   :op1 \"Chelsea\"))))",
      "(n / news\n   :mod (l / last)\n   :mod (a / all)\n   :topic (p / person\n             :name (n2 / name\n                       :op1 \"Chelsea\")))",
      "(c / CLICK-01\n   :mode imperative\n   :ARG0 (y / you))",
      "(c / CLICK-01\n   :mode imperative)",
      "(c / CLICK-01\n   :ARG0 (y / you))",
      "(c / CLICK-01\n   :mode imperative\n   :ARG0 (y / you))",
      "(c / CLICK-01\n   :mode imperative\n   :location (h / here)\n   :purpose (n / news\n               :mod (l / last)\n               :mod (a / all)\n               :topic (p / person\n                         :name (n2 / name\n                                   :op1 \"Chelsea\"))))"
    ],
    "smus": [
      "Charlie Adam, the ace of Stoke City, was caught trailing by his arm.",
      "Cesc Fabregas was caught.",
      "The ace of Stoke City Charlie Adam's arm is trailing.",
      "-Cesc Fabregas",
      "The arm was caught.",
      "Trailing.",
      "The arm was caught.",
      "ace Stoke City ace Charlie Adam's trailing arm caught Cesc Fabregas.",
      "Catch.",
      "The former Barcelona man picked up.",
      "The injury picked up.",
      "Picked up with Chelsea's home win.",
      "Former Barcelona man.",
      "Chelsea won the home game 1-0.",
      "Chelsea won 2-0.",
      "Chelsea won 2-0.",
      "Barcelona's man picked up an injury.",
      "Picked up with a win at home.",
      "But midfielder Adam scored a wonder goal in the game.",
      "The goal is not enough though.",
      "Midfielder Adam scored a wonder goal in the game.",
      "The goal is not enough.",
      "Adam scored.",
      "Adam scored.",
      "The midfielder Adam scored a wonder goal but not enough.",
      "but...",
      "Fabregas took it.",
      "It took an Instagram.",
      "It took Fabregas to show all his smiles despite his bruises.",
      "Fabregas",
      "Instagram",
      "Fabregas did show all his smiles despite his bruises.",
      "Fabregas did show smiles.",
      "Fabregas all smiles.",
      "Fabregas has bruises.",
      "Fabregas did show.",
      "Show smiles.",
      "Fabregas smiles",
      "All smiles.",
      "Fabregas has bruises.",
      "Fabregas took to Instagram.",
      "It took 35 minutes to show.",
      "CLICK HERE.",
      "CLICK HERE.",
      "CLICK HERE.",
      "CLICKS for all the latest Chelsea news.",
      "All the latest news about Chelsea.",
      "CLIENTS!",
      "CLICK HERE.",
      "CLICK HERE.",
      "CLIENTS!",
      "CLICK HERE for all the latest Chelsea news."
    ]
  },
  {
    "instance_id": "realsumm-9",
    "summary": "<t> The life of 16-year - old Maren Sanchez stabbed to death a year ago on the day of prom was celebrated on Saturday by hundreds of people . ' </t> <t> I do n't think there 's anything sad about this . </t> <t> It 's such a celebration , ' said Darby Hudd , a 17-year - old friend of the slain teen . </t> <t> A classmate , Christopher Plaskon , has been charged with Sanchez 's murder . </t>",
    "summary_trees": [
      "# ::snt  The life of 16-year - old Maren Sanchez stabbed to death a year ago on the day of prom was celebrated on Saturday by hundreds of people . ' \n(m / multi-sentence\n      :snt1 (c / celebrate-01\n            :ARG0 (p / person\n                  :quant (m2 / multiple\n                        :op1 100))\n            :ARG1 (l / life\n                  :poss (p2 / person\n                        :name (n / name\n                              :op1 \"Maren\"\n                              :op2 \"Sanchez\")\n                        :age (t / temporal-quantity\n                              :quant 16\n                              :unit (y / year))\n                        :ARG1-of (s / stab-01\n                              :ARG4 (d / die-01\n                                    :ARG1 p2)\n                              :time (b / before\n                                    :op1 (n2 / now)\n                                    :quant (t2 / temporal-quantity\n                                          :quant 1\n                                          :unit (y2 / year)))\n                              :time (d2 / day\n                                    :time-of (p3 / prom)))))\n            :time (d3 / date-entity\n                  :weekday (s2 / saturday))))",
      "# ::snt  I do n't think there 's anything sad about this . \n(t / think-01\n      :polarity -\n      :ARG0 (ii / i)\n      :ARG1 (s / sad-02\n            :ARG0 (a / anything)\n            :topic (t2 / this)))",
      "# ::snt  It 's such a celebration , ' said Darby Hudd , a 17-year - old friend of the slain teen . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Darby\"\n                  :op2 \"Hudd\")\n            :age (t / temporal-quantity\n                  :quant 17\n                  :unit (y / year))\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (t2 / teen\n                        :ARG1-of (s2 / slay-01))\n                  :ARG2 (f / friend)))\n      :ARG1 (c / celebrate-02\n            :domain (ii / it)\n            :degree (s3 / such)))",
      "# ::snt  A classmate , Christopher Plaskon , has been charged with Sanchez 's murder . \n(m / multi-sentence\n      :snt1 (c / charge-05\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Christopher\"\n                        :op2 \"Plaskon\")\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG2 (c2 / classmate)))\n            :ARG2 (m2 / murder-01\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Sanchez\")))))"
    ],
    "tree": [
      "(m / multi-sentence\n   :snt1 (c / celebrate-01\n            :ARG0 (p / person\n                     :quant (m2 / multiple\n                                :op1 100))\n            :ARG1 (l / life\n                     :poss (p2 / person\n                               :name (n / name\n                                        :op1 \"Maren\"\n                                        :op2 \"Sanchez\")\n                               :age (t / temporal-quantity\n                                       :quant 16\n                                       :unit (y / year))\n                               :ARG1-of (s / stab-01\n                                           :ARG4 (d / die-01\n                                                    :ARG1 p2)\n                                           :time (b / before\n                                                    :op1 (n2 / now)\n                                                    :quant (t2 / temporal-quantity\n                                                               :quant 1\n                                                               :unit (y2 / year)))\n                                           :time (d2 / day\n                                                     :time-of (p3 / prom)))))\n            :time (d3 / date-entity\n                      :weekday (s2 / saturday))))",
      "(c / celebrate-01\n   :ARG0 (p / person\n            :quant (m2 / multiple\n                       :op1 100))\n   :ARG1 (l / life\n            :poss (p2 / person\n                      :name (n / name\n                               :op1 \"Maren\"\n                               :op2 \"Sanchez\")\n                      :age (t / temporal-quantity\n                              :quant 16\n                              :unit (y / year))\n                      :ARG1-of (s / stab-01\n                                  :ARG4 (d / die-01\n                                           :ARG1 p2)\n                                  :time (b / before\n                                           :op1 (n2 / now)\n                                           :quant (t2 / temporal-quantity\n                                                      :quant 1\n                                                      :unit (y2 / year)))\n                                  :time (d2 / day\n                                            :time-of (p3 / prom)))))\n   :time (d3 / date-entity\n             :weekday (s2 / saturday)))",
      "(c / celebrate-01\n   :ARG0 (p / person))",
      "(s / stab-01\n   :ARG4 (d / die-01))",
      "(d / die-01\n   :ARG1 (p2 / person :name (n / name :op1 \"Maren\" :op2 \"Sanchez\"))))",
      "(c / celebrate-01\n   :ARG0 (p / person))",
      "(s / stab-01\n   :ARG4 (d / die-01))",
      "(d / die-01\n   :ARG1 (p2 / person :name (n / name :op1 \"Maren\" :op2 \"Sanchez\"))))",
      "(m / multi-sentence\n   :snt1 (c / celebrate-01\n            :ARG0 (p / person\n                     :quant (m2 / multiple\n                                :op1 100))\n            :ARG1 (l / life\n                     :poss (p2 / person\n                               :name (n / name\n                                        :op1 \"Maren\"\n                                        :op2 \"Sanchez\")\n                               :age (t / temporal-quantity\n                                       :quant 16\n                                       :unit (y / year))\n                               :ARG1 (s / stab-01\n                                        :ARG4 (d / die-01\n                                                 :ARG1 p2))))))",
      "(m / multi-sentence\n   :snt1 (c / celebrate-01\n            :time (d3 / date-entity\n                      :weekday (s2 / saturday))))",
      "(t / think-01\n   :polarity -)",
      "(t / think-01\n   :ARG0 (ii / i))",
      "(t / think-01\n   :ARG1 (s / sad-02\n            :ARG0 (a / anything)\n            :topic (t2 / this)))",
      "(s / sad-02\n   :ARG0 (a / anything)\n   :topic (t2 / this))",
      "(t / think-01\n   :polarity -\n   :ARG0 (ii / i))",
      "(s / sad-02\n   :ARG0 (a / anything))",
      "(t / think-01\n   :polarity -)",
      "(t / think-01\n   :ARG0 (ii / i))",
      "(s / sad-02\n   :ARG0 (a / anything))",
      "(t / think-01\n   :polarity -\n   :ARG0 (ii / i)\n   :ARG1 (s / sad-02\n            :ARG0 (a / anything)\n            :topic (t2 / this)))",
      "(t / think-01\n   :polarity -)",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Darby\"\n                     :op2 \"Hudd\")\n            :age (t / temporal-quantity\n                    :quant 17\n                    :unit (y / year))\n            :ARG0-of (h / have-rel-role-91\n                        :ARG1 (t2 / teen\n                                  :ARG1-of (s2 / slay-01))\n                        :ARG2 (f / friend))))",
      "(s / say-01\n   :ARG1 (c / celebrate-02\n            :domain (ii / it)\n            :degree (s3 / such)))",
      "(p / person\n   :name (n / name\n            :op1 \"Darby\"\n            :op2 \"Hudd\")\n   :age (t / temporal-quantity\n           :quant 17\n           :unit (y / year))\n   :ARG0-of (h / have-rel-role-91\n               :ARG1 (t2 / teen\n                         :ARG1-of (s2 / slay-01))\n               :ARG2 (f / friend)))",
      "(c / celebrate-02\n   :domain (ii / it)\n   :degree (s3 / such))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Darby\" :op2 \"Hudd\"))))",
      "(s2 / slay-01)",
      "(c / celebrate-02\n   :domain (ii / it))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Darby\" :op2 \"Hudd\"))))",
      "(c / celebrate-02\n   :domain (ii / it))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Darby\"\n                     :op2 \"Hudd\")\n            :age (t / temporal-quantity\n                    :quant 17\n                    :unit (y / year))\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (t2 / teen\n                               :ARG1 (s2 / slay-01))\n                     :ARG2 (f / friend)))\n   :ARG1 (c / celebrate-02\n            :domain (ii / it)\n            :degree (s3 / such)))",
      "(s / say-01)",
      "(m / multi-sentence\n   :snt1 (c / charge-05\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Christopher\"\n                              :op2 \"Plaskon\")\n                     :ARG0-of (h / have-rel-role-91\n                                 :ARG2 (c2 / classmate)))\n            :ARG2 (m2 / murder-01\n                      :ARG0 p\n                      :ARG1 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Sanchez\")))))",
      "(c / charge-05\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Christopher\"\n                     :op2 \"Plaskon\")\n            :ARG0-of (h / have-rel-role-91\n                        :ARG2 (c2 / classmate)))\n   :ARG2 (m2 / murder-01\n             :ARG0 p\n             :ARG1 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Sanchez\"))))",
      "(c / charge-05\n   :ARG1 (p / person :name (n / name :op1 \"Christopher\" :op2 \"Plaskon\"))))",
      "(m2 / murder-01\n    :ARG0 (p / person :name (n / name :op1 \"Christopher\" :op2 \"Plaskon\")))\n    :ARG1 (p2 / person :name (n2 / name :op1 \"Sanchez\")))",
      "(c / charge-05\n   :ARG1 (p / person :name (n / name :op1 \"Christopher\" :op2 \"Plaskon\"))))",
      "(m2 / murder-01\n    :ARG0 (p / person :name (n / name :op1 \"Christopher\" :op2 \"Plaskon\"))))",
      "(m2 / murder-01\n    :ARG1 (p2 / person :name (n2 / name :op1 \"Sanchez\")))",
      "(m / multi-sentence\n   :snt1 (c / charge-05\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Christopher\"\n                              :op2 \"Plaskon\")\n                     :ARG0 (h / have-rel-role-91\n                              :ARG2 (c2 / classmate)))\n            :ARG2 (m2 / murder-01\n                      :ARG0 p\n                      :ARG1 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Sanchez\")))))",
      "(m / multi-sentence\n   :snt1 (c / charge-05))"
    ],
    "smus": [
      "On Saturday, hundreds celebrated the life of Maren Sanchez, 16, who was stabbed to death on the day of her prom last year.",
      "On Saturday, hundreds celebrated the life of Maren Sanchez, 16, who was stabbed to death on the prom day a year ago.",
      "People have celebrated.",
      "Stalked to death.",
      "Maren Sanchez died.",
      "People have celebrated.",
      "Stalked to death.",
      "Maren Sanchez died.",
      "Hundreds have celebrated the life of 16-year-old Maren Sanchez, who was stabbed to death.",
      "Celebrated on Saturday.",
      "thi, thi.",
      "I'll thief.",
      "thi, anythi would be sad to topi.",
      "Anythi is sad tpi.",
      "I don't thief.",
      "Anythi is sad.",
      "thi, thi.",
      "I'll thief.",
      "Anythi is sad.",
      "I don't thik anythi on top of them.",
      "thi, thi.",
      "\"It's gonna be a slaying,\" said Darby Husd, a 17-year-old friend of the slain teen.",
      "It was such a celebration,\" said the organiser.",
      "Darby Hudd, a 17 year old friend of the slain teen.",
      "It was such a celebration.",
      "\"It's going to be a long time,\" Darby Husd said.",
      "Slain.",
      "It was a celebration.",
      "\"It's going to be a long time,\" Darby Husd said.",
      "It was a celebration.",
      "\"It was such a celebration,\" said Darby Husd, a 17-year-old friend of the teen killed.",
      "said.",
      "Classmate Christopher Plaskon is charged with murdering Sanchez.",
      "Classmate Christopher Plaskon has been charged with murdering Sanchez.",
      "Christopher Plaskon was charged.",
      "Christopher Plaskon murdered Sanchez.",
      "Christopher Plaskon was charged.",
      "Christopher Plaskon's murder",
      "Sanchez's murder",
      "Christopher Plaskon, a classmate, has been charged with murdering Sanchez.",
      "Charged."
    ]
  },
  {
    "instance_id": "realsumm-10",
    "summary": "<t> Audrey Alexander wanted her neighbours to chop down their huge hedge . </t> <t> She claims the 40 ft leylandii was blocking sunlight from reaching her home . </t> <t> Feud started in 1980 when it blocked light from reaching a vegetable patch . </t> <t> Council finally rules that the hedge can stay - but must be cut back to 20 ft . </t>",
    "summary_trees": [
      "# ::snt  Audrey Alexander wanted her neighbours to chop down their huge hedge . \n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Audrey\"\n                  :op2 \"Alexander\"))\n      :ARG1 (c / chop-down-02\n            :ARG0 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (n2 / neighbor)))\n            :ARG1 (h2 / hedge\n                  :mod (h3 / huge)\n                  :poss p2)))",
      "# ::snt  She claims the 40 ft leylandii was blocking sunlight from reaching her home . \n(c / claim-01\n      :ARG0 (s / she)\n      :ARG1 (b / block-01\n            :ARG0 (l / leylandii\n                  :quant (d / distance-quantity\n                        :quant 40\n                        :unit (f / foot)))\n            :ARG1 (s2 / sunlight)\n            :ARG2 (r / reach-01\n                  :ARG0 s2\n                  :ARG1 (h / home\n                        :poss s))))",
      "# ::snt  Feud started in 1980 when it blocked light from reaching a vegetable patch . \n(s / start-01\n      :ARG1 (f / feud-01)\n      :time (d / date-entity\n            :year 1980\n            :time-of (b / block-01\n                  :ARG0 f\n                  :ARG1 (r / reach-01\n                        :ARG0 (l / light)\n                        :ARG1 (p / patch\n                              :mod (v / vegetable))))))",
      "# ::snt  Council finally rules that the hedge can stay - but must be cut back to 20 ft . \n(r / rule-01\n      :ARG0 (c / council)\n      :ARG1 (c2 / contrast-01\n            :ARG1 (p / possible-01\n                  :ARG1 (s / stay-01\n                        :ARG1 (h / hedge)))\n            :ARG2 (o / obligate-01\n                  :ARG2 (c3 / cut-back-05\n                        :ARG1 h\n                        :ARG2 (d / distance-quantity\n                              :quant 20\n                              :unit (f / foot)))))\n      :time (f2 / final))"
    ],
    "tree": [
      "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Audrey\"\n                     :op2 \"Alexander\")))",
      "(w / want-01\n   :ARG1 (c / chop-down-02\n            :ARG0 (p2 / person\n                      :ARG0-of (h / have-rel-role-91\n                                  :ARG1 (p / person :name (n / name :op1 \"Audrey\" :op2 \"Alexander\"))\n                                  :ARG2 (n2 / neighbor)))\n            :ARG1 (h2 / hedge\n                      :mod (h3 / huge)\n                      :poss p2)))",
      "(p / person\n   :name (n / name\n            :op1 \"Audrey\"\n            :op2 \"Alexander\"))",
      "(c / chop-down-02\n   :ARG0 (p2 / person\n             :ARG0-of (h / have-rel-role-91\n                         :ARG1 (p / person :name (n / name :op1 \"Audrey\" :op2 \"Alexander\"))\n                         :ARG2 (n2 / neighbor)))\n   :ARG1 (h2 / hedge\n             :mod (h3 / huge)\n             :poss p2))",
      "(w / want-01\n   :ARG0 (p / person :name (n / name :op1 \"Audrey\" :op2 \"Alexander\")))",
      "(c / chop-down-02\n   :ARG0 (p2 / person))",
      "(w / want-01\n   :ARG0 (p / person :name (n / name :op1 \"Audrey\" :op2 \"Alexander\")))",
      "(c / chop-down-02\n   :ARG0 (p2 / person))",
      "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Audrey\"\n                     :op2 \"Alexander\"))\n   :ARG1 (c / chop-down-02\n            :ARG0 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 p\n                               :ARG2 (n2 / neighbor)))\n            :ARG1 (h2 / hedge\n                      :mod (h3 / huge)\n                      :poss p2)))",
      "(w / want-01)",
      "(c / claim-01\n   :ARG0 (s / she))",
      "(c / claim-01\n   :ARG1 (b / block-01\n            :ARG0 (l / leylandii\n                     :quant (d / distance-quantity\n                               :quant 40\n                               :unit (f / foot)))\n            :ARG1 (s2 / sunlight)\n            :ARG2 (r / reach-01\n                     :ARG0 s2\n                     :ARG1 (h / home\n                              :poss (s / she)))))",
      "(b / block-01\n   :ARG0 (l / leylandii\n            :quant (d / distance-quantity\n                      :quant 40\n                      :unit (f / foot)))\n   :ARG1 (s2 / sunlight)\n   :ARG2 (r / reach-01\n            :ARG0 s2\n            :ARG1 (h / home\n                     :poss (s / she))))",
      "(c / claim-01\n   :ARG0 (s / she))",
      "(b / block-01\n   :ARG0 (l / leylandii))",
      "(r / reach-01\n   :ARG0 (s2 / sunlight)\n   :ARG1 (h / home))",
      "(c / claim-01\n   :ARG0 (s / she))",
      "(b / block-01\n   :ARG0 (l / leylandii))",
      "(r / reach-01\n   :ARG0 (s2 / sunlight))",
      "(r / reach-01\n   :ARG1 (h / home))",
      "(c / claim-01\n   :ARG0 (s / she)\n   :ARG1 (b / block-01\n            :ARG0 (l / leylandii\n                     :quant (d / distance-quantity\n                               :quant 40\n                               :unit (f / foot)))\n            :ARG1 (s2 / sunlight)\n            :ARG2 (r / reach-01\n                     :ARG0 s2\n                     :ARG1 (h / home\n                              :poss s))))",
      "(c / claim-01)",
      "(s / start-01\n   :ARG1 (f / feud-01))",
      "(s / start-01\n   :time (d / date-entity\n            :year 1980\n            :time-of (b / block-01\n                        :ARG0 (f / feud-01)\n                        :ARG1 (r / reach-01\n                                 :ARG0 (l / light)\n                                 :ARG1 (p / patch\n                                          :mod (v / vegetable))))))",
      "(d / date-entity\n   :year 1980\n   :time-of (b / block-01\n               :ARG0 (f / feud-01)\n               :ARG1 (r / reach-01\n                        :ARG0 (l / light)\n                        :ARG1 (p / patch\n                                 :mod (v / vegetable)))))",
      "(s / start-01\n   :ARG1 (f / feud-01))",
      "(f / feud-01)",
      "(b / block-01\n   :ARG0 (f / feud-01)\n   :ARG1 (r / reach-01))",
      "(r / reach-01\n   :ARG0 (l / light))",
      "(s / start-01\n   :ARG1 (f / feud-01))",
      "(b / block-01\n   :ARG0 (f / feud-01))",
      "(b / block-01\n   :ARG1 (r / reach-01))",
      "(r / reach-01\n   :ARG0 (l / light))",
      "(s / start-01\n   :ARG1 (f / feud-01))",
      "(s / start-01\n   :time (d / date-entity\n            :year 1980\n            :time (b / block-01)))",
      "(r / rule-01\n   :ARG0 (c / council))",
      "(r / rule-01\n   :ARG1 (c2 / contrast-01\n             :ARG1 (p / possible-01\n                      :ARG1 (s / stay-01\n                               :ARG1 (h / hedge)))\n             :ARG2 (o / obligate-01\n                      :ARG2 (c3 / cut-back-05\n                                :ARG1 h\n                                :ARG2 (d / distance-quantity\n                                         :quant 20\n                                         :unit (f / foot))))))",
      "(r / rule-01\n   :time (f2 / final))",
      "(c2 / contrast-01\n    :ARG1 (p / possible-01\n             :ARG1 (s / stay-01\n                      :ARG1 (h / hedge)))\n    :ARG2 (o / obligate-01\n             :ARG2 (c3 / cut-back-05\n                       :ARG1 h\n                       :ARG2 (d / distance-quantity\n                                :quant 20\n                                :unit (f / foot)))))",
      "(r / rule-01\n   :ARG0 (c / council))",
      "(c2 / contrast-01\n    :ARG1 (p / possible-01))",
      "(p / possible-01\n   :ARG1 (s / stay-01))",
      "(s / stay-01\n   :ARG1 (h / hedge))",
      "(o / obligate-01\n   :ARG2 (c3 / cut-back-05))",
      "(c3 / cut-back-05\n    :ARG1 (h / hedge)\n    :ARG2 (d / distance-quantity))",
      "(r / rule-01\n   :ARG0 (c / council))",
      "(c2 / contrast-01\n    :ARG1 (p / possible-01))",
      "(p / possible-01\n   :ARG1 (s / stay-01))",
      "(s / stay-01\n   :ARG1 (h / hedge))",
      "(o / obligate-01\n   :ARG2 (c3 / cut-back-05))",
      "(c3 / cut-back-05\n    :ARG1 (h / hedge))",
      "(c3 / cut-back-05\n    :ARG2 (d / distance-quantity))",
      "(r / rule-01\n   :ARG0 (c / council)\n   :ARG1 (c2 / contrast-01\n             :ARG1 (p / possible-01\n                      :ARG1 (s / stay-01\n                               :ARG1 (h / hedge)))\n             :ARG2 (o / obligate-01\n                      :ARG2 (c3 / cut-back-05\n                                :ARG1 h\n                                :ARG2 (d / distance-quantity\n                                         :quant 20\n                                         :unit (f / foot))))))",
      "(r / rule-01\n   :time (f2 / final))"
    ],
    "smus": [
      "Audrey Alexander wanted.",
      "Audrey Alexander wanted to chop down his huge hedge.''",
      "@Audrey Alexander,",
      "Douglas Alexander's neighbors are going to chop down his huge hedge.",
      "Audrey Alexander wanted.",
      "People will chop down.",
      "Audrey Alexander wanted.",
      "People will chop down.",
      "Audrey Alexander wanted his neighbors to chop down his huge hedge.",
      "wanted.",
      "She claims.",
      "The 40-foot-long leylandii claims to be blocking sunlight from reaching her home.",
      "40-foot leylandii blocked sunlight from reaching her home.",
      "She claims.",
      "Leylandii blocking.",
      "The sunlight is reaching home.",
      "She claims.",
      "Leylandii blocking.",
      "The sunlight is reaching.",
      "Reaching home.",
      "She claims 40-foot leylandii are blocking sunlight from reaching her home.",
      "Claims.",
      "Feuds started.",
      "started in 1980, when the feud blocked light from reaching the vegetable patch.",
      "In 1980, when feudalism blocked light from reaching a vegetable patch.",
      "Feuds started.",
      "Feudal.",
      "The Feudal bloc was a limiting factor in reaching.",
      "The light is reaching.",
      "Feuds started.",
      "The Feudal Blockade.",
      "Reaching blocked.",
      "The light is reaching.",
      "Feuds started.",
      "started in 1980 when the blockage occurred.",
      "The Council rules.",
      "Rule 2: The hedge can stay, but must be cut back to 20ft.",
      "Finally rules.",
      "The hedge may stay, but it must be cut back 20ft.",
      "The Council rules.",
      "But maybe.",
      "Can stay.",
      "Stay a hedge.",
      "Cutbacks must happen.",
      "The hedge was cut back in distance.",
      "The Council rules.",
      "But maybe.",
      "Can stay.",
      "Stay a hedge.",
      "Cutbacks must happen.",
      "hedge cutbacks",
      "Cut back on distances.",
      "The Council rules that the hedge can stay but must be cut back to 20ft.",
      "Finally rules."
    ]
  },
  {
    "instance_id": "realsumm-11",
    "summary": "<t> Catherine Nevin was allowed out despite being jailed for life in April 2000 . </t> <t> 62-year - old was seen on the bus , with a pal and walking around in Dublin . </t> <t> Sat next to unsuspecting commuter on bus and went totally unnoticed . </t> <t> Ireland 's most infamous female prisoner murdered husband Tom in 1996 . </t>",
    "summary_trees": [
      "# ::snt  Catherine Nevin was allowed out despite being jailed for life in April 2000 . \n(a / allow-01\n      :ARG1 (o / out-06\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Catherine\"\n                        :op2 \"Nevin\")))\n      :concession (j / jail-01\n            :ARG1 p\n            :ARG2 (l / life)\n            :time (d / date-entity\n                  :year 2000\n                  :month 4)))",
      "# ::snt  62-year - old was seen on the bus , with a pal and walking around in Dublin . \n(s / see-01\n      :ARG1 (p / person\n            :age (t / temporal-quantity\n                  :quant 62\n                  :unit (y / year))\n            :accompanier (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (p3 / pal)))\n            :ARG0-of (w / walk-01\n                  :location (a / around\n                        :op1 (c / city\n                              :name (n / name\n                                    :op1 \"Dublin\")))))\n      :location (b / bus))",
      "# ::snt  Sat next to unsuspecting commuter on bus and went totally unnoticed . \n(a / and\n      :op1 (s / sit-01\n            :ARG1 (ii / i)\n            :ARG2 (n / next-to\n                  :op1 (p / person\n                        :ARG0-of (c / commute-01)\n                        :ARG0-of (s2 / suspect-01\n                              :polarity -))\n                  :location (b / bus)))\n      :op2 (n2 / notice-01\n            :polarity -\n            :ARG1 ii\n            :degree (t / total)))",
      "# ::snt  Ireland 's most infamous female prisoner murdered husband Tom in 1996 . \n(m / murder-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tom\")\n            :ARG1-of (h / have-rel-role-91\n                  :ARG0 (p2 / person\n                        :ARG1-of (ii / imprison-01)\n                        :mod (f / female)\n                        :ARG1-of (h2 / have-degree-91\n                              :ARG2 (ii2 / infamous)\n                              :ARG3 (m2 / most)\n                              :ARG5 (p3 / person\n                                    :ARG1-of (ii3 / imprison-01)\n                                    :location (c / country\n                                          :name (n2 / name\n                                                :op1 \"Ireland\")))))\n                  :ARG2 (h3 / husband)))\n      :ARG1 p\n      :time (d / date-entity\n            :year 1996))"
    ],
    "tree": [
      "(a / allow-01\n   :ARG1 (o / out-06\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Catherine\"\n                              :op2 \"Nevin\"))))",
      "(a / allow-01\n   :concession (j / jail-01\n                  :ARG1 (p / person :name (n / name :op1 \"Catherine\" :op2 \"Nevin\"))\n                  :ARG2 (l / life)\n                  :time (d / date-entity\n                           :year 2000\n                           :month 4)))",
      "(o / out-06\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Catherine\"\n                     :op2 \"Nevin\")))",
      "(j / jail-01\n   :ARG1 (p / person :name (n / name :op1 \"Catherine\" :op2 \"Nevin\"))\n   :ARG2 (l / life)\n   :time (d / date-entity\n            :year 2000\n            :month 4))",
      "(a / allow-01\n   :ARG1 (o / out-06))",
      "(o / out-06\n   :ARG1 (p / person :name (n / name :op1 \"Catherine\" :op2 \"Nevin\")))",
      "(j / jail-01\n   :ARG1 (p / person :name (n / name :op1 \"Catherine\" :op2 \"Nevin\"))\n   :ARG2 (l / life))",
      "(a / allow-01\n   :ARG1 (o / out-06))",
      "(o / out-06\n   :ARG1 (p / person :name (n / name :op1 \"Catherine\" :op2 \"Nevin\")))",
      "(j / jail-01\n   :ARG1 (p / person :name (n / name :op1 \"Catherine\" :op2 \"Nevin\")))",
      "(j / jail-01\n   :ARG2 (l / life))",
      "(a / allow-01\n   :ARG1 (o / out-06\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Catherine\"\n                              :op2 \"Nevin\")))\n   :concession (j / jail-01\n                  :ARG1 p\n                  :ARG2 (l / life)))",
      "(a / allow-01\n   :concession (j / jail-01))",
      "(s / see-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 62\n                    :unit (y / year))\n            :accompanier (p2 / person\n                             :ARG0-of (h / have-rel-role-91\n                                         :ARG1 p\n                                         :ARG2 (p3 / pal)))\n            :ARG0-of (w / walk-01\n                        :location (a / around\n                                     :op1 (c / city\n                                             :name (n / name\n                                                      :op1 \"Dublin\"))))))",
      "(s / see-01\n   :location (b / bus))",
      "(p / person\n   :age (t / temporal-quantity\n           :quant 62\n           :unit (y / year))\n   :accompanier (p2 / person\n                    :ARG0-of (h / have-rel-role-91\n                                :ARG1 p\n                                :ARG2 (p3 / pal)))\n   :ARG0-of (w / walk-01\n               :location (a / around\n                            :op1 (c / city\n                                    :name (n / name\n                                             :op1 \"Dublin\")))))",
      "(s / see-01\n   :ARG1 (p / person))",
      "(w / walk-01\n   :location (a / around))",
      "(s / see-01\n   :ARG1 (p / person))",
      "(w / walk-01\n   :location (a / around))",
      "(s / see-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 62\n                    :unit (y / year))\n            :accompanier (p2 / person\n                             :ARG0 (h / have-rel-role-91\n                                      :ARG1 p\n                                      :ARG2 (p3 / pal)))\n            :ARG0 (w / walk-01)))",
      "(s / see-01\n   :location (b / bus))",
      "(a / and\n   :op1 (s / sit-01\n           :ARG1 (ii / i)\n           :ARG2 (n / next-to\n                    :op1 (p / person\n                            :ARG0-of (c / commute-01)\n                            :ARG0-of (s2 / suspect-01\n                                         :polarity -))\n                    :location (b / bus))))",
      "(a / and\n   :op2 (n2 / notice-01\n            :polarity -\n            :ARG1 (ii / i)\n            :degree (t / total)))",
      "(s / sit-01\n   :ARG1 (ii / i)\n   :ARG2 (n / next-to\n            :op1 (p / person\n                    :ARG0-of (c / commute-01)\n                    :ARG0-of (s2 / suspect-01\n                                 :polarity -))\n            :location (b / bus)))",
      "(n2 / notice-01\n    :polarity -\n    :ARG1 (ii / i)\n    :degree (t / total))",
      "(s / sit-01\n   :ARG1 (ii / i))",
      "(c / commute-01)",
      "(s2 / suspect-01\n    :polarity -)",
      "(n2 / notice-01\n    :polarity -\n    :ARG1 (ii / i)\n    :degree (t / total))",
      "(s / sit-01\n   :ARG1 (ii / i))",
      "(s2 / suspect-01\n    :polarity -)",
      "(n2 / notice-01\n    :polarity -)",
      "(n2 / notice-01\n    :ARG1 (ii / i))",
      "(n2 / notice-01\n    :degree (t / total))",
      "(s / sit-01\n   :ARG1 (ii / i)\n   :ARG2 (n / next-to\n            :op1 (p / person\n                    :ARG0-of (c / commute-01)\n                    :ARG0-of (s2 / suspect-01\n                                 :polarity -))\n            :location (b / bus)))",
      "(n2 / notice-01\n    :polarity -\n    :ARG1 (ii / i)\n    :degree (t / total))",
      "(a / and\n   :op1 (s / sit-01\n           :ARG1 (ii / i)\n           :ARG2 (n / next-to\n                    :op1 (p / person\n                            :ARG0 (c / commute-01)\n                            :ARG0 (s2 / suspect-01\n                                      :polarity -))))\n   :op2 (n2 / notice-01\n            :polarity -\n            :ARG1 ii\n            :degree (t / total)))",
      "(a / and\n   :op1 (s / sit-01)\n   :op2 (n2 / notice-01))",
      "(m / murder-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\")\n            :ARG1-of (h / have-rel-role-91\n                        :ARG0 (p2 / person\n                                  :ARG1-of (ii / imprison-01)\n                                  :mod (f / female)\n                                  :ARG1-of (h2 / have-degree-91\n                                               :ARG2 (ii2 / infamous)\n                                               :ARG3 (m2 / most)\n                                               :ARG5 (p3 / person\n                                                         :ARG1-of (ii3 / imprison-01)\n                                                         :location (c / country\n                                                                      :name (n2 / name\n                                                                                :op1 \"Ireland\")))))\n                        :ARG2 (h3 / husband))))",
      "(m / murder-01\n   :ARG1 (p / person :name (n / name :op1 \"Tom\"))))",
      "(m / murder-01\n   :time (d / date-entity\n            :year 1996))",
      "(p / person\n   :name (n / name\n            :op1 \"Tom\")\n   :ARG1-of (h / have-rel-role-91\n               :ARG0 (p2 / person\n                         :ARG1-of (ii / imprison-01)\n                         :mod (f / female)\n                         :ARG1-of (h2 / have-degree-91\n                                      :ARG2 (ii2 / infamous)\n                                      :ARG3 (m2 / most)\n                                      :ARG5 (p3 / person\n                                                :ARG1-of (ii3 / imprison-01)\n                                                :location (c / country\n                                                             :name (n2 / name\n                                                                       :op1 \"Ireland\")))))\n               :ARG2 (h3 / husband)))",
      "(m / murder-01\n   :ARG0 (p / person :name (n / name :op1 \"Tom\"))))",
      "(ii / imprison-01)",
      "(ii3 / imprison-01)",
      "(m / murder-01\n   :ARG0 (p / person :name (n / name :op1 \"Tom\"))))",
      "(m / murder-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tom\")\n            :ARG1 (h / have-rel-role-91\n                     :ARG0 (p2 / person\n                               :ARG1 (ii / imprison-01)\n                               :mod (f / female)\n                               :ARG1 (h2 / have-degree-91\n                                         :ARG2 (ii2 / infamous)\n                                         :ARG3 (m2 / most)\n                                         :ARG5 (p3 / person\n                                                   :ARG1 (ii3 / imprison-01))))\n                     :ARG2 (h3 / husband)))\n   :ARG1 p)",
      "(m / murder-01)"
    ],
    "smus": [
      "Catherine Nevin was allowed out.",
      "Allowed, although Catherine Nevin was jailed for life in April 2000.",
      "Catherine Nevin is out.",
      "Catherine Nevin was jailed for life in April 2000.",
      "Out is allowed.",
      "Catherine Nevin is out.",
      "Catherine Nevin was jailed for life.",
      "Out is allowed.",
      "Catherine Nevin is out.",
      "Catherine Nevin was jailed.",
      "Life in jail.",
      "Catherine Nevin was allowed out despite being jailed for life.",
      "allowed, but jailed.",
      "A 62 year old man was seen walking around Dublin with his pal.",
      "seen on the bus.",
      "62 year old walking around Dublin with pal",
      "People were seen.",
      "Walking around.",
      "People were seen.",
      "Walking around.",
      "A 62 year old man was seen walking with his pal.",
      "seen on the bus.",
      "And I'm sitting next to an unsuspecting commuter on the bus.",
      "And I wasn't totally unaware.",
      "I'm sitting next to an unsuspecting commuter on the bus.",
      "I wasn't totally noticed.",
      "I'm sitting.",
      "Commutation.",
      "Suspected.",
      "I wasn't totally noticed.",
      "I'm sitting.",
      "Suspected.",
      "Not to be noticed.",
      "I was noticeably.",
      "totally noticeable.",
      "I'm sitting next to an unsuspecting commuter on the bus.",
      "I wasn't totally noticed.",
      "I'm sitting next to an unconcerned commuter and am totally undecided.",
      "Sitting and noticeable.",
      "Tom was murdered, the husband of one of Ireland's most infamous female prisoners.",
      "Tom was murdered.",
      "Murdered in 1996.",
      "Tom is the husband of the most infamous female prisoner in Ireland.",
      "Tom was murdered.",
      "Prison.",
      "Prison.",
      "Tom was murdered.",
      "Tom murdered his husband, the most infamous female prisoner.",
      "Murdered."
    ]
  },
  {
    "instance_id": "realsumm-12",
    "summary": "<t> Didier Drogba given the Barclays Spirit of the Game award . </t> <t> The 37-year - old 's foundation has done impressive work in Africa . </t> <t> Some of Chelsea 's stars attended a charity ball which raised \u00a3 400,000 . </t> <t> CLICK HERE for all the latest Chelsea news . </t>",
    "summary_trees": [
      "# ::snt  Didier Drogba given the Barclays Spirit of the Game award . \n(g / give-01\n      :ARG1 (a / award\n            :name (n / name\n                  :op1 \"Barclays\"\n                  :op2 \"Spirit\"\n                  :op3 \"of\"\n                  :op4 \"the\"\n                  :op5 \"Game\"))\n      :ARG2 (p / person\n            :name (n2 / name\n                  :op1 \"Didier\"\n                  :op2 \"Drogba\")))",
      "# ::snt  The 37-year - old 's foundation has done impressive work in Africa . \n(w / work-01\n      :ARG0 (f / foundation\n            :poss (p / person\n                  :age (t / temporal-quantity\n                        :quant 37\n                        :unit (y / year))))\n      :ARG0-of (ii / impress-01)\n      :location (c / continent\n            :name (n / name\n                  :op1 \"Africa\")))",
      "# ::snt  Some of Chelsea 's stars attended a charity ball which raised \u00a3 400,000 . \n(a / attend-01\n      :ARG0 (s / star\n            :ARG1-of (ii / include-91\n                  :ARG2 (s2 / star\n                        :poss (p / person\n                              :name (n / name\n                                    :op1 \"Chelsea\"))))\n            :quant (s3 / some))\n      :ARG1 (b / ball\n            :purpose (c / charity)\n            :ARG0-of (r / raise-02\n                  :ARG1 (m / monetary-quantity\n                        :quant 400000\n                        :unit (p2 / pound)))))",
      "# ::snt  CLICK HERE for all the latest Chelsea news . \n(c / CLICK-01\n      :mode imperative\n      :ARG0 (y / you)\n      :location (h / here)\n      :purpose (n / news\n            :mod (l / last)\n            :mod (a / all)\n            :topic (p / person\n                  :name (n2 / name\n                        :op1 \"Chelsea\"))))"
    ],
    "tree": [
      "(g / give-01\n   :ARG1 (a / award\n            :name (n / name\n                     :op1 \"Barclays\"\n                     :op2 \"Spirit\"\n                     :op3 \"of\"\n                     :op4 \"the\"\n                     :op5 \"Game\")))",
      "(g / give-01\n   :ARG2 (p / person\n            :name (n2 / name\n                      :op1 \"Didier\"\n                      :op2 \"Drogba\")))",
      "(a / award\n   :name (n / name\n            :op1 \"Barclays\"\n            :op2 \"Spirit\"\n            :op3 \"of\"\n            :op4 \"the\"\n            :op5 \"Game\"))",
      "(p / person\n   :name (n2 / name\n             :op1 \"Didier\"\n             :op2 \"Drogba\"))",
      "(g / give-01\n   :ARG1 (a / award :name (n / name :op1 \"Barclays\" :op2 \"Spirit\" :op3 \"of\" :op4 \"the\" :op5 \"Game\")))",
      "(g / give-01\n   :ARG1 (a / award :name (n / name :op1 \"Barclays\" :op2 \"Spirit\" :op3 \"of\" :op4 \"the\" :op5 \"Game\")))",
      "(g / give-01\n   :ARG1 (a / award\n            :name (n / name\n                     :op1 \"Barclays\"\n                     :op2 \"Spirit\"\n                     :op3 \"of\"\n                     :op4 \"the\"\n                     :op5 \"Game\"))\n   :ARG2 (p / person\n            :name (n2 / name\n                      :op1 \"Didier\"\n                      :op2 \"Drogba\")))",
      "(g / give-01)",
      "(w / work-01\n   :ARG0 (f / foundation\n            :poss (p / person\n                     :age (t / temporal-quantity\n                             :quant 37\n                             :unit (y / year)))))",
      "(w / work-01\n   :ARG0-of (ii / impress-01))",
      "(w / work-01\n   :location (c / continent\n                :name (n / name\n                         :op1 \"Africa\")))",
      "(f / foundation\n   :poss (p / person\n            :age (t / temporal-quantity\n                    :quant 37\n                    :unit (y / year))))",
      "(c / continent\n   :name (n / name\n            :op1 \"Africa\"))",
      "(w / work-01\n   :ARG0 (f / foundation))",
      "(ii / impress-01)",
      "(w / work-01\n   :ARG0 (f / foundation))",
      "(w / work-01\n   :ARG0 (f / foundation\n            :poss (p / person\n                     :age (t / temporal-quantity\n                             :quant 37\n                             :unit (y / year))))\n   :ARG0 (ii / impress-01))",
      "(w / work-01\n   :location (c / continent\n                :name (n / name\n                         :op1 \"Africa\")))",
      "(a / attend-01\n   :ARG0 (s / star\n            :ARG1-of (ii / include-91\n                         :ARG2 (s2 / star\n                                   :poss (p / person\n                                            :name (n / name\n                                                     :op1 \"Chelsea\"))))\n            :quant (s3 / some)))",
      "(a / attend-01\n   :ARG1 (b / ball\n            :purpose (c / charity)\n            :ARG0-of (r / raise-02\n                        :ARG1 (m / monetary-quantity\n                                 :quant 400000\n                                 :unit (p2 / pound)))))",
      "(s / star\n   :ARG1-of (ii / include-91\n                :ARG2 (s2 / star\n                          :poss (p / person\n                                   :name (n / name\n                                            :op1 \"Chelsea\"))))\n   :quant (s3 / some))",
      "(b / ball\n   :purpose (c / charity)\n   :ARG0-of (r / raise-02\n               :ARG1 (m / monetary-quantity\n                        :quant 400000\n                        :unit (p2 / pound))))",
      "(a / attend-01\n   :ARG0 (s / star))",
      "(r / raise-02\n   :ARG1 (m / monetary-quantity))",
      "(a / attend-01\n   :ARG0 (s / star))",
      "(r / raise-02\n   :ARG1 (m / monetary-quantity))",
      "(a / attend-01\n   :ARG0 (s / star\n            :ARG1 (ii / include-91\n                      :ARG2 (s2 / star\n                                :poss (p / person\n                                         :name (n / name\n                                                  :op1 \"Chelsea\"))))\n            :quant (s3 / some))\n   :ARG1 (b / ball\n            :ARG0 (r / raise-02\n                     :ARG1 (m / monetary-quantity\n                              :quant 400000\n                              :unit (p2 / pound)))))",
      "(a / attend-01)",
      "(c / CLICK-01\n   :mode imperative)",
      "(c / CLICK-01\n   :ARG0 (y / you))",
      "(c / CLICK-01\n   :location (h / here))",
      "(c / CLICK-01\n   :purpose (n / news\n               :mod (l / last)\n               :mod (a / all)\n               :topic (p / person\n                         :name (n2 / name\n                                   :op1 \"Chelsea\"))))",
      "(n / news\n   :mod (l / last)\n   :mod (a / all)\n   :topic (p / person\n             :name (n2 / name\n                       :op1 \"Chelsea\")))",
      "(c / CLICK-01\n   :mode imperative\n   :ARG0 (y / you))",
      "(c / CLICK-01\n   :mode imperative)",
      "(c / CLICK-01\n   :ARG0 (y / you))",
      "(c / CLICK-01\n   :mode imperative\n   :ARG0 (y / you))",
      "(c / CLICK-01\n   :mode imperative\n   :location (h / here)\n   :purpose (n / news\n               :mod (l / last)\n               :mod (a / all)\n               :topic (p / person\n                         :name (n2 / name\n                                   :op1 \"Chelsea\"))))"
    ],
    "smus": [
      "The Barclays Spirit of the Game award was given",
      "given to Didier Drogba",
      "The Barclays Spirit of the Game award",
      "Didier Drogba",
      "The Barclays Spirit of the Game award was given",
      "The Barclays Spirit of the Game award was given",
      "The Barclays Spirit of the Game award was given to Didier Drogba.",
      "given.",
      "The 37 year old's foundation is at work.",
      "Impressive work.",
      "Work in Africa.",
      "The foundation of the 37 year old.",
      "Africa",
      "The foundation is doing work.",
      "Impressive.",
      "The foundation is doing work.",
      "The 37 year old's foundation is impressive work.",
      "Work in Africa.",
      "Some of Chelsea's stars attended.",
      "attended a charity ball which raised PS400,000.",
      "Some of Chelsea's stars.",
      "A charity ball that raised PS4million.",
      "The stars attended.",
      "raised money.",
      "The stars attended.",
      "raised money.",
      "Some of Chelsea's stars attended the ball game as the PS400k was raised.",
      "attended.",
      "CLICK HERE.",
      "CLICK HERE.",
      "CLICK HERE.",
      "CLICKS for all the latest Chelsea news.",
      "All the latest news about Chelsea.",
      "CLIENTS!",
      "CLICK HERE.",
      "CLICK HERE.",
      "CLIENTS!",
      "CLICK HERE for all the latest Chelsea news."
    ]
  },
  {
    "instance_id": "realsumm-13",
    "summary": "<t> Figures from the Catholic Church show more and more becoming nuns . </t> <t> The number of women taking Holy Vows stood at just seven back in 2004 . </t> <t> But that figure had risen to 15 in 2009 and increased further to 45 last year . </t> <t> One father said a ' gap in the market for meaning ' led people toward religion . </t>",
    "summary_trees": [
      "# ::snt  Figures from the Catholic Church show more and more becoming nuns . \n(s / show-01\n      :ARG0 (f / figure\n            :source (o / organization\n                  :name (n / name\n                        :op1 \"Catholic\"\n                        :op2 \"Church\")))\n      :ARG1 (b / become-01\n            :ARG1 (p / person\n                  :quant (n2 / number\n                        :ARG1-of (ii / increase-01)))\n            :ARG2 (n3 / nun)))",
      "# ::snt  The number of women taking Holy Vows stood at just seven back in 2004 . \n(m / multi-sentence\n      :snt1 (s / stand-04\n            :ARG1 (n / number\n                  :quant-of (w / woman\n                        :ARG0-of (t / take-01\n                              :ARG1 (v / vow-01\n                                    :mod (h / holy)))))\n            :ARG2 (n2 / numerical-quantity\n                  :quant 7\n                  :mod (j / just))\n            :time (d / date-entity\n                  :year 2004)))",
      "# ::snt  But that figure had risen to 15 in 2009 and increased further to 45 last year . \n(c / contrast-01\n      :ARG2 (a / and\n            :op1 (r / rise-01\n                  :ARG1 (f / figure\n                        :mod (t / that))\n                  :ARG4 (n / numerical-quantity\n                        :quant 15)\n                  :time (d / date-entity\n                        :year 2009))\n            :op2 (ii / increase-01\n                  :ARG1 f\n                  :ARG4 (n2 / numerical-quantity\n                        :quant 45)\n                  :degree (f2 / further)\n                  :time (y / year\n                        :mod (l / last)))))",
      "# ::snt  One father said a ' gap in the market for meaning ' led people toward religion . \n(s / say-01\n      :ARG0 (p / person\n            :quant 1\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (f / father)))\n      :ARG1 (l / lead-01\n            :ARG0 (g / gap\n                  :location (m / market)\n                  :topic (m2 / mean-01))\n            :ARG1 (p2 / person)\n            :ARG4 (r / religion)))"
    ],
    "tree": [
      "(s / show-01\n   :ARG0 (f / figure\n            :source (o / organization\n                       :name (n / name\n                                :op1 \"Catholic\"\n                                :op2 \"Church\"))))",
      "(s / show-01\n   :ARG1 (b / become-01\n            :ARG1 (p / person\n                     :quant (n2 / number\n                                :ARG1-of (ii / increase-01)))\n            :ARG2 (n3 / nun)))",
      "(f / figure\n   :source (o / organization\n              :name (n / name\n                       :op1 \"Catholic\"\n                       :op2 \"Church\")))",
      "(b / become-01\n   :ARG1 (p / person\n            :quant (n2 / number\n                       :ARG1-of (ii / increase-01)))\n   :ARG2 (n3 / nun))",
      "(s / show-01\n   :ARG0 (f / figure))",
      "(b / become-01\n   :ARG1 (p / person))",
      "(ii / increase-01)",
      "(s / show-01\n   :ARG0 (f / figure))",
      "(b / become-01\n   :ARG1 (p / person))",
      "(s / show-01\n   :ARG0 (f / figure)\n   :ARG1 (b / become-01\n            :ARG1 (p / person\n                     :quant (n2 / number\n                                :ARG1 (ii / increase-01)))\n            :ARG2 (n3 / nun)))",
      "(s / show-01)",
      "(m / multi-sentence\n   :snt1 (s / stand-04\n            :ARG1 (n / number\n                     :quant-of (w / woman\n                                  :ARG0-of (t / take-01\n                                              :ARG1 (v / vow-01\n                                                       :mod (h / holy)))))\n            :ARG2 (n2 / numerical-quantity\n                      :quant 7\n                      :mod (j / just))\n            :time (d / date-entity\n                     :year 2004)))",
      "(s / stand-04\n   :ARG1 (n / number\n            :quant-of (w / woman\n                         :ARG0-of (t / take-01\n                                     :ARG1 (v / vow-01\n                                              :mod (h / holy)))))\n   :ARG2 (n2 / numerical-quantity\n             :quant 7\n             :mod (j / just))\n   :time (d / date-entity\n            :year 2004))",
      "(s / stand-04\n   :ARG1 (n / number))",
      "(t / take-01\n   :ARG1 (v / vow-01))",
      "(v / vow-01\n   :mod (h / holy))",
      "(s / stand-04\n   :ARG1 (n / number))",
      "(t / take-01\n   :ARG1 (v / vow-01))",
      "(v / vow-01\n   :mod (h / holy))",
      "(m / multi-sentence\n   :snt1 (s / stand-04\n            :ARG1 (n / number\n                     :quant (w / woman\n                               :ARG0 (t / take-01\n                                        :ARG1 (v / vow-01\n                                                 :mod (h / holy)))))\n            :ARG2 (n2 / numerical-quantity\n                      :quant 7\n                      :mod (j / just))))",
      "(m / multi-sentence\n   :snt1 (s / stand-04\n            :time (d / date-entity\n                     :year 2004)))",
      "(c / contrast-01\n   :ARG2 (a / and\n            :op1 (r / rise-01\n                    :ARG1 (f / figure\n                             :mod (t / that))\n                    :ARG4 (n / numerical-quantity\n                             :quant 15)\n                    :time (d / date-entity\n                             :year 2009))\n            :op2 (ii / increase-01\n                     :ARG1 f\n                     :ARG4 (n2 / numerical-quantity\n                               :quant 45)\n                     :degree (f2 / further)\n                     :time (y / year\n                              :mod (l / last)))))",
      "(a / and\n   :op1 (r / rise-01\n           :ARG1 (f / figure\n                    :mod (t / that))\n           :ARG4 (n / numerical-quantity\n                    :quant 15)\n           :time (d / date-entity\n                    :year 2009))\n   :op2 (ii / increase-01\n            :ARG1 f\n            :ARG4 (n2 / numerical-quantity\n                      :quant 45)\n            :degree (f2 / further)\n            :time (y / year\n                     :mod (l / last))))",
      "(c / contrast-01\n   :ARG2 (a / and))",
      "(r / rise-01\n   :ARG1 (f / figure))",
      "(ii / increase-01\n    :ARG1 (f / figure)\n    :ARG4 (n2 / numerical-quantity))",
      "(c / contrast-01\n   :ARG2 (a / and))",
      "(r / rise-01\n   :ARG1 (f / figure))",
      "(ii / increase-01\n    :ARG1 (f / figure))",
      "(ii / increase-01\n    :ARG4 (n2 / numerical-quantity))",
      "(c / contrast-01\n   :ARG2 (r / rise-01\n            :ARG1 (f / figure\n                     :mod (t / that))\n            :ARG4 (n / numerical-quantity\n                     :quant 15)\n            :time (d / date-entity\n                     :year 2009)))",
      "(c / contrast-01\n   :ARG2 (ii / increase-01\n             :ARG1 (f / figure)\n             :ARG4 (n2 / numerical-quantity\n                       :quant 45)\n             :degree (f2 / further)\n             :time (y / year\n                      :mod (l / last))))",
      "(c / contrast-01\n   :ARG2 (a / and\n            :op1 (r / rise-01\n                    :ARG1 (f / figure\n                             :mod (t / that))\n                    :ARG4 (n / numerical-quantity\n                             :quant 15))\n            :op2 (ii / increase-01\n                     :ARG1 f\n                     :ARG4 (n2 / numerical-quantity\n                               :quant 45)\n                     :degree (f2 / further))))",
      "(c / contrast-01)",
      "(s / say-01\n   :ARG0 (p / person\n            :quant 1\n            :ARG0-of (h / have-rel-role-91\n                        :ARG2 (f / father))))",
      "(s / say-01\n   :ARG1 (l / lead-01\n            :ARG0 (g / gap\n                     :location (m / market)\n                     :topic (m2 / mean-01))\n            :ARG1 (p2 / person)\n            :ARG4 (r / religion)))",
      "(p / person\n   :quant 1\n   :ARG0-of (h / have-rel-role-91\n               :ARG2 (f / father)))",
      "(l / lead-01\n   :ARG0 (g / gap\n            :location (m / market)\n            :topic (m2 / mean-01))\n   :ARG1 (p2 / person)\n   :ARG4 (r / religion))",
      "(s / say-01\n   :ARG0 (p / person))",
      "(l / lead-01\n   :ARG0 (g / gap))",
      "(m2 / mean-01)",
      "(s / say-01\n   :ARG0 (p / person))",
      "(l / lead-01\n   :ARG0 (g / gap))",
      "(s / say-01\n   :ARG0 (p / person\n            :quant 1\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (f / father)))\n   :ARG1 (l / lead-01\n            :ARG0 (g / gap\n                     :topic (m2 / mean-01))\n            :ARG1 (p2 / person)\n            :ARG4 (r / religion)))",
      "(s / say-01)"
    ],
    "smus": [
      "Figures from the Catholic Church show --",
      "The shows that more and more people are becoming nuns.",
      "Catholic Church figures",
      "More and more people are becoming nuns.",
      "The figures show.",
      "People are becoming.",
      "Increased.",
      "The figures show.",
      "People are becoming.",
      "The figures show that more and more people are becoming nuns.",
      "Show.",
      "The number of women taking the holy vow stood at just 7 in 2004.",
      "In 2004, the number of women taking the holy vow stood at just seven.",
      "The number stood.",
      "taking vows",
      "Holy vows",
      "The number stood.",
      "taking vows",
      "Holy vows",
      "The number of women taking the Holy Vow stood at just 7...",
      "Stands in 2004.",
      "But that figure has risen to 15 in 2009 and increased to 45 further in last year.",
      "That figure has risen to 15 in 2009 and increased to 45 further in last year.",
      "But...",
      "The figure has risen.",
      "The figure increased by a factor of.",
      "But...",
      "The figure has risen.",
      "The figure increased.",
      "increased by a factor of ten.",
      "But that figure has risen to 15 in 2009.",
      "But the figure increased further to 45 last year.",
      "But that figure rose to 15 and increased further to 45.",
      "But...",
      "One father said --",
      "The meaning gap in the market has led people to religion, it was said.",
      "One father.",
      "The meaning gap in the market has led people to religion.",
      "People said --",
      "The gap has led.",
      "In meaning...",
      "People said --",
      "The gap has led.",
      "One father said the gap in meaning has led people to religion.",
      "said."
    ]
  },
  {
    "instance_id": "realsumm-14",
    "summary": "<t> Eduardo Vargas put QPR ahead with a spectacular strike from 25 yards after 15 minutes . </t> <t> Charlie Austin doubled the lead with a header 20 minutes later , Bobby Zamora made it three . </t> <t> Victor Anichebe pulled one back for West Brom before Youssouf Mulumbu was sent off and Joey Barton scored . </t>",
    "summary_trees": [
      "# ::snt  Eduardo Vargas put QPR ahead with a spectacular strike from 25 yards after 15 minutes . \n(p / put-03\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Eduardo\"\n                  :op2 \"Vargas\"))\n      :ARG1 (t / team\n            :name (n2 / name\n                  :op1 \"QPR\"))\n      :ARG2 (a / ahead)\n      :manner (s / strike-01\n            :ARG0 p2\n            :ARG2 (d / distance-quantity\n                  :quant 25\n                  :unit (y / yard))\n            :mod (s2 / spectacle))\n      :time (a2 / after\n            :op1 (t2 / temporal-quantity\n                  :quant 15\n                  :unit (m / minute))))",
      "# ::snt  Charlie Austin doubled the lead with a header 20 minutes later , Bobby Zamora made it three . \n(a / and\n      :op1 (d / double-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Charlie\"\n                        :op2 \"Austin\"))\n            :ARG1 (l / lead-01)\n            :instrument (h / header)\n            :time (a2 / after\n                  :quant (t / temporal-quantity\n                        :quant 20\n                        :unit (m / minute))))\n      :op2 (m2 / make-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Bobby\"\n                        :op2 \"Zamora\"))\n            :ARG1 (ii / it\n                  :quant 3)))",
      "# ::snt  Victor Anichebe pulled one back for West Brom before Youssouf Mulumbu was sent off and Joey Barton scored . \n(p / pull-back-09\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Victor\"\n                  :op2 \"Anichebe\"))\n      :ARG1 (o / one)\n      :beneficiary (t / team\n            :name (n2 / name\n                  :op1 \"West\"\n                  :op2 \"Brum\"))\n      :time (b / before\n            :op1 (a / and\n                  :op1 (s / send-off-08\n                        :ARG1 (p3 / person\n                              :name (n3 / name\n                                    :op1 \"Youssouf\"\n                                    :op2 \"Mulumbu\")))\n                  :op2 (s2 / score-01\n                        :ARG0 (p4 / person\n                              :name (n4 / name\n                                    :op1 \"Joey\"\n                                    :op2 \"Barton\"))))))"
    ],
    "tree": [
      "(p / put-03\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Eduardo\"\n                      :op2 \"Vargas\")))",
      "(p / put-03\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"QPR\")))",
      "(p / put-03\n   :ARG2 (a / ahead))",
      "(p / put-03\n   :manner (s / strike-01\n              :ARG0 (p2 / person :name (n / name :op1 \"Eduardo\" :op2 \"Vargas\"))\n              :ARG2 (d / distance-quantity\n                       :quant 25\n                       :unit (y / yard))\n              :mod (s2 / spectacle)))",
      "(p / put-03\n   :time (a2 / after\n             :op1 (t2 / temporal-quantity\n                      :quant 15\n                      :unit (m / minute))))",
      "(p2 / person\n    :name (n / name\n             :op1 \"Eduardo\"\n             :op2 \"Vargas\"))",
      "(t / team\n   :name (n2 / name\n             :op1 \"QPR\"))",
      "(s / strike-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Eduardo\" :op2 \"Vargas\"))\n   :ARG2 (d / distance-quantity\n            :quant 25\n            :unit (y / yard))\n   :mod (s2 / spectacle))",
      "(a2 / after\n    :op1 (t2 / temporal-quantity\n             :quant 15\n             :unit (m / minute)))",
      "(p / put-03\n   :ARG0 (p2 / person :name (n / name :op1 \"Eduardo\" :op2 \"Vargas\")))",
      "(s / strike-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Eduardo\" :op2 \"Vargas\"))\n   :ARG2 (d / distance-quantity))",
      "(p / put-03\n   :ARG0 (p2 / person :name (n / name :op1 \"Eduardo\" :op2 \"Vargas\")))",
      "(s / strike-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Eduardo\" :op2 \"Vargas\")))",
      "(s / strike-01\n   :ARG2 (d / distance-quantity))",
      "(p / put-03\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Eduardo\"\n                      :op2 \"Vargas\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"QPR\"))\n   :ARG2 (a / ahead)\n   :manner (s / strike-01\n              :ARG0 p2\n              :ARG2 (d / distance-quantity\n                       :quant 25\n                       :unit (y / yard))\n              :mod (s2 / spectacle)))",
      "(p / put-03\n   :manner (s / strike-01)\n   :time (a2 / after\n             :op1 (t2 / temporal-quantity\n                      :quant 15\n                      :unit (m / minute))))",
      "(a / and\n   :op1 (d / double-01\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Charlie\"\n                             :op2 \"Austin\"))\n           :ARG1 (l / lead-01)\n           :instrument (h / header)\n           :time (a2 / after\n                     :quant (t / temporal-quantity\n                               :quant 20\n                               :unit (m / minute)))))",
      "(a / and\n   :op2 (m2 / make-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Bobby\"\n                                :op2 \"Zamora\"))\n            :ARG1 (ii / it\n                      :quant 3)))",
      "(d / double-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Charlie\"\n                     :op2 \"Austin\"))\n   :ARG1 (l / lead-01)\n   :instrument (h / header)\n   :time (a2 / after\n             :quant (t / temporal-quantity\n                       :quant 20\n                       :unit (m / minute))))",
      "(m2 / make-01\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Bobby\"\n                        :op2 \"Zamora\"))\n    :ARG1 (ii / it\n              :quant 3))",
      "(d / double-01\n   :ARG0 (p / person :name (n / name :op1 \"Charlie\" :op2 \"Austin\")))",
      "(l / lead-01)",
      "(m2 / make-01\n    :ARG0 (p2 / person :name (n2 / name :op1 \"Bobby\" :op2 \"Zamora\")))",
      "(d / double-01\n   :ARG0 (p / person :name (n / name :op1 \"Charlie\" :op2 \"Austin\")))",
      "(m2 / make-01\n    :ARG0 (p2 / person :name (n2 / name :op1 \"Bobby\" :op2 \"Zamora\")))",
      "(d / double-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Charlie\"\n                     :op2 \"Austin\"))\n   :ARG1 (l / lead-01)\n   :instrument (h / header)\n   :time (a2 / after\n             :quant (t / temporal-quantity\n                       :quant 20\n                       :unit (m / minute))))",
      "(m2 / make-01\n    :ARG0 (p2 / person\n              :name (n2 / name\n                        :op1 \"Bobby\"\n                        :op2 \"Zamora\"))\n    :ARG1 (ii / it\n              :quant 3))",
      "(a / and\n   :op1 (d / double-01\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Charlie\"\n                             :op2 \"Austin\"))\n           :ARG1 (l / lead-01)\n           :instrument (h / header))\n   :op2 (m2 / make-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Bobby\"\n                                :op2 \"Zamora\"))\n            :ARG1 (ii / it\n                      :quant 3)))",
      "(a / and\n   :op1 (d / double-01\n           :instrument (h / header)\n           :time (a2 / after\n                     :quant (t / temporal-quantity\n                               :quant 20\n                               :unit (m / minute))))\n   :op2 (m2 / make-01))",
      "(p / pull-back-09\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Victor\"\n                      :op2 \"Anichebe\")))",
      "(p / pull-back-09\n   :ARG1 (o / one))",
      "(p / pull-back-09\n   :beneficiary (t / team\n                   :name (n2 / name\n                             :op1 \"West\"\n                             :op2 \"Brum\")))",
      "(p / pull-back-09\n   :time (b / before\n            :op1 (a / and\n                    :op1 (s / send-off-08\n                            :ARG1 (p3 / person\n                                      :name (n3 / name\n                                                :op1 \"Youssouf\"\n                                                :op2 \"Mulumbu\")))\n                    :op2 (s2 / score-01\n                             :ARG0 (p4 / person\n                                       :name (n4 / name\n                                                 :op1 \"Joey\"\n                                                 :op2 \"Barton\"))))))",
      "(p2 / person\n    :name (n / name\n             :op1 \"Victor\"\n             :op2 \"Anichebe\"))",
      "(t / team\n   :name (n2 / name\n             :op1 \"West\"\n             :op2 \"Brum\"))",
      "(b / before\n   :op1 (a / and\n           :op1 (s / send-off-08\n                   :ARG1 (p3 / person\n                             :name (n3 / name\n                                       :op1 \"Youssouf\"\n                                       :op2 \"Mulumbu\")))\n           :op2 (s2 / score-01\n                    :ARG0 (p4 / person\n                              :name (n4 / name\n                                        :op1 \"Joey\"\n                                        :op2 \"Barton\")))))",
      "(p / pull-back-09\n   :ARG0 (p2 / person :name (n / name :op1 \"Victor\" :op2 \"Anichebe\")))",
      "(s / send-off-08\n   :ARG1 (p3 / person :name (n3 / name :op1 \"Youssouf\" :op2 \"Mulumbu\")))",
      "(s2 / score-01\n    :ARG0 (p4 / person :name (n4 / name :op1 \"Joey\" :op2 \"Barton\")))",
      "(p / pull-back-09\n   :ARG0 (p2 / person :name (n / name :op1 \"Victor\" :op2 \"Anichebe\")))",
      "(s / send-off-08\n   :ARG1 (p3 / person :name (n3 / name :op1 \"Youssouf\" :op2 \"Mulumbu\")))",
      "(s2 / score-01\n    :ARG0 (p4 / person :name (n4 / name :op1 \"Joey\" :op2 \"Barton\")))",
      "(p / pull-back-09\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Victor\"\n                      :op2 \"Anichebe\"))\n   :ARG1 (o / one)\n   :beneficiary (t / team\n                   :name (n2 / name\n                             :op1 \"West\"\n                             :op2 \"Brum\"))\n   :time (b / before\n            :op1 (s / send-off-08\n                    :ARG1 (p3 / person\n                              :name (n3 / name\n                                        :op1 \"Youssouf\"\n                                        :op2 \"Mulumbu\")))))",
      "(p / pull-back-09\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Victor\"\n                      :op2 \"Anichebe\"))\n   :ARG1 (o / one)\n   :beneficiary (t / team\n                   :name (n2 / name\n                             :op1 \"West\"\n                             :op2 \"Brum\"))\n   :time (b / before\n            :op1 (s2 / score-01\n                     :ARG0 (p4 / person\n                               :name (n4 / name\n                                         :op1 \"Joey\"\n                                         :op2 \"Barton\")))))",
      "(p / pull-back-09\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Victor\"\n                      :op2 \"Anichebe\"))\n   :ARG1 (o / one)\n   :beneficiary (t / team\n                   :name (n2 / name\n                             :op1 \"West\"\n                             :op2 \"Brum\")))",
      "(p / pull-back-09\n   :beneficiary (t / team\n                   :name (n2 / name\n                             :op1 \"West\"\n                             :op2 \"Brum\"))\n   :time (b / before\n            :op1 (a / and\n                    :op1 (s / send-off-08)\n                    :op2 (s2 / score-01))))"
    ],
    "smus": [
      "Eduardo Vargas put it:",
      "Put QPR in.",
      "Put ahead.",
      "Put on a spectacle strike by Eduardo Vargas, 25 yards.",
      "Put after 15 minutes.",
      "Eduardo Vargas",
      "QPR",
      "Eduardo Vargas made a spectacle strike of 25 yards.",
      "After 15 minutes",
      "Eduardo Vargas put it:",
      "Eduardo Vargas made a distance-hit.",
      "Eduardo Vargas put it:",
      "Eduardo Vargas made a strike.",
      "strike in distance",
      "Eduardo Vargas put QPR ahead with a spectacular 25-yard strike.",
      "Put the strike after 15 minutes.",
      "Charlie Austin doubled the lead with a header 20 minutes later.",
      "And Bobby Zamora made three of it.",
      "Charlie Austin doubled the lead with a header 20 minutes later.",
      "Bobby Zamora made three of it.",
      "Charlie Austin doubled.",
      "leadership",
      "Bobby Zamora made.",
      "Charlie Austin doubled.",
      "Bobby Zamora made.",
      "Charlie Austin doubled the lead with a header 20 minutes later.",
      "Bobby Zamora made three of it.",
      "Charlie Austin doubled the lead with a header, Bobby Zamora made it three.",
      "The header doubled after 20 minutes, made.",
      "Victor Anichebe pulled back.",
      "One pulled back.",
      "Pullback for West Brom",
      "Pullbacks came before Youssouf Mulumbu was sent off and Joey Barton scored.",
      "Victor Anichebe",
      "West Brom",
      "Before Youssouf Mulumbu was sent off and Joey Barton scored.",
      "Victor Anichebe pulled back.",
      "Youssouf Mulumbu was sent off.",
      "Joey Barton scored.",
      "Victor Anichebe pulled back.",
      "Youssouf Mulumbu was sent off.",
      "Joey Barton scored.",
      "Victor Anchebe pulled back one for West Brum before Youssouf Mulumbu was sent off.",
      "Victor Anchebe pulled back one for West Brum before Joey Barton scored.",
      "Victor Anichebe pulled back one for West Brum.",
      "West Brom pulled back before being sent off and scored."
    ]
  },
  {
    "instance_id": "realsumm-15",
    "summary": "<t> Detroit Red Wings ' Drew Miller was caught by a skate in the first period against the Ottawa Senators . </t> <t> The massive cut required 50 to 60 stitches to close , but did not damage Miller 's eye . </t> <t> The Red Wings lost 2 - 1 but remained in third place in the Atlantic division . </t>",
    "summary_trees": [
      "# ::snt  Detroit Red Wings ' Drew Miller was caught by a skate in the first period against the Ottawa Senators . \n(c / catch-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Drew\"\n                  :op2 \"Miller\")\n            :part-of (t / team\n                  :name (n2 / name\n                        :op1 \"Detroit\"\n                        :op2 \"Red\"\n                        :op3 \"Wings\")))\n      :ARG2 (s / skate)\n      :time (p2 / period\n            :ord (o / ordinal-entity\n                  :value 1)\n            :subevent-of (o2 / oppose-01\n                  :ARG0 t\n                  :ARG1 (t2 / team\n                        :name (n3 / name\n                              :op1 \"Ottawa\"\n                              :op2 \"Senators\")))))",
      "# ::snt  The massive cut required 50 to 60 stitches to close , but did not damage Miller 's eye . \n(c / contrast-01\n      :ARG1 (r / require-01\n            :ARG0 (c2 / close-01\n                  :ARG1 (c3 / cut-01\n                        :mod (m / massive)))\n            :ARG1 (s / stitch\n                  :quant (b / between\n                        :op1 50\n                        :op2 60)))\n      :ARG2 (d / damage-01\n            :polarity -\n            :ARG0 c3\n            :ARG1 (e / eye\n                  :part-of (p / person\n                        :name (n / name\n                              :op1 \"Miller\")))))",
      "# ::snt  The Red Wings lost 2 - 1 but remained in third place in the Atlantic division . \n(h / have-concession-91\n      :ARG1 (r / remain-01\n            :ARG1 (t / team\n                  :name (n / name\n                        :op1 \"Red\"\n                        :op2 \"Wings\"))\n            :ARG3 (p / place\n                  :ord (o / ordinal-entity\n                        :value 3)\n                  :location (d / division\n                        :mod (o2 / ocean\n                              :name (n2 / name\n                                    :op1 \"Atlantic\")))))\n      :ARG2 (l / lose-03\n            :ARG0 t\n            :quant (s / score-entity\n                  :op1 2\n                  :op2 1)))"
    ],
    "tree": [
      "(c / catch-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Drew\"\n                     :op2 \"Miller\")\n            :part-of (t / team\n                        :name (n2 / name\n                                  :op1 \"Detroit\"\n                                  :op2 \"Red\"\n                                  :op3 \"Wings\"))))",
      "(c / catch-02\n   :ARG2 (s / skate))",
      "(c / catch-02\n   :time (p2 / period\n             :ord (o / ordinal-entity\n                     :value 1)\n             :subevent-of (o2 / oppose-01\n                              :ARG0 (t / team :name (n2 / name :op1 \"Detroit\" :op2 \"Red\" :op3 \"Wings\"))\n                              :ARG1 (t2 / team\n                                        :name (n3 / name\n                                                  :op1 \"Ottawa\"\n                                                  :op2 \"Senators\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"Drew\"\n            :op2 \"Miller\")\n   :part-of (t / team\n               :name (n2 / name\n                         :op1 \"Detroit\"\n                         :op2 \"Red\"\n                         :op3 \"Wings\")))",
      "(p2 / period\n    :ord (o / ordinal-entity\n            :value 1)\n    :subevent-of (o2 / oppose-01\n                     :ARG0 (t / team :name (n2 / name :op1 \"Detroit\" :op2 \"Red\" :op3 \"Wings\"))\n                     :ARG1 (t2 / team\n                               :name (n3 / name\n                                         :op1 \"Ottawa\"\n                                         :op2 \"Senators\"))))",
      "(c / catch-02\n   :ARG1 (p / person :name (n / name :op1 \"Drew\" :op2 \"Miller\"))))",
      "(o2 / oppose-01\n    :ARG0 (t / team :name (n2 / name :op1 \"Detroit\" :op2 \"Red\" :op3 \"Wings\"))\n    :ARG1 (t2 / team :name (n3 / name :op1 \"Ottawa\" :op2 \"Senators\")))",
      "(c / catch-02\n   :ARG1 (p / person :name (n / name :op1 \"Drew\" :op2 \"Miller\"))))",
      "(o2 / oppose-01\n    :ARG0 (t / team :name (n2 / name :op1 \"Detroit\" :op2 \"Red\" :op3 \"Wings\")))",
      "(o2 / oppose-01\n    :ARG1 (t2 / team :name (n3 / name :op1 \"Ottawa\" :op2 \"Senators\")))",
      "(c / catch-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Drew\"\n                     :op2 \"Miller\")\n            :part (t / team\n                     :name (n2 / name\n                               :op1 \"Detroit\"\n                               :op2 \"Red\"\n                               :op3 \"Wings\")))\n   :ARG2 (s / skate))",
      "(c / catch-02\n   :time (p2 / period\n             :ord (o / ordinal-entity\n                     :value 1)\n             :subevent (o2 / oppose-01)))",
      "(c / contrast-01\n   :ARG1 (r / require-01\n            :ARG0 (c2 / close-01\n                      :ARG1 (c3 / cut-01\n                                :mod (m / massive)))\n            :ARG1 (s / stitch\n                     :quant (b / between\n                               :op1 50\n                               :op2 60))))",
      "(c / contrast-01\n   :ARG2 (d / damage-01\n            :polarity -\n            :ARG0 (c3 / cut-01)\n            :ARG1 (e / eye\n                     :part-of (p / person\n                                 :name (n / name\n                                          :op1 \"Miller\")))))",
      "(r / require-01\n   :ARG0 (c2 / close-01\n             :ARG1 (c3 / cut-01\n                       :mod (m / massive)))\n   :ARG1 (s / stitch\n            :quant (b / between\n                      :op1 50\n                      :op2 60)))",
      "(d / damage-01\n   :polarity -\n   :ARG0 (c3 / cut-01)\n   :ARG1 (e / eye\n            :part-of (p / person\n                        :name (n / name\n                                 :op1 \"Miller\"))))",
      "(c / contrast-01\n   :ARG1 (r / require-01))",
      "(r / require-01\n   :ARG0 (c2 / close-01))",
      "(c2 / close-01\n    :ARG1 (c3 / cut-01))",
      "(c3 / cut-01\n    :mod (m / massive))",
      "(d / damage-01\n   :polarity -\n   :ARG0 (c3 / cut-01)\n   :ARG1 (e / eye))",
      "(c / contrast-01\n   :ARG1 (r / require-01))",
      "(r / require-01\n   :ARG0 (c2 / close-01))",
      "(c2 / close-01\n    :ARG1 (c3 / cut-01))",
      "(c3 / cut-01\n    :mod (m / massive))",
      "(d / damage-01\n   :polarity -)",
      "(d / damage-01\n   :ARG0 (c3 / cut-01))",
      "(d / damage-01\n   :ARG1 (e / eye))",
      "(c / contrast-01\n   :ARG1 (r / require-01\n            :ARG0 (c2 / close-01\n                      :ARG1 (c3 / cut-01\n                                :mod (m / massive)))\n            :ARG1 (s / stitch\n                     :quant (b / between\n                               :op1 50\n                               :op2 60)))\n   :ARG2 (d / damage-01\n            :polarity -\n            :ARG0 c3\n            :ARG1 (e / eye\n                     :part (p / person\n                              :name (n / name\n                                       :op1 \"Miller\")))))",
      "(c / contrast-01)",
      "(h / have-concession-91\n   :ARG1 (r / remain-01\n            :ARG1 (t / team\n                     :name (n / name\n                              :op1 \"Red\"\n                              :op2 \"Wings\"))\n            :ARG3 (p / place\n                     :ord (o / ordinal-entity\n                             :value 3)\n                     :location (d / division\n                                  :mod (o2 / ocean\n                                           :name (n2 / name\n                                                     :op1 \"Atlantic\"))))))",
      "(h / have-concession-91\n   :ARG2 (l / lose-03\n            :ARG0 (t / team :name (n / name :op1 \"Red\" :op2 \"Wings\"))\n            :quant (s / score-entity\n                      :op1 2\n                      :op2 1)))",
      "(r / remain-01\n   :ARG1 (t / team\n            :name (n / name\n                     :op1 \"Red\"\n                     :op2 \"Wings\"))\n   :ARG3 (p / place\n            :ord (o / ordinal-entity\n                    :value 3)\n            :location (d / division\n                         :mod (o2 / ocean\n                                  :name (n2 / name\n                                            :op1 \"Atlantic\")))))",
      "(l / lose-03\n   :ARG0 (t / team :name (n / name :op1 \"Red\" :op2 \"Wings\"))\n   :quant (s / score-entity\n             :op1 2\n             :op2 1))",
      "(r / remain-01\n   :ARG1 (t / team :name (n / name :op1 \"Red\" :op2 \"Wings\")))",
      "(l / lose-03\n   :ARG0 (t / team :name (n / name :op1 \"Red\" :op2 \"Wings\"))\n   :quant (s / score-entity))",
      "(r / remain-01\n   :ARG1 (t / team :name (n / name :op1 \"Red\" :op2 \"Wings\")))",
      "(l / lose-03\n   :ARG0 (t / team :name (n / name :op1 \"Red\" :op2 \"Wings\")))",
      "(l / lose-03\n   :quant (s / score-entity))",
      "(h / have-concession-91\n   :ARG1 (r / remain-01\n            :ARG1 (t / team\n                     :name (n / name\n                              :op1 \"Red\"\n                              :op2 \"Wings\"))\n            :ARG3 (p / place\n                     :ord (o / ordinal-entity\n                             :value 3)))\n   :ARG2 (l / lose-03\n            :ARG0 t\n            :quant (s / score-entity\n                      :op1 2\n                      :op2 1)))",
      "(h / have-concession-91)"
    ],
    "smus": [
      "Drew Miller of the Detroit Red Wings was caught.",
      "caught on skate",
      "Catch the first period of the Detroit Red Wings vs. the Ottawa Senators.",
      "Drew Miller of the Detroit Red Wings",
      "The first period was the Detroit Red Wings vs. the Ottawa Senators.",
      "Drew Miller was caught.",
      "Detroit Red Wings vs Ottawa Senators",
      "Drew Miller was caught.",
      "-Detroit Red Wings",
      "Ottawa Senators",
      "Drew Miller of the Detroit Red Wings was caught on skates.",
      "Catched in the first period of opposition.",
      "But to close the massive cut, 50-60 stitches were required.",
      "But the cut did not damage Miller's eye.",
      "The massive cut required between 50 and 60 stitches to close.",
      "The cut did not damage Miller's eye.",
      "But required.",
      "Close required.",
      "Close the cut.",
      "Massive cuts.",
      "The cut did not damage the eye.",
      "But required.",
      "Close required.",
      "Close the cut.",
      "Massive cuts.",
      "Not to damage.",
      "The cut would damage.",
      "Damage the eye.",
      "The massive cut required 50-60 stitches to close, but did not damage Miller's eye.",
      "But...",
      "However, the Red Wings remained in third place in the Atlantic division.",
      "However, the Red Wings lost by 2 goals to 1",
      "The Red Wings remained in third place in the Atlantic division.",
      "The Red Wings lost by 2 goals, 1 in",
      "The Red Wings remained.",
      "The Red Wings lost by a score.",
      "The Red Wings remained.",
      "The Red Wings lost",
      "Losers.",
      "The Red Wings remained in third place, but lost 2-1.",
      "But..."
    ]
  },
  {
    "instance_id": "realsumm-16",
    "summary": "<t> Jurgen Klopp will leave Borussia Dortmund at the end of the season . </t> <t> German boss has enjoyed success with club during seven - year stint . </t> <t> He has been linked with Manchester City , Manchester United and Arsenal . </t> <t> Per Mertesacker says he would like to see Klopp in the Premier League . </t>",
    "summary_trees": [
      "# ::snt  Jurgen Klopp will leave Borussia Dortmund at the end of the season . \n(l / leave-15\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jurgen\"\n                  :op2 \"Klopp\"))\n      :ARG1 (t / team\n            :name (n2 / name\n                  :op1 \"Borussia\"\n                  :op2 \"Dortmund\"))\n      :time (e / end-01\n            :ARG1 (s / season)))",
      "# ::snt  German boss has enjoyed success with club during seven - year stint . \n(e / enjoy-01\n      :ARG0 (b / boss\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Germany\")))\n      :ARG1 (s / succeed-01\n            :ARG0 b\n            :ARG1 (c2 / club))\n      :duration (s2 / stint\n            :duration (t / temporal-quantity\n                  :quant 7\n                  :unit (y / year))))",
      "# ::snt  He has been linked with Manchester City , Manchester United and Arsenal . \n(l / link-01\n      :ARG1 (h / he)\n      :ARG2 (a / and\n            :op1 (t / team\n                  :name (n / name\n                        :op1 \"Manchester\"\n                        :op2 \"City\"))\n            :op2 (t2 / team\n                  :name (n2 / name\n                        :op1 \"Manchester\"\n                        :op2 \"United\"))\n            :op3 (t3 / team\n                  :name (n3 / name\n                        :op1 \"Arsenal\"))))",
      "# ::snt  Per Mertesacker says he would like to see Klopp in the Premier League . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Per\"\n                  :op2 \"Mertesacker\"))\n      :ARG1 (l / like-02\n            :ARG0 p\n            :ARG1 (s2 / see-01\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Klopp\")\n                        :location (l2 / league\n                              :name (n3 / name\n                                    :op1 \"Premier\"\n                                    :op2 \"League\"))))))"
    ],
    "tree": [
      "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\")))",
      "(l / leave-15\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Borussia\"\n                      :op2 \"Dortmund\")))",
      "(l / leave-15\n   :time (e / end-01\n            :ARG1 (s / season)))",
      "(p / person\n   :name (n / name\n            :op1 \"Jurgen\"\n            :op2 \"Klopp\"))",
      "(t / team\n   :name (n2 / name\n             :op1 \"Borussia\"\n             :op2 \"Dortmund\"))",
      "(e / end-01\n   :ARG1 (s / season))",
      "(e / end-01\n   :ARG1 (s / season))",
      "(e / end-01\n   :ARG1 (s / season))",
      "(l / leave-15\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Borussia\"\n                      :op2 \"Dortmund\")))",
      "(l / leave-15\n   :time (e / end-01))",
      "(e / enjoy-01\n   :ARG0 (b / boss\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Germany\"))))",
      "(e / enjoy-01\n   :ARG1 (s / succeed-01\n            :ARG0 (b / boss)\n            :ARG1 (c2 / club)))",
      "(e / enjoy-01\n   :duration (s2 / stint\n                 :duration (t / temporal-quantity\n                              :quant 7\n                              :unit (y / year))))",
      "(b / boss\n   :mod (c / country\n           :name (n / name\n                    :op1 \"Germany\")))",
      "(s / succeed-01\n   :ARG0 (b / boss)\n   :ARG1 (c2 / club))",
      "(s2 / stint\n    :duration (t / temporal-quantity\n                 :quant 7\n                 :unit (y / year)))",
      "(e / enjoy-01\n   :ARG0 (b / boss))",
      "(s / succeed-01\n   :ARG0 (b / boss)\n   :ARG1 (c2 / club))",
      "(e / enjoy-01\n   :ARG0 (b / boss))",
      "(s / succeed-01\n   :ARG0 (b / boss))",
      "(s / succeed-01\n   :ARG1 (c2 / club))",
      "(e / enjoy-01\n   :ARG0 (b / boss\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Germany\")))\n   :ARG1 (s / succeed-01\n            :ARG0 b\n            :ARG1 (c2 / club))\n   :duration (s2 / stint\n                 :duration (t / temporal-quantity\n                              :quant 7\n                              :unit (y / year))))",
      "(e / enjoy-01\n   :duration (s2 / stint\n                 :duration (t / temporal-quantity\n                              :quant 7\n                              :unit (y / year))))",
      "(l / link-01\n   :ARG1 (h / he))",
      "(l / link-01\n   :ARG2 (a / and\n            :op1 (t / team\n                    :name (n / name\n                             :op1 \"Manchester\"\n                             :op2 \"City\"))\n            :op2 (t2 / team\n                     :name (n2 / name\n                               :op1 \"Manchester\"\n                               :op2 \"United\"))\n            :op3 (t3 / team\n                     :name (n3 / name\n                               :op1 \"Arsenal\"))))",
      "(a / and\n   :op1 (t / team\n           :name (n / name\n                    :op1 \"Manchester\"\n                    :op2 \"City\"))\n   :op2 (t2 / team\n            :name (n2 / name\n                      :op1 \"Manchester\"\n                      :op2 \"United\"))\n   :op3 (t3 / team\n            :name (n3 / name\n                      :op1 \"Arsenal\")))",
      "(l / link-01\n   :ARG1 (h / he))",
      "(l / link-01\n   :ARG1 (h / he))",
      "(l / link-01\n   :ARG1 (h / he)\n   :ARG2 (t / team\n            :name (n / name\n                     :op1 \"Manchester\"\n                     :op2 \"City\")))",
      "(l / link-01\n   :ARG1 (h / he)\n   :ARG2 (t2 / team\n             :name (n2 / name\n                       :op1 \"Manchester\"\n                       :op2 \"United\")))",
      "(l / link-01\n   :ARG1 (h / he)\n   :ARG2 (t3 / team\n             :name (n3 / name\n                       :op1 \"Arsenal\")))",
      "(l / link-01\n   :ARG1 (h / he)\n   :ARG2 (a / and\n            :op1 (t / team\n                    :name (n / name\n                             :op1 \"Manchester\"\n                             :op2 \"City\"))\n            :op2 (t2 / team\n                     :name (n2 / name\n                               :op1 \"Manchester\"\n                               :op2 \"United\"))\n            :op3 (t3 / team\n                     :name (n3 / name\n                               :op1 \"Arsenal\"))))",
      "(l / link-01)",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Per\"\n                     :op2 \"Mertesacker\")))",
      "(s / say-01\n   :ARG1 (l / like-02\n            :ARG0 (p / person :name (n / name :op1 \"Per\" :op2 \"Mertesacker\"))\n            :ARG1 (s2 / see-01\n                      :ARG0 p\n                      :ARG1 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Klopp\")\n                                :location (l2 / league\n                                              :name (n3 / name\n                                                        :op1 \"Premier\"\n                                                        :op2 \"League\"))))))",
      "(p / person\n   :name (n / name\n            :op1 \"Per\"\n            :op2 \"Mertesacker\"))",
      "(l / like-02\n   :ARG0 (p / person :name (n / name :op1 \"Per\" :op2 \"Mertesacker\"))\n   :ARG1 (s2 / see-01\n             :ARG0 p\n             :ARG1 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Klopp\")\n                       :location (l2 / league\n                                     :name (n3 / name\n                                               :op1 \"Premier\"\n                                               :op2 \"League\")))))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Per\" :op2 \"Mertesacker\")))",
      "(l / like-02\n   :ARG0 (p / person :name (n / name :op1 \"Per\" :op2 \"Mertesacker\"))\n   :ARG1 (s2 / see-01))",
      "(s2 / see-01\n    :ARG0 (p / person :name (n / name :op1 \"Per\" :op2 \"Mertesacker\"))\n    :ARG1 (p2 / person :name (n2 / name :op1 \"Klopp\"))))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Per\" :op2 \"Mertesacker\")))",
      "(l / like-02\n   :ARG0 (p / person :name (n / name :op1 \"Per\" :op2 \"Mertesacker\")))",
      "(l / like-02\n   :ARG1 (s2 / see-01))",
      "(s2 / see-01\n    :ARG0 (p / person :name (n / name :op1 \"Per\" :op2 \"Mertesacker\")))",
      "(s2 / see-01\n    :ARG1 (p2 / person :name (n2 / name :op1 \"Klopp\"))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Per\"\n                     :op2 \"Mertesacker\"))\n   :ARG1 (l / like-02\n            :ARG0 p\n            :ARG1 (s2 / see-01\n                      :ARG0 p\n                      :ARG1 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Klopp\")))))",
      "(s / say-01)"
    ],
    "smus": [
      "Kurgen Klopp will leave.",
      "Leave Borussia Dortmund",
      "Leave at the end of the season.",
      "-Jurgen Klopp",
      "Borussia Dortmund",
      "End of season",
      "End of season",
      "End of season",
      "Kurgen Klopp will leave Borussia Dortmund.",
      "Leave at the end.",
      "The German boss has enjoyed.",
      "enjoyed the club's success as a boss.",
      "Enjoyed a 7 year stint.",
      "German boss.",
      "The club has had a successful boss.",
      "7 year stint.",
      "The boss enjoyed.",
      "The club has had a successful boss.",
      "The boss enjoyed.",
      "The boss is a success.",
      "The club has had success.",
      "The German boss has enjoyed success at the club during his seven-year stint.",
      "Enjoyed a 7 year stint.",
      "He's been linked.",
      "The two teams are linked, Manche City, Manchester United and Arsenal.",
      "Manche City, Manche United and Arsenal",
      "He's been linked.",
      "He's been linked.",
      "He was linked with Manche City.",
      "He is linked with Manchester United.",
      "He was linked with Arsenal.",
      "He is linked with Manche City, Manche United and Arsenal.",
      "Link.",
      "Per Mertesacker says --",
      "Per Mertesacker says he would like to see Klopp in the Prem League.",
      "Per Mertesacker.",
      "Per Mertesacker would like to see Klopp in the Prem League.",
      "Per Mertesacker says --",
      "Per Mertesacker would like to see.",
      "Per Mertesacker will see Klopp.",
      "Per Mertesacker says --",
      "Per Mertesacker would like...",
      "Would like to see.",
      "Per Mertesacker will see.",
      "See Klopp.",
      "Per Mertesacker says he would like to see Klopp.",
      "says."
    ]
  },
  {
    "instance_id": "realsumm-17",
    "summary": "<t> AppleInsider spotted nine listings in the past month relating to batteries . </t> <t> These include one for an iOS battery life software engineer and another for iOS software power systems engineer . </t> <t> Apple significantly improved the battery life on its iPhone 6 and 6 Plus . </t> <t> But it has been criticised for phones and tablets that only do n't last a day . </t>",
    "summary_trees": [
      "# ::snt  AppleInsider spotted nine listings in the past month relating to batteries . \n(s / spot-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"AppleInsider\"))\n      :ARG1 (l / listing\n            :quant 9\n            :ARG1-of (r / relate-01\n                  :ARG2 (b / battery)))\n      :time (m / month\n            :mod (p2 / past)))",
      "# ::snt  These include one for an iOS battery life software engineer and another for iOS software power systems engineer . \n(ii / include-01\n      :ARG1 (a / and\n            :op1 (o / one\n                  :purpose (p / person\n                        :ARG0-of (e / engineer-01\n                              :ARG1 (s / software\n                                    :purpose (l / life\n                                          :mod (b / battery))\n                                    :mod (p2 / product\n                                          :name (n / name\n                                                :op1 \"iOS\"))))))\n            :op2 (a2 / another\n                  :purpose (p3 / person\n                        :ARG0-of (e2 / engineer-01\n                              :ARG1 (s2 / system\n                                    :mod (p4 / power)\n                                    :mod (s3 / software))))))\n      :ARG2 (t / this))",
      "# ::snt  Apple significantly improved the battery life on its iPhone 6 and 6 Plus . \n(ii / improve-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Apple\"))\n      :ARG1 (l / life\n            :duration-of (b / battery)\n            :poss (a / and\n                  :op1 (p / product\n                        :name (n2 / name\n                              :op1 \"iPhone\"\n                              :op2 6))\n                  :op2 (p2 / product\n                        :name (n3 / name\n                              :op1 \"iPhone\"\n                              :op2 6\n                              :op3 \"Plus\"))\n                  :poss c))\n      :ARG1-of (s / significant-02))",
      "# ::snt  But it has been criticised for phones and tablets that only do n't last a day . \n(c / contrast-01\n      :ARG2 (c2 / criticize-01\n            :ARG1 (ii / it)\n            :ARG2 (a / and\n                  :op1 (p / phone)\n                  :op2 (t / tablet)\n                  :ARG1-of (l / last-04\n                        :polarity -\n                        :ARG2 (t2 / temporal-quantity\n                              :quant 1\n                              :unit (d / day))\n                        :mod (o / only)))))"
    ],
    "tree": [
      "(s / spot-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"AppleInsider\")))",
      "(s / spot-01\n   :ARG1 (l / listing\n            :quant 9\n            :ARG1-of (r / relate-01\n                        :ARG2 (b / battery))))",
      "(s / spot-01\n   :time (m / month\n            :mod (p2 / past)))",
      "(p / person\n   :name (n / name\n            :op1 \"AppleInsider\"))",
      "(l / listing\n   :quant 9\n   :ARG1-of (r / relate-01\n               :ARG2 (b / battery)))",
      "(m / month\n   :mod (p2 / past))",
      "(s / spot-01\n   :ARG0 (p / person :name (n / name :op1 \"AppleInsider\")))",
      "(r / relate-01\n   :ARG2 (b / battery))",
      "(s / spot-01\n   :ARG0 (p / person :name (n / name :op1 \"AppleInsider\")))",
      "(r / relate-01\n   :ARG2 (b / battery))",
      "(s / spot-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"AppleInsider\"))\n   :ARG1 (l / listing\n            :quant 9\n            :ARG1 (r / relate-01\n                     :ARG2 (b / battery))))",
      "(s / spot-01\n   :time (m / month\n            :mod (p2 / past)))",
      "(ii / include-01\n    :ARG1 (a / and\n             :op1 (o / one\n                     :purpose (p / person\n                                 :ARG0-of (e / engineer-01\n                                             :ARG1 (s / software\n                                                      :purpose (l / life\n                                                                  :mod (b / battery))\n                                                      :mod (p2 / product\n                                                               :name (n / name\n                                                                        :op1 \"iOS\"))))))\n             :op2 (a2 / another\n                      :purpose (p3 / person\n                                   :ARG0-of (e2 / engineer-01\n                                                :ARG1 (s2 / system\n                                                          :mod (p4 / power)\n                                                          :mod (s3 / software)))))))",
      "(ii / include-01\n    :ARG2 (t / this))",
      "(a / and\n   :op1 (o / one\n           :purpose (p / person\n                       :ARG0-of (e / engineer-01\n                                   :ARG1 (s / software\n                                            :purpose (l / life\n                                                        :mod (b / battery))\n                                            :mod (p2 / product\n                                                     :name (n / name\n                                                              :op1 \"iOS\"))))))\n   :op2 (a2 / another\n            :purpose (p3 / person\n                         :ARG0-of (e2 / engineer-01\n                                      :ARG1 (s2 / system\n                                                :mod (p4 / power)\n                                                :mod (s3 / software))))))",
      "(ii / include-01\n    :ARG1 (a / and))",
      "(e / engineer-01\n   :ARG1 (s / software))",
      "(e2 / engineer-01\n    :ARG1 (s2 / system))",
      "(ii / include-01\n    :ARG1 (a / and))",
      "(e / engineer-01\n   :ARG1 (s / software))",
      "(e2 / engineer-01\n    :ARG1 (s2 / system))",
      "(ii / include-01\n    :ARG1 (o / one\n             :purpose (p / person\n                         :ARG0-of (e / engineer-01\n                                     :ARG1 (s / software\n                                              :purpose (l / life\n                                                          :mod (b / battery))\n                                              :mod (p2 / product\n                                                       :name (n / name\n                                                                :op1 \"iOS\"))))))\n    :ARG2 (t / this))",
      "(ii / include-01\n    :ARG1 (a2 / another\n              :purpose (p3 / person\n                           :ARG0-of (e2 / engineer-01\n                                        :ARG1 (s2 / system\n                                                  :mod (p4 / power)\n                                                  :mod (s3 / software)))))\n    :ARG2 (t / this)\n    :ARG2 t)",
      "(ii / include-01\n    :ARG1 (a / and\n             :op1 (o / one)\n             :op2 (a2 / another))\n    :ARG2 (t / this))",
      "(ii / include-01)",
      "(ii / improve-01\n    :ARG0 (c / company\n             :name (n / name\n                      :op1 \"Apple\")))",
      "(ii / improve-01\n    :ARG1 (l / life\n             :duration-of (b / battery)\n             :poss (a / and\n                      :op1 (p / product\n                              :name (n2 / name\n                                        :op1 \"iPhone\"\n                                        :op2 6))\n                      :op2 (p2 / product\n                               :name (n3 / name\n                                         :op1 \"iPhone\"\n                                         :op2 6\n                                         :op3 \"Plus\"))\n                      :poss (c / company :name (n / name :op1 \"Apple\")))))",
      "(ii / improve-01\n    :ARG1-of (s / significant-02))",
      "(c / company\n   :name (n / name\n            :op1 \"Apple\"))",
      "(l / life\n   :duration-of (b / battery)\n   :poss (a / and\n            :op1 (p / product\n                    :name (n2 / name\n                              :op1 \"iPhone\"\n                              :op2 6))\n            :op2 (p2 / product\n                     :name (n3 / name\n                               :op1 \"iPhone\"\n                               :op2 6\n                               :op3 \"Plus\"))\n            :poss (c / company :name (n / name :op1 \"Apple\"))))",
      "(ii / improve-01\n    :ARG0 (c / company :name (n / name :op1 \"Apple\")))",
      "(s / significant-02)",
      "(ii / improve-01\n    :ARG0 (c / company :name (n / name :op1 \"Apple\")))",
      "(ii / improve-01\n    :ARG0 (c / company\n             :name (n / name\n                      :op1 \"Apple\"))\n    :ARG1 (l / life\n             :duration-of (b / battery)\n             :poss (p / product\n                      :name (n2 / name\n                                :op1 \"iPhone\"\n                                :op2 6))))",
      "(ii / improve-01\n    :ARG0 (c / company\n             :name (n / name\n                      :op1 \"Apple\"))\n    :ARG1 (l / life\n             :duration-of (b / battery)\n             :poss (p2 / product\n                       :name (n3 / name\n                                 :op1 \"iPhone\"\n                                 :op2 6\n                                 :op3 \"Plus\")\n                       :poss c))\n    :ARG1-of (s / significant-02))",
      "(ii / improve-01\n    :ARG0 (c / company\n             :name (n / name\n                      :op1 \"Apple\"))\n    :ARG1 (l / life\n             :duration (b / battery)\n             :poss (a / and\n                      :op1 (p / product\n                              :name (n2 / name\n                                        :op1 \"iPhone\"\n                                        :op2 6))\n                      :op2 (p2 / product\n                               :name (n3 / name\n                                         :op1 \"iPhone\"\n                                         :op2 6\n                                         :op3 \"Plus\"))\n                      :poss c))\n    :ARG1 (s / significant-02))",
      "(ii / improve-01)",
      "(c / contrast-01\n   :ARG2 (c2 / criticize-01\n             :ARG1 (ii / it)\n             :ARG2 (a / and\n                      :op1 (p / phone)\n                      :op2 (t / tablet)\n                      :ARG1-of (l / last-04\n                                  :polarity -\n                                  :ARG2 (t2 / temporal-quantity\n                                            :quant 1\n                                            :unit (d / day))\n                                  :mod (o / only)))))",
      "(c2 / criticize-01\n    :ARG1 (ii / it)\n    :ARG2 (a / and\n             :op1 (p / phone)\n             :op2 (t / tablet)\n             :ARG1-of (l / last-04\n                         :polarity -\n                         :ARG2 (t2 / temporal-quantity\n                                   :quant 1\n                                   :unit (d / day))\n                         :mod (o / only))))",
      "(c / contrast-01\n   :ARG2 (c2 / criticize-01))",
      "(c2 / criticize-01\n    :ARG1 (ii / it))",
      "(l / last-04\n   :polarity -\n   :ARG2 (t2 / temporal-quantity))",
      "(c / contrast-01\n   :ARG2 (c2 / criticize-01))",
      "(c2 / criticize-01\n    :ARG1 (ii / it))",
      "(l / last-04\n   :polarity -)",
      "(l / last-04\n   :ARG2 (t2 / temporal-quantity))",
      "(c / contrast-01\n   :ARG2 (c2 / criticize-01\n             :ARG1 (ii / it)\n             :ARG2 (p / phone)))",
      "(c / contrast-01\n   :ARG2 (c2 / criticize-01\n             :ARG1 (ii / it)\n             :ARG2 (t / tablet\n                      :ARG1-of (l / last-04\n                                  :polarity -\n                                  :ARG2 (t2 / temporal-quantity\n                                            :quant 1\n                                            :unit (d / day))\n                                  :mod (o / only)))))",
      "(c / contrast-01\n   :ARG2 (c2 / criticize-01\n             :ARG1 (ii / it)\n             :ARG2 (a / and\n                      :op1 (p / phone)\n                      :op2 (t / tablet)\n                      :ARG1 (l / last-04\n                               :polarity -\n                               :ARG2 (t2 / temporal-quantity\n                                         :quant 1\n                                         :unit (d / day))\n                               :mod (o / only)))))",
      "(c / contrast-01)"
    ],
    "smus": [
      "AppleInsider spotted.",
      "There were 9 listings related to batteries spotted.",
      "Spotted in the past month.",
      "AppleInsider",
      "There are 9 listings related to batteries.",
      "The past month.",
      "AppleInsider spotted.",
      "Relating to batteries.",
      "AppleInsider spotted.",
      "Relating to batteries.",
      "AppleInsider spotted 9 listings related to batteries.",
      "Spotted in the past month.",
      "One for an IOS battery life engineer and another for a software power system engineer.",
      "These include:",
      "One for an IOS battery life engineer and another for a software power system engineer.",
      "Including...",
      "Software engineering.",
      "System engineering",
      "Including...",
      "Software engineering.",
      "System engineering",
      "This includes one for an engineer for the IOS battery life software.",
      "These include another for the power and software engineers.",
      "These include one and another.",
      "Include:",
      "Apple improved.",
      "Apple's iPhone 6 Plus and iPhone 6 Plus battery life improved.",
      "Significantly improved.",
      "Apple",
      "Battery life of Apple's iPhone 6 and iPhone 6 Plus.",
      "Apple improved.",
      "Significantly.",
      "Apple improved.",
      "Apple improved the battery life of the iPhone 6.",
      "Apple significantly improved the battery life of its iPhone 6 Plus.",
      "Apple significantly improved the battery life of its iPhone 6 and iPhone 6 Plus.",
      "Improved.",
      "But it is critiquised for phones and tablets that only last a day.",
      "It is critiquised for phones and tablets that only last a day.",
      "But critiquised.",
      "It's been critiquised.",
      "It doesn't last a tad.",
      "But critiquised.",
      "It's been critiquised.",
      "It doesn't last.",
      "It's going to last a long time.",
      "But it's critiquised as \"phones\".",
      "But it is critiquised as being a series of tablets that only last a day.",
      "But it is critiquised as phones and tablets that only last a day.",
      "But..."
    ]
  },
  {
    "instance_id": "realsumm-18",
    "summary": "<t> Tournament performances have restored Andy Murray to World No 3 . </t> <t> But it 's wedding to Kim Sears that takes Murray 's No 1 spot this week . </t> <t> Murray is due to marry fianc\u00e9e Sears in Dunblane this coming Saturday . </t> <t> There are believed to be well over 100 names on down - to - earth guest list . </t>",
    "summary_trees": [
      "# ::snt  Tournament performances have restored Andy Murray to World No 3 . \n(r / restore-01\n      :ARG0 (p / perform-02\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Andy\"\n                        :op2 \"Murray\"))\n            :mod (t / tournament))\n      :ARG1 (h / have-org-role-91\n            :ARG0 p2\n            :ARG1 (w / world)\n            :ARG2 (n2 / no\n                  :ord (o / ordinal-entity\n                        :value 3))))",
      "# ::snt  But it 's wedding to Kim Sears that takes Murray 's No 1 spot this week . \n(c / contrast-01\n      :ARG2 (t / take-01\n            :ARG0 (w / wed-01\n                  :ARG1 (p / person\n                        :name (n / name\n                              :op1 \"Murray\"))\n                  :ARG2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Kim\"\n                              :op2 \"Sears\")))\n            :ARG1 (s / spot\n                  :ord (o / ordinal-entity\n                        :value 1)\n                  :poss p)\n            :time (w2 / week\n                  :mod (t2 / this))))",
      "# ::snt  Murray is due to marry fianc\u00e9e Sears in Dunblane this coming Saturday . \n(d / due-03\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Murray\"))\n      :ARG2 (m / marry-01\n            :ARG1 p\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Sears\")\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (f / fiancee)))\n            :location (c / city\n                  :name (n3 / name\n                        :op1 \"Dunblane\")))\n      :time (d2 / date-entity\n            :weekday (s / saturday)\n            :mod (t / this)\n            :ARG1-of (c2 / come-01)))",
      "# ::snt  There are believed to be well over 100 names on down - to - earth guest list . \n(b / believe-01\n      :ARG1 (n / name\n            :quant (o / over\n                  :op1 100\n                  :quant (w / well))\n            :location (l / list-01\n                  :ARG1 (g / guest)\n                  :mod (d / down-to-earth))))"
    ],
    "tree": [
      "(r / restore-01\n   :ARG0 (p / perform-02\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Andy\"\n                               :op2 \"Murray\"))\n            :mod (t / tournament)))",
      "(r / restore-01\n   :ARG1 (h / have-org-role-91\n            :ARG0 (p2 / person :name (n / name :op1 \"Andy\" :op2 \"Murray\"))\n            :ARG1 (w / world)\n            :ARG2 (n2 / no\n                      :ord (o / ordinal-entity\n                              :value 3))))",
      "(p / perform-02\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Andy\"\n                      :op2 \"Murray\"))\n   :mod (t / tournament))",
      "(h / have-org-role-91\n   :ARG0 (p2 / person :name (n / name :op1 \"Andy\" :op2 \"Murray\"))\n   :ARG1 (w / world)\n   :ARG2 (n2 / no\n             :ord (o / ordinal-entity\n                     :value 3)))",
      "(r / restore-01\n   :ARG0 (p / perform-02))",
      "(p / perform-02\n   :ARG0 (p2 / person :name (n / name :op1 \"Andy\" :op2 \"Murray\")))",
      "(r / restore-01\n   :ARG0 (p / perform-02))",
      "(p / perform-02\n   :ARG0 (p2 / person :name (n / name :op1 \"Andy\" :op2 \"Murray\")))",
      "(r / restore-01\n   :ARG0 (p / perform-02\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Andy\"\n                               :op2 \"Murray\"))\n            :mod (t / tournament))\n   :ARG1 (h / have-org-role-91\n            :ARG0 p2\n            :ARG1 (w / world)\n            :ARG2 (n2 / no\n                      :ord (o / ordinal-entity\n                              :value 3))))",
      "(r / restore-01)",
      "(c / contrast-01\n   :ARG2 (t / take-01\n            :ARG0 (w / wed-01\n                     :ARG1 (p / person\n                              :name (n / name\n                                       :op1 \"Murray\"))\n                     :ARG2 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Kim\"\n                                         :op2 \"Sears\")))\n            :ARG1 (s / spot\n                     :ord (o / ordinal-entity\n                             :value 1)\n                     :poss p)\n            :time (w2 / week\n                      :mod (t2 / this))))",
      "(t / take-01\n   :ARG0 (w / wed-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Murray\"))\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Kim\"\n                                :op2 \"Sears\")))\n   :ARG1 (s / spot\n            :ord (o / ordinal-entity\n                    :value 1)\n            :poss p)\n   :time (w2 / week\n             :mod (t2 / this)))",
      "(c / contrast-01\n   :ARG2 (t / take-01))",
      "(t / take-01\n   :ARG0 (w / wed-01))",
      "(w / wed-01\n   :ARG1 (p / person :name (n / name :op1 \"Murray\")))",
      "(c / contrast-01\n   :ARG2 (t / take-01))",
      "(t / take-01\n   :ARG0 (w / wed-01))",
      "(w / wed-01\n   :ARG1 (p / person :name (n / name :op1 \"Murray\")))",
      "(c / contrast-01\n   :ARG2 (t / take-01\n            :ARG0 (w / wed-01\n                     :ARG1 (p / person\n                              :name (n / name\n                                       :op1 \"Murray\"))\n                     :ARG2 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Kim\"\n                                         :op2 \"Sears\")))\n            :ARG1 (s / spot\n                     :ord (o / ordinal-entity\n                             :value 1)\n                     :poss p)))",
      "(c / contrast-01)",
      "(d / due-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Murray\")))",
      "(d / due-03\n   :ARG2 (m / marry-01\n            :ARG1 (p / person :name (n / name :op1 \"Murray\"))\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sears\")\n                      :ARG0-of (h / have-rel-role-91\n                                  :ARG1 p\n                                  :ARG2 (f / fiancee)))\n            :location (c / city\n                         :name (n3 / name\n                                   :op1 \"Dunblane\"))))",
      "(d / due-03\n   :time (d2 / date-entity\n             :weekday (s / saturday)\n             :mod (t / this)\n             :ARG1-of (c2 / come-01)))",
      "(p / person\n   :name (n / name\n            :op1 \"Murray\"))",
      "(m / marry-01\n   :ARG1 (p / person :name (n / name :op1 \"Murray\"))\n   :ARG2 (p2 / person\n             :name (n2 / name\n                       :op1 \"Sears\")\n             :ARG0-of (h / have-rel-role-91\n                         :ARG1 p\n                         :ARG2 (f / fiancee)))\n   :location (c / city\n                :name (n3 / name\n                          :op1 \"Dunblane\")))",
      "(d2 / date-entity\n    :weekday (s / saturday)\n    :mod (t / this)\n    :ARG1-of (c2 / come-01))",
      "(d / due-03\n   :ARG1 (p / person :name (n / name :op1 \"Murray\")))",
      "(m / marry-01\n   :ARG1 (p / person :name (n / name :op1 \"Murray\"))\n   :ARG2 (p2 / person :name (n2 / name :op1 \"Sears\"))))",
      "(c2 / come-01)",
      "(d / due-03\n   :ARG1 (p / person :name (n / name :op1 \"Murray\")))",
      "(m / marry-01\n   :ARG1 (p / person :name (n / name :op1 \"Murray\")))",
      "(m / marry-01\n   :ARG2 (p2 / person :name (n2 / name :op1 \"Sears\"))))",
      "(d / due-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Murray\"))\n   :ARG2 (m / marry-01\n            :ARG1 p\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Sears\")\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 p\n                               :ARG2 (f / fiancee)))))",
      "(d / due-03\n   :time (d2 / date-entity\n             :weekday (s / saturday)\n             :mod (t / this)))",
      "(b / believe-01\n   :ARG1 (n / name\n            :quant (o / over\n                      :op1 100\n                      :quant (w / well))\n            :location (l / list-01\n                         :ARG1 (g / guest)\n                         :mod (d / down-to-earth))))",
      "(n / name\n   :quant (o / over\n             :op1 100\n             :quant (w / well))\n   :location (l / list-01\n                :ARG1 (g / guest)\n                :mod (d / down-to-earth)))",
      "(b / believe-01\n   :ARG1 (n / name))",
      "(l / list-01\n   :ARG1 (g / guest))",
      "(b / believe-01\n   :ARG1 (n / name))",
      "(l / list-01\n   :ARG1 (g / guest))",
      "(b / believe-01\n   :ARG1 (n / name\n            :quant (o / over\n                      :op1 100\n                      :quant (w / well))))",
      "(b / believe-01)"
    ],
    "smus": [
      "The Tournament performances of Andy Murray have restored the tournament.",
      "Andy Murray has restored the World to No 3",
      "Andy Murray's Tournament Performances",
      "Andy Murray is the World No. 3.",
      "The performances have restored.",
      "Andy Murray's performances:",
      "The performances have restored.",
      "Andy Murray's performances:",
      "Andy Murray's Tournament performances have restored him to World No. 3.",
      "Restored.",
      "But this week, Murray's wedding to Kim Sears takes his first spot.",
      "This week, Murray's wedding to Kim Sears takes his first spot.",
      "But it takes.",
      "It takes a wedding.",
      "Murray got married.",
      "But it takes.",
      "It takes a wedding.",
      "Murray got married.",
      "But the wedding of Murray and Kim Sears takes his first spot.",
      "But...",
      "Murray is due.",
      "Murray is due to marry his fiancee Seers in Dunblane.",
      "Due this coming Saturday.",
      "Murray.",
      "Murray will marry his fiancee Seers in Dunblane.",
      "This Saturday is coming.",
      "Murray is due.",
      "Murray to marry Sears.",
      "Come.",
      "Murray is due.",
      "Murray will marry.",
      "Marry Sears.",
      "Murray is due to marry his fiancee, Seers.",
      "Due this Saturday.",
      "Well over 100 names on the down-to-earth guest list are believed to be.",
      "Well over 100 names on the down-to-earth guest list.",
      "The names are believed.",
      "Guest list.",
      "The names are believed.",
      "Guest list.",
      "Well over 100 names are believed.",
      "Believed."
    ]
  },
  {
    "instance_id": "realsumm-19",
    "summary": "<t> Paula Dunican paid \u00a3 25 for the baby blue coat at her local branch of Asda . </t> <t> When she took it home she noticed a ' seeping ' stain on the back of coat . </t> <t> She then discovered the reptile 's crushed body on the garment 's lining . </t> <t> The supermarket has apologised and offered her a \u00a3 40 voucher and refund . </t>",
    "summary_trees": [
      "# ::snt  Paula Dunican paid \u00a3 25 for the baby blue coat at her local branch of Asda . \n(p / pay-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Paula\"\n                  :op2 \"Dunican\"))\n      :ARG1 (m / monetary-quantity\n            :quant 25\n            :unit (p3 / pound))\n      :ARG3 (c / coat\n            :mod (b / blue)\n            :mod (b2 / baby))\n      :location (b3 / branch\n            :poss p2\n            :ARG1-of (l / local-02)\n            :part-of (c2 / company\n                  :name (n2 / name\n                        :op1 \"Asda\"))))",
      "# ::snt  When she took it home she noticed a ' seeping ' stain on the back of coat . \n(n / notice-01\n      :ARG0 (s / she)\n      :ARG1 (s2 / stain-01\n            :ARG1-of (s3 / seep-01)\n            :location (b / back\n                  :part-of (c / coat)))\n      :time (t / take-01\n            :ARG0 s\n            :ARG1 c\n            :ARG3 (h / home)))",
      "# ::snt  She then discovered the reptile 's crushed body on the garment 's lining . \n(d / discover-01\n      :ARG0 (s / she)\n      :ARG1 (b / body\n            :part-of (r / reptile)\n            :ARG1-of (c / crush-01))\n      :location (l / lining\n            :part-of (g / garment))\n      :time (t / then))",
      "# ::snt  The supermarket has apologised and offered her a \u00a3 40 voucher and refund . \n(a / and\n      :op1 (a2 / apologize-01\n            :ARG0 (s / supermarket))\n      :op2 (o / offer-01\n            :ARG0 s\n            :ARG1 (a3 / and\n                  :op1 (v / voucher\n                        :mod (m / monetary-quantity\n                              :quant 40\n                              :unit (p / pound)))\n                  :op2 (r / refund-01\n                        :ARG0 s\n                        :ARG2 (s2 / she)))\n            :ARG3 s2))"
    ],
    "tree": [
      "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Paula\"\n                      :op2 \"Dunican\")))",
      "(p / pay-01\n   :ARG1 (m / monetary-quantity\n            :quant 25\n            :unit (p3 / pound)))",
      "(p / pay-01\n   :ARG3 (c / coat\n            :mod (b / blue)\n            :mod (b2 / baby)))",
      "(p / pay-01\n   :location (b3 / branch\n                 :poss (p2 / person :name (n / name :op1 \"Paula\" :op2 \"Dunican\"))\n                 :ARG1-of (l / local-02)\n                 :part-of (c2 / company\n                              :name (n2 / name\n                                        :op1 \"Asda\"))))",
      "(p2 / person\n    :name (n / name\n             :op1 \"Paula\"\n             :op2 \"Dunican\"))",
      "(m / monetary-quantity\n   :quant 25\n   :unit (p3 / pound))",
      "(c / coat\n   :mod (b / blue)\n   :mod (b2 / baby))",
      "(b3 / branch\n    :poss (p2 / person :name (n / name :op1 \"Paula\" :op2 \"Dunican\"))\n    :ARG1-of (l / local-02)\n    :part-of (c2 / company\n                 :name (n2 / name\n                           :op1 \"Asda\")))",
      "(p / pay-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Paula\" :op2 \"Dunican\")))",
      "(l / local-02)",
      "(p / pay-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Paula\" :op2 \"Dunican\")))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Paula\"\n                      :op2 \"Dunican\"))\n   :ARG1 (m / monetary-quantity\n            :quant 25\n            :unit (p3 / pound))\n   :ARG3 (c / coat\n            :mod (b / blue)\n            :mod (b2 / baby)))",
      "(p / pay-01\n   :location (b3 / branch))",
      "(n / notice-01\n   :ARG0 (s / she))",
      "(n / notice-01\n   :ARG1 (s2 / stain-01\n             :ARG1-of (s3 / seep-01)\n             :location (b / back\n                          :part-of (c / coat))))",
      "(n / notice-01\n   :time (t / take-01\n            :ARG0 (s / she)\n            :ARG1 (c / coat)\n            :ARG3 (h / home)))",
      "(s2 / stain-01\n    :ARG1-of (s3 / seep-01)\n    :location (b / back\n                 :part-of (c / coat)))",
      "(t / take-01\n   :ARG0 (s / she)\n   :ARG1 (c / coat)\n   :ARG3 (h / home))",
      "(n / notice-01\n   :ARG0 (s / she))",
      "(s2 / stain-01)",
      "(s3 / seep-01)",
      "(t / take-01\n   :ARG0 (s / she)\n   :ARG1 (c / coat)\n   :ARG3 (h / home))",
      "(n / notice-01\n   :ARG0 (s / she))",
      "(t / take-01\n   :ARG0 (s / she))",
      "(t / take-01\n   :ARG1 (c / coat))",
      "(t / take-01\n   :ARG3 (h / home))",
      "(n / notice-01\n   :ARG0 (s / she)\n   :ARG1 (s2 / stain-01\n             :ARG1 (s3 / seep-01)))",
      "(n / notice-01\n   :time (t / take-01))",
      "(d / discover-01\n   :ARG0 (s / she))",
      "(d / discover-01\n   :ARG1 (b / body\n            :part-of (r / reptile)\n            :ARG1-of (c / crush-01)))",
      "(d / discover-01\n   :location (l / lining\n                :part-of (g / garment)))",
      "(d / discover-01\n   :time (t / then))",
      "(b / body\n   :part-of (r / reptile)\n   :ARG1-of (c / crush-01))",
      "(l / lining\n   :part-of (g / garment))",
      "(d / discover-01\n   :ARG0 (s / she))",
      "(c / crush-01)",
      "(d / discover-01\n   :ARG0 (s / she))",
      "(d / discover-01\n   :ARG0 (s / she)\n   :ARG1 (b / body\n            :part (r / reptile)\n            :ARG1 (c / crush-01)))",
      "(d / discover-01\n   :location (l / lining\n                :part (g / garment))\n   :time (t / then))",
      "(a / and\n   :op1 (a2 / apologize-01\n            :ARG0 (s / supermarket)))",
      "(a / and\n   :op2 (o / offer-01\n           :ARG0 (s / supermarket)\n           :ARG1 (a3 / and\n                     :op1 (v / voucher\n                             :mod (m / monetary-quantity\n                                     :quant 40\n                                     :unit (p / pound)))\n                     :op2 (r / refund-01\n                             :ARG0 s\n                             :ARG2 (s2 / she\n                                       :ARG3-of o)))))",
      "(a2 / apologize-01\n    :ARG0 (s / supermarket))",
      "(o / offer-01\n   :ARG0 (s / supermarket)\n   :ARG1 (a3 / and\n             :op1 (v / voucher\n                     :mod (m / monetary-quantity\n                             :quant 40\n                             :unit (p / pound)))\n             :op2 (r / refund-01\n                     :ARG0 s\n                     :ARG2 (s2 / she\n                               :ARG3-of o))))",
      "(a2 / apologize-01\n    :ARG0 (s / supermarket))",
      "(o / offer-01\n   :ARG0 (s / supermarket)\n   :ARG1 (a3 / and))",
      "(r / refund-01\n   :ARG0 (s / supermarket)\n   :ARG2 (s2 / she))",
      "(a2 / apologize-01\n    :ARG0 (s / supermarket))",
      "(o / offer-01\n   :ARG0 (s / supermarket))",
      "(o / offer-01\n   :ARG1 (a3 / and))",
      "(r / refund-01\n   :ARG0 (s / supermarket))",
      "(r / refund-01\n   :ARG2 (s2 / she))",
      "(a2 / apologize-01\n    :ARG0 (s / supermarket))",
      "(o / offer-01\n   :ARG0 (s / supermarket)\n   :ARG1 (v / voucher\n            :mod (m / monetary-quantity\n                    :quant 40\n                    :unit (p / pound))\n            :op2 (r / refund-01\n                    :ARG0 s\n                    :ARG2 (s2 / she\n                              :ARG3-of o))))",
      "(a / and\n   :op1 (a2 / apologize-01\n            :ARG0 (s / supermarket))\n   :op2 (o / offer-01\n           :ARG0 s\n           :ARG1 (a3 / and\n                     :op1 (v / voucher\n                             :mod (m / monetary-quantity\n                                     :quant 40\n                                     :unit (p / pound)))\n                     :op2 (r / refund-01\n                             :ARG0 s\n                             :ARG2 (s2 / she\n                                       :ARG3-of o)))))",
      "(a / and\n   :op1 (a2 / apologize-01)\n   :op2 (o / offer-01))"
    ],
    "smus": [
      "Paula Dunican paid.",
      "paid PS25.",
      "paid for the blue baby coat.",
      "Payments were made at Paula Dunican's local branch of Asda.",
      "Paula Dunican",
      "PS25",
      "a baby blue coat",
      "Paula Dunican's local branch of Asda.",
      "Paula Dunican paid.",
      "Local.",
      "Paula Dunican paid.",
      "Paula Dunican paid PS25 for a baby blue coat.",
      "Payed at the branch.",
      "She noticed.",
      "Noticed seeping stain on the back of the coat.",
      "Noticed when she took the coat home.",
      "Seeping stain on the back of the coat.",
      "She took the coat home.",
      "She noticed.",
      "stain.",
      "Seeping.",
      "She took the coat home.",
      "She noticed.",
      "She took.",
      "The coat took.",
      "Taken home.",
      "She noticed a stain of seeping.",
      "Noticed when it took place.",
      "She discovered.",
      "The reptile's body was discovered crushed.",
      "Discovered in the garment lining.",
      "Then discovered.",
      "The reptile's body was crushed.",
      "The lining of the garment",
      "She discovered.",
      "Crushed.",
      "She discovered.",
      "She discovered a reptile's body was crushed.",
      "Then discovered in the garment lining.",
      "And the supermarket has apologized.",
      "And the supermarket offered PS40 vouchers and a refund to her.",
      "The supermarket has apologized.",
      "The supermarket offered a PS40 voucher and a refund to her.",
      "The supermarket has apologized.",
      "The supermarket offered both.",
      "The supermarket gave her a refund.",
      "The supermarket has apologized.",
      "The supermarket offered.",
      "offered and...",
      "The supermarket will give a refund.",
      "She got a refund.",
      "The supermarket has apologized.",
      "The supermarket offered a PS40 voucher with a refund to her.",
      "The supermarket had apologized and offered a PS40 voucher and a refund to her.",
      "Apologyd and offered."
    ]
  },
  {
    "instance_id": "realsumm-20",
    "summary": "<t> Ronnie Carroll placed fourth in the Eurovision contest in 1962 and 1963 . </t> <t> He died in London two days ago , aged 80 , following a battle with cancer . </t> <t> Mr Carroll was running in the General Election for Hampstead and Kilburn . </t> <t> He remains on the paper and he will be elected if he gets enough votes . </t>",
    "summary_trees": [
      "# ::snt  Ronnie Carroll placed fourth in the Eurovision contest in 1962 and 1963 . \n(p / place-01\n      :ARG1 (p2 / person\n            :name (n / name\n                  :op1 \"Ronnie\"\n                  :op2 \"Carroll\"))\n      :ARG2 (f / fourth)\n      :subevent-of (c / contest-02\n            :ARG3 (e / event\n                  :name (n2 / name\n                        :op1 \"Eurovision\")))\n      :time (a / and\n            :op1 (d / date-entity\n                  :year 1962)\n            :op2 (d2 / date-entity\n                  :year 1963)))",
      "# ::snt  He died in London two days ago , aged 80 , following a battle with cancer . \n(d / die-01\n      :ARG1 (h / he\n            :age (t / temporal-quantity\n                  :quant 80\n                  :unit (y / year)))\n      :location (c / city\n            :name (n / name\n                  :op1 \"London\"))\n      :time (b / before\n            :op1 (n2 / now)\n            :quant (t2 / temporal-quantity\n                  :quant 2\n                  :unit (d2 / day)))\n      :ARG1-of (f / follow-01\n            :ARG2 (b2 / battle-01\n                  :ARG0 h\n                  :ARG1 (d3 / disease\n                        :name (n3 / name\n                              :op1 \"cancer\")))))",
      "# ::snt  Mr Carroll was running in the General Election for Hampstead and Kilburn . \n(r / run-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mr\"\n                  :op2 \"Carroll\"))\n      :ARG1 (a / and\n            :op1 (c / city-district\n                  :name (n2 / name\n                        :op1 \"Hampstead\"))\n            :op2 (c2 / city-district\n                  :name (n3 / name\n                        :op1 \"Kilburn\")))\n      :subevent-of (e / elect-01\n            :ARG1-of (g / general-02)))",
      "# ::snt  He remains on the paper and he will be elected if he gets enough votes . \n(a / and\n      :op1 (r / remain-01\n            :ARG1 (h / he)\n            :location (p / paper))\n      :op2 (e / elect-01\n            :ARG1 h\n            :condition (g / get-01\n                  :ARG0 h\n                  :ARG1 (v / vote-01\n                        :ARG1 h\n                        :ARG1-of (h2 / have-quant-91\n                              :ARG3 (e2 / enough))))))"
    ],
    "tree": [
      "(p / place-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Ronnie\"\n                      :op2 \"Carroll\")))",
      "(p / place-01\n   :ARG2 (f / fourth))",
      "(p / place-01\n   :subevent-of (c / contest-02\n                   :ARG3 (e / event\n                            :name (n2 / name\n                                      :op1 \"Eurovision\"))))",
      "(p / place-01\n   :time (a / and\n            :op1 (d / date-entity\n                    :year 1962)\n            :op2 (d2 / date-entity\n                     :year 1963)))",
      "(p2 / person\n    :name (n / name\n             :op1 \"Ronnie\"\n             :op2 \"Carroll\"))",
      "(c / contest-02\n   :ARG3 (e / event\n            :name (n2 / name\n                      :op1 \"Eurovision\")))",
      "(a / and\n   :op1 (d / date-entity\n           :year 1962)\n   :op2 (d2 / date-entity\n            :year 1963))",
      "(p / place-01\n   :ARG1 (p2 / person :name (n / name :op1 \"Ronnie\" :op2 \"Carroll\")))",
      "(c / contest-02\n   :ARG3 (e / event :name (n2 / name :op1 \"Eurovision\")))",
      "(p / place-01\n   :ARG1 (p2 / person :name (n / name :op1 \"Ronnie\" :op2 \"Carroll\")))",
      "(c / contest-02\n   :ARG3 (e / event :name (n2 / name :op1 \"Eurovision\")))",
      "(p / place-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Ronnie\"\n                      :op2 \"Carroll\"))\n   :ARG2 (f / fourth)\n   :subevent-of (c / contest-02\n                   :ARG3 (e / event\n                            :name (n2 / name\n                                      :op1 \"Eurovision\")))\n   :time (d / date-entity\n            :year 1962))",
      "(p / place-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Ronnie\"\n                      :op2 \"Carroll\"))\n   :ARG2 (f / fourth)\n   :subevent-of (c / contest-02\n                   :ARG3 (e / event\n                            :name (n2 / name\n                                      :op1 \"Eurovision\")))\n   :time (d2 / date-entity\n             :year 1963))",
      "(p / place-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Ronnie\"\n                      :op2 \"Carroll\"))\n   :ARG2 (f / fourth)\n   :subevent (c / contest-02\n                :ARG3 (e / event\n                         :name (n2 / name\n                                   :op1 \"Eurovision\"))))",
      "(p / place-01\n   :subevent (c / contest-02)\n   :time (a / and\n            :op1 (d / date-entity\n                    :year 1962)\n            :op2 (d2 / date-entity\n                     :year 1963)))",
      "(d / die-01\n   :ARG1 (h / he\n            :age (t / temporal-quantity\n                    :quant 80\n                    :unit (y / year))))",
      "(d / die-01\n   :location (c / city\n                :name (n / name\n                         :op1 \"London\")))",
      "(d / die-01\n   :time (b / before\n            :op1 (n2 / now)\n            :quant (t2 / temporal-quantity\n                       :quant 2\n                       :unit (d2 / day))))",
      "(d / die-01\n   :ARG1-of (f / follow-01\n               :ARG2 (b2 / battle-01\n                         :ARG0 (h / he)\n                         :ARG1 (d3 / disease\n                                   :name (n3 / name\n                                             :op1 \"cancer\")))))",
      "(h / he\n   :age (t / temporal-quantity\n           :quant 80\n           :unit (y / year)))",
      "(c / city\n   :name (n / name\n            :op1 \"London\"))",
      "(b / before\n   :op1 (n2 / now)\n   :quant (t2 / temporal-quantity\n              :quant 2\n              :unit (d2 / day)))",
      "(f / follow-01\n   :ARG2 (b2 / battle-01\n             :ARG0 (h / he)\n             :ARG1 (d3 / disease\n                       :name (n3 / name\n                                 :op1 \"cancer\"))))",
      "(d / die-01\n   :ARG1 (h / he))",
      "(f / follow-01\n   :ARG2 (b2 / battle-01))",
      "(b2 / battle-01\n    :ARG0 (h / he)\n    :ARG1 (d3 / disease :name (n3 / name :op1 \"cancer\")))",
      "(d / die-01\n   :ARG1 (h / he))",
      "(f / follow-01\n   :ARG2 (b2 / battle-01))",
      "(b2 / battle-01\n    :ARG0 (h / he))",
      "(b2 / battle-01\n    :ARG1 (d3 / disease :name (n3 / name :op1 \"cancer\")))",
      "(d / die-01\n   :ARG1 (h / he\n            :age (t / temporal-quantity\n                    :quant 80\n                    :unit (y / year)))\n   :ARG1 (f / follow-01\n            :ARG2 (b2 / battle-01\n                      :ARG0 h\n                      :ARG1 (d3 / disease\n                                :name (n3 / name\n                                          :op1 \"cancer\")))))",
      "(d / die-01\n   :location (c / city\n                :name (n / name\n                         :op1 \"London\"))\n   :time (b / before\n            :op1 (n2 / now)\n            :quant (t2 / temporal-quantity\n                       :quant 2\n                       :unit (d2 / day))))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carroll\")))",
      "(r / run-02\n   :ARG1 (a / and\n            :op1 (c / city-district\n                    :name (n2 / name\n                              :op1 \"Hampstead\"))\n            :op2 (c2 / city-district\n                     :name (n3 / name\n                               :op1 \"Kilburn\"))))",
      "(r / run-02\n   :subevent-of (e / elect-01\n                   :ARG1-of (g / general-02)))",
      "(p / person\n   :name (n / name\n            :op1 \"Mr\"\n            :op2 \"Carroll\"))",
      "(a / and\n   :op1 (c / city-district\n           :name (n2 / name\n                     :op1 \"Hampstead\"))\n   :op2 (c2 / city-district\n            :name (n3 / name\n                      :op1 \"Kilburn\")))",
      "(e / elect-01\n   :ARG1-of (g / general-02))",
      "(r / run-02\n   :ARG0 (p / person :name (n / name :op1 \"Mr\" :op2 \"Carroll\")))",
      "(e / elect-01)",
      "(g / general-02)",
      "(r / run-02\n   :ARG0 (p / person :name (n / name :op1 \"Mr\" :op2 \"Carroll\")))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carroll\"))\n   :ARG1 (c / city-district\n            :name (n2 / name\n                      :op1 \"Hampstead\")))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carroll\"))\n   :ARG1 (c2 / city-district\n             :name (n3 / name\n                       :op1 \"Kilburn\"))\n   :subevent-of (e / elect-01\n                   :ARG1-of (g / general-02)))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carroll\"))\n   :ARG1 (a / and\n            :op1 (c / city-district\n                    :name (n2 / name\n                              :op1 \"Hampstead\"))\n            :op2 (c2 / city-district\n                     :name (n3 / name\n                               :op1 \"Kilburn\")))\n   :subevent (e / elect-01\n                :ARG1 (g / general-02)))",
      "(r / run-02\n   :subevent (e / elect-01))",
      "(a / and\n   :op1 (r / remain-01\n           :ARG1 (h / he)\n           :location (p / paper)))",
      "(a / and\n   :op2 (e / elect-01\n           :ARG1 (h / he)\n           :condition (g / get-01\n                         :ARG0 h\n                         :ARG1 (v / vote-01\n                                  :ARG1 h\n                                  :ARG1-of (h2 / have-quant-91\n                                               :ARG3 (e2 / enough))))))",
      "(r / remain-01\n   :ARG1 (h / he)\n   :location (p / paper))",
      "(e / elect-01\n   :ARG1 (h / he)\n   :condition (g / get-01\n                 :ARG0 h\n                 :ARG1 (v / vote-01\n                          :ARG1 h\n                          :ARG1-of (h2 / have-quant-91\n                                       :ARG3 (e2 / enough)))))",
      "(r / remain-01\n   :ARG1 (h / he))",
      "(e / elect-01\n   :ARG1 (h / he)\n   :condition (g / get-01))",
      "(g / get-01\n   :ARG0 (h / he)\n   :ARG1 (v / vote-01))",
      "(v / vote-01\n   :ARG1 (h / he))",
      "(r / remain-01\n   :ARG1 (h / he))",
      "(e / elect-01\n   :ARG1 (h / he))",
      "(e / elect-01\n   :condition (g / get-01))",
      "(g / get-01\n   :ARG0 (h / he))",
      "(g / get-01\n   :ARG1 (v / vote-01))",
      "(v / vote-01\n   :ARG1 (h / he))",
      "(r / remain-01\n   :ARG1 (h / he)\n   :location (p / paper))",
      "(e / elect-01\n   :ARG1 (h / he)\n   :condition (g / get-01\n                 :ARG0 h\n                 :ARG1 (v / vote-01\n                          :ARG1 h\n                          :ARG1-of (h2 / have-quant-91\n                                       :ARG3 (e2 / enough)))))",
      "(a / and\n   :op1 (r / remain-01\n           :ARG1 (h / he))\n   :op2 (e / elect-01\n           :ARG1 h\n           :condition (g / get-01\n                         :ARG0 h\n                         :ARG1 (v / vote-01\n                                  :ARG1 h\n                                  :ARG1 (h2 / have-quant-91\n                                            :ARG3 (e2 / enough))))))",
      "(a / and\n   :op1 (r / remain-01\n           :location (p / paper))\n   :op2 (e / elect-01))"
    ],
    "smus": [
      "Placed: Ronnie Carroll",
      "placed fourth.",
      "Placed in the Eurovision contest",
      "Placed in 1962 and 1963.",
      "Ronnie Carroll",
      "The Eurovision contest",
      "1962 and 1963.",
      "Placed: Ronnie Carroll",
      "The Eurovision contest",
      "Placed: Ronnie Carroll",
      "The Eurovision contest",
      "In 1962, Ronnie Carroll placed fourth in the Eurovision contest.",
      "In 1963, Ronnie Carroll placed fourth in the Eurovision contest.",
      "Ronie Carroll placed fourth in the Eurovision contest.",
      "The contest was placed in 1962 and 1963.",
      "He died at age 80.",
      "died in London.",
      "Two days ago, a man died.",
      "Following his battle with cancer, he died.",
      "He's 80.",
      "London",
      "Two days ago.",
      "Following his battle with cancer.",
      "He died.",
      "Following the battle.",
      "He's in battle with cancer.",
      "He died.",
      "Following the battle.",
      "He had a battle.",
      "battle with cancer",
      "He died at the age of 80 following a battle with cancer.",
      "Two days ago, a man died in London.",
      "Mr Carroll is running.",
      "Hampstead and Kilburn are running.",
      "Running in the General Election.",
      "Mr Carroll",
      "Hampstead and Kilburn",
      "General Election",
      "Mr Carroll is running.",
      "Election",
      "In general.",
      "Mr Carroll is running.",
      "Mr Carroll is running for Hampstead.",
      "Mr Carroll is running for Kilburn in the General Election.",
      "In the General Election, Mr Carroll is running for Hampstead and Kilburn.",
      "Running in the Elections",
      "And he remains on paper.",
      "And if he gets enough votes he will be elected.",
      "He remains in the paper.",
      "If he gets enough votes he will be elected.",
      "He remains.",
      "If he gets elected, he will be elected.",
      "He gets votes.",
      "He got votes.",
      "He remains.",
      "He was elected.",
      "If gets elected.",
      "He gets.",
      "gets votes.",
      "He got votes.",
      "He remains in the paper.",
      "If he gets enough votes he will be elected.",
      "He remains and if he gets enough votes he will be elected.",
      "remains on paper and elected."
    ]
  },
  {
    "instance_id": "realsumm-21",
    "summary": "<t> McHenry , 28 , berated single mother Gina Michelle for towing her car . </t> <t> She insulted her looks and social status in footage that went viral . </t> <t> ESPN suspended the sports reporter for a week amid investigation . </t> <t> But despite thousands of calls for her to be fired , she returns this week . </t>",
    "summary_trees": [
      "# ::snt  McHenry , 28 , berated single mother Gina Michelle for towing her car . \n(b / berate-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"McHenry\")\n            :age (t / temporal-quantity\n                  :quant 28\n                  :unit (y / year)))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Gina\"\n                  :op2 \"Michelle\")\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (m / mother\n                        :ARG1-of (s / single-03))))\n      :ARG2 (t2 / tow-01\n            :ARG0 p2\n            :ARG1 (c / car\n                  :poss p)))",
      "# ::snt  She insulted her looks and social status in footage that went viral . \n(ii / insult-01\n      :ARG0 (s / she)\n      :ARG1 (a / and\n            :op1 (l / look-02\n                  :ARG0 s)\n            :op2 (s2 / status\n                  :mod (s3 / social)\n                  :poss s))\n      :medium (f / footage\n            :ARG1-of (g / go-08\n                  :ARG2 (v / viral))))",
      "# ::snt  ESPN suspended the sports reporter for a week amid investigation . \n(s / suspend-01\n      :ARG0 (p / publication\n            :name (n / name\n                  :op1 \"ESPN\"))\n      :ARG1 (p2 / person\n            :ARG0-of (r / report-01\n                  :ARG1 (s2 / sport)))\n      :duration (t / temporal-quantity\n            :quant 1\n            :unit (w / week))\n      :ARG1-of (c / cause-01\n            :ARG0 (ii / investigate-01)))",
      "# ::snt  But despite thousands of calls for her to be fired , she returns this week . \n(h / have-concession-91\n      :ARG1 (r / return-01\n            :ARG1 (s / she)\n            :time (w / week\n                  :mod (t / this)))\n      :ARG2 (c / call-03\n            :ARG1 (f / fire-02\n                  :ARG1 s)\n            :quant (m / multiple\n                  :op1 1000)))"
    ],
    "tree": [
      "(b / berate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McHenry\")\n            :age (t / temporal-quantity\n                    :quant 28\n                    :unit (y / year))))",
      "(b / berate-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Gina\"\n                       :op2 \"Michelle\")\n             :ARG0-of (h / have-rel-role-91\n                         :ARG2 (m / mother\n                                  :ARG1-of (s / single-03)))))",
      "(b / berate-01\n   :ARG2 (t2 / tow-01\n             :ARG0 (p2 / person :name (n2 / name :op1 \"Gina\" :op2 \"Michelle\")))\n             :ARG1 (c / car\n                      :poss (p / person :name (n / name :op1 \"McHenry\"))))))",
      "(p / person\n   :name (n / name\n            :op1 \"McHenry\")\n   :age (t / temporal-quantity\n           :quant 28\n           :unit (y / year)))",
      "(p2 / person\n    :name (n2 / name\n              :op1 \"Gina\"\n              :op2 \"Michelle\")\n    :ARG0-of (h / have-rel-role-91\n                :ARG2 (m / mother\n                         :ARG1-of (s / single-03))))",
      "(t2 / tow-01\n    :ARG0 (p2 / person :name (n2 / name :op1 \"Gina\" :op2 \"Michelle\")))\n    :ARG1 (c / car\n             :poss (p / person :name (n / name :op1 \"McHenry\")))))",
      "(b / berate-01\n   :ARG0 (p / person :name (n / name :op1 \"McHenry\"))))",
      "(s / single-03)",
      "(t2 / tow-01\n    :ARG0 (p2 / person :name (n2 / name :op1 \"Gina\" :op2 \"Michelle\")))\n    :ARG1 (c / car))",
      "(b / berate-01\n   :ARG0 (p / person :name (n / name :op1 \"McHenry\"))))",
      "(t2 / tow-01\n    :ARG0 (p2 / person :name (n2 / name :op1 \"Gina\" :op2 \"Michelle\"))))",
      "(t2 / tow-01\n    :ARG1 (c / car))",
      "(b / berate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McHenry\")\n            :age (t / temporal-quantity\n                    :quant 28\n                    :unit (y / year)))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Gina\"\n                       :op2 \"Michelle\")\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (m / mother\n                               :ARG1 (s / single-03))))\n   :ARG2 (t2 / tow-01\n             :ARG0 p2\n             :ARG1 (c / car\n                      :poss p)))",
      "(b / berate-01)",
      "(ii / insult-01\n    :ARG0 (s / she))",
      "(ii / insult-01\n    :ARG1 (a / and\n             :op1 (l / look-02\n                     :ARG0 (s / she))\n             :op2 (s2 / status\n                      :mod (s3 / social)\n                      :poss s)))",
      "(ii / insult-01\n    :medium (f / footage\n               :ARG1-of (g / go-08\n                           :ARG2 (v / viral))))",
      "(a / and\n   :op1 (l / look-02\n           :ARG0 (s / she))\n   :op2 (s2 / status\n            :mod (s3 / social)\n            :poss s))",
      "(f / footage\n   :ARG1-of (g / go-08\n               :ARG2 (v / viral)))",
      "(ii / insult-01\n    :ARG0 (s / she))",
      "(l / look-02\n   :ARG0 (s / she))",
      "(g / go-08\n   :ARG2 (v / viral))",
      "(ii / insult-01\n    :ARG0 (s / she))",
      "(l / look-02\n   :ARG0 (s / she))",
      "(g / go-08\n   :ARG2 (v / viral))",
      "(ii / insult-01\n    :ARG0 (s / she)\n    :ARG1 (l / look-02\n             :ARG0 s)\n    :medium (f / footage\n               :ARG1-of (g / go-08\n                           :ARG2 (v / viral))))",
      "(ii / insult-01\n    :ARG0 (s / she)\n    :ARG1 (s2 / status\n              :mod (s3 / social)\n              :poss s)\n    :medium (f / footage\n               :ARG1-of (g / go-08\n                           :ARG2 (v / viral)))\n    :medium f)",
      "(ii / insult-01\n    :ARG0 (s / she)\n    :ARG1 (a / and\n             :op1 (l / look-02\n                     :ARG0 s)\n             :op2 (s2 / status\n                      :mod (s3 / social)\n                      :poss s))\n    :medium (f / footage\n               :ARG1 (g / go-08\n                        :ARG2 (v / viral))))",
      "(ii / insult-01\n    :medium (f / footage))",
      "(s / suspend-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"ESPN\")))",
      "(s / suspend-01\n   :ARG1 (p2 / person\n             :ARG0-of (r / report-01\n                         :ARG1 (s2 / sport))))",
      "(s / suspend-01\n   :duration (t / temporal-quantity\n                :quant 1\n                :unit (w / week)))",
      "(s / suspend-01\n   :ARG1-of (c / cause-01\n               :ARG0 (ii / investigate-01)))",
      "(p / publication\n   :name (n / name\n            :op1 \"ESPN\"))",
      "(p2 / person\n    :ARG0-of (r / report-01\n                :ARG1 (s2 / sport)))",
      "(t / temporal-quantity\n   :quant 1\n   :unit (w / week))",
      "(c / cause-01\n   :ARG0 (ii / investigate-01))",
      "(s / suspend-01\n   :ARG0 (p / publication :name (n / name :op1 \"ESPN\")))",
      "(r / report-01\n   :ARG1 (s2 / sport))",
      "(c / cause-01\n   :ARG0 (ii / investigate-01))",
      "(ii / investigate-01)",
      "(s / suspend-01\n   :ARG0 (p / publication :name (n / name :op1 \"ESPN\")))",
      "(r / report-01\n   :ARG1 (s2 / sport))",
      "(c / cause-01\n   :ARG0 (ii / investigate-01))",
      "(s / suspend-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"ESPN\"))\n   :ARG1 (p2 / person\n             :ARG0 (r / report-01\n                      :ARG1 (s2 / sport)))\n   :duration (t / temporal-quantity\n                :quant 1\n                :unit (w / week))\n   :ARG1 (c / cause-01\n            :ARG0 (ii / investigate-01)))",
      "(s / suspend-01\n   :duration (t / temporal-quantity\n                :quant 1\n                :unit (w / week)))",
      "(h / have-concession-91\n   :ARG1 (r / return-01\n            :ARG1 (s / she)\n            :time (w / week\n                     :mod (t / this))))",
      "(h / have-concession-91\n   :ARG2 (c / call-03\n            :ARG1 (f / fire-02\n                     :ARG1 (s / she))\n            :quant (m / multiple\n                      :op1 1000)))",
      "(r / return-01\n   :ARG1 (s / she)\n   :time (w / week\n            :mod (t / this)))",
      "(c / call-03\n   :ARG1 (f / fire-02\n            :ARG1 (s / she))\n   :quant (m / multiple\n             :op1 1000))",
      "(r / return-01\n   :ARG1 (s / she))",
      "(c / call-03\n   :ARG1 (f / fire-02))",
      "(f / fire-02\n   :ARG1 (s / she))",
      "(r / return-01\n   :ARG1 (s / she))",
      "(c / call-03\n   :ARG1 (f / fire-02))",
      "(f / fire-02\n   :ARG1 (s / she))",
      "(h / have-concession-91\n   :ARG1 (r / return-01\n            :ARG1 (s / she))\n   :ARG2 (c / call-03\n            :ARG1 (f / fire-02\n                     :ARG1 s)\n            :quant (m / multiple\n                      :op1 1000)))",
      "(h / have-concession-91)"
    ],
    "smus": [
      "McHenry, 28, berated.",
      "Single mother Gina Michelle was berated.",
      "Berated Gina Michelle for towing McHenry's car.",
      "McHenry, 28,",
      "Gina Michelle, a single mother",
      "Gina Michelle towing McHenry's car.",
      "McHenry berated.",
      "Single.",
      "Gina Michele towed the car.",
      "McHenry berated.",
      "Gina Michelle was towed.",
      "Towing the car.",
      "McHenry, 28, berated single mother Gina Michelle for towing her car.",
      "Berated.",
      "She insulted.",
      "She was insulted for her looks and her social status.",
      "The footage that went viral insulted.",
      "She has looks and her social status.",
      "The footage went viral.",
      "She insulted.",
      "She looks.",
      "went viral.",
      "She insulted.",
      "She looks.",
      "went viral.",
      "She insulted her looks in the footage that went viral.",
      "In the footage that went viral, she insulted her social status.",
      "In the footage that went viral, she insulted her looks and social status.",
      "The footage insulted.",
      "ESPN suspended.",
      "Sports reporter suspended.",
      "The suspension was for a week.",
      "Suspended because of investigation.",
      "ESPN",
      "Sports reporter",
      "a week",
      "So there is an investigation.",
      "ESPN suspended.",
      "Sports report.",
      "So there is an investigation.",
      "Investigation.",
      "ESPN suspended.",
      "Sports report.",
      "So there is an investigation.",
      "ESPN suspended a sports reporter for a week over the investigation.",
      "The suspension was for a week.",
      "She returns this week though.",
      "Thousands of calls have been made to have her fired though.",
      "She returns this week.",
      "She has received thousands of calls to be fired.",
      "She returns.",
      "Calls for Fire.",
      "She was fired.",
      "She returns.",
      "Calls for Fire.",
      "She was fired.",
      "She returns to thousands of calls to be fired though.",
      "but..."
    ]
  },
  {
    "instance_id": "realsumm-22",
    "summary": "<t> Chloe Owens , 27 , from Swanley , designed new app Bump 2 Breast . </t> <t> Came up with idea when pregnant with daughter , Lola , now three months . </t> <t> Says her and husband David felt like ' rabbits in headlights ' at first . </t> <t> Also struggled to remember which boob to use when breastfeeding . </t>",
    "summary_trees": [
      "# ::snt  Chloe Owens , 27 , from Swanley , designed new app Bump 2 Breast . \n(d / design-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Chloe\"\n                  :op2 \"Owens\")\n            :age (t / temporal-quantity\n                  :quant 27\n                  :unit (y / year))\n            :source (c / city\n                  :name (n2 / name\n                        :op1 \"Swanley\")))\n      :ARG1 (a / app\n            :name (n3 / name\n                  :op1 \"Bump\"\n                  :op2 2\n                  :op3 \"Breast\")\n            :ARG1-of (n4 / new-01)))",
      "# ::snt  Came up with idea when pregnant with daughter , Lola , now three months . \n(c / come-up-11\n      :ARG1 (ii / idea)\n      :time (ii2 / impregnate-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Lola\")\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG2 (d / daughter))\n                  :age (t / temporal-quantity\n                        :quant 3\n                        :unit (m / month)\n                        :time (n2 / now)))))",
      "# ::snt  Says her and husband David felt like ' rabbits in headlights ' at first . \n(s / say-01\n      :ARG1 (f / feel-01\n            :ARG0 (a / and\n                  :op1 (s2 / she)\n                  :op2 (p / person\n                        :name (n / name\n                              :op1 \"David\")\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 s2\n                              :ARG2 (h2 / husband))))\n            :ARG1 (r / resemble-01\n                  :ARG1 a\n                  :ARG2 (b / bunny\n                        :location (h3 / head\n                              :part-of (h4 / headlights))))\n            :time (a2 / at-first)))",
      "# ::snt  Also struggled to remember which boob to use when breastfeeding . \n(s / struggle-02\n      :ARG0 (ii / i)\n      :ARG1 (r / remember-01\n            :ARG0 ii\n            :ARG1 (b / boob\n                  :ARG1-of (u / use-01\n                        :ARG0 ii\n                        :time (b2 / breastfeed-01\n                              :ARG0 ii))))\n      :mod (a / also))"
    ],
    "tree": [
      "(d / design-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chloe\"\n                     :op2 \"Owens\")\n            :age (t / temporal-quantity\n                    :quant 27\n                    :unit (y / year))\n            :source (c / city\n                       :name (n2 / name\n                                 :op1 \"Swanley\"))))",
      "(d / design-01\n   :ARG1 (a / app\n            :name (n3 / name\n                      :op1 \"Bump\"\n                      :op2 2\n                      :op3 \"Breast\")\n            :ARG1-of (n4 / new-01)))",
      "(p / person\n   :name (n / name\n            :op1 \"Chloe\"\n            :op2 \"Owens\")\n   :age (t / temporal-quantity\n           :quant 27\n           :unit (y / year))\n   :source (c / city\n              :name (n2 / name\n                        :op1 \"Swanley\")))",
      "(a / app\n   :name (n3 / name\n             :op1 \"Bump\"\n             :op2 2\n             :op3 \"Breast\")\n   :ARG1-of (n4 / new-01))",
      "(d / design-01\n   :ARG0 (p / person :name (n / name :op1 \"Chloe\" :op2 \"Owens\"))))",
      "(n4 / new-01)",
      "(d / design-01\n   :ARG0 (p / person :name (n / name :op1 \"Chloe\" :op2 \"Owens\"))))",
      "(d / design-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chloe\"\n                     :op2 \"Owens\")\n            :age (t / temporal-quantity\n                    :quant 27\n                    :unit (y / year)))\n   :ARG1 (a / app\n            :name (n3 / name\n                      :op1 \"Bump\"\n                      :op2 2\n                      :op3 \"Breast\")\n            :ARG1 (n4 / new-01)))",
      "(d / design-01)",
      "(c / come-up-11\n   :ARG1 (ii / idea))",
      "(c / come-up-11\n   :time (ii2 / impregnate-01\n              :ARG1 (p / person\n                       :name (n / name\n                                :op1 \"Lola\")\n                       :ARG0-of (h / have-rel-role-91\n                                   :ARG2 (d / daughter))\n                       :age (t / temporal-quantity\n                               :quant 3\n                               :unit (m / month)\n                               :time (n2 / now)))))",
      "(ii2 / impregnate-01\n     :ARG1 (p / person\n              :name (n / name\n                       :op1 \"Lola\")\n              :ARG0-of (h / have-rel-role-91\n                          :ARG2 (d / daughter))\n              :age (t / temporal-quantity\n                      :quant 3\n                      :unit (m / month)\n                      :time (n2 / now))))",
      "(ii2 / impregnate-01\n     :ARG1 (p / person :name (n / name :op1 \"Lola\"))))",
      "(ii2 / impregnate-01\n     :ARG1 (p / person :name (n / name :op1 \"Lola\"))))",
      "(c / come-up-11\n   :ARG1 (ii / idea))",
      "(c / come-up-11\n   :time (ii2 / impregnate-01))",
      "(s / say-01\n   :ARG1 (f / feel-01\n            :ARG0 (a / and\n                     :op1 (s2 / she)\n                     :op2 (p / person\n                             :name (n / name\n                                      :op1 \"David\")\n                             :ARG0-of (h / have-rel-role-91\n                                         :ARG1 s2\n                                         :ARG2 (h2 / husband))))\n            :ARG1 (r / resemble-01\n                     :ARG1 a\n                     :ARG2 (b / bunny\n                              :location (h3 / head\n                                            :part-of (h4 / headlights))))\n            :time (a2 / at-first)))",
      "(f / feel-01\n   :ARG0 (a / and\n            :op1 (s2 / she)\n            :op2 (p / person\n                    :name (n / name\n                             :op1 \"David\")\n                    :ARG0-of (h / have-rel-role-91\n                                :ARG1 s2\n                                :ARG2 (h2 / husband))))\n   :ARG1 (r / resemble-01\n            :ARG1 a\n            :ARG2 (b / bunny\n                     :location (h3 / head\n                                   :part-of (h4 / headlights))))\n   :time (a2 / at-first))",
      "(s / say-01\n   :ARG1 (f / feel-01))",
      "(f / feel-01\n   :ARG0 (a / and))",
      "(r / resemble-01\n   :ARG1 (a / and)\n   :ARG2 (b / bunny))",
      "(s / say-01\n   :ARG1 (f / feel-01))",
      "(f / feel-01\n   :ARG0 (a / and))",
      "(r / resemble-01\n   :ARG1 (a / and))",
      "(r / resemble-01\n   :ARG2 (b / bunny))",
      "(s / say-01\n   :ARG1 (f / feel-01\n            :ARG0 (s2 / she)\n            :ARG1 (r / resemble-01\n                     :ARG1 s2\n                     :ARG2 (b / bunny\n                              :location (h3 / head\n                                            :part-of (h4 / headlights))))\n            :time (a2 / at-first)))",
      "(s / say-01\n   :ARG1 (f / feel-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"David\")\n                     :ARG0-of (h / have-rel-role-91\n                                 :ARG1 (s2 / she)\n                                 :ARG2 (h2 / husband)))\n            :ARG1 (r / resemble-01\n                     :ARG1 p\n                     :ARG2 (b / bunny\n                              :location (h3 / head\n                                            :part-of (h4 / headlights))))\n            :ARG1 r\n            :time (a2 / at-first)))",
      "(s / say-01\n   :ARG1 (f / feel-01\n            :ARG0 (a / and\n                     :op1 (s2 / she)\n                     :op2 (p / person\n                             :name (n / name\n                                      :op1 \"David\")\n                             :ARG0 (h / have-rel-role-91\n                                      :ARG1 s2\n                                      :ARG2 (h2 / husband))))\n            :ARG1 (r / resemble-01\n                     :ARG1 a\n                     :ARG2 (b / bunny))))",
      "(s / say-01)",
      "(s / struggle-02\n   :ARG0 (ii / i))",
      "(s / struggle-02\n   :ARG1 (r / remember-01\n            :ARG0 (ii / i)\n            :ARG1 (b / boob\n                     :ARG1-of (u / use-01\n                                 :ARG0 ii\n                                 :time (b2 / breastfeed-01\n                                           :ARG0 ii)))))",
      "(s / struggle-02\n   :mod (a / also))",
      "(r / remember-01\n   :ARG0 (ii / i)\n   :ARG1 (b / boob\n            :ARG1-of (u / use-01\n                        :ARG0 ii\n                        :time (b2 / breastfeed-01\n                                  :ARG0 ii))))",
      "(s / struggle-02\n   :ARG0 (ii / i))",
      "(r / remember-01\n   :ARG0 (ii / i)\n   :ARG1 (b / boob))",
      "(u / use-01\n   :ARG0 (ii / i)\n   :time (b2 / breastfeed-01))",
      "(b2 / breastfeed-01\n    :ARG0 (ii / i))",
      "(s / struggle-02\n   :ARG0 (ii / i))",
      "(r / remember-01\n   :ARG0 (ii / i))",
      "(r / remember-01\n   :ARG1 (b / boob))",
      "(u / use-01\n   :ARG0 (ii / i))",
      "(u / use-01\n   :time (b2 / breastfeed-01))",
      "(b2 / breastfeed-01\n    :ARG0 (ii / i))",
      "(s / struggle-02\n   :ARG0 (ii / i)\n   :ARG1 (r / remember-01\n            :ARG0 ii\n            :ARG1 (b / boob\n                     :ARG1 (u / use-01\n                              :ARG0 ii)))\n   :mod (a / also))",
      "(s / struggle-02\n   :mod (a / also))"
    ],
    "smus": [
      "Chelsea Owens, 2, of Swanley, designed.",
      "The new bump 2 breast app was designed.",
      "Chelsea Owens, 2, of Swanley",
      "New bump 2 breast app",
      "Designed by Holly Owens.",
      "New.",
      "Designed by Holly Owens.",
      "Holly Owens, 2, designed the new bump 2 breast app.",
      "designed.",
      "The idea came up.",
      "It came up when Lola, now three months old, was pregnant.",
      "Lola is pregnant, now 3 months old.",
      "Lola is pregnant.",
      "Lola is pregnant.",
      "The idea came up.",
      "came up during pregnancy.",
      "She and her husband, David, felt like bunnies on headslights at first, she says.",
      "At first she and her husband, David, felt like bunnies on headslights.",
      "Feels like...",
      "They felt.",
      "Like bunnies and...",
      "Feels like...",
      "They felt.",
      "Like and.",
      "like bunnies.",
      "She says she felt like a bunny on the headlights at first.",
      "\"Her husband, David, felt like a bunny in the headlights at first,\" she says.",
      "She and her husband, David, felt like bunnies, she says.",
      "says.",
      "I struggled.",
      "I struggled to remember the boob I used to use when breast feeding.",
      "Also struggled.",
      "I do remember the boob I used to use when I was breast feeding.",
      "I struggled.",
      "I do remember the boob.",
      "I use when breast feeding.",
      "I'm breast feeding.",
      "I struggled.",
      "I do remember.",
      "Remember the boob.",
      "I'll use.",
      "Use when breastfeeding.",
      "I'm breast feeding.",
      "I also struggled to remember the boob to use.",
      "Also struggled."
    ]
  },
  {
    "instance_id": "realsumm-23",
    "summary": "<t> Harley Street is a top destination for private cosmetic surgery . </t> <t> Patients pay thousands for treatments they hope will change their lives . </t> <t> Michael , 33 , spent \u00a3 7,500 on a hair transplant to boost his self - esteem . </t> <t> Andrea , 72 , pays for a facelift - but her husband ca n't tell the difference . </t>",
    "summary_trees": [
      "# ::snt  Harley Street is a top destination for private cosmetic surgery . \n(d / destination\n      :mod (t / top)\n      :domain (s / street\n            :name (n / name\n                  :op1 \"Harley\"\n                  :op2 \"Street\"))\n      :purpose (s2 / surgery-01\n            :ARG2 (c / cosmetic)\n            :ARG1-of (p / private-03)))",
      "# ::snt  Patients pay thousands for treatments they hope will change their lives . \n(p / pay-01\n      :ARG0 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (p3 / patient)))\n      :ARG1 (m / multiple\n            :op1 (m2 / monetary-quantity\n                  :quant 1000\n                  :unit (d / dollar)))\n      :ARG3 (t / treat-03\n            :ARG1 p2\n            :ARG0-of (c / change-01\n                  :ARG1 (l / life\n                        :poss p2)\n                  :ARG1-of (h2 / hope-01\n                        :ARG0 p2))))",
      "# ::snt  Michael , 33 , spent \u00a3 7,500 on a hair transplant to boost his self - esteem . \n(s / spend-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Michael\")\n            :age (t / temporal-quantity\n                  :quant 33\n                  :unit (y / year)))\n      :ARG1 (t2 / transplant-01\n            :ARG1 (h / hair)\n            :ARG2 p)\n      :ARG3 (m / monetary-quantity\n            :quant 7000\n            :unit (p2 / pound))\n      :purpose (b / boost-01\n            :ARG0 p\n            :ARG1 (e / esteem-01\n                  :ARG0 p\n                  :ARG1 p)))",
      "# ::snt  Andrea , 72 , pays for a facelift - but her husband ca n't tell the difference . \n(c / contrast-01\n      :ARG1 (p / pay-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Andrea\")\n                  :age (t / temporal-quantity\n                        :quant 72\n                        :unit (y / year)))\n            :ARG3 (f / facelift))\n      :ARG2 (p3 / possible-01\n            :polarity -\n            :ARG1 (k / know-04\n                  :ARG0 (p4 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 p2\n                              :ARG2 (h2 / husband)))\n                  :ARG1 (t2 / thing\n                        :ARG1-of (d / differ-02)))))"
    ],
    "tree": [
      "(d / destination\n   :mod (t / top))",
      "(d / destination\n   :domain (s / street\n              :name (n / name\n                       :op1 \"Harley\"\n                       :op2 \"Street\")))",
      "(d / destination\n   :purpose (s2 / surgery-01\n                :ARG2 (c / cosmetic)\n                :ARG1-of (p / private-03)))",
      "(s / street\n   :name (n / name\n            :op1 \"Harley\"\n            :op2 \"Street\"))",
      "(s2 / surgery-01\n    :ARG2 (c / cosmetic)\n    :ARG1-of (p / private-03))",
      "(s2 / surgery-01\n    :ARG2 (c / cosmetic))",
      "(p / private-03)",
      "(s2 / surgery-01\n    :ARG2 (c / cosmetic))",
      "(d / destination\n   :mod (t / top)\n   :domain (s / street\n              :name (n / name\n                       :op1 \"Harley\"\n                       :op2 \"Street\")))",
      "(d / destination\n   :mod (t / top)\n   :domain (s / street\n              :name (n / name\n                       :op1 \"Harley\"\n                       :op2 \"Street\"))\n   :purpose (s2 / surgery-01))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0-of (h / have-rel-role-91\n                         :ARG2 (p3 / patient))))",
      "(p / pay-01\n   :ARG1 (m / multiple\n            :op1 (m2 / monetary-quantity\n                     :quant 1000\n                     :unit (d / dollar))))",
      "(p / pay-01\n   :ARG3 (t / treat-03\n            :ARG1 (p2 / person)\n            :ARG0-of (c / change-01\n                        :ARG1 (l / life\n                                 :poss p2)\n                        :ARG1-of (h2 / hope-01\n                                     :ARG0 p2))))",
      "(p2 / person\n    :ARG0-of (h / have-rel-role-91\n                :ARG2 (p3 / patient)))",
      "(m / multiple\n   :op1 (m2 / monetary-quantity\n            :quant 1000\n            :unit (d / dollar)))",
      "(t / treat-03\n   :ARG1 (p2 / person)\n   :ARG0-of (c / change-01\n               :ARG1 (l / life\n                        :poss p2)\n               :ARG1-of (h2 / hope-01\n                            :ARG0 p2)))",
      "(p / pay-01\n   :ARG0 (p2 / person))",
      "(t / treat-03\n   :ARG1 (p2 / person))",
      "(c / change-01\n   :ARG1 (l / life))",
      "(h2 / hope-01\n    :ARG0 (p2 / person))",
      "(p / pay-01\n   :ARG0 (p2 / person))",
      "(t / treat-03\n   :ARG1 (p2 / person))",
      "(c / change-01\n   :ARG1 (l / life))",
      "(h2 / hope-01\n    :ARG0 (p2 / person))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (p3 / patient)))\n   :ARG1 (m / multiple\n            :op1 (m2 / monetary-quantity\n                     :quant 1000\n                     :unit (d / dollar)))\n   :ARG3 (t / treat-03\n            :ARG1 p2\n            :ARG0 (c / change-01\n                     :ARG1 (l / life\n                              :poss p2)\n                     :ARG1 (h2 / hope-01\n                               :ARG0 p2))))",
      "(p / pay-01)",
      "(s / spend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\")\n            :age (t / temporal-quantity\n                    :quant 33\n                    :unit (y / year))))",
      "(s / spend-01\n   :ARG1 (t2 / transplant-01\n             :ARG1 (h / hair)\n             :ARG2 (p / person :name (n / name :op1 \"Michael\")))))",
      "(s / spend-01\n   :ARG3 (m / monetary-quantity\n            :quant 7000\n            :unit (p2 / pound)))",
      "(s / spend-01\n   :purpose (b / boost-01\n               :ARG0 (p / person :name (n / name :op1 \"Michael\")))\n               :ARG1 (e / esteem-01\n                        :ARG0 p\n                        :ARG1 p)))",
      "(p / person\n   :name (n / name\n            :op1 \"Michael\")\n   :age (t / temporal-quantity\n           :quant 33\n           :unit (y / year)))",
      "(t2 / transplant-01\n    :ARG1 (h / hair)\n    :ARG2 (p / person :name (n / name :op1 \"Michael\"))))",
      "(m / monetary-quantity\n   :quant 7000\n   :unit (p2 / pound))",
      "(b / boost-01\n   :ARG0 (p / person :name (n / name :op1 \"Michael\")))\n   :ARG1 (e / esteem-01\n            :ARG0 p\n            :ARG1 p))",
      "(s / spend-01\n   :ARG0 (p / person :name (n / name :op1 \"Michael\"))))",
      "(t2 / transplant-01\n    :ARG1 (h / hair))",
      "(b / boost-01\n   :ARG0 (p / person :name (n / name :op1 \"Michael\")))\n   :ARG1 (e / esteem-01))",
      "(e / esteem-01\n   :ARG0 (p / person :name (n / name :op1 \"Michael\")))\n   :ARG1 p)",
      "(s / spend-01\n   :ARG0 (p / person :name (n / name :op1 \"Michael\"))))",
      "(t2 / transplant-01\n    :ARG1 (h / hair))",
      "(b / boost-01\n   :ARG0 (p / person :name (n / name :op1 \"Michael\"))))",
      "(b / boost-01\n   :ARG1 (e / esteem-01))",
      "(e / esteem-01\n   :ARG0 (p / person :name (n / name :op1 \"Michael\"))))",
      "(e / esteem-01\n   :ARG1 (p / person :name (n / name :op1 \"Michael\"))))",
      "(s / spend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\")\n            :age (t / temporal-quantity\n                    :quant 33\n                    :unit (y / year)))\n   :ARG1 (t2 / transplant-01\n             :ARG1 (h / hair)\n             :ARG2 p)\n   :ARG3 (m / monetary-quantity\n            :quant 7000\n            :unit (p2 / pound)))",
      "(s / spend-01\n   :purpose (b / boost-01))",
      "(c / contrast-01\n   :ARG1 (p / pay-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Andrea\")\n                      :age (t / temporal-quantity\n                              :quant 72\n                              :unit (y / year)))\n            :ARG3 (f / facelift)))",
      "(c / contrast-01\n   :ARG2 (p3 / possible-01\n             :polarity -\n             :ARG1 (k / know-04\n                      :ARG0 (p4 / person\n                                :ARG0-of (h / have-rel-role-91\n                                            :ARG1 (p2 / person :name (n / name :op1 \"Andrea\")))\n                                            :ARG2 (h2 / husband)))\n                      :ARG1 (t2 / thing\n                                :ARG1-of (d / differ-02)))))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Andrea\")\n             :age (t / temporal-quantity\n                     :quant 72\n                     :unit (y / year)))\n   :ARG3 (f / facelift))",
      "(p3 / possible-01\n    :polarity -\n    :ARG1 (k / know-04\n             :ARG0 (p4 / person\n                       :ARG0-of (h / have-rel-role-91\n                                   :ARG1 (p2 / person :name (n / name :op1 \"Andrea\")))\n                                   :ARG2 (h2 / husband)))\n             :ARG1 (t2 / thing\n                       :ARG1-of (d / differ-02))))",
      "(c / contrast-01\n   :ARG1 (p / pay-01))",
      "(p / pay-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Andrea\"))))",
      "(p3 / possible-01\n    :polarity -\n    :ARG1 (k / know-04))",
      "(k / know-04\n   :ARG0 (p4 / person))",
      "(d / differ-02)",
      "(c / contrast-01\n   :ARG1 (p / pay-01))",
      "(p / pay-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Andrea\"))))",
      "(p3 / possible-01\n    :polarity -)",
      "(p3 / possible-01\n    :ARG1 (k / know-04))",
      "(k / know-04\n   :ARG0 (p4 / person))",
      "(c / contrast-01\n   :ARG1 (p / pay-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Andrea\")\n                      :age (t / temporal-quantity\n                              :quant 72\n                              :unit (y / year)))\n            :ARG3 (f / facelift))\n   :ARG2 (p3 / possible-01\n             :polarity -\n             :ARG1 (k / know-04\n                      :ARG0 (p4 / person\n                                :ARG0 (h / have-rel-role-91\n                                         :ARG1 p2\n                                         :ARG2 (h2 / husband)))\n                      :ARG1 (t2 / thing\n                                :ARG1 (d / differ-02)))))",
      "(c / contrast-01)"
    ],
    "smus": [
      "top destination",
      "Harley Street is a destination.",
      "The destination for private cosmetic surgery.",
      "HARLEY STEET",
      "Private cosmetic surgery.",
      "Cosmetic surgery",
      "Private.",
      "Cosmetic surgery",
      "Harley Street is the top destination.",
      "Harley Street is the top surgical destination.",
      "Patients pay.",
      "pay thousands.",
      "Pay for people's treatments they hope to change their lives.",
      "Patients.",
      "Thousands.",
      "People are given treatments that they hope will change their lives.",
      "People pay.",
      "Treatments for people.",
      "Change lives.",
      "People hope.",
      "People pay.",
      "Treatments for people.",
      "Change lives.",
      "People hope.",
      "Patients pay thousands for treatments that will change their lives as they hope to.",
      "pay.",
      "Michael, 33, spent.",
      "spent on a hair transplant for Michael.",
      "spent PS7,000.",
      "Michael spent to boost his self-esteem.",
      "Michael, 33.",
      "Michael had a hair transplant.",
      "PS7000",
      "Michael will boost his self esteem.",
      "Michael spent.",
      "Hair transplant.",
      "Michael will boost self esteem.",
      "Michael has a high esteem for himself.",
      "Michael spent.",
      "Hair transplant.",
      "Michael will boost.",
      "boost self esteem",
      "Michael has a high esteem.",
      "Michael has a high esteem.",
      "Michael, 33, spent PS7,000 on a hair transplant.",
      "Spent to boost.",
      "But 72-year-old Andrea pays for a facelift.",
      "But Andrea's husband couldn't tell the difference.",
      "Andrea, 72, pays for a facelift.",
      "Andrea's husband couldn't tell the difference.",
      "But it pays.",
      "Andrea pays.",
      "Unknowable.",
      "People know.",
      "Different.",
      "But it pays.",
      "Andrea pays.",
      "Possibly not.",
      "Maybe.",
      "People know.",
      "Andrea, 72, pays for a facelift but her husband can't tell the difference.",
      "But..."
    ]
  },
  {
    "instance_id": "realsumm-24",
    "summary": "<t> General Motors unveiled their concept car at an event in Shanghai . </t> <t> Chevrolet - FNR has ' dragonfly ' swing doors and ' crystal laser headlights ' It is self - driving , electric , and the front chairs can swivel round . </t> <t> And using iris recognition software you can start it using just your eyes . </t>",
    "summary_trees": [
      "# ::snt  General Motors unveiled their concept car at an event in Shanghai . \n(u / unveil-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"General\"\n                  :op2 \"Motors\"))\n      :ARG1 (c2 / car\n            :mod (c3 / concept)\n            :poss c)\n      :time (e / event\n            :location (c4 / city\n                  :name (n2 / name\n                        :op1 \"Shanghai\"))))",
      "# ::snt  Chevrolet - FNR has ' dragonfly ' swing doors and ' crystal laser headlights ' It is self - driving , electric , and the front chairs can swivel round . \n(m / multi-sentence\n      :snt1 (h / have-03\n            :ARG0 (c / car-make\n                  :name (n / name\n                        :op1 \"Chevrolet\"\n                        :op2 \"FNR\"))\n            :ARG1 (a / and\n                  :op1 (d / door\n                        :mod (s / swing)\n                        :mod (d2 / dragonfly))\n                  :op2 (h2 / headlight\n                        :mod (l / laser\n                              :mod (c2 / crystal)))))\n      :snt2 (a2 / and\n            :op1 (d3 / drive-01\n                  :ARG0 (s2 / self)\n                  :ARG1 (ii / it))\n            :op2 (e / electric\n                  :domain ii)\n            :op3 (p / possible-01\n                  :ARG1 (s3 / swivel-01\n                        :ARG1 (c3 / chair\n                              :mod (f / front))\n                        :direction (r / round)))))",
      "# ::snt  And using iris recognition software you can start it using just your eyes . \n(m / multi-sentence\n      :snt1 (a / and\n            :op2 (p / possible-01\n                  :ARG1 (s / start-01\n                        :ARG0 (y / you)\n                        :ARG1 (ii / it)\n                        :manner (u / use-01\n                              :ARG0 y\n                              :ARG1 (e / eye\n                                    :mod (j / just)\n                                    :part-of (y2 / you))))\n                  :manner (u2 / use-01\n                        :ARG0 y\n                        :ARG1 (s2 / software\n                              :ARG0-of (r / recognize-02\n                                    :ARG1 (ii2 / iris)))))))"
    ],
    "tree": [
      "(u / unveil-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"General\"\n                     :op2 \"Motors\")))",
      "(u / unveil-01\n   :ARG1 (c2 / car\n             :mod (c3 / concept)\n             :poss (c / company :name (n / name :op1 \"General\" :op2 \"Motors\"))))",
      "(u / unveil-01\n   :time (e / event\n            :location (c4 / city\n                          :name (n2 / name\n                                    :op1 \"Shanghai\"))))",
      "(c / company\n   :name (n / name\n            :op1 \"General\"\n            :op2 \"Motors\"))",
      "(c2 / car\n    :mod (c3 / concept)\n    :poss (c / company :name (n / name :op1 \"General\" :op2 \"Motors\")))",
      "(e / event\n   :location (c4 / city\n                 :name (n2 / name\n                           :op1 \"Shanghai\")))",
      "(u / unveil-01\n   :ARG0 (c / company :name (n / name :op1 \"General\" :op2 \"Motors\")))",
      "(u / unveil-01\n   :ARG0 (c / company :name (n / name :op1 \"General\" :op2 \"Motors\")))",
      "(u / unveil-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"General\"\n                     :op2 \"Motors\"))\n   :ARG1 (c2 / car\n             :mod (c3 / concept)\n             :poss c))",
      "(u / unveil-01\n   :time (e / event\n            :location (c4 / city\n                          :name (n2 / name\n                                    :op1 \"Shanghai\"))))",
      "(m / multi-sentence\n   :snt1 (h / have-03\n            :ARG0 (c / car-make\n                     :name (n / name\n                              :op1 \"Chevrolet\"\n                              :op2 \"FNR\"))\n            :ARG1 (a / and\n                     :op1 (d / door\n                             :mod (s / swing)\n                             :mod (d2 / dragonfly))\n                     :op2 (h2 / headlight\n                              :mod (l / laser\n                                      :mod (c2 / crystal))))))",
      "(m / multi-sentence\n   :snt2 (a2 / and\n             :op1 (d3 / drive-01\n                      :ARG0 (s2 / self)\n                      :ARG1 (ii / it))\n             :op2 (e / electric\n                     :domain ii)\n             :op3 (p / possible-01\n                     :ARG1 (s3 / swivel-01\n                               :ARG1 (c3 / chair\n                                         :mod (f / front))\n                               :direction (r / round)))))",
      "(h / have-03\n   :ARG0 (c / car-make\n            :name (n / name\n                     :op1 \"Chevrolet\"\n                     :op2 \"FNR\"))\n   :ARG1 (a / and\n            :op1 (d / door\n                    :mod (s / swing)\n                    :mod (d2 / dragonfly))\n            :op2 (h2 / headlight\n                     :mod (l / laser\n                             :mod (c2 / crystal)))))",
      "(a2 / and\n    :op1 (d3 / drive-01\n             :ARG0 (s2 / self)\n             :ARG1 (ii / it))\n    :op2 (e / electric\n            :domain ii)\n    :op3 (p / possible-01\n            :ARG1 (s3 / swivel-01\n                      :ARG1 (c3 / chair\n                                :mod (f / front))\n                      :direction (r / round))))",
      "(h / have-03\n   :ARG0 (c / car-make :name (n / name :op1 \"Chevrolet\" :op2 \"FNR\")))",
      "(d3 / drive-01\n    :ARG0 (s2 / self))",
      "(p / possible-01\n   :ARG1 (s3 / swivel-01))",
      "(s3 / swivel-01\n    :ARG1 (c3 / chair))",
      "(h / have-03\n   :ARG0 (c / car-make :name (n / name :op1 \"Chevrolet\" :op2 \"FNR\")))",
      "(d3 / drive-01\n    :ARG0 (s2 / self))",
      "(p / possible-01\n   :ARG1 (s3 / swivel-01))",
      "(s3 / swivel-01\n    :ARG1 (c3 / chair))",
      "(m / multi-sentence\n   :snt1 (h / have-03\n            :ARG0 (c / car-make\n                     :name (n / name\n                              :op1 \"Chevrolet\"\n                              :op2 \"FNR\"))\n            :ARG1 (d / door\n                     :mod (s / swing)\n                     :mod (d2 / dragonfly))))",
      "(m / multi-sentence\n   :snt1 (h / have-03\n            :ARG0 (c / car-make\n                     :name (n / name\n                              :op1 \"Chevrolet\"\n                              :op2 \"FNR\"))\n            :ARG1 (h2 / headlight\n                      :mod (l / laser\n                              :mod (c2 / crystal))))\n   :snt2 (d3 / drive-01\n             :ARG0 (s2 / self)\n             :ARG1 (ii / it)\n             :op2 (e / electric\n                     :domain ii)\n             :op3 (p / possible-01\n                     :ARG1 (s3 / swivel-01\n                               :ARG1 (c3 / chair\n                                         :mod (f / front))\n                               :direction (r / round)))))",
      "(m / multi-sentence\n   :snt1 (h / have-03\n            :ARG0 (c / car-make\n                     :name (n / name\n                              :op1 \"Chevrolet\"\n                              :op2 \"FNR\"))\n            :ARG1 (a / and\n                     :op1 (d / door\n                             :mod (s / swing)\n                             :mod (d2 / dragonfly))\n                     :op2 (h2 / headlight\n                              :mod (l / laser\n                                      :mod (c2 / crystal)))))\n   :snt2 (a2 / and\n             :op1 (d3 / drive-01\n                      :ARG0 (s2 / self)\n                      :ARG1 (ii / it))\n             :op2 (e / electric\n                     :domain ii)\n             :op3 (p / possible-01\n                     :ARG1 (s3 / swivel-01\n                               :ARG1 (c3 / chair\n                                         :mod (f / front))\n                               :direction (r / round)))))",
      "(m / multi-sentence\n   :snt1 (h / have-03)\n   :snt2 (a2 / and\n             :op1 (d3 / drive-01)\n             :op2 (e / electric)\n             :op3 (p / possible-01)))",
      "(m / multi-sentence\n   :snt1 (a / and\n            :op2 (p / possible-01\n                    :ARG1 (s / start-01\n                             :ARG0 (y / you)\n                             :ARG1 (ii / it)\n                             :manner (u / use-01\n                                        :ARG0 y\n                                        :ARG1 (e / eye\n                                                 :mod (j / just)\n                                                 :part-of (y2 / you))))\n                    :manner (u2 / use-01\n                                :ARG0 y\n                                :ARG1 (s2 / software\n                                          :ARG0-of (r / recognize-02\n                                                      :ARG1 (ii2 / iris)))))))",
      "(a / and\n   :op2 (p / possible-01\n           :ARG1 (s / start-01\n                    :ARG0 (y / you)\n                    :ARG1 (ii / it)\n                    :manner (u / use-01\n                               :ARG0 y\n                               :ARG1 (e / eye\n                                        :mod (j / just)\n                                        :part-of (y2 / you))))\n           :manner (u2 / use-01\n                       :ARG0 y\n                       :ARG1 (s2 / software\n                                 :ARG0-of (r / recognize-02\n                                             :ARG1 (ii2 / iris))))))",
      "(p / possible-01\n   :ARG1 (s / start-01))",
      "(s / start-01\n   :ARG0 (y / you))",
      "(u / use-01\n   :ARG0 (y / you)\n   :ARG1 (e / eye))",
      "(u2 / use-01\n    :ARG0 (y / you)\n    :ARG1 (s2 / software))",
      "(r / recognize-02\n   :ARG1 (ii2 / iris))",
      "(p / possible-01\n   :ARG1 (s / start-01))",
      "(s / start-01\n   :ARG0 (y / you))",
      "(u / use-01\n   :ARG0 (y / you))",
      "(u / use-01\n   :ARG1 (e / eye))",
      "(u2 / use-01\n    :ARG0 (y / you))",
      "(u2 / use-01\n    :ARG1 (s2 / software))",
      "(r / recognize-02\n   :ARG1 (ii2 / iris))",
      "(m / multi-sentence\n   :snt1 (a / and\n            :op2 (p / possible-01\n                    :ARG1 (s / start-01\n                             :ARG0 (y / you)\n                             :ARG1 (ii / it)\n                             :manner (u / use-01\n                                        :ARG0 y\n                                        :ARG1 (e / eye\n                                                 :mod (j / just)\n                                                 :part (y2 / you))))\n                    :manner (u2 / use-01\n                                :ARG0 y\n                                :ARG1 (s2 / software\n                                          :ARG0 (r / recognize-02\n                                                   :ARG1 (ii2 / iris)))))))",
      "(m / multi-sentence\n   :snt1 (a / and\n            :op2 (p / possible-01\n                    :manner (u2 / use-01))))"
    ],
    "smus": [
      "General Motors unveiled --",
      "General Motors' concept car unveiled.",
      "The unveiling took place at an event in Shanghai.",
      "General Motors",
      "General Motors concept car",
      "The event took place in Shanghai.",
      "General Motors unveiled --",
      "General Motors unveiled --",
      "General Motors unveiled their concept car.",
      "The unveiling took place at an event in Shanghai.",
      "The Ford FNR has dragonfly swing doors and crystal laser headlights.",
      "It's self driving, electric and the front chairs can swivel round.",
      "The Ford FNR has dragonfly swing doors and crystal laser headlights.",
      "It's self driving, electric and the front chairs can swivel round.",
      "The Ford FNR has...",
      "Self driving.",
      "a href=\"http://www.youtube.com/watch?v=gbb&t=gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
      "The chairs swivel.",
      "The Ford FNR has...",
      "Self driving.",
      "a href=\"http://www.youtube.com/watch?v=gbb&t=gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
      "The chairs swivel.",
      "The Ford Nv has dragonfly swing doors.",
      "The Ford FNR has crystal laser headlights. It's self driving, electric, and the front chairs can swivel round.",
      "The Ford Nv has dragonfly swing doors and crystal laser headlights. It is self driving and electric, and the front chairs can swivel round.",
      "Has, electric, and maybe.",
      "And you can start it using just your eyes by using iris recognition software.",
      "And you can start it using just your eyes by using iris recognition software.",
      "Maybe start.",
      "You start.",
      "You are using the eyes.",
      "You are using software.",
      "Iris recognition",
      "Maybe start.",
      "You start.",
      "You are using.",
      "using eyes",
      "You are using.",
      "using software.",
      "Iris recognition",
      "And you can start it using just your eyes by using iris recognition software.",
      "and can be used."
    ]
  },
  {
    "instance_id": "realsumm-25",
    "summary": "<t> Candidate Lynne Abraham says she suffered a momentary drop in blood pressure and that it 's never happened before . </t> <t> While a doctor kept her from returning to the debate , the 74-year - old former district attorney says she will not let the incident affect her campaign . </t>",
    "summary_trees": [
      "# ::snt  Candidate Lynne Abraham says she suffered a momentary drop in blood pressure and that it 's never happened before . \n(s / say-01\n      :ARG0 (c / candidate\n            :name (n / name\n                  :op1 \"Lynne\"\n                  :op2 \"Abraham\"))\n      :ARG1 (a / and\n            :op1 (s2 / suffer-01\n                  :ARG0 c\n                  :ARG1 (d / drop-01\n                        :ARG1 (p / pressure\n                              :mod (b / blood))\n                        :mod (m / momentary)))\n            :op2 (h / have-polarity-91\n                  :ARG1 d\n                  :ARG2 -\n                  :time (e / ever)\n                  :time (b2 / before))))",
      "# ::snt  While a doctor kept her from returning to the debate , the 74-year - old former district attorney says she will not let the incident affect her campaign . \n(s / say-01\n      :ARG0 (a / attorney\n            :mod (d / district)\n            :time (f / former)\n            :age (t / temporal-quantity\n                  :quant 74\n                  :unit (y / year)))\n      :ARG1 (l / let-01\n            :polarity -\n            :ARG0 a\n            :ARG1 (a2 / affect-01\n                  :ARG0 (ii / incident)\n                  :ARG1 (c / campaign-01\n                        :ARG0 a)))\n      :concession (k / keep-04\n            :ARG0 (d2 / doctor)\n            :ARG1 a\n            :ARG2 (r / return-01\n                  :ARG1 a\n                  :ARG4 (d3 / debate-01))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (c / candidate\n            :name (n / name\n                     :op1 \"Lynne\"\n                     :op2 \"Abraham\")))",
      "(s / say-01\n   :ARG1 (a / and\n            :op1 (s2 / suffer-01\n                     :ARG0 (c / candidate :name (n / name :op1 \"Lynne\" :op2 \"Abraham\"))\n                     :ARG1 (d / drop-01\n                              :ARG1 (p / pressure\n                                       :mod (b / blood))\n                              :mod (m / momentary)))\n            :op2 (h / have-polarity-91\n                    :ARG1 d\n                    :ARG2 -\n                    :time (e / ever)\n                    :time (b2 / before))))",
      "(c / candidate\n   :name (n / name\n            :op1 \"Lynne\"\n            :op2 \"Abraham\"))",
      "(a / and\n   :op1 (s2 / suffer-01\n            :ARG0 (c / candidate :name (n / name :op1 \"Lynne\" :op2 \"Abraham\"))\n            :ARG1 (d / drop-01\n                     :ARG1 (p / pressure\n                              :mod (b / blood))\n                     :mod (m / momentary)))\n   :op2 (h / have-polarity-91\n           :ARG1 d\n           :ARG2 -\n           :time (e / ever)\n           :time (b2 / before)))",
      "(s / say-01\n   :ARG0 (c / candidate :name (n / name :op1 \"Lynne\" :op2 \"Abraham\")))",
      "(s2 / suffer-01\n    :ARG0 (c / candidate :name (n / name :op1 \"Lynne\" :op2 \"Abraham\"))\n    :ARG1 (d / drop-01))",
      "(d / drop-01\n   :ARG1 (p / pressure))",
      "(s / say-01\n   :ARG0 (c / candidate :name (n / name :op1 \"Lynne\" :op2 \"Abraham\")))",
      "(s2 / suffer-01\n    :ARG0 (c / candidate :name (n / name :op1 \"Lynne\" :op2 \"Abraham\")))",
      "(s2 / suffer-01\n    :ARG1 (d / drop-01))",
      "(d / drop-01\n   :ARG1 (p / pressure))",
      "(s / say-01\n   :ARG0 (c / candidate\n            :name (n / name\n                     :op1 \"Lynne\"\n                     :op2 \"Abraham\"))\n   :ARG1 (s2 / suffer-01\n             :ARG0 c\n             :ARG1 (d / drop-01\n                      :ARG1 (p / pressure\n                               :mod (b / blood))\n                      :mod (m / momentary))))",
      "(s / say-01\n   :ARG0 (c / candidate\n            :name (n / name\n                     :op1 \"Lynne\"\n                     :op2 \"Abraham\"))\n   :ARG1 (h / have-polarity-91\n            :ARG1 (d / drop-01)\n            :ARG2 -\n            :time (e / ever)\n            :time (b2 / before)))",
      "(s / say-01\n   :ARG0 (c / candidate\n            :name (n / name\n                     :op1 \"Lynne\"\n                     :op2 \"Abraham\"))\n   :ARG1 (a / and\n            :op1 (s2 / suffer-01\n                     :ARG0 c\n                     :ARG1 (d / drop-01\n                              :ARG1 (p / pressure\n                                       :mod (b / blood))\n                              :mod (m / momentary)))\n            :op2 (h / have-polarity-91\n                    :ARG1 d\n                    :ARG2 -)))",
      "(s / say-01)",
      "(s / say-01\n   :ARG0 (a / attorney\n            :mod (d / district)\n            :time (f / former)\n            :age (t / temporal-quantity\n                    :quant 74\n                    :unit (y / year))))",
      "(s / say-01\n   :ARG1 (l / let-01\n            :polarity -\n            :ARG0 (a / attorney)\n            :ARG1 (a2 / affect-01\n                      :ARG0 (ii / incident)\n                      :ARG1 (c / campaign-01\n                               :ARG0 a))))",
      "(s / say-01\n   :concession (k / keep-04\n                  :ARG0 (d2 / doctor)\n                  :ARG1 (a / attorney)\n                  :ARG2 (r / return-01\n                           :ARG1 a\n                           :ARG4 (d3 / debate-01))))",
      "(a / attorney\n   :mod (d / district)\n   :time (f / former)\n   :age (t / temporal-quantity\n           :quant 74\n           :unit (y / year)))",
      "(l / let-01\n   :polarity -\n   :ARG0 (a / attorney)\n   :ARG1 (a2 / affect-01\n             :ARG0 (ii / incident)\n             :ARG1 (c / campaign-01\n                      :ARG0 a)))",
      "(k / keep-04\n   :ARG0 (d2 / doctor)\n   :ARG1 (a / attorney)\n   :ARG2 (r / return-01\n            :ARG1 a\n            :ARG4 (d3 / debate-01)))",
      "(s / say-01\n   :ARG0 (a / attorney))",
      "(l / let-01\n   :polarity -\n   :ARG0 (a / attorney)\n   :ARG1 (a2 / affect-01))",
      "(a2 / affect-01\n    :ARG0 (ii / incident))",
      "(c / campaign-01\n   :ARG0 (a / attorney))",
      "(k / keep-04\n   :ARG0 (d2 / doctor))",
      "(r / return-01\n   :ARG1 (a / attorney)\n   :ARG4 (d3 / debate-01))",
      "(d3 / debate-01)",
      "(s / say-01\n   :ARG0 (a / attorney))",
      "(l / let-01\n   :polarity -)",
      "(l / let-01\n   :ARG0 (a / attorney))",
      "(l / let-01\n   :ARG1 (a2 / affect-01))",
      "(a2 / affect-01\n    :ARG0 (ii / incident))",
      "(c / campaign-01\n   :ARG0 (a / attorney))",
      "(k / keep-04\n   :ARG0 (d2 / doctor))",
      "(r / return-01\n   :ARG1 (a / attorney))",
      "(r / return-01\n   :ARG4 (d3 / debate-01))",
      "(s / say-01\n   :ARG0 (a / attorney\n            :mod (d / district)\n            :age (t / temporal-quantity\n                    :quant 74\n                    :unit (y / year)))\n   :ARG1 (l / let-01\n            :polarity -\n            :ARG0 a\n            :ARG1 (a2 / affect-01\n                      :ARG0 (ii / incident)\n                      :ARG1 (c / campaign-01\n                               :ARG0 a)))\n   :concession (k / keep-04\n                  :ARG0 (d2 / doctor)\n                  :ARG1 a\n                  :ARG2 (r / return-01\n                           :ARG1 a\n                           :ARG4 (d3 / debate-01))))",
      "(s / say-01\n   :concession (k / keep-04))"
    ],
    "smus": [
      "Candide Lynne Abraham says:",
      "Candide Lynne Abraham suffered a momentary drop in blood pressure and never had it before, he says.",
      "Candide Lynne Abraham",
      "Candide Lynne Abraham suffered a momentary drop in blood pressure and never had it before.",
      "Candide Lynne Abraham says:",
      "Candide Lynne Abraham suffered a drop.",
      "Pressure dropped.",
      "Candide Lynne Abraham says:",
      "Candide Lynne Abraham suffered.",
      "The drop suffered.",
      "Pressure dropped.",
      "Candide Lynne Abraham says she suffered a momentary drop in blood pressure.",
      "\"There has never been a drop before,\" says Candide Lynne Abraham.",
      "Candide Lynne Abraham says she suffered a momentary drop in blood pressure and it hasn't.",
      "says.",
      "\"It's a former 74-year-old district attorney,\" says the former district attorney.",
      "The attorney says he didn't let the incident affect his campaign.",
      "says, \"but the doctor keeps the attorney in return for debate.\"",
      "74 year old former district attorney",
      "The attorney didn't let the incident affect his campaign.",
      "The doctor kept the attorney in return for debate.",
      "According to the attorney,",
      "The attorney won't let the effect happen.",
      "The incident had an effect.",
      "Attorney campaigned.",
      "Keep the doctor.",
      "The attorney returned to debate.",
      "Debate.",
      "According to the attorney,",
      "Don't let.",
      "Let the attorney.",
      "Let the effect happen.",
      "The incident had an effect.",
      "Attorney campaigned.",
      "Keep the doctor.",
      "In return, the attorney.",
      "Return to debate",
      "A 74-year-old district attorney says he won't let the incident affect his campaign, but the doctor keeps him from returning to debates.",
      "Keep saying."
    ]
  },
  {
    "instance_id": "realsumm-26",
    "summary": "<t> Bundles of notes spilled onto Interstate 20 in Albilene , Texas , on Friday . </t> <t> Passenger door of vehicle flung open - releasing the money onto the road . </t> <t> Motorists pulled over and abandoned their vehicles to pick up the cash . </t> <t> Police have warned anyone caught with the money will be arrested . </t>",
    "summary_trees": [
      "# ::snt  Bundles of notes spilled onto Interstate 20 in Albilene , Texas , on Friday . \n(s / spill-over-02\n      :ARG1 (b / bundle\n            :consist-of (n / note))\n      :ARG2 (r / road\n            :name (n2 / name\n                  :op1 \"Interstate\"\n                  :op2 20)\n            :location (c / city\n                  :name (n3 / name\n                        :op1 \"Alilene\")\n                  :location (s2 / state\n                        :name (n4 / name\n                              :op1 \"Texas\"))))\n      :time (d / date-entity\n            :weekday (f / friday)))",
      "# ::snt  Passenger door of vehicle flung open - releasing the money onto the road . \n(o / open-01\n      :ARG1 (d / door\n            :part-of (v / vehicle)\n            :mod (p / passenger))\n      :ARG0-of (r / release-01\n            :ARG1 (m / money)\n            :ARG2 (r2 / road)))",
      "# ::snt  Motorists pulled over and abandoned their vehicles to pick up the cash . \n(a / and\n      :op1 (p / pull-over-05\n            :ARG1 (m / motorist))\n      :op2 (a2 / abandon-01\n            :ARG0 m\n            :ARG1 (v / vehicle\n                  :poss m))\n      :purpose (p2 / pick-up-04\n            :ARG0 m\n            :ARG1 (c / cash)))",
      "# ::snt  Police have warned anyone caught with the money will be arrested . \n(w / warn-01\n      :ARG0 (p / police)\n      :ARG1 (a / arrest-01\n            :ARG1 (a2 / anyone\n                  :ARG1-of (c / catch-02\n                        :ARG2 (h / have-03\n                              :ARG0 a2\n                              :ARG1 (m / money))))))"
    ],
    "tree": [
      "(s / spill-over-02\n   :ARG1 (b / bundle\n            :consist-of (n / note)))",
      "(s / spill-over-02\n   :ARG2 (r / road\n            :name (n2 / name\n                      :op1 \"Interstate\"\n                      :op2 20)\n            :location (c / city\n                         :name (n3 / name\n                                   :op1 \"Alilene\")\n                         :location (s2 / state\n                                       :name (n4 / name\n                                                 :op1 \"Texas\")))))",
      "(s / spill-over-02\n   :time (d / date-entity\n            :weekday (f / friday)))",
      "(b / bundle\n   :consist-of (n / note))",
      "(r / road\n   :name (n2 / name\n             :op1 \"Interstate\"\n             :op2 20)\n   :location (c / city\n                :name (n3 / name\n                          :op1 \"Alilene\")\n                :location (s2 / state\n                              :name (n4 / name\n                                        :op1 \"Texas\"))))",
      "(d / date-entity\n   :weekday (f / friday))",
      "(s / spill-over-02\n   :ARG1 (b / bundle))",
      "(s / spill-over-02\n   :ARG1 (b / bundle))",
      "(s / spill-over-02\n   :ARG1 (b / bundle\n            :consist-of (n / note))\n   :ARG2 (r / road\n            :name (n2 / name\n                      :op1 \"Interstate\"\n                      :op2 20)))",
      "(s / spill-over-02\n   :time (d / date-entity\n            :weekday (f / friday)))",
      "(o / open-01\n   :ARG1 (d / door\n            :part-of (v / vehicle)\n            :mod (p / passenger)))",
      "(o / open-01\n   :ARG0-of (r / release-01\n               :ARG1 (m / money)\n               :ARG2 (r2 / road)))",
      "(d / door\n   :part-of (v / vehicle)\n   :mod (p / passenger))",
      "(r / release-01\n   :ARG1 (m / money)\n   :ARG2 (r2 / road))",
      "(o / open-01\n   :ARG1 (d / door))",
      "(r / release-01\n   :ARG1 (m / money))",
      "(o / open-01\n   :ARG1 (d / door))",
      "(r / release-01\n   :ARG1 (m / money))",
      "(o / open-01\n   :ARG1 (d / door\n            :part (v / vehicle)\n            :mod (p / passenger))\n   :ARG0 (r / release-01\n            :ARG1 (m / money)\n            :ARG2 (r2 / road)))",
      "(o / open-01)",
      "(a / and\n   :op1 (p / pull-over-05\n           :ARG1 (m / motorist)))",
      "(a / and\n   :op2 (a2 / abandon-01\n            :ARG0 (m / motorist)\n            :ARG1 (v / vehicle\n                     :poss m)))",
      "(a / and\n   :purpose (p2 / pick-up-04\n                :ARG0 (m / motorist)\n                :ARG1 (c / cash)))",
      "(p / pull-over-05\n   :ARG1 (m / motorist))",
      "(a2 / abandon-01\n    :ARG0 (m / motorist)\n    :ARG1 (v / vehicle\n             :poss m))",
      "(p2 / pick-up-04\n    :ARG0 (m / motorist)\n    :ARG1 (c / cash))",
      "(p / pull-over-05\n   :ARG1 (m / motorist))",
      "(a2 / abandon-01\n    :ARG0 (m / motorist)\n    :ARG1 (v / vehicle))",
      "(p2 / pick-up-04\n    :ARG0 (m / motorist)\n    :ARG1 (c / cash))",
      "(p / pull-over-05\n   :ARG1 (m / motorist))",
      "(a2 / abandon-01\n    :ARG0 (m / motorist))",
      "(a2 / abandon-01\n    :ARG1 (v / vehicle))",
      "(p2 / pick-up-04\n    :ARG0 (m / motorist))",
      "(p2 / pick-up-04\n    :ARG1 (c / cash))",
      "(p / pull-over-05\n   :ARG1 (m / motorist))",
      "(a2 / abandon-01\n    :ARG0 (m / motorist)\n    :ARG1 (v / vehicle\n             :poss m)\n    :purpose (p2 / pick-up-04\n                 :ARG0 m\n                 :ARG1 (c / cash)))",
      "(a / and\n   :op1 (p / pull-over-05\n           :ARG1 (m / motorist))\n   :op2 (a2 / abandon-01\n            :ARG0 m\n            :ARG1 (v / vehicle\n                     :poss m)))",
      "(a / and\n   :op1 (p / pull-over-05)\n   :op2 (a2 / abandon-01)\n   :purpose (p2 / pick-up-04))",
      "(w / warn-01\n   :ARG0 (p / police))",
      "(w / warn-01\n   :ARG1 (a / arrest-01\n            :ARG1 (a2 / anyone\n                      :ARG1-of (c / catch-02\n                                  :ARG2 (h / have-03\n                                           :ARG0 a2\n                                           :ARG1 (m / money))))))",
      "(a / arrest-01\n   :ARG1 (a2 / anyone\n             :ARG1-of (c / catch-02\n                         :ARG2 (h / have-03\n                                  :ARG0 a2\n                                  :ARG1 (m / money)))))",
      "(w / warn-01\n   :ARG0 (p / police))",
      "(a / arrest-01\n   :ARG1 (a2 / anyone))",
      "(c / catch-02\n   :ARG2 (h / have-03))",
      "(h / have-03\n   :ARG0 (a2 / anyone)\n   :ARG1 (m / money))",
      "(w / warn-01\n   :ARG0 (p / police))",
      "(a / arrest-01\n   :ARG1 (a2 / anyone))",
      "(c / catch-02\n   :ARG2 (h / have-03))",
      "(h / have-03\n   :ARG0 (a2 / anyone))",
      "(h / have-03\n   :ARG1 (m / money))",
      "(w / warn-01\n   :ARG0 (p / police)\n   :ARG1 (a / arrest-01\n            :ARG1 (a2 / anyone\n                      :ARG1 (c / catch-02\n                               :ARG2 (h / have-03\n                                        :ARG0 a2\n                                        :ARG1 (m / money))))))",
      "(w / warn-01)"
    ],
    "smus": [
      "Bundles of notes spilled over.",
      "Interstate 20 in Alilene, Texas spilled over.",
      "spilled over Friday.",
      "Bundles of notes",
      "Interstate 20 in Alilene, Texas",
      "Friday",
      "Bundles spilled over.",
      "Bundles spilled over.",
      "Bundles of notes spilled over Interstate 20.",
      "spilled over Friday.",
      "The passenger door of the vehicle opened.",
      "The opening is releasing money from the road.",
      "passenger door of vehicle",
      "releasing money on the road.",
      "The door is open.",
      "releasing money.",
      "The door is open.",
      "releasing money.",
      "The passenger door of the vehicle opened, releasing money from the road.",
      "open/a>",
      "And the motorists pulled over.",
      "and motorists abandon their vehicles.",
      "and for motorists to pick up cash.",
      "The motorists pulled over.",
      "The motorists abandoned their vehicles.",
      "The motorists will pick up cash.",
      "The motorists pulled over.",
      "The motorists abandoned the vehicles.",
      "The motorists will pick up cash.",
      "The motorists pulled over.",
      "The motorists abandoned.",
      "The vehicles are abandoned.",
      "The motorists will pick up.",
      "Pick up cash.",
      "The motorists pulled over.",
      "Motorists abandoned their vehicles to pick up cash.",
      "The motorists pulled over and abandoned their vehicles.",
      "Pull over and abandon to pick up.",
      "Police were warned.",
      "Anyone caught with money will be warned to be arrested.",
      "Anyone caught with money will be arrested.",
      "Police were warned.",
      "Anyone has been arrested.",
      "Catcheen when they have.",
      "Anyone have money.",
      "Police were warned.",
      "Anyone has been arrested.",
      "Catcheen when they have.",
      "Anyone have.",
      "have the money.",
      "Police have warned that anyone caught with money will be arrested.",
      "Warning:"
    ]
  },
  {
    "instance_id": "realsumm-27",
    "summary": "<t> Godfrey Elfwick recruited via Twitter to appear on World Have Your Say . </t> <t> Came after claims he had never seen the Star Wars franchise before . </t> <t> On the show he described the films as both anti - women and anti - gay . </t> <t> Also said that Darth Vader was a black man and a ' really bad racial stereotype ' . </t>",
    "summary_trees": [
      "# ::snt  Godfrey Elfwick recruited via Twitter to appear on World Have Your Say . \n(r / recruit-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Godfrey\"\n                  :op2 \"Elfwick\"))\n      :ARG2 (a / appear-01\n            :ARG1 p\n            :medium (b / broadcast-program\n                  :name (n2 / name\n                        :op1 \"World\"\n                        :op2 \"Have\"\n                        :op3 \"Your\"\n                        :op4 \"Say\")))\n      :medium (p2 / publication\n            :name (n3 / name\n                  :op1 \"Twitter\")))",
      "# ::snt  Came after claims he had never seen the Star Wars franchise before . \n(b / be-temporally-at-91\n      :ARG1 (e / event)\n      :ARG2 (a / after\n            :op1 (c / claim-01\n                  :ARG0 (h / he)\n                  :ARG1 (s / see-01\n                        :polarity -\n                        :ARG0 h\n                        :ARG1 (f / franchise\n                              :name (n / name\n                                    :op1 \"Star\"\n                                    :op2 \"Wars\"))\n                        :time (e2 / ever)\n                        :time (b2 / before)))))",
      "# ::snt  On the show he described the films as both anti - women and anti - gay . \n(d / describe-01\n      :ARG0 (h / he)\n      :ARG1 (f / film)\n      :ARG2 (a / and\n            :op1 (o / oppose-01\n                  :ARG0 f\n                  :ARG1 (w / woman))\n            :op2 (o2 / oppose-01\n                  :ARG0 f\n                  :ARG1 (g / gay-01)))\n      :time (s / show-04))",
      "# ::snt  Also said that Darth Vader was a black man and a ' really bad racial stereotype ' . \n(s / say-01\n      :ARG1 (a / and\n            :op1 (m / man\n                  :ARG1-of (b / black-05)\n                  :domain (p / person\n                        :name (n / name\n                              :op1 \"Darth\"\n                              :op2 \"Vader\")))\n            :op2 (s2 / stereotype-01\n                  :ARG2 p\n                  :mod (r / race)\n                  :ARG1-of (b2 / bad-07\n                        :degree (r2 / really))))\n      :mod (a2 / also))"
    ],
    "tree": [
      "(r / recruit-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Godfrey\"\n                     :op2 \"Elfwick\")))",
      "(r / recruit-01\n   :ARG2 (a / appear-01\n            :ARG1 (p / person :name (n / name :op1 \"Godfrey\" :op2 \"Elfwick\"))\n            :medium (b / broadcast-program\n                       :name (n2 / name\n                                 :op1 \"World\"\n                                 :op2 \"Have\"\n                                 :op3 \"Your\"\n                                 :op4 \"Say\"))))",
      "(r / recruit-01\n   :medium (p2 / publication\n               :name (n3 / name\n                         :op1 \"Twitter\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Godfrey\"\n            :op2 \"Elfwick\"))",
      "(a / appear-01\n   :ARG1 (p / person :name (n / name :op1 \"Godfrey\" :op2 \"Elfwick\"))\n   :medium (b / broadcast-program\n              :name (n2 / name\n                        :op1 \"World\"\n                        :op2 \"Have\"\n                        :op3 \"Your\"\n                        :op4 \"Say\")))",
      "(p2 / publication\n    :name (n3 / name\n              :op1 \"Twitter\"))",
      "(r / recruit-01\n   :ARG1 (p / person :name (n / name :op1 \"Godfrey\" :op2 \"Elfwick\")))",
      "(a / appear-01\n   :ARG1 (p / person :name (n / name :op1 \"Godfrey\" :op2 \"Elfwick\"))\n   :medium (b / broadcast-program :name (n2 / name :op1 \"World\" :op2 \"Have\" :op3 \"Your\" :op4 \"Say\")))",
      "(r / recruit-01\n   :ARG1 (p / person :name (n / name :op1 \"Godfrey\" :op2 \"Elfwick\")))",
      "(a / appear-01\n   :ARG1 (p / person :name (n / name :op1 \"Godfrey\" :op2 \"Elfwick\")))",
      "(a / appear-01\n   :medium (b / broadcast-program :name (n2 / name :op1 \"World\" :op2 \"Have\" :op3 \"Your\" :op4 \"Say\")))",
      "(r / recruit-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Godfrey\"\n                     :op2 \"Elfwick\"))\n   :ARG2 (a / appear-01\n            :ARG1 p\n            :medium (b / broadcast-program\n                       :name (n2 / name\n                                 :op1 \"World\"\n                                 :op2 \"Have\"\n                                 :op3 \"Your\"\n                                 :op4 \"Say\")))\n   :medium (p2 / publication\n               :name (n3 / name\n                         :op1 \"Twitter\")))",
      "(r / recruit-01\n   :medium (p2 / publication\n               :name (n3 / name\n                         :op1 \"Twitter\")))",
      "(b / be-temporally-at-91\n   :ARG1 (e / event))",
      "(b / be-temporally-at-91\n   :ARG2 (a / after\n            :op1 (c / claim-01\n                    :ARG0 (h / he)\n                    :ARG1 (s / see-01\n                             :polarity -\n                             :ARG0 h\n                             :ARG1 (f / franchise\n                                      :name (n / name\n                                               :op1 \"Star\"\n                                               :op2 \"Wars\"))\n                             :time (e2 / ever)\n                             :time (b2 / before)))))",
      "(a / after\n   :op1 (c / claim-01\n           :ARG0 (h / he)\n           :ARG1 (s / see-01\n                    :polarity -\n                    :ARG0 h\n                    :ARG1 (f / franchise\n                             :name (n / name\n                                      :op1 \"Star\"\n                                      :op2 \"Wars\"))\n                    :time (e2 / ever)\n                    :time (b2 / before))))",
      "(c / claim-01\n   :ARG0 (h / he))",
      "(s / see-01\n   :polarity -\n   :ARG0 (h / he)\n   :ARG1 (f / franchise :name (n / name :op1 \"Star\" :op2 \"Wars\")))",
      "(c / claim-01\n   :ARG0 (h / he))",
      "(s / see-01\n   :polarity -)",
      "(s / see-01\n   :ARG0 (h / he))",
      "(s / see-01\n   :ARG1 (f / franchise :name (n / name :op1 \"Star\" :op2 \"Wars\")))",
      "(b / be-temporally-at-91\n   :ARG1 (e / event)\n   :ARG2 (a / after\n            :op1 (c / claim-01\n                    :ARG0 (h / he)\n                    :ARG1 (s / see-01\n                             :polarity -\n                             :ARG0 h\n                             :ARG1 (f / franchise\n                                      :name (n / name\n                                               :op1 \"Star\"\n                                               :op2 \"Wars\"))))))",
      "(b / be-temporally-at-91)",
      "(d / describe-01\n   :ARG0 (h / he))",
      "(d / describe-01\n   :ARG1 (f / film))",
      "(d / describe-01\n   :ARG2 (a / and\n            :op1 (o / oppose-01\n                    :ARG0 (f / film)\n                    :ARG1 (w / woman))\n            :op2 (o2 / oppose-01\n                     :ARG0 f\n                     :ARG1 (g / gay-01))))",
      "(d / describe-01\n   :time (s / show-04))",
      "(a / and\n   :op1 (o / oppose-01\n           :ARG0 (f / film)\n           :ARG1 (w / woman))\n   :op2 (o2 / oppose-01\n            :ARG0 f\n            :ARG1 (g / gay-01)))",
      "(d / describe-01\n   :ARG0 (h / he))",
      "(o / oppose-01\n   :ARG0 (f / film)\n   :ARG1 (w / woman))",
      "(o2 / oppose-01\n    :ARG0 (f / film)\n    :ARG1 (g / gay-01))",
      "(g / gay-01)",
      "(s / show-04)",
      "(d / describe-01\n   :ARG0 (h / he))",
      "(o / oppose-01\n   :ARG0 (f / film))",
      "(o / oppose-01\n   :ARG1 (w / woman))",
      "(o2 / oppose-01\n    :ARG0 (f / film))",
      "(o2 / oppose-01\n    :ARG1 (g / gay-01))",
      "(d / describe-01\n   :ARG0 (h / he)\n   :ARG1 (f / film)\n   :ARG2 (o / oppose-01\n            :ARG0 f\n            :ARG1 (w / woman))\n   :time (s / show-04))",
      "(d / describe-01\n   :ARG0 (h / he)\n   :ARG1 (f / film)\n   :ARG2 (o2 / oppose-01\n             :ARG0 f\n             :ARG1 (g / gay-01))\n   :time (s / show-04)\n   :time s)",
      "(d / describe-01\n   :ARG0 (h / he)\n   :ARG1 (f / film)\n   :ARG2 (a / and\n            :op1 (o / oppose-01\n                    :ARG0 f\n                    :ARG1 (w / woman))\n            :op2 (o2 / oppose-01\n                     :ARG0 f\n                     :ARG1 (g / gay-01))))",
      "(d / describe-01\n   :time (s / show-04))",
      "(s / say-01\n   :ARG1 (a / and\n            :op1 (m / man\n                    :ARG1-of (b / black-05)\n                    :domain (p / person\n                               :name (n / name\n                                        :op1 \"Darth\"\n                                        :op2 \"Vader\")))\n            :op2 (s2 / stereotype-01\n                     :ARG2 p\n                     :mod (r / race)\n                     :ARG1-of (b2 / bad-07\n                                  :degree (r2 / really)))))",
      "(s / say-01\n   :mod (a2 / also))",
      "(a / and\n   :op1 (m / man\n           :ARG1-of (b / black-05)\n           :domain (p / person\n                      :name (n / name\n                               :op1 \"Darth\"\n                               :op2 \"Vader\")))\n   :op2 (s2 / stereotype-01\n            :ARG2 p\n            :mod (r / race)\n            :ARG1-of (b2 / bad-07\n                         :degree (r2 / really))))",
      "(s / say-01\n   :ARG1 (a / and))",
      "(b / black-05)",
      "(s2 / stereotype-01\n    :ARG2 (p / person :name (n / name :op1 \"Darth\" :op2 \"Vader\"))\n    :mod (r / race))",
      "(b2 / bad-07\n    :degree (r2 / really))",
      "(s / say-01\n   :ARG1 (a / and))",
      "(s2 / stereotype-01\n    :ARG2 (p / person :name (n / name :op1 \"Darth\" :op2 \"Vader\")))",
      "(s2 / stereotype-01\n    :mod (r / race))",
      "(b2 / bad-07\n    :degree (r2 / really))",
      "(s / say-01\n   :ARG1 (m / man\n            :ARG1-of (b / black-05)\n            :domain (p / person\n                       :name (n / name\n                                :op1 \"Darth\"\n                                :op2 \"Vader\")))\n   :mod (a2 / also))",
      "(s / say-01\n   :ARG1 (s2 / stereotype-01\n             :ARG2 (p / person :name (n / name :op1 \"Darth\" :op2 \"Vader\"))\n             :mod (r / race)\n             :ARG1-of (b2 / bad-07\n                          :degree (r2 / really)))\n   :mod (a2 / also)\n   :mod a2)",
      "(s / say-01\n   :ARG1 (a / and\n            :op1 (m / man\n                    :ARG1 (b / black-05)\n                    :domain (p / person\n                               :name (n / name\n                                        :op1 \"Darth\"\n                                        :op2 \"Vader\")))\n            :op2 (s2 / stereotype-01\n                     :ARG2 p\n                     :mod (r / race)\n                     :ARG1 (b2 / bad-07\n                               :degree (r2 / really))))\n   :mod (a2 / also))",
      "(s / say-01\n   :mod (a2 / also))"
    ],
    "smus": [
      "Godfrey Elfwick was recruited.",
      "Godfrey Elfwick was recruited to appear on World Have Your Say.",
      "Recruited on Twitter.",
      "Godfrey Elfwick",
      "Godfrey Elfwick will appear on World Have Your Say.",
      "Twitter",
      "Godfrey Elfwick was recruited.",
      "Godfrey Elfwick will appear on World Have Your Say.",
      "Godfrey Elfwick was recruited.",
      "appear to be Godfrey Elfwick.",
      "appeared on World Have Your Say.",
      "Godfrey Elfwick was recruited to appear on World Have Your Say on Twitter.",
      "Recruited on Twitter.",
      "When it happens.",
      "After he claims he has never seen the Star Wars franchise before.",
      "After he claims he has never seen the Star Wars franchise before.",
      "He claims.",
      "He hasn't seen the Star Wars franchise.",
      "He claims.",
      "Not seen.",
      "He's seen.",
      "Star Wars is seen.",
      "After he claimed he hasn't seen the Star Wars franchise, it happened.",
      "At.",
      "He described.",
      "The films described.",
      "The films described as anti-woman and anti-gay.",
      "As described in the show.",
      "The films are anti-women and anti-gay.",
      "He described.",
      "The films are anti-women.",
      "The films are anti-gay.",
      "Gay.",
      "Show.",
      "He described.",
      "The films are anti-semitic.",
      "Anti-women",
      "The films are anti-semitic.",
      "Anti-gay",
      "During the show, he described the films as anti-woman.",
      "During the show he described the films as anti-gay.",
      "He described the films as anti-woman and anti-gay.",
      "As described in the show.",
      "\"Darth Vader is a black man and has a really bad racial stereotype,\" she said.",
      "Also said.",
      "arth vader is a black man and that's a really bad racial stereotype.",
      "And said.",
      "Black.",
      "arth Vader is a racial stereotype.",
      "Really bad.",
      "And said.",
      "The stereotype of Darth Vader is...",
      "racial stereotype.",
      "Really bad.",
      "Darth Vader also said he was a black man.",
      "Also, it was said that Darth Vader is a really bad racial stereotype.",
      "Also, Darth Vader was said to be a black man and that racial stereotypes are really bad.",
      "Also said."
    ]
  },
  {
    "instance_id": "realsumm-28",
    "summary": "<t> Cuban - born Kathy Ferreiro 's curves have attracted fans on social media . </t> <t> Bikini - loving beach babe says photos of her booty are all natural . </t> <t> Miami - based party girl is hoping to become next Kim Kardashian . </t> <t> Has a huge following in Colombia and other Latin American countries . </t>",
    "summary_trees": [
      "# ::snt  Cuban - born Kathy Ferreiro 's curves have attracted fans on social media . \n(a / attract-01\n      :ARG0 (c / curve\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Kathy\"\n                        :op2 \"Ferreiro\")\n                  :ARG1-of (b / bear-02\n                        :location (c2 / country\n                              :name (n2 / name\n                                    :op1 \"Cuba\")))))\n      :ARG1 (f / fan)\n      :medium (m / media\n            :mod (s / social)))",
      "# ::snt  Bikini - loving beach babe says photos of her booty are all natural . \n(s / say-01\n      :ARG0 (b / babe\n            :ARG0-of (l / love-01\n                  :ARG1 (b2 / bikini))\n            :location (b3 / beach)\n            :part (b4 / booty))\n      :ARG1 (n / natural-03\n            :ARG1 (p / photograph-01\n                  :ARG1 b4)\n            :mod (a / all)))",
      "# ::snt  Miami - based party girl is hoping to become next Kim Kardashian . \n(h / hope-01\n      :ARG0 (g / girl\n            :mod (p / party)\n            :ARG1-of (b / base-01\n                  :location (c / city\n                        :name (n / name\n                              :op1 \"Miami\"))))\n      :ARG1 (b2 / become-01\n            :ARG1 g\n            :ARG2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kim\"\n                        :op2 \"Kardinez\")\n                  :mod (n3 / next))))",
      "# ::snt  Has a huge following in Colombia and other Latin American countries . \n(f / follow-02\n      :ARG1 (ii / it)\n      :mod (h / huge)\n      :location (a / and\n            :op1 (c / country\n                  :name (n / name\n                        :op1 \"Colombia\"))\n            :op2 (c2 / country\n                  :location (w / world-region\n                        :name (n2 / name\n                              :op1 \"Latin\"\n                              :op2 \"America\"))\n                  :mod (o / other))))"
    ],
    "tree": [
      "(a / attract-01\n   :ARG0 (c / curve\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Kathy\"\n                              :op2 \"Ferreiro\")\n                     :ARG1-of (b / bear-02\n                                 :location (c2 / country\n                                               :name (n2 / name\n                                                         :op1 \"Cuba\"))))))",
      "(a / attract-01\n   :ARG1 (f / fan))",
      "(a / attract-01\n   :medium (m / media\n              :mod (s / social)))",
      "(c / curve\n   :poss (p / person\n            :name (n / name\n                     :op1 \"Kathy\"\n                     :op2 \"Ferreiro\")\n            :ARG1-of (b / bear-02\n                        :location (c2 / country\n                                      :name (n2 / name\n                                                :op1 \"Cuba\")))))",
      "(m / media\n   :mod (s / social))",
      "(a / attract-01\n   :ARG0 (c / curve))",
      "(b / bear-02\n   :location (c2 / country :name (n2 / name :op1 \"Cuba\")))",
      "(a / attract-01\n   :ARG0 (c / curve))",
      "(b / bear-02\n   :location (c2 / country :name (n2 / name :op1 \"Cuba\")))",
      "(a / attract-01\n   :ARG0 (c / curve\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Kathy\"\n                              :op2 \"Ferreiro\")\n                     :ARG1 (b / bear-02)))\n   :ARG1 (f / fan)\n   :medium (m / media\n              :mod (s / social)))",
      "(a / attract-01\n   :medium (m / media\n              :mod (s / social)))",
      "(s / say-01\n   :ARG0 (b / babe\n            :ARG0-of (l / love-01\n                        :ARG1 (b2 / bikini))\n            :location (b3 / beach)\n            :part (b4 / booty)))",
      "(s / say-01\n   :ARG1 (n / natural-03\n            :ARG1 (p / photograph-01\n                     :ARG1 (b4 / booty))\n            :mod (a / all)))",
      "(b / babe\n   :ARG0-of (l / love-01\n               :ARG1 (b2 / bikini))\n   :location (b3 / beach)\n   :part (b4 / booty))",
      "(n / natural-03\n   :ARG1 (p / photograph-01\n            :ARG1 (b4 / booty))\n   :mod (a / all))",
      "(s / say-01\n   :ARG0 (b / babe))",
      "(l / love-01\n   :ARG1 (b2 / bikini))",
      "(n / natural-03\n   :ARG1 (p / photograph-01))",
      "(p / photograph-01\n   :ARG1 (b4 / booty))",
      "(s / say-01\n   :ARG0 (b / babe))",
      "(l / love-01\n   :ARG1 (b2 / bikini))",
      "(n / natural-03\n   :ARG1 (p / photograph-01))",
      "(p / photograph-01\n   :ARG1 (b4 / booty))",
      "(s / say-01\n   :ARG0 (b / babe\n            :ARG0 (l / love-01\n                     :ARG1 (b2 / bikini))\n            :part (b4 / booty))\n   :ARG1 (n / natural-03\n            :ARG1 (p / photograph-01\n                     :ARG1 b4)\n            :mod (a / all)))",
      "(s / say-01)",
      "(h / hope-01\n   :ARG0 (g / girl\n            :mod (p / party)\n            :ARG1-of (b / base-01\n                        :location (c / city\n                                     :name (n / name\n                                              :op1 \"Miami\")))))",
      "(h / hope-01\n   :ARG1 (b2 / become-01\n             :ARG1 (g / girl)\n             :ARG2 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Kim\"\n                                 :op2 \"Kardinez\")\n                       :mod (n3 / next))))",
      "(g / girl\n   :mod (p / party)\n   :ARG1-of (b / base-01\n               :location (c / city\n                            :name (n / name\n                                     :op1 \"Miami\"))))",
      "(b2 / become-01\n    :ARG1 (g / girl)\n    :ARG2 (p2 / person\n              :name (n2 / name\n                        :op1 \"Kim\"\n                        :op2 \"Kardinez\")\n              :mod (n3 / next)))",
      "(h / hope-01\n   :ARG0 (g / girl))",
      "(b / base-01\n   :location (c / city :name (n / name :op1 \"Miami\")))",
      "(b2 / become-01\n    :ARG1 (g / girl)\n    :ARG2 (p2 / person :name (n2 / name :op1 \"Kim\" :op2 \"Kardinez\"))))",
      "(h / hope-01\n   :ARG0 (g / girl))",
      "(b / base-01\n   :location (c / city :name (n / name :op1 \"Miami\")))",
      "(b2 / become-01\n    :ARG1 (g / girl))",
      "(b2 / become-01\n    :ARG2 (p2 / person :name (n2 / name :op1 \"Kim\" :op2 \"Kardinez\"))))",
      "(h / hope-01\n   :ARG0 (g / girl\n            :mod (p / party)\n            :ARG1 (b / base-01))\n   :ARG1 (b2 / become-01\n             :ARG1 g\n             :ARG2 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Kim\"\n                                 :op2 \"Kardinez\")\n                       :mod (n3 / next))))",
      "(h / hope-01)",
      "(f / follow-02\n   :ARG1 (ii / it))",
      "(f / follow-02\n   :mod (h / huge))",
      "(f / follow-02\n   :location (a / and\n                :op1 (c / country\n                        :name (n / name\n                                 :op1 \"Colombia\"))\n                :op2 (c2 / country\n                         :location (w / world-region\n                                      :name (n2 / name\n                                                :op1 \"Latin\"\n                                                :op2 \"America\"))\n                         :mod (o / other))))",
      "(a / and\n   :op1 (c / country\n           :name (n / name\n                    :op1 \"Colombia\"))\n   :op2 (c2 / country\n            :location (w / world-region\n                         :name (n2 / name\n                                   :op1 \"Latin\"\n                                   :op2 \"America\"))\n            :mod (o / other)))",
      "(f / follow-02\n   :ARG1 (ii / it))",
      "(f / follow-02\n   :ARG1 (ii / it))",
      "(f / follow-02\n   :ARG1 (ii / it)\n   :mod (h / huge)\n   :location (c / country\n                :name (n / name\n                         :op1 \"Colombia\")))",
      "(f / follow-02\n   :ARG1 (ii / it)\n   :mod (h / huge)\n   :location (c2 / country\n                 :location (w / world-region\n                              :name (n2 / name\n                                        :op1 \"Latin\"\n                                        :op2 \"America\"))\n                 :mod (o / other)))",
      "(f / follow-02\n   :ARG1 (ii / it)\n   :mod (h / huge))",
      "(f / follow-02\n   :mod (h / huge)\n   :location (a / and\n                :op1 (c / country\n                        :name (n / name\n                                 :op1 \"Colombia\"))\n                :op2 (c2 / country\n                         :location (w / world-region\n                                      :name (n2 / name\n                                                :op1 \"Latin\"\n                                                :op2 \"America\"))\n                         :mod (o / other))))"
    ],
    "smus": [
      "Kathy Ferreiro's curves, born in Cuba, have attracted :",
      "Fans were attracted.",
      "Social media is a popular medium.",
      "Kathy Ferreiro's curves were born in Cuba.",
      "Social media",
      "Curves are attracted.",
      "Born in Cuba.",
      "Curves are attracted.",
      "Born in Cuba.",
      "Kathy Ferreiro's birth curves have attracted fans through social media.",
      "Social media is a popular medium.",
      "Says babe in bikini loving booty at beach.",
      "\"The photos of the booty are all natural,\" says the man.",
      "a booty beach babe loving a bikini",
      "The photos of the booty are all natural.",
      "Babe says.",
      "Love a Bikini.",
      "The photos are natural.",
      "The booty is in photos.",
      "Babe says.",
      "Love a Bikini.",
      "The photos are natural.",
      "The booty is in photos.",
      "The booty babe who loves bikinis says the photos are all natural.",
      "says.",
      "Hoping for the party girl based in Miami.",
      "Hoping the girl will become the next Kim Kardinez.",
      "a party girl based in miami",
      "The girl will become the next Kim Kardinez.",
      "The girl is hoping.",
      "Based in Miami.",
      "The girl will become Kim Kardinez.",
      "The girl is hoping.",
      "Based in Miami.",
      "The girl will become.",
      "become Kim Kardinez.",
      "The party based girl is hoping to become the next Kim Kardinez.",
      "Hoping.",
      "It will follow.",
      "Huge follow.",
      "Followed by Colombia and other Latin American countries.",
      "Colombia (CO); other Latin American countries (LA)",
      "It will follow.",
      "It will follow.",
      "It is a huge follower in Colombia.",
      "It's a huge follower in other Latin American countries.",
      "It's going to be a huge follow.",
      "There is huge follow in Colombia and other Latin American countries."
    ]
  },
  {
    "instance_id": "realsumm-29",
    "summary": "<t> Thousands of accounts vanished from the social network last week . </t> <t> Twitter said it had received numerous reports about terror - promoting users . </t> <t> Decided to suspend 10,000 accounts for making threats of violence . </t> <t> Suspensions were almost certainly linked to a campaign by ' hacktavist ' collective Anonymous targeting online jihadis . </t>",
    "summary_trees": [
      "# ::snt  Thousands of accounts vanished from the social network last week . \n(v / vanish-01\n      :ARG1 (a / account\n            :quant (m / multiple\n                  :op1 1000))\n      :location (n / network\n            :ARG1-of (s / social-03))\n      :time (w / week\n            :mod (l / last)))",
      "# ::snt  Twitter said it had received numerous reports about terror - promoting users . \n(s / say-01\n      :ARG0 (p / publication\n            :name (n / name\n                  :op1 \"Twitter\"))\n      :ARG1 (r / receive-01\n            :ARG0 p\n            :ARG1 (r2 / report-01\n                  :ARG1 (p2 / person\n                        :ARG0-of (u / use-01)\n                        :ARG0-of (p3 / promote-02\n                              :ARG1 (t / terror)))\n                  :quant (n2 / numerous))))",
      "# ::snt  Decided to suspend 10,000 accounts for making threats of violence . \n(d / decide-01\n      :ARG1 (s / suspend-01\n            :ARG1 (a / account\n                  :quant 10000)\n            :ARG1-of (c / cause-01\n                  :ARG0 (t / threaten-01\n                        :ARG1 (v / violence)))))",
      "# ::snt  Suspensions were almost certainly linked to a campaign by ' hacktavist ' collective Anonymous targeting online jihadis . \n(l / link-01\n      :ARG1 (s / suspend-01)\n      :ARG2 (c / campaign-01\n            :ARG0 (c2 / collective\n                  :name (n / name\n                        :op1 \"Anonymous\")\n                  :mod (h / hacktavist))\n            :ARG0-of (t / target-01\n                  :ARG1 (j / jihadi\n                        :mod (o / online))))\n      :mod (c3 / certain\n            :mod (a / almost)))"
    ],
    "tree": [
      "(v / vanish-01\n   :ARG1 (a / account\n            :quant (m / multiple\n                      :op1 1000)))",
      "(v / vanish-01\n   :location (n / network\n                :ARG1-of (s / social-03)))",
      "(v / vanish-01\n   :time (w / week\n            :mod (l / last)))",
      "(a / account\n   :quant (m / multiple\n             :op1 1000))",
      "(n / network\n   :ARG1-of (s / social-03))",
      "(w / week\n   :mod (l / last))",
      "(v / vanish-01\n   :ARG1 (a / account))",
      "(s / social-03)",
      "(v / vanish-01\n   :ARG1 (a / account))",
      "(v / vanish-01\n   :ARG1 (a / account\n            :quant (m / multiple\n                      :op1 1000)))",
      "(v / vanish-01\n   :location (n / network)\n   :time (w / week\n            :mod (l / last)))",
      "(s / say-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"Twitter\")))",
      "(s / say-01\n   :ARG1 (r / receive-01\n            :ARG0 (p / publication :name (n / name :op1 \"Twitter\"))\n            :ARG1 (r2 / report-01\n                      :ARG1 (p2 / person\n                                :ARG0-of (u / use-01)\n                                :ARG0-of (p3 / promote-02\n                                             :ARG1 (t / terror)))\n                      :quant (n2 / numerous))))",
      "(p / publication\n   :name (n / name\n            :op1 \"Twitter\"))",
      "(r / receive-01\n   :ARG0 (p / publication :name (n / name :op1 \"Twitter\"))\n   :ARG1 (r2 / report-01\n             :ARG1 (p2 / person\n                       :ARG0-of (u / use-01)\n                       :ARG0-of (p3 / promote-02\n                                    :ARG1 (t / terror)))\n             :quant (n2 / numerous)))",
      "(s / say-01\n   :ARG0 (p / publication :name (n / name :op1 \"Twitter\")))",
      "(r / receive-01\n   :ARG0 (p / publication :name (n / name :op1 \"Twitter\"))\n   :ARG1 (r2 / report-01))",
      "(r2 / report-01\n    :ARG1 (p2 / person))",
      "(u / use-01)",
      "(p3 / promote-02\n    :ARG1 (t / terror))",
      "(s / say-01\n   :ARG0 (p / publication :name (n / name :op1 \"Twitter\")))",
      "(r / receive-01\n   :ARG0 (p / publication :name (n / name :op1 \"Twitter\")))",
      "(r / receive-01\n   :ARG1 (r2 / report-01))",
      "(r2 / report-01\n    :ARG1 (p2 / person))",
      "(p3 / promote-02\n    :ARG1 (t / terror))",
      "(s / say-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"Twitter\"))\n   :ARG1 (r / receive-01\n            :ARG0 p\n            :ARG1 (r2 / report-01\n                      :ARG1 (p2 / person\n                                :ARG0 (u / use-01)\n                                :ARG0 (p3 / promote-02\n                                          :ARG1 (t / terror)))\n                      :quant (n2 / numerous))))",
      "(s / say-01)",
      "(d / decide-01\n   :ARG1 (s / suspend-01\n            :ARG1 (a / account\n                     :quant 10000)\n            :ARG1-of (c / cause-01\n                        :ARG0 (t / threaten-01\n                                 :ARG1 (v / violence)))))",
      "(s / suspend-01\n   :ARG1 (a / account\n            :quant 10000)\n   :ARG1-of (c / cause-01\n               :ARG0 (t / threaten-01\n                        :ARG1 (v / violence))))",
      "(d / decide-01\n   :ARG1 (s / suspend-01))",
      "(s / suspend-01\n   :ARG1 (a / account))",
      "(c / cause-01\n   :ARG0 (t / threaten-01))",
      "(t / threaten-01\n   :ARG1 (v / violence))",
      "(d / decide-01\n   :ARG1 (s / suspend-01))",
      "(s / suspend-01\n   :ARG1 (a / account))",
      "(c / cause-01\n   :ARG0 (t / threaten-01))",
      "(t / threaten-01\n   :ARG1 (v / violence))",
      "(d / decide-01\n   :ARG1 (s / suspend-01\n            :ARG1 (a / account\n                     :quant 10000)\n            :ARG1 (c / cause-01\n                     :ARG0 (t / threaten-01\n                              :ARG1 (v / violence)))))",
      "(d / decide-01)",
      "(l / link-01\n   :ARG1 (s / suspend-01))",
      "(l / link-01\n   :ARG2 (c / campaign-01\n            :ARG0 (c2 / collective\n                      :name (n / name\n                               :op1 \"Anonymous\")\n                      :mod (h / hacktavist))\n            :ARG0-of (t / target-01\n                        :ARG1 (j / jihadi\n                                 :mod (o / online)))))",
      "(l / link-01\n   :mod (c3 / certain\n            :mod (a / almost)))",
      "(c / campaign-01\n   :ARG0 (c2 / collective\n             :name (n / name\n                      :op1 \"Anonymous\")\n             :mod (h / hacktavist))\n   :ARG0-of (t / target-01\n               :ARG1 (j / jihadi\n                        :mod (o / online))))",
      "(c3 / certain\n    :mod (a / almost))",
      "(l / link-01\n   :ARG1 (s / suspend-01))",
      "(s / suspend-01)",
      "(c / campaign-01\n   :ARG0 (c2 / collective :name (n / name :op1 \"Anonymous\"))))",
      "(t / target-01\n   :ARG1 (j / jihadi))",
      "(l / link-01\n   :ARG1 (s / suspend-01))",
      "(c / campaign-01\n   :ARG0 (c2 / collective :name (n / name :op1 \"Anonymous\"))))",
      "(t / target-01\n   :ARG1 (j / jihadi))",
      "(l / link-01\n   :ARG1 (s / suspend-01)\n   :ARG2 (c / campaign-01\n            :ARG0 (c2 / collective\n                      :name (n / name\n                               :op1 \"Anonymous\")\n                      :mod (h / hacktavist))\n            :ARG0 (t / target-01\n                     :ARG1 (j / jihadi\n                              :mod (o / online))))\n   :mod (c3 / certain\n            :mod (a / almost)))",
      "(l / link-01\n   :mod (c3 / certain\n            :mod (a / almost)))"
    ],
    "smus": [
      "Thousands of accounts vanished.",
      "The social network vanished.",
      "vanished last week.",
      "Thousands of accounts.",
      "social network",
      "Last week.",
      "Accounts vanished.",
      "Social.",
      "Accounts vanished.",
      "Thousands of accounts vanished.",
      "The network vanished last week.",
      "@twitter,",
      "Twitter had received numerous reports of terror-propaganda users, the company said.",
      "Twitter",
      "Twitter has received numerous reports of terror-propaganda users.",
      "@twitter,",
      "Twitter has received reports.",
      "Reports from people.",
      "Used.",
      "Promoting terror",
      "@twitter,",
      "Twitter has received.",
      "Reports have been received.",
      "Reports from people.",
      "Promoting terror",
      "Twitter said it had received numerous reports of users promoting terror.",
      "said.",
      "10000 accounts were decided to suspend over threats of violence.",
      "10000 accounts suspended over threats of violence",
      "The decision to suspend was made.",
      "Suspend accounts.",
      "Because of threats.",
      "Violence threats",
      "The decision to suspend was made.",
      "Suspend accounts.",
      "Because of threats.",
      "Violence threats",
      "10000 accounts were decided to suspend over threats of violence.",
      "Decided.",
      "Suspends linked.",
      "Link to an anonymous hacktavist collective campaign targeting online jihadis.",
      "Almost certainly linked.",
      "Anonymous is a hacktavist collective campaign targeting online jihadis.",
      "Almost certainly.",
      "Suspends linked.",
      "Suspended.",
      "Anonymous collective campaign",
      "targeting jihadis.",
      "Suspends linked.",
      "Anonymous collective campaign",
      "targeting jihadis.",
      "The suspensions are almost certainly linked to an anonymous hacktavist collective's campaign targeting online jihadis.",
      "Almost certainly linked."
    ]
  },
  {
    "instance_id": "realsumm-30",
    "summary": "<t> Locals say power cuts the weekend before raid could be linked to heist . </t> <t> They also tell of suspicious ' drilling ' noises on evening of Good Friday . </t> <t> Group seen returning to scene on Saturday - a day after initial break - in . </t> <t> Police admit they did n't respond after alarm went off early on Friday . </t>",
    "summary_trees": [
      "# ::snt  Locals say power cuts the weekend before raid could be linked to heist . \n(s / say-01\n      :ARG0 (p / person\n            :ARG1-of (l / local-02))\n      :ARG1 (p2 / possible-01\n            :ARG1 (l2 / link-01\n                  :ARG1 (c / cut-02\n                        :ARG1 (p3 / power)\n                        :time (w / weekend)\n                        :time (b / before\n                              :op1 (r / raid-01)))\n                  :ARG2 (h / heist))))",
      "# ::snt  They also tell of suspicious ' drilling ' noises on evening of Good Friday . \n(t / tell-01\n      :ARG0 (t2 / they)\n      :ARG1 (n / noise\n            :mod (d / drill-01)\n            :ARG1-of (s / suspicious-03)\n            :time (d2 / date-entity\n                  :weekday (f / friday)\n                  :dayperiod (e / evening)))\n      :mod (a / also))",
      "# ::snt  Group seen returning to scene on Saturday - a day after initial break - in . \n(s / see-01\n      :ARG1 (r / return-01\n            :ARG1 (g / group)\n            :ARG4 (s2 / scene)\n            :time (d / date-entity\n                  :weekday (s3 / saturday))\n            :time (a / after\n                  :op1 (b / break-02\n                        :mod (ii / initial))\n                  :quant (t / temporal-quantity\n                        :quant 1\n                        :unit (d2 / day)))))",
      "# ::snt  Police admit they did n't respond after alarm went off early on Friday . \n(a / admit-01\n      :ARG0 (p / police)\n      :ARG1 (r / respond-01\n            :polarity -\n            :ARG0 p\n            :time (a2 / after\n                  :op1 (g / go-off-16\n                        :ARG1 (a3 / alarm-01)\n                        :time (e / early\n                              :op1 (d / date-entity\n                                    :weekday (f / friday)))))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / person\n            :ARG1-of (l / local-02)))",
      "(s / say-01\n   :ARG1 (p2 / possible-01\n             :ARG1 (l2 / link-01\n                       :ARG1 (c / cut-02\n                                :ARG1 (p3 / power)\n                                :time (w / weekend)\n                                :time (b / before\n                                         :op1 (r / raid-01)))\n                       :ARG2 (h / heist))))",
      "(p / person\n   :ARG1-of (l / local-02))",
      "(p2 / possible-01\n    :ARG1 (l2 / link-01\n              :ARG1 (c / cut-02\n                       :ARG1 (p3 / power)\n                       :time (w / weekend)\n                       :time (b / before\n                                :op1 (r / raid-01)))\n              :ARG2 (h / heist)))",
      "(s / say-01\n   :ARG0 (p / person))",
      "(l / local-02)",
      "(p2 / possible-01\n    :ARG1 (l2 / link-01))",
      "(l2 / link-01\n    :ARG1 (c / cut-02))",
      "(c / cut-02\n   :ARG1 (p3 / power))",
      "(r / raid-01)",
      "(s / say-01\n   :ARG0 (p / person))",
      "(p2 / possible-01\n    :ARG1 (l2 / link-01))",
      "(l2 / link-01\n    :ARG1 (c / cut-02))",
      "(c / cut-02\n   :ARG1 (p3 / power))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG1 (l / local-02))\n   :ARG1 (p2 / possible-01\n             :ARG1 (l2 / link-01\n                       :ARG1 (c / cut-02\n                                :ARG1 (p3 / power))\n                       :ARG2 (h / heist))))",
      "(s / say-01)",
      "(t / tell-01\n   :ARG0 (t2 / they))",
      "(t / tell-01\n   :ARG1 (n / noise\n            :mod (d / drill-01)\n            :ARG1-of (s / suspicious-03)\n            :time (d2 / date-entity\n                      :weekday (f / friday)\n                      :dayperiod (e / evening))))",
      "(t / tell-01\n   :mod (a / also))",
      "(n / noise\n   :mod (d / drill-01)\n   :ARG1-of (s / suspicious-03)\n   :time (d2 / date-entity\n             :weekday (f / friday)\n             :dayperiod (e / evening)))",
      "(t / tell-01\n   :ARG0 (t2 / they))",
      "(d / drill-01)",
      "(s / suspicious-03)",
      "(t / tell-01\n   :ARG0 (t2 / they))",
      "(t / tell-01\n   :ARG0 (t2 / they)\n   :ARG1 (n / noise\n            :mod (d / drill-01)\n            :ARG1 (s / suspicious-03))\n   :mod (a / also))",
      "(t / tell-01\n   :mod (a / also))",
      "(s / see-01\n   :ARG1 (r / return-01\n            :ARG1 (g / group)\n            :ARG4 (s2 / scene)\n            :time (d / date-entity\n                     :weekday (s3 / saturday))\n            :time (a / after\n                     :op1 (b / break-02\n                             :mod (ii / initial))\n                     :quant (t / temporal-quantity\n                               :quant 1\n                               :unit (d2 / day)))))",
      "(r / return-01\n   :ARG1 (g / group)\n   :ARG4 (s2 / scene)\n   :time (d / date-entity\n            :weekday (s3 / saturday))\n   :time (a / after\n            :op1 (b / break-02\n                    :mod (ii / initial))\n            :quant (t / temporal-quantity\n                      :quant 1\n                      :unit (d2 / day))))",
      "(s / see-01\n   :ARG1 (r / return-01))",
      "(r / return-01\n   :ARG1 (g / group))",
      "(b / break-02\n   :mod (ii / initial))",
      "(s / see-01\n   :ARG1 (r / return-01))",
      "(r / return-01\n   :ARG1 (g / group))",
      "(b / break-02\n   :mod (ii / initial))",
      "(s / see-01\n   :ARG1 (r / return-01\n            :ARG1 (g / group)\n            :ARG4 (s2 / scene)))",
      "(s / see-01)",
      "(a / admit-01\n   :ARG0 (p / police))",
      "(a / admit-01\n   :ARG1 (r / respond-01\n            :polarity -\n            :ARG0 (p / police)\n            :time (a2 / after\n                      :op1 (g / go-off-16\n                              :ARG1 (a3 / alarm-01)\n                              :time (e / early\n                                       :op1 (d / date-entity\n                                               :weekday (f / friday)))))))",
      "(r / respond-01\n   :polarity -\n   :ARG0 (p / police)\n   :time (a2 / after\n             :op1 (g / go-off-16\n                     :ARG1 (a3 / alarm-01)\n                     :time (e / early\n                              :op1 (d / date-entity\n                                      :weekday (f / friday))))))",
      "(a / admit-01\n   :ARG0 (p / police))",
      "(r / respond-01\n   :polarity -\n   :ARG0 (p / police)\n   :time (a2 / after))",
      "(a3 / alarm-01)",
      "(a / admit-01\n   :ARG0 (p / police))",
      "(r / respond-01\n   :polarity -)",
      "(r / respond-01\n   :ARG0 (p / police))",
      "(r / respond-01\n   :time (a2 / after))",
      "(a / admit-01\n   :ARG0 (p / police)\n   :ARG1 (r / respond-01\n            :polarity -\n            :ARG0 p))",
      "(a / admit-01)"
    ],
    "smus": [
      "Locals say --",
      "Power cuts over the weekend before the raid could have been linked to the heist, the sources say.",
      "Locals.",
      "Power cuts over the weekend before the raid could have been linked to the heist.",
      "People say...",
      "Locals.",
      "Linky.",
      "The cuts are linked.",
      "Power cuts.",
      "The raid.",
      "People say...",
      "Linky.",
      "The cuts are linked.",
      "Power cuts.",
      "Locals say power cuts could be linked to a heist.",
      "Say.",
      "They tell.",
      "Suspicious drilling noises are told Friday evening.",
      "Also tell.",
      "Suspicious drilling noises Friday evening.",
      "They tell.",
      "Drill.",
      "Suspicious.",
      "They tell.",
      "They also tell of suspicious drilling noises.",
      "Also tell.",
      "The Group saw the scene returning on Saturday, a day after the initial break.",
      "The Group was returning to the scene Saturday, a day after the initial break.",
      "Seemed to be returning.",
      "Group is returning.",
      "Initial break.",
      "Seemed to be returning.",
      "Group is returning.",
      "Initial break.",
      "The Group saw themselves returning to the scene.",
      "Seed.",
      "Police admit.",
      "Police admit they didn't respond after the alarm went off early Friday.",
      "Police didn't respond after the alarm went off early Friday.",
      "Police admit.",
      "Police didn't respond after.",
      "Alas.",
      "Police admit.",
      "Don't respond.",
      "Police will respond.",
      "respond after.",
      "Police admit they didn't respond.",
      "admit."
    ]
  },
  {
    "instance_id": "realsumm-31",
    "summary": "<t> Shiraz Nawaz felt lucky to be alive after the flames shot out the manhole . </t> <t> The fire erupted just moments after he walked over it in the busy street . </t> <t> Incredibly no - one was hurt in the incident after Nawaz evacuated the area . </t>",
    "summary_trees": [
      "# ::snt  Shiraz Nawaz felt lucky to be alive after the flames shot out the manhole . \n(f / feel-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Shiraz\"\n                  :op2 \"Nawaz\"))\n      :ARG1 (l / lucky\n            :domain p\n            :ARG1-of (c / cause-01\n                  :ARG0 (l2 / live-01\n                        :ARG0 p)))\n      :time (a / after\n            :op1 (s / shoot-02\n                  :ARG0 (f2 / flame)\n                  :ARG3 (m / manhole))))",
      "# ::snt  The fire erupted just moments after he walked over it in the busy street . \n(e / erupt-01\n      :ARG1 (f / fire)\n      :time (a / after\n            :op1 (w / walk-01\n                  :ARG0 (h / he)\n                  :ARG2 (o / over\n                        :op1 f)\n                  :location (s / street\n                        :ARG1-of (b / busy-02)))\n            :quant (m / moment\n                  :mod (j / just))))",
      "# ::snt  Incredibly no - one was hurt in the incident after Nawaz evacuated the area . \n(h / hurt-01\n      :ARG1 (n / no-one)\n      :manner (ii / incredible)\n      :time (ii2 / incident)\n      :time (a / after\n            :op1 (e / evacuate-01\n                  :ARG0 (p / person\n                        :name (n2 / name\n                              :op1 \"Nawaz\"))\n                  :ARG1 (a2 / area))))"
    ],
    "tree": [
      "(f / feel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Shiraz\"\n                     :op2 \"Nawaz\")))",
      "(f / feel-01\n   :ARG1 (l / lucky\n            :domain (p / person :name (n / name :op1 \"Shiraz\" :op2 \"Nawaz\"))\n            :ARG1-of (c / cause-01\n                        :ARG0 (l2 / live-01\n                                  :ARG0 p))))",
      "(f / feel-01\n   :time (a / after\n            :op1 (s / shoot-02\n                    :ARG0 (f2 / flame)\n                    :ARG3 (m / manhole))))",
      "(p / person\n   :name (n / name\n            :op1 \"Shiraz\"\n            :op2 \"Nawaz\"))",
      "(l / lucky\n   :domain (p / person :name (n / name :op1 \"Shiraz\" :op2 \"Nawaz\"))\n   :ARG1-of (c / cause-01\n               :ARG0 (l2 / live-01\n                         :ARG0 p)))",
      "(a / after\n   :op1 (s / shoot-02\n           :ARG0 (f2 / flame)\n           :ARG3 (m / manhole)))",
      "(f / feel-01\n   :ARG0 (p / person :name (n / name :op1 \"Shiraz\" :op2 \"Nawaz\")))",
      "(c / cause-01\n   :ARG0 (l2 / live-01))",
      "(l2 / live-01\n    :ARG0 (p / person :name (n / name :op1 \"Shiraz\" :op2 \"Nawaz\")))",
      "(s / shoot-02\n   :ARG0 (f2 / flame))",
      "(f / feel-01\n   :ARG0 (p / person :name (n / name :op1 \"Shiraz\" :op2 \"Nawaz\")))",
      "(c / cause-01\n   :ARG0 (l2 / live-01))",
      "(l2 / live-01\n    :ARG0 (p / person :name (n / name :op1 \"Shiraz\" :op2 \"Nawaz\")))",
      "(s / shoot-02\n   :ARG0 (f2 / flame))",
      "(f / feel-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Shiraz\"\n                     :op2 \"Nawaz\"))\n   :ARG1 (l / lucky\n            :domain p\n            :ARG1 (c / cause-01\n                     :ARG0 (l2 / live-01\n                               :ARG0 p))))",
      "(f / feel-01\n   :time (a / after\n            :op1 (s / shoot-02)))",
      "(e / erupt-01\n   :ARG1 (f / fire))",
      "(e / erupt-01\n   :time (a / after\n            :op1 (w / walk-01\n                    :ARG0 (h / he)\n                    :ARG2 (o / over\n                             :op1 (f / fire))\n                    :location (s / street\n                                 :ARG1-of (b / busy-02)))\n            :quant (m / moment\n                      :mod (j / just))))",
      "(a / after\n   :op1 (w / walk-01\n           :ARG0 (h / he)\n           :ARG2 (o / over\n                    :op1 (f / fire))\n           :location (s / street\n                        :ARG1-of (b / busy-02)))\n   :quant (m / moment\n             :mod (j / just)))",
      "(e / erupt-01\n   :ARG1 (f / fire))",
      "(w / walk-01\n   :ARG0 (h / he))",
      "(b / busy-02)",
      "(e / erupt-01\n   :ARG1 (f / fire))",
      "(w / walk-01\n   :ARG0 (h / he))",
      "(e / erupt-01\n   :ARG1 (f / fire))",
      "(e / erupt-01\n   :time (a / after\n            :op1 (w / walk-01\n                    :location (s / street))\n            :quant (m / moment\n                      :mod (j / just))))",
      "(h / hurt-01\n   :ARG1 (n / no-one))",
      "(h / hurt-01\n   :manner (ii / incredible))",
      "(h / hurt-01\n   :time (ii2 / incident))",
      "(h / hurt-01\n   :time (a / after\n            :op1 (e / evacuate-01\n                    :ARG0 (p / person\n                             :name (n2 / name\n                                       :op1 \"Nawaz\"))\n                    :ARG1 (a2 / area))))",
      "(a / after\n   :op1 (e / evacuate-01\n           :ARG0 (p / person\n                    :name (n2 / name\n                              :op1 \"Nawaz\"))\n           :ARG1 (a2 / area)))",
      "(h / hurt-01\n   :ARG1 (n / no-one))",
      "(e / evacuate-01\n   :ARG0 (p / person :name (n2 / name :op1 \"Nawaz\")))",
      "(h / hurt-01\n   :ARG1 (n / no-one))",
      "(e / evacuate-01\n   :ARG0 (p / person :name (n2 / name :op1 \"Nawaz\")))",
      "(h / hurt-01\n   :ARG1 (n / no-one)\n   :manner (ii / incredible))",
      "(h / hurt-01\n   :manner (ii / incredible)\n   :time (ii2 / incident)\n   :time (a / after\n            :op1 (e / evacuate-01)))"
    ],
    "smus": [
      "Shiraz Nawabs felt.",
      "Shiraz Nawabs felt lucky to have lived.",
      "Feeled after flames shot through the manhole.",
      "Shiraz Nawabs",
      "Shiraz Nawabs is lucky to have lived.",
      "After flames shot through the manhole.",
      "Shiraz Nawabs felt.",
      "Because of life.",
      "Shiraz Nawabs lives.",
      "The flames shot.",
      "Shiraz Nawabs felt.",
      "Because of life.",
      "Shiraz Nawabs lives.",
      "The flames shot.",
      "Shiraz Nawza felt lucky to have lived.",
      "Feeled after the shots.",
      "The fire erupted.",
      "Just moments after he walked over a fire on a busy street, the erupting.",
      "Just moments after he walked over a fire on a busy street.",
      "The fire erupted.",
      "He walked.",
      "Busy.",
      "The fire erupted.",
      "He walked.",
      "The fire erupted.",
      "Just moments after the street was walked on, an eruption erupted.",
      "No one was hurt.",
      "incredibly hurt.",
      "hurt in the incident.",
      "hurt after Nawabs evacuated the area.",
      "After Nawabs evacuated the area.",
      "No one was hurt.",
      "Nawabs evacuated.",
      "No one was hurt.",
      "Nawabs evacuated.",
      "No one was hurt incredibly.",
      "incredibly hurt during the incident after evacuations."
    ]
  },
  {
    "instance_id": "realsumm-32",
    "summary": "<t> Ao Nang Princess 5 ferry was in Andaman Sea on way from resort of Krabi . </t> <t> Was five miles from the coast travelling to Phuket when engine exploded . </t> <t> 35-metre - long boat caught fire around 3.30pm before sinking around 6 pm . </t> <t> Passengers seen throwing themselves overboard before being rescued . </t> <t> No injuries reported but search will continue into tomorrow for missing girl . </t>",
    "summary_trees": [
      "# ::snt  Ao Nang Princess 5 ferry was in Andaman Sea on way from resort of Krabi . \n(b / be-located-at-91\n      :ARG1 (f / ferry\n            :name (n / name\n                  :op1 \"Ao\"\n                  :op2 \"Nang\"\n                  :op3 \"Princess\"\n                  :op4 5))\n      :ARG2 (s / sea\n            :name (n2 / name\n                  :op1 \"Andaman\"\n                  :op2 \"Sea\"))\n      :time (w / way\n            :direction (r / resort\n                  :name (n3 / name\n                        :op1 \"Krabi\"))))",
      "# ::snt  Was five miles from the coast travelling to Phuket when engine exploded . \n(t / travel-01\n      :ARG0 (ii / i)\n      :ARG1 (ii2 / island\n            :name (n / name\n                  :op1 \"Phuket\"))\n      :time (e / explode-01\n            :ARG1 (e2 / engine))\n      :extent (d / distance-quantity\n            :quant 5\n            :unit (m / mile)\n            :location (f / from\n                  :op1 (c / coast))))",
      "# ::snt  35-metre - long boat caught fire around 3.30pm before sinking around 6 pm . \n(a / and\n      :op1 (c / catch-on-fire-09\n            :ARG1 (b / boat\n                  :ARG1-of (l / long-03\n                        :ARG2 (d / distance-quantity\n                              :quant 35\n                              :unit (m / meter))))\n            :time (a2 / around\n                  :op1 (d2 / date-entity\n                        :time \"15:30\")))\n      :op2 (s / sink-01\n            :ARG1 b\n            :time (a3 / around\n                  :op1 (d3 / date-entity\n                        :time \"18:00\"))))",
      "# ::snt  Passengers seen throwing themselves overboard before being rescued . \n(s / see-01\n      :ARG1 (t / throw-01\n            :ARG0 (p / passenger)\n            :ARG1 p\n            :ARG2 (o / overboard)\n            :time (b / before\n                  :op1 (r / rescue-01\n                        :ARG1 p))))",
      "# ::snt  No injuries reported but search will continue into tomorrow for missing girl . \n(h / have-concession-91\n      :ARG1 (c / continue-01\n            :ARG1 (s / search-01\n                  :ARG2 (g / girl\n                        :ARG1-of (m / miss-01)))\n            :time (ii / into\n                  :op1 (t / tomorrow)))\n      :ARG2 (r / report-01\n            :polarity -\n            :ARG1 (ii2 / injure-01)))"
    ],
    "tree": [
      "(b / be-located-at-91\n   :ARG1 (f / ferry\n            :name (n / name\n                     :op1 \"Ao\"\n                     :op2 \"Nang\"\n                     :op3 \"Princess\"\n                     :op4 5)))",
      "(b / be-located-at-91\n   :ARG2 (s / sea\n            :name (n2 / name\n                      :op1 \"Andaman\"\n                      :op2 \"Sea\")))",
      "(b / be-located-at-91\n   :time (w / way\n            :direction (r / resort\n                          :name (n3 / name\n                                    :op1 \"Krabi\"))))",
      "(f / ferry\n   :name (n / name\n            :op1 \"Ao\"\n            :op2 \"Nang\"\n            :op3 \"Princess\"\n            :op4 5))",
      "(s / sea\n   :name (n2 / name\n             :op1 \"Andaman\"\n             :op2 \"Sea\"))",
      "(w / way\n   :direction (r / resort\n                 :name (n3 / name\n                           :op1 \"Krabi\")))",
      "(b / be-located-at-91\n   :ARG1 (f / ferry\n            :name (n / name\n                     :op1 \"Ao\"\n                     :op2 \"Nang\"\n                     :op3 \"Princess\"\n                     :op4 5))\n   :ARG2 (s / sea\n            :name (n2 / name\n                      :op1 \"Andaman\"\n                      :op2 \"Sea\")))",
      "(b / be-located-at-91\n   :time (w / way\n            :direction (r / resort\n                          :name (n3 / name\n                                    :op1 \"Krabi\"))))",
      "(t / travel-01\n   :ARG0 (ii / i))",
      "(t / travel-01\n   :ARG1 (ii2 / island\n              :name (n / name\n                       :op1 \"Phuket\")))",
      "(t / travel-01\n   :time (e / explode-01\n            :ARG1 (e2 / engine)))",
      "(t / travel-01\n   :extent (d / distance-quantity\n              :quant 5\n              :unit (m / mile)\n              :location (f / from\n                           :op1 (c / coast))))",
      "(ii2 / island\n     :name (n / name\n              :op1 \"Phuket\"))",
      "(e / explode-01\n   :ARG1 (e2 / engine))",
      "(d / distance-quantity\n   :quant 5\n   :unit (m / mile)\n   :location (f / from\n                :op1 (c / coast)))",
      "(t / travel-01\n   :ARG0 (ii / i))",
      "(e / explode-01\n   :ARG1 (e2 / engine))",
      "(t / travel-01\n   :ARG0 (ii / i))",
      "(e / explode-01\n   :ARG1 (e2 / engine))",
      "(t / travel-01\n   :ARG0 (ii / i)\n   :ARG1 (ii2 / island\n              :name (n / name\n                       :op1 \"Phuket\"))\n   :extent (d / distance-quantity\n              :quant 5\n              :unit (m / mile)))",
      "(t / travel-01\n   :time (e / explode-01)\n   :extent (d / distance-quantity\n              :quant 5\n              :unit (m / mile)\n              :location (f / from\n                           :op1 (c / coast))))",
      "(a / and\n   :op1 (c / catch-on-fire-09\n           :ARG1 (b / boat\n                    :ARG1-of (l / long-03\n                                :ARG2 (d / distance-quantity\n                                         :quant 35\n                                         :unit (m / meter))))\n           :time (a2 / around\n                     :op1 (d2 / date-entity\n                              :time \"15:30\"))))",
      "(a / and\n   :op2 (s / sink-01\n           :ARG1 (b / boat)\n           :time (a3 / around\n                     :op1 (d3 / date-entity\n                              :time \"18:00\"))))",
      "(c / catch-on-fire-09\n   :ARG1 (b / boat\n            :ARG1-of (l / long-03\n                        :ARG2 (d / distance-quantity\n                                 :quant 35\n                                 :unit (m / meter))))\n   :time (a2 / around\n             :op1 (d2 / date-entity\n                      :time \"15:30\")))",
      "(s / sink-01\n   :ARG1 (b / boat)\n   :time (a3 / around\n             :op1 (d3 / date-entity\n                      :time \"18:00\")))",
      "(c / catch-on-fire-09\n   :ARG1 (b / boat))",
      "(l / long-03\n   :ARG2 (d / distance-quantity))",
      "(s / sink-01\n   :ARG1 (b / boat)\n   :time (a3 / around))",
      "(c / catch-on-fire-09\n   :ARG1 (b / boat))",
      "(l / long-03\n   :ARG2 (d / distance-quantity))",
      "(s / sink-01\n   :ARG1 (b / boat))",
      "(s / sink-01\n   :time (a3 / around))",
      "(c / catch-on-fire-09\n   :ARG1 (b / boat\n            :ARG1-of (l / long-03\n                        :ARG2 (d / distance-quantity\n                                 :quant 35\n                                 :unit (m / meter))))\n   :time (a2 / around\n             :op1 (d2 / date-entity\n                      :time \"15:30\")))",
      "(s / sink-01\n   :ARG1 (b / boat)\n   :time (a3 / around\n             :op1 (d3 / date-entity\n                      :time \"18:00\")))",
      "(a / and\n   :op1 (c / catch-on-fire-09\n           :ARG1 (b / boat\n                    :ARG1 (l / long-03\n                             :ARG2 (d / distance-quantity\n                                      :quant 35\n                                      :unit (m / meter)))))\n   :op2 (s / sink-01\n           :ARG1 b))",
      "(a / and\n   :op1 (c / catch-on-fire-09\n           :time (a2 / around\n                     :op1 (d2 / date-entity\n                              :time \"15:30\")))\n   :op2 (s / sink-01))",
      "(s / see-01\n   :ARG1 (t / throw-01\n            :ARG0 (p / passenger\n                     :ARG1-of t)\n            :ARG2 (o / overboard)\n            :time (b / before\n                     :op1 (r / rescue-01\n                             :ARG1 p))))",
      "(t / throw-01\n   :ARG0 (p / passenger\n            :ARG1-of t)\n   :ARG2 (o / overboard)\n   :time (b / before\n            :op1 (r / rescue-01\n                    :ARG1 p)))",
      "(s / see-01\n   :ARG1 (t / throw-01))",
      "(t / throw-01\n   :ARG0 (p / passenger))",
      "(r / rescue-01\n   :ARG1 (p / passenger))",
      "(s / see-01\n   :ARG1 (t / throw-01))",
      "(t / throw-01\n   :ARG0 (p / passenger))",
      "(r / rescue-01\n   :ARG1 (p / passenger))",
      "(s / see-01\n   :ARG1 (t / throw-01\n            :ARG0 (p / passenger\n                     :ARG1-of t)\n            :ARG2 (o / overboard)))",
      "(s / see-01)",
      "(h / have-concession-91\n   :ARG1 (c / continue-01\n            :ARG1 (s / search-01\n                     :ARG2 (g / girl\n                              :ARG1-of (m / miss-01)))\n            :time (ii / into\n                      :op1 (t / tomorrow))))",
      "(h / have-concession-91\n   :ARG2 (r / report-01\n            :polarity -\n            :ARG1 (ii2 / injure-01)))",
      "(c / continue-01\n   :ARG1 (s / search-01\n            :ARG2 (g / girl\n                     :ARG1-of (m / miss-01)))\n   :time (ii / into\n             :op1 (t / tomorrow)))",
      "(r / report-01\n   :polarity -\n   :ARG1 (ii2 / injure-01))",
      "(c / continue-01\n   :ARG1 (s / search-01))",
      "(s / search-01\n   :ARG2 (g / girl))",
      "(m / miss-01)",
      "(r / report-01\n   :polarity -\n   :ARG1 (ii2 / injure-01))",
      "(ii2 / injure-01)",
      "(c / continue-01\n   :ARG1 (s / search-01))",
      "(s / search-01\n   :ARG2 (g / girl))",
      "(r / report-01\n   :polarity -)",
      "(r / report-01\n   :ARG1 (ii2 / injure-01))",
      "(h / have-concession-91\n   :ARG1 (c / continue-01\n            :ARG1 (s / search-01\n                     :ARG2 (g / girl\n                              :ARG1 (m / miss-01))))\n   :ARG2 (r / report-01\n            :polarity -\n            :ARG1 (ii2 / injure-01)))",
      "(h / have-concession-91)"
    ],
    "smus": [
      "Ao Nang Princess 5 ferry",
      "In the Andaman Sea.",
      "On the way to Rabi resort.",
      "Ao Nang Princess 5 ferry",
      "Andaman Sea",
      "The way to Rabi.",
      "The Ao Nang Princess 5 ferry is on the Andaman Sea.",
      "On the way to Rabi resort.",
      "I'm traveling.",
      "Traveling to Phuket.",
      "Traveling when the engine exploded.",
      "Traveling 5 miles from the coast.",
      "Phuket",
      "The engine exploded.",
      "5 miles from the coast",
      "I'm traveling.",
      "The engine exploded.",
      "I'm traveling.",
      "The engine exploded.",
      "I'm traveling 5 miles to Phuket.",
      "The explosion was traveling five miles from the coast.",
      "The 35-meter-long boat caught fire around 5:30pm.",
      "And the boat was sinking around 8 o'clock a.m.",
      "The 35-metre-long boat caught fire around 5:30 p.m.",
      "The boat was sinking around 8 o'clock p.m.",
      "The boat caught on fire.",
      "Long distance.",
      "The boat was sinking around.",
      "The boat caught on fire.",
      "Long distance.",
      "The boat is sinking.",
      "Sailing around.",
      "The 35-metre-long boat caught fire around 5:30 p.m.",
      "The boat was sinking around 8 o'clock p.m.",
      "The 35-meter-long boat caught fire, sinking.",
      "Catcheth fire around 5:30 p.m., sinking.",
      "The passengers were seen throwing overboard before being rescued.",
      "The passengers were throwing overboard before being rescued.",
      "The throwing was seen.",
      "The passengers were throwing.",
      "The passengers were rescued.",
      "The throwing was seen.",
      "The passengers were throwing.",
      "The passengers were rescued.",
      "The passengers were seen throwing overboard.",
      "See:",
      "The search for the missing girl will continue into tomorrow, though.",
      "No injuries were reported, though.",
      "Search for missing girl will continue into tomorrow.",
      "No injuries were reported.",
      "Continue the search.",
      "Search for the girl.",
      "Missing.",
      "No injuries were reported.",
      "Injuries.",
      "Continue the search.",
      "Search for the girl.",
      "No reports.",
      "There were reports of injuries.",
      "No injuries were reported but the search for the missing girl will continue.",
      "But..."
    ]
  },
  {
    "instance_id": "realsumm-33",
    "summary": "<t> The worker was caught on camera by a member of the public . </t> <t> Field owner TH Clements & Son was alerted and the man was sacked . </t> <t> Passer - by who used mobile phone to snap photo branded act ' disgusting ' Tesco : Vegetables undergo ' extensive assessment ' before hitting shelves . </t>",
    "summary_trees": [
      "# ::snt  The worker was caught on camera by a member of the public . \n(c / catch-03\n      :ARG0 (m / member\n            :part-of (p / public))\n      :ARG1 (p2 / person\n            :ARG0-of (w / work-01))\n      :ARG2 (c2 / camera))",
      "# ::snt  Field owner TH Clements & Son was alerted and the man was sacked . \n(a / and\n      :op1 (a2 / alert-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"TH\"\n                        :op2 \"Clements\"\n                        :op3 \"&\"\n                        :op4 \"Son\")\n                  :ARG0-of (o / own-01\n                        :ARG1 (f / field))))\n      :op2 (s / sack-01\n            :ARG1 (m / man)))",
      "# ::snt  Passer - by who used mobile phone to snap photo branded act ' disgusting ' Tesco : Vegetables undergo ' extensive assessment ' before hitting shelves . \n(m / multi-sentence\n      :snt1 (p / person\n            :ARG0-of (p2 / pass-by-17)\n            :ARG0-of (u / use-01\n                  :ARG1 (p3 / phone\n                        :mod (m2 / mobile))\n                  :ARG2 (s / snap-03\n                        :ARG0 p\n                        :ARG1 (a / act-02\n                              :ARG1-of (b / brand-01\n                                    :ARG2 (d / disgust-01))\n                              :mod (p4 / photo))))\n            :mod (c / company\n                  :name (n / name\n                        :op1 \"Tesco\")))\n      :snt2 (u2 / undergo-28\n            :ARG1 (v / vegetable)\n            :ARG2 (a2 / assess-01\n                  :ARG1 v\n                  :ARG1-of (e / extensive-03))\n            :time (b2 / before\n                  :op1 (h / hit-01\n                        :ARG1 (s2 / shelf)))))"
    ],
    "tree": [
      "(c / catch-03\n   :ARG0 (m / member\n            :part-of (p / public)))",
      "(c / catch-03\n   :ARG1 (p2 / person\n             :ARG0-of (w / work-01)))",
      "(c / catch-03\n   :ARG2 (c2 / camera))",
      "(m / member\n   :part-of (p / public))",
      "(p2 / person\n    :ARG0-of (w / work-01))",
      "(c / catch-03\n   :ARG0 (m / member))",
      "(w / work-01)",
      "(c / catch-03\n   :ARG0 (m / member))",
      "(c / catch-03\n   :ARG0 (m / member\n            :part (p / public))\n   :ARG1 (p2 / person\n             :ARG0 (w / work-01))\n   :ARG2 (c2 / camera))",
      "(c / catch-03)",
      "(a / and\n   :op1 (a2 / alert-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"TH\"\n                              :op2 \"Clements\"\n                              :op3 \"&\"\n                              :op4 \"Son\")\n                     :ARG0-of (o / own-01\n                                 :ARG1 (f / field)))))",
      "(a / and\n   :op2 (s / sack-01\n           :ARG1 (m / man)))",
      "(a2 / alert-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"TH\"\n                      :op2 \"Clements\"\n                      :op3 \"&\"\n                      :op4 \"Son\")\n             :ARG0-of (o / own-01\n                         :ARG1 (f / field))))",
      "(s / sack-01\n   :ARG1 (m / man))",
      "(a2 / alert-01\n    :ARG1 (p / person :name (n / name :op1 \"TH\" :op2 \"Clements\" :op3 \"&\" :op4 \"Son\"))))",
      "(o / own-01\n   :ARG1 (f / field))",
      "(s / sack-01\n   :ARG1 (m / man))",
      "(a2 / alert-01\n    :ARG1 (p / person :name (n / name :op1 \"TH\" :op2 \"Clements\" :op3 \"&\" :op4 \"Son\"))))",
      "(o / own-01\n   :ARG1 (f / field))",
      "(s / sack-01\n   :ARG1 (m / man))",
      "(a2 / alert-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"TH\"\n                      :op2 \"Clements\"\n                      :op3 \"&\"\n                      :op4 \"Son\")\n             :ARG0-of (o / own-01\n                         :ARG1 (f / field))))",
      "(s / sack-01\n   :ARG1 (m / man))",
      "(a / and\n   :op1 (a2 / alert-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"TH\"\n                              :op2 \"Clements\"\n                              :op3 \"&\"\n                              :op4 \"Son\")\n                     :ARG0 (o / own-01\n                              :ARG1 (f / field))))\n   :op2 (s / sack-01\n           :ARG1 (m / man)))",
      "(a / and\n   :op1 (a2 / alert-01)\n   :op2 (s / sack-01))",
      "(m / multi-sentence\n   :snt1 (p / person\n            :ARG0-of (p2 / pass-by-17)\n            :ARG0-of (u / use-01\n                        :ARG1 (p3 / phone\n                                  :mod (m2 / mobile))\n                        :ARG2 (s / snap-03\n                                 :ARG0 p\n                                 :ARG1 (a / act-02\n                                          :ARG1-of (b / brand-01\n                                                      :ARG2 (d / disgust-01))\n                                          :mod (p4 / photo))))\n            :mod (c / company\n                    :name (n / name\n                             :op1 \"Tesco\"))))",
      "(m / multi-sentence\n   :snt2 (u2 / undergo-28\n             :ARG1 (v / vegetable)\n             :ARG2 (a2 / assess-01\n                       :ARG1 v\n                       :ARG1-of (e / extensive-03))\n             :time (b2 / before\n                       :op1 (h / hit-01\n                               :ARG1 (s2 / shelf)))))",
      "(p / person\n   :ARG0-of (p2 / pass-by-17)\n   :ARG0-of (u / use-01\n               :ARG1 (p3 / phone\n                         :mod (m2 / mobile))\n               :ARG2 (s / snap-03\n                        :ARG0 p\n                        :ARG1 (a / act-02\n                                 :ARG1-of (b / brand-01\n                                             :ARG2 (d / disgust-01))\n                                 :mod (p4 / photo))))\n   :mod (c / company\n           :name (n / name\n                    :op1 \"Tesco\")))",
      "(u2 / undergo-28\n    :ARG1 (v / vegetable)\n    :ARG2 (a2 / assess-01\n              :ARG1 v\n              :ARG1-of (e / extensive-03))\n    :time (b2 / before\n              :op1 (h / hit-01\n                      :ARG1 (s2 / shelf))))",
      "(u / use-01\n   :ARG1 (p3 / phone))",
      "(s / snap-03\n   :ARG0 (p / person)\n   :ARG1 (a / act-02))",
      "(a / act-02)",
      "(b / brand-01\n   :ARG2 (d / disgust-01))",
      "(d / disgust-01)",
      "(a2 / assess-01\n    :ARG1 (v / vegetable))",
      "(e / extensive-03)",
      "(h / hit-01\n   :ARG1 (s2 / shelf))",
      "(u / use-01\n   :ARG1 (p3 / phone))",
      "(s / snap-03\n   :ARG0 (p / person))",
      "(s / snap-03\n   :ARG1 (a / act-02))",
      "(b / brand-01\n   :ARG2 (d / disgust-01))",
      "(a2 / assess-01\n    :ARG1 (v / vegetable))",
      "(h / hit-01\n   :ARG1 (s2 / shelf))",
      "(m / multi-sentence\n   :snt1 (p / person\n            :ARG0 (p2 / pass-by-17)\n            :ARG0 (u / use-01\n                     :ARG1 (p3 / phone\n                               :mod (m2 / mobile))\n                     :ARG2 (s / snap-03\n                              :ARG0 p\n                              :ARG1 (a / act-02\n                                       :ARG1 (b / brand-01\n                                                :ARG2 (d / disgust-01))\n                                       :mod (p4 / photo))))\n            :mod (c / company\n                    :name (n / name\n                             :op1 \"Tesco\")))\n   :snt2 (u2 / undergo-28\n             :ARG1 (v / vegetable)\n             :ARG2 (a2 / assess-01\n                       :ARG1 v\n                       :ARG1 (e / extensive-03))))",
      "(m / multi-sentence\n   :snt1 (p / person)\n   :snt2 (u2 / undergo-28\n             :time (b2 / before\n                       :op1 (h / hit-01))))"
    ],
    "smus": [
      "A member of the public was caught.",
      "The worker was caught.",
      "caught on camera.",
      "Member of the public.",
      "Worker.",
      "The member was caught.",
      "Work.",
      "The member was caught.",
      "A member of the public has caught the worker on camera.",
      "Catch.",
      "And TH Clements & Son, the field's owner, was alerted.",
      "and the man was sacked.",
      "Field owner TH Clements & Son was alerted.",
      "The man was sacked.",
      "TH Clements & Son alerted.",
      "The field is owned by the owner.",
      "The man was sacked.",
      "TH Clements & Son alerted.",
      "The field is owned by the owner.",
      "The man was sacked.",
      "Field owner TH Clements & Son was alerted.",
      "The man was sacked.",
      "The field's owner, TH Clements & Son, was alerted and the man was sacked.",
      "Alerted and sacked.",
      "Passed by a Tesco person who used a mobile phone to snap a photo of an act branded disgusting.",
      "Vegetables undergo extensive assessment before hitting the shelves.",
      "Passed by a Tesco person who used a mobile phone to snap a photo of an act branded disgusting.",
      "Vegetables undergo extensive assessment before hitting the shelves.",
      "The phone was used.",
      "People will snap the action.",
      "Action.",
      "Branded disgusting.",
      "Disgusting.",
      "Vegetables: Assessment",
      "In extensive.",
      "Hit the shelves.",
      "The phone was used.",
      "People will snap.",
      "Snap action.",
      "Branded disgusting.",
      "Vegetables: Assessment",
      "Hit the shelves.",
      "Passed by a Tesco person who used a mobile phone to snap a photo action on a disgusting brand. Vegetables undergo extensive assessment.",
      "People.. undergo before hitting."
    ]
  },
  {
    "instance_id": "realsumm-34",
    "summary": "<t> Tim Stanley : Muhammadu Buhar won Nigeria vote on campaign against corruption . </t> <t> He 's an ex - dictator , but there 's reason for optimism . </t> <t> He says Jonathan administration failed to address corruption , poverty and rise of Boko Haram . </t> <t> Buhar may be tonic to years of misrule . </t>",
    "summary_trees": [
      "# ::snt  Tim Stanley : Muhammadu Buhar won Nigeria vote on campaign against corruption . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tim\"\n                  :op2 \"Stanley\"))\n      :ARG1 (w / win-01\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Muhammadu\"\n                        :op2 \"Buhar\"))\n            :ARG1 (v / vote-01)\n            :ARG2 (c / country\n                  :name (n3 / name\n                        :op1 \"Nigeria\"))\n            :ARG1-of (c2 / cause-01\n                  :ARG0 (c3 / campaign-01\n                        :ARG0 p2\n                        :ARG1 (a / against\n                              :op1 (c4 / corrupt-01))))))",
      "# ::snt  He 's an ex - dictator , but there 's reason for optimism . \n(h / have-concession-91\n      :ARG1 (r / reason\n            :ARG0-of (c / cause-01\n                  :ARG1 (o / optimism)))\n      :ARG2 (d / dictator\n            :domain (h2 / he)\n            :time (e / ex)))",
      "# ::snt  He says Jonathan administration failed to address corruption , poverty and rise of Boko Haram . \n(s / say-01\n      :ARG0 (h / he)\n      :ARG1 (f / fail-01\n            :ARG1 (g / government-organization\n                  :ARG0-of (a / administrate-01)\n                  :mod (p / person\n                        :name (n / name\n                              :op1 \"Jonathan\")))\n            :ARG2 (a2 / address-02\n                  :ARG0 g\n                  :ARG1 (a3 / and\n                        :op1 (c / corruption)\n                        :op2 (p2 / poor)\n                        :op3 (r / rise-01\n                              :ARG1 (c2 / criminal-organization\n                                    :name (n2 / name\n                                          :op1 \"Boko\"\n                                          :op2 \"Hararma\")))))))",
      "# ::snt  Buhar may be tonic to years of misrule . \n(p / possible-01\n      :ARG1 (t / tonic\n            :beneficiary (m / misrule\n                  :duration (m2 / multiple\n                        :op1 (t2 / temporal-quantity\n                              :quant 1\n                              :unit (y / year))))\n            :domain (p2 / person\n                  :name (n / name\n                        :op1 \"Buhar\"))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tim\"\n                     :op2 \"Stanley\")))",
      "(s / say-01\n   :ARG1 (w / win-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Muhammadu\"\n                                :op2 \"Buhar\"))\n            :ARG1 (v / vote-01)\n            :ARG2 (c / country\n                     :name (n3 / name\n                               :op1 \"Nigeria\"))\n            :ARG1-of (c2 / cause-01\n                         :ARG0 (c3 / campaign-01\n                                   :ARG0 p2\n                                   :ARG1 (a / against\n                                            :op1 (c4 / corrupt-01))))))",
      "(p / person\n   :name (n / name\n            :op1 \"Tim\"\n            :op2 \"Stanley\"))",
      "(w / win-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Muhammadu\"\n                       :op2 \"Buhar\"))\n   :ARG1 (v / vote-01)\n   :ARG2 (c / country\n            :name (n3 / name\n                      :op1 \"Nigeria\"))\n   :ARG1-of (c2 / cause-01\n                :ARG0 (c3 / campaign-01\n                          :ARG0 p2\n                          :ARG1 (a / against\n                                   :op1 (c4 / corrupt-01)))))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Tim\" :op2 \"Stanley\")))",
      "(w / win-01\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Muhammadu\" :op2 \"Buhar\")))",
      "(v / vote-01)",
      "(c2 / cause-01\n    :ARG0 (c3 / campaign-01))",
      "(c3 / campaign-01\n    :ARG0 (p2 / person :name (n2 / name :op1 \"Muhammadu\" :op2 \"Buhar\"))\n    :ARG1 (a / against))",
      "(c4 / corrupt-01)",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Tim\" :op2 \"Stanley\")))",
      "(w / win-01\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Muhammadu\" :op2 \"Buhar\")))",
      "(c2 / cause-01\n    :ARG0 (c3 / campaign-01))",
      "(c3 / campaign-01\n    :ARG0 (p2 / person :name (n2 / name :op1 \"Muhammadu\" :op2 \"Buhar\")))",
      "(c3 / campaign-01\n    :ARG1 (a / against))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tim\"\n                     :op2 \"Stanley\"))\n   :ARG1 (w / win-01\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Muhammadu\"\n                                :op2 \"Buhar\"))\n            :ARG1 (v / vote-01)\n            :ARG2 (c / country\n                     :name (n3 / name\n                               :op1 \"Nigeria\"))\n            :ARG1 (c2 / cause-01\n                      :ARG0 (c3 / campaign-01\n                                :ARG0 p2\n                                :ARG1 (a / against\n                                         :op1 (c4 / corrupt-01))))))",
      "(s / say-01)",
      "(h / have-concession-91\n   :ARG1 (r / reason\n            :ARG0-of (c / cause-01\n                        :ARG1 (o / optimism))))",
      "(h / have-concession-91\n   :ARG2 (d / dictator\n            :domain (h2 / he)\n            :time (e / ex)))",
      "(r / reason\n   :ARG0-of (c / cause-01\n               :ARG1 (o / optimism)))",
      "(d / dictator\n   :domain (h2 / he)\n   :time (e / ex))",
      "(c / cause-01\n   :ARG1 (o / optimism))",
      "(c / cause-01\n   :ARG1 (o / optimism))",
      "(h / have-concession-91\n   :ARG1 (r / reason\n            :ARG0 (c / cause-01\n                     :ARG1 (o / optimism)))\n   :ARG2 (d / dictator\n            :domain (h2 / he)))",
      "(h / have-concession-91)",
      "(s / say-01\n   :ARG0 (h / he))",
      "(s / say-01\n   :ARG1 (f / fail-01\n            :ARG1 (g / government-organization\n                     :ARG0-of (a / administrate-01)\n                     :mod (p / person\n                             :name (n / name\n                                      :op1 \"Jonathan\")))\n            :ARG2 (a2 / address-02\n                      :ARG0 g\n                      :ARG1 (a3 / and\n                                :op1 (c / corruption)\n                                :op2 (p2 / poor)\n                                :op3 (r / rise-01\n                                        :ARG1 (c2 / criminal-organization\n                                                  :name (n2 / name\n                                                            :op1 \"Boko\"\n                                                            :op2 \"Hararma\")))))))",
      "(f / fail-01\n   :ARG1 (g / government-organization\n            :ARG0-of (a / administrate-01)\n            :mod (p / person\n                    :name (n / name\n                             :op1 \"Jonathan\")))\n   :ARG2 (a2 / address-02\n             :ARG0 g\n             :ARG1 (a3 / and\n                       :op1 (c / corruption)\n                       :op2 (p2 / poor)\n                       :op3 (r / rise-01\n                               :ARG1 (c2 / criminal-organization\n                                         :name (n2 / name\n                                                   :op1 \"Boko\"\n                                                   :op2 \"Hararma\"))))))",
      "(s / say-01\n   :ARG0 (h / he))",
      "(f / fail-01\n   :ARG1 (g / government-organization))",
      "(a / administrate-01)",
      "(a2 / address-02\n    :ARG0 (g / government-organization)\n    :ARG1 (a3 / and))",
      "(r / rise-01\n   :ARG1 (c2 / criminal-organization :name (n2 / name :op1 \"Boko\" :op2 \"Hararma\")))",
      "(s / say-01\n   :ARG0 (h / he))",
      "(f / fail-01\n   :ARG1 (g / government-organization))",
      "(a2 / address-02\n    :ARG0 (g / government-organization))",
      "(a2 / address-02\n    :ARG1 (a3 / and))",
      "(r / rise-01\n   :ARG1 (c2 / criminal-organization :name (n2 / name :op1 \"Boko\" :op2 \"Hararma\")))",
      "(s / say-01\n   :ARG0 (h / he)\n   :ARG1 (f / fail-01\n            :ARG1 (g / government-organization\n                     :ARG0-of (a / administrate-01)\n                     :mod (p / person\n                             :name (n / name\n                                      :op1 \"Jonathan\")))\n            :ARG2 (a2 / address-02\n                      :ARG0 g\n                      :ARG1 (c / corruption))))",
      "(s / say-01\n   :ARG0 (h / he)\n   :ARG1 (f / fail-01\n            :ARG1 (g / government-organization\n                     :ARG0-of (a / administrate-01)\n                     :mod (p / person\n                             :name (n / name\n                                      :op1 \"Jonathan\")))\n            :ARG2 (a2 / address-02\n                      :ARG0 g\n                      :ARG1 (p2 / poor))))",
      "(s / say-01\n   :ARG0 (h / he)\n   :ARG1 (f / fail-01\n            :ARG1 (g / government-organization\n                     :ARG0-of (a / administrate-01)\n                     :mod (p / person\n                             :name (n / name\n                                      :op1 \"Jonathan\")))\n            :ARG2 (a2 / address-02\n                      :ARG0 g\n                      :ARG1 (r / rise-01\n                               :ARG1 (c2 / criminal-organization\n                                         :name (n2 / name\n                                                   :op1 \"Boko\"\n                                                   :op2 \"Hararma\"))))))",
      "(s / say-01\n   :ARG0 (h / he)\n   :ARG1 (f / fail-01\n            :ARG1 (g / government-organization\n                     :ARG0 (a / administrate-01)\n                     :mod (p / person\n                             :name (n / name\n                                      :op1 \"Jonathan\")))\n            :ARG2 (a2 / address-02\n                      :ARG0 g\n                      :ARG1 (a3 / and\n                                :op1 (c / corruption)\n                                :op2 (p2 / poor)\n                                :op3 (r / rise-01\n                                        :ARG1 (c2 / criminal-organization\n                                                  :name (n2 / name\n                                                            :op1 \"Boko\"\n                                                            :op2 \"Hararma\")))))))",
      "(s / say-01)",
      "(p / possible-01\n   :ARG1 (t / tonic\n            :beneficiary (m / misrule\n                            :duration (m2 / multiple\n                                          :op1 (t2 / temporal-quantity\n                                                   :quant 1\n                                                   :unit (y / year))))\n            :domain (p2 / person\n                        :name (n / name\n                                 :op1 \"Buhar\"))))",
      "(t / tonic\n   :beneficiary (m / misrule\n                   :duration (m2 / multiple\n                                 :op1 (t2 / temporal-quantity\n                                          :quant 1\n                                          :unit (y / year))))\n   :domain (p2 / person\n               :name (n / name\n                        :op1 \"Buhar\")))",
      "(p / possible-01\n   :ARG1 (t / tonic))",
      "(p / possible-01\n   :ARG1 (t / tonic))",
      "(p / possible-01\n   :ARG1 (t / tonic\n            :beneficiary (m / misrule\n                            :duration (m2 / multiple\n                                          :op1 (t2 / temporal-quantity\n                                                   :quant 1\n                                                   :unit (y / year))))\n            :domain (p2 / person\n                        :name (n / name\n                                 :op1 \"Buhar\"))))",
      "(p / possible-01)"
    ],
    "smus": [
      "@Tim Stanley,",
      "Muhammadu Buhar won the vote in Nigeria in a campaign against corruption.",
      "Tim Stanley",
      "Muhammadu Buhar won the vote for Nigeria in a campaign against corruption.",
      "@Tim Stanley,",
      "Muhammadu Buhar won.",
      "Vote.",
      "Because of the campaign.",
      "Muhammadu Buhar is a campaign against.",
      "Corruption.",
      "@Tim Stanley,",
      "Muhammadu Buhar won.",
      "Because of the campaign.",
      "Muhammadu Buhar's campaign",
      "Campaign against.",
      "Tim Stanley said Muhammadu Buhar won the vote for Nigeria because he was campaigning against corruption.",
      "Says.",
      "There is reason to be optimistic though.",
      "He was an ex-dictator though.",
      "The reason for optimism.",
      "He was an ex-dictator.",
      "So optimism.",
      "So optimism.",
      "The reason for optimism is that he is a dictator.",
      "but...",
      "\"It's a good thing,\" he says.",
      "Jonathan's administration failed to address corruption, poverty and the rise of the Bok Hararma, the administration says.",
      "Jonathan's administration failed to address corruption, poverty and the rise of Bok Hararma.",
      "\"It's a good thing,\" he says.",
      "The government failed.",
      "administration",
      "The government will address these issues.",
      "The rise of the Boko Hararma.",
      "\"It's a good thing,\" he says.",
      "The government failed.",
      "Government will address.",
      "Address the above.",
      "The rise of the Boko Hararma.",
      "He says the Jonathan administration failed to address corruption.",
      "He says the Jonathan administration failed to address poverty.",
      "He says the Jonathan administration failed to address the rise of the Bok Hararma group.",
      "He says the Jonathan administration failed to address corruption, poverty and the rise of the Bok Hararma movement.",
      "says.",
      "Buhar may have been a tonic for years of misrule.",
      "Buhar was a tonic for years of misrule.",
      "Maybe a tonic.",
      "Maybe a tonic.",
      "Buhar may have been a tonic for years of misrule.",
      "Maybe."
    ]
  },
  {
    "instance_id": "realsumm-35",
    "summary": "<t> Bulgaria 's Black Sea resorts cheaper than hotspots in Italy , Spain and Turkey . </t> <t> Researchers found cheapest destination using ' imaginary shopping basket ' Cheap prices are driven by low exchange rates and country 's high inflation . </t> <t> Its most popular resort of Sunny Beach copies those of Spain and Greece . </t>",
    "summary_trees": [
      "# ::snt  Bulgaria 's Black Sea resorts cheaper than hotspots in Italy , Spain and Turkey . \n(h / have-degree-91\n      :ARG1 (r / resort\n            :location (s / sea\n                  :name (n / name\n                        :op1 \"Black\"\n                        :op2 \"Sea\"))\n            :poss (c / country\n                  :name (n2 / name\n                        :op1 \"Bulgaria\")))\n      :ARG2 (c2 / cheap-02\n            :ARG1 r)\n      :ARG3 (m / more)\n      :ARG4 (h2 / hotspot\n            :location (a / and\n                  :op1 (c3 / country\n                        :name (n3 / name\n                              :op1 \"Italy\"))\n                  :op2 (c4 / country\n                        :name (n4 / name\n                              :op1 \"Spain\"))\n                  :op3 (c5 / country\n                        :name (n5 / name\n                              :op1 \"Turkey\")))))",
      "# ::snt  Researchers found cheapest destination using ' imaginary shopping basket ' Cheap prices are driven by low exchange rates and country 's high inflation . \n(m / multi-sentence\n      :snt1 (f / find-01\n            :ARG0 (p / person\n                  :ARG0-of (r / research-01))\n            :ARG1 (d / destination\n                  :ARG1-of (h / have-degree-91\n                        :ARG2 (c / cheap-02\n                              :ARG1 d)\n                        :ARG3 (m2 / most)))\n            :manner (u / use-01\n                  :ARG0 p\n                  :ARG1 (b / basket\n                        :mod (s / shop-01)\n                        :mod (ii / imaginary))))\n      :snt2 (d2 / drive-02\n            :ARG0 (a / and\n                  :op1 (r2 / rate\n                        :ARG1-of (l / low-04)\n                        :mod (e / exchange-01))\n                  :op2 (ii2 / inflate-01\n                        :ARG1 (c2 / country)\n                        :ARG1-of (h2 / high-02)))\n            :ARG1 (p2 / price-01\n                  :ARG1-of (c3 / cheap-02))))",
      "# ::snt  Its most popular resort of Sunny Beach copies those of Spain and Greece . \n(c / copy-01\n      :ARG1 (r / resort\n            :name (n / name\n                  :op1 \"Sunny\"\n                  :op2 \"Beach\")\n            :poss (ii / it)\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (p / popular-02\n                        :ARG1 r)\n                  :ARG3 (m / most)\n                  :ARG5 (r2 / resort\n                        :poss (a / and\n                              :op1 (c2 / country\n                                    :name (n2 / name\n                                          :op1 \"Spain\"))\n                              :op2 (c3 / country\n                                    :name (n3 / name\n                                          :op1 \"Greece\")))))))"
    ],
    "tree": [
      "(h / have-degree-91\n   :ARG1 (r / resort\n            :location (s / sea\n                         :name (n / name\n                                  :op1 \"Black\"\n                                  :op2 \"Sea\"))\n            :poss (c / country\n                     :name (n2 / name\n                               :op1 \"Bulgaria\"))))",
      "(h / have-degree-91\n   :ARG2 (c2 / cheap-02\n             :ARG1 (r / resort)))",
      "(h / have-degree-91\n   :ARG3 (m / more))",
      "(h / have-degree-91\n   :ARG4 (h2 / hotspot\n             :location (a / and\n                          :op1 (c3 / country\n                                   :name (n3 / name\n                                             :op1 \"Italy\"))\n                          :op2 (c4 / country\n                                   :name (n4 / name\n                                             :op1 \"Spain\"))\n                          :op3 (c5 / country\n                                   :name (n5 / name\n                                             :op1 \"Turkey\")))))",
      "(r / resort\n   :location (s / sea\n                :name (n / name\n                         :op1 \"Black\"\n                         :op2 \"Sea\"))\n   :poss (c / country\n            :name (n2 / name\n                      :op1 \"Bulgaria\")))",
      "(h2 / hotspot\n    :location (a / and\n                 :op1 (c3 / country\n                          :name (n3 / name\n                                    :op1 \"Italy\"))\n                 :op2 (c4 / country\n                          :name (n4 / name\n                                    :op1 \"Spain\"))\n                 :op3 (c5 / country\n                          :name (n5 / name\n                                    :op1 \"Turkey\"))))",
      "(c2 / cheap-02\n    :ARG1 (r / resort))",
      "(c2 / cheap-02\n    :ARG1 (r / resort))",
      "(h / have-degree-91\n   :ARG1 (r / resort\n            :location (s / sea\n                         :name (n / name\n                                  :op1 \"Black\"\n                                  :op2 \"Sea\"))\n            :poss (c / country\n                     :name (n2 / name\n                               :op1 \"Bulgaria\")))\n   :ARG2 (c2 / cheap-02\n             :ARG1 r)\n   :ARG3 (m / more)\n   :ARG4 (h2 / hotspot\n             :location (c3 / country\n                           :name (n3 / name\n                                     :op1 \"Italy\"))))",
      "(h / have-degree-91\n   :ARG1 (r / resort\n            :location (s / sea\n                         :name (n / name\n                                  :op1 \"Black\"\n                                  :op2 \"Sea\"))\n            :poss (c / country\n                     :name (n2 / name\n                               :op1 \"Bulgaria\")))\n   :ARG2 (c2 / cheap-02\n             :ARG1 r)\n   :ARG3 (m / more)\n   :ARG4 (h2 / hotspot\n             :location (c4 / country\n                           :name (n4 / name\n                                     :op1 \"Spain\"))))",
      "(h / have-degree-91\n   :ARG1 (r / resort\n            :location (s / sea\n                         :name (n / name\n                                  :op1 \"Black\"\n                                  :op2 \"Sea\"))\n            :poss (c / country\n                     :name (n2 / name\n                               :op1 \"Bulgaria\")))\n   :ARG2 (c2 / cheap-02\n             :ARG1 r)\n   :ARG3 (m / more)\n   :ARG4 (h2 / hotspot\n             :location (c5 / country\n                           :name (n5 / name\n                                     :op1 \"Turkey\"))))",
      "(h / have-degree-91\n   :ARG1 (r / resort\n            :poss (c / country\n                     :name (n2 / name\n                               :op1 \"Bulgaria\")))\n   :ARG2 (c2 / cheap-02\n             :ARG1 r)\n   :ARG3 (m / more)\n   :ARG4 (h2 / hotspot))",
      "(h / have-degree-91)",
      "(m / multi-sentence\n   :snt1 (f / find-01\n            :ARG0 (p / person\n                     :ARG0-of (r / research-01))\n            :ARG1 (d / destination\n                     :ARG1-of (h / have-degree-91\n                                 :ARG2 (c / cheap-02\n                                          :ARG1 d)\n                                 :ARG3 (m2 / most)))\n            :manner (u / use-01\n                       :ARG0 p\n                       :ARG1 (b / basket\n                                :mod (s / shop-01)\n                                :mod (ii / imaginary)))))",
      "(m / multi-sentence\n   :snt2 (d2 / drive-02\n             :ARG0 (a / and\n                      :op1 (r2 / rate\n                               :ARG1-of (l / low-04)\n                               :mod (e / exchange-01))\n                      :op2 (ii2 / inflate-01\n                                :ARG1 (c2 / country)\n                                :ARG1-of (h2 / high-02)))\n             :ARG1 (p2 / price-01\n                       :ARG1-of (c3 / cheap-02))))",
      "(f / find-01\n   :ARG0 (p / person\n            :ARG0-of (r / research-01))\n   :ARG1 (d / destination\n            :ARG1-of (h / have-degree-91\n                        :ARG2 (c / cheap-02\n                                 :ARG1 d)\n                        :ARG3 (m2 / most)))\n   :manner (u / use-01\n              :ARG0 p\n              :ARG1 (b / basket\n                       :mod (s / shop-01)\n                       :mod (ii / imaginary))))",
      "(d2 / drive-02\n    :ARG0 (a / and\n             :op1 (r2 / rate\n                      :ARG1-of (l / low-04)\n                      :mod (e / exchange-01))\n             :op2 (ii2 / inflate-01\n                       :ARG1 (c2 / country)\n                       :ARG1-of (h2 / high-02)))\n    :ARG1 (p2 / price-01\n              :ARG1-of (c3 / cheap-02)))",
      "(f / find-01\n   :ARG0 (p / person))",
      "(r / research-01)",
      "(c / cheap-02\n   :ARG1 (d / destination))",
      "(u / use-01\n   :ARG0 (p / person)\n   :ARG1 (b / basket))",
      "(s / shop-01)",
      "(d2 / drive-02\n    :ARG0 (a / and))",
      "(l / low-04)",
      "(e / exchange-01)",
      "(ii2 / inflate-01\n     :ARG1 (c2 / country))",
      "(h2 / high-02)",
      "(p2 / price-01)",
      "(c3 / cheap-02)",
      "(f / find-01\n   :ARG0 (p / person))",
      "(c / cheap-02\n   :ARG1 (d / destination))",
      "(u / use-01\n   :ARG0 (p / person))",
      "(u / use-01\n   :ARG1 (b / basket))",
      "(d2 / drive-02\n    :ARG0 (a / and))",
      "(ii2 / inflate-01\n     :ARG1 (c2 / country))",
      "(m / multi-sentence\n   :snt1 (f / find-01\n            :ARG0 (p / person\n                     :ARG0-of (r / research-01))\n            :ARG1 (d / destination\n                     :ARG1-of (h / have-degree-91\n                                 :ARG2 (c / cheap-02\n                                          :ARG1 d)\n                                 :ARG3 (m2 / most)))\n            :manner (u / use-01\n                       :ARG0 p\n                       :ARG1 (b / basket\n                                :mod (s / shop-01)\n                                :mod (ii / imaginary))))\n   :snt2 (d2 / drive-02\n             :ARG0 (r2 / rate\n                       :ARG1-of (l / low-04)\n                       :mod (e / exchange-01))\n             :ARG1 (p2 / price-01\n                       :ARG1-of (c3 / cheap-02))))",
      "(m / multi-sentence\n   :snt1 (f / find-01\n            :ARG0 (p / person\n                     :ARG0-of (r / research-01))\n            :ARG1 (d / destination\n                     :ARG1-of (h / have-degree-91\n                                 :ARG2 (c / cheap-02\n                                          :ARG1 d)\n                                 :ARG3 (m2 / most)))\n            :manner (u / use-01\n                       :ARG0 p\n                       :ARG1 (b / basket\n                                :mod (s / shop-01)\n                                :mod (ii / imaginary))))\n   :snt2 (d2 / drive-02\n             :ARG0 (ii2 / inflate-01\n                        :ARG1 (c2 / country)\n                        :ARG1-of (h2 / high-02))\n             :ARG1 (p2 / price-01\n                       :ARG1-of (c3 / cheap-02))\n             :ARG1 p2))",
      "(m / multi-sentence\n   :snt1 (f / find-01\n            :ARG0 (p / person\n                     :ARG0 (r / research-01))\n            :ARG1 (d / destination\n                     :ARG1 (h / have-degree-91\n                              :ARG2 (c / cheap-02\n                                       :ARG1 d)\n                              :ARG3 (m2 / most)))\n            :manner (u / use-01\n                       :ARG0 p\n                       :ARG1 (b / basket\n                                :mod (s / shop-01)\n                                :mod (ii / imaginary))))\n   :snt2 (d2 / drive-02\n             :ARG0 (a / and\n                      :op1 (r2 / rate\n                               :ARG1 (l / low-04)\n                               :mod (e / exchange-01))\n                      :op2 (ii2 / inflate-01\n                                :ARG1 (c2 / country)\n                                :ARG1 (h2 / high-02)))\n             :ARG1 (p2 / price-01\n                       :ARG1 (c3 / cheap-02))))",
      "(m / multi-sentence\n   :snt1 (f / find-01\n            :manner (u / use-01))\n   :snt2 (d2 / drive-02))",
      "(c / copy-01\n   :ARG1 (r / resort\n            :name (n / name\n                     :op1 \"Sunny\"\n                     :op2 \"Beach\")\n            :poss (ii / it)\n            :ARG1-of (h / have-degree-91\n                        :ARG2 (p / popular-02\n                                 :ARG1 r)\n                        :ARG3 (m / most)\n                        :ARG5 (r2 / resort\n                                  :poss (a / and\n                                           :op1 (c2 / country\n                                                    :name (n2 / name\n                                                              :op1 \"Spain\"))\n                                           :op2 (c3 / country\n                                                    :name (n3 / name\n                                                              :op1 \"Greece\")))))))",
      "(r / resort\n   :name (n / name\n            :op1 \"Sunny\"\n            :op2 \"Beach\")\n   :poss (ii / it)\n   :ARG1-of (h / have-degree-91\n               :ARG2 (p / popular-02\n                        :ARG1 r)\n               :ARG3 (m / most)\n               :ARG5 (r2 / resort\n                         :poss (a / and\n                                  :op1 (c2 / country\n                                           :name (n2 / name\n                                                     :op1 \"Spain\"))\n                                  :op2 (c3 / country\n                                           :name (n3 / name\n                                                     :op1 \"Greece\"))))))",
      "(c / copy-01\n   :ARG1 (r / resort :name (n / name :op1 \"Sunny\" :op2 \"Beach\"))))",
      "(p / popular-02\n   :ARG1 (r / resort :name (n / name :op1 \"Sunny\" :op2 \"Beach\"))))",
      "(c / copy-01\n   :ARG1 (r / resort :name (n / name :op1 \"Sunny\" :op2 \"Beach\"))))",
      "(p / popular-02\n   :ARG1 (r / resort :name (n / name :op1 \"Sunny\" :op2 \"Beach\"))))",
      "(c / copy-01\n   :ARG1 (r / resort\n            :name (n / name\n                     :op1 \"Sunny\"\n                     :op2 \"Beach\")\n            :poss (ii / it)\n            :ARG1-of (h / have-degree-91\n                        :ARG2 (p / popular-02\n                                 :ARG1 r)\n                        :ARG3 (m / most)\n                        :ARG5 (r2 / resort\n                                  :poss (c2 / country\n                                            :name (n2 / name\n                                                      :op1 \"Spain\"))))))",
      "(c / copy-01\n   :ARG1 (r / resort\n            :name (n / name\n                     :op1 \"Sunny\"\n                     :op2 \"Beach\")\n            :poss (ii / it)\n            :ARG1-of (h / have-degree-91\n                        :ARG2 (p / popular-02\n                                 :ARG1 r)\n                        :ARG3 (m / most)\n                        :ARG5 (r2 / resort\n                                  :poss (c3 / country\n                                            :name (n3 / name\n                                                      :op1 \"Greece\"))))))",
      "(c / copy-01\n   :ARG1 (r / resort\n            :name (n / name\n                     :op1 \"Sunny\"\n                     :op2 \"Beach\")\n            :poss (ii / it)\n            :ARG1 (h / have-degree-91\n                     :ARG2 (p / popular-02\n                              :ARG1 r)\n                     :ARG3 (m / most)\n                     :ARG5 (r2 / resort\n                               :poss (a / and\n                                        :op1 (c2 / country\n                                                 :name (n2 / name\n                                                           :op1 \"Spain\"))\n                                        :op2 (c3 / country\n                                                 :name (n3 / name\n                                                           :op1 \"Greece\")))))))",
      "(c / copy-01)"
    ],
    "smus": [
      "Bulgaria's Black Sea resorts",
      "The resorts are cheap.",
      "More.",
      "Hotspots in Italy, Spain and Turkey.",
      "Bulgaria's Black Sea resorts",
      "Hotspots in Italy, Spain and Turkey.",
      "The resorts are cheap.",
      "The resorts are cheap.",
      "Bulgaria's Black Sea resorts are cheaper than Italy's hotspots.",
      "Bulgaria's Black Sea resorts are cheaper than Spain's hotspots.",
      "Bulgaria's Black Sea resorts are cheaper than Turkey's hotspots.",
      "Bulgaria's resorts are cheaper than hotspots.",
      "Researchers found the cheapest destination using an imaginary shopping basket.",
      "Low exchange rates and high inflation in the country have driven up prices to cheap prices.",
      "Using an imaginary shopping basket, researchers found the cheapest destination.",
      "Low exchange rates and high inflation in the country have driven up prices to cheap prices.",
      "People found.",
      "Research",
      "The destination is cheap.",
      "People using baskets.",
      "Shopping.",
      "They are driven by them.",
      "Low.",
      "exchange.",
      "Inflation of the country.",
      "High.",
      "Prices.",
      "Cheap.",
      "People found.",
      "The destination is cheap.",
      "People are using.",
      "using basket",
      "They are driven by them.",
      "Inflation of the country.",
      "Researchers found the cheapest destination using an imaginary shopping basket. Low exchange rates have driven cheap prices.",
      "Researchers found the cheapest destination using an imaginary shopping basket. High inflation in the country has driven them to cheap prices.",
      "The researchers found the cheapest destination using an imaginary shopping basket. Low exchange rates and high inflation in the country have driven up prices to cheap prices.",
      "Found by using. Driven.",
      "It copies its Sunny Beach resort, which is the most popular of Spain and Greece's resorts.",
      "Its Sunny Beach resort is the most popular of Spain and Greece.",
      "Copy of Sunny Beach resort.",
      "Sunny Beach is a popular resort.",
      "Copy of Sunny Beach resort.",
      "Sunny Beach is a popular resort.",
      "It copies its Sunny Beach resort, Spain's most popular resort.",
      "It copies its Sunny Beach resort, Greece's most popular resort.",
      "It copies its Sunny Beach resort as the most popular of Spain and Greece.",
      "Copyrights"
    ]
  },
  {
    "instance_id": "realsumm-36",
    "summary": "<t> WARNING : GRAPHIC CONTENT . </t> <t> Series of photos appear to show the beheading of a man in Hama in Syria . </t> <t> Man is handcuffed and blindfolded as he is led from a van to area of land . </t> <t> He is surrounded by men with guns and executioner with a meat cleaver . </t> <t> It is claimed the man was beheaded because he is an alleged ' blasphemer ' </t>",
    "summary_trees": [
      "# ::snt  WARNING : GRAPHIC CONTENT . \n(w / warn-01\n      :ARG1 (c / content\n            :mod (g / graphic)))",
      "# ::snt  Series of photos appear to show the beheading of a man in Hama in Syria . \n(a / appear-02\n      :ARG1 (s / show-01\n            :ARG0 (s2 / series\n                  :consist-of (p / photo))\n            :ARG1 (b / behead-01\n                  :ARG1 (m / man)\n                  :location (c / city\n                        :name (n / name\n                              :op1 \"Hama\")\n                        :location (c2 / country\n                              :name (n2 / name\n                                    :op1 \"Syria\"))))))",
      "# ::snt  Man is handcuffed and blindfolded as he is led from a van to area of land . \n(a / and\n      :op1 (h / handcuff-01\n            :ARG1 (m / man))\n      :op2 (b / blindfold-01\n            :ARG1 m)\n      :time (l / lead-01\n            :ARG1 m\n            :ARG3 (v / van)\n            :ARG4 (a2 / area\n                  :mod (l2 / land))))",
      "# ::snt  He is surrounded by men with guns and executioner with a meat cleaver . \n(s / surround-01\n      :ARG1 (a / and\n            :op1 (m / man\n                  :ARG0-of (h / have-03\n                        :ARG1 (g / gun)))\n            :op2 (p / person\n                  :ARG0-of (e / execute-01)\n                  :ARG0-of (h2 / have-03\n                        :ARG1 (c / cleaver\n                              :purpose (m2 / meat)))))\n      :ARG2 (h3 / he))",
      "# ::snt  It is claimed the man was beheaded because he is an alleged ' blasphemer ' \n(c / claim-01\n      :ARG1 (b / behead-01\n            :ARG1 (m / man)\n            :ARG1-of (c2 / cause-01\n                  :ARG0 (b2 / blaspheme-01\n                        :ARG0 m\n                        :ARG1-of (a / allege-01)))))"
    ],
    "tree": [
      "(w / warn-01\n   :ARG1 (c / content\n            :mod (g / graphic)))",
      "(c / content\n   :mod (g / graphic))",
      "(w / warn-01\n   :ARG1 (c / content))",
      "(w / warn-01\n   :ARG1 (c / content))",
      "(w / warn-01\n   :ARG1 (c / content\n            :mod (g / graphic)))",
      "(w / warn-01)",
      "(a / appear-02\n   :ARG1 (s / show-01\n            :ARG0 (s2 / series\n                      :consist-of (p / photo))\n            :ARG1 (b / behead-01\n                     :ARG1 (m / man)\n                     :location (c / city\n                                  :name (n / name\n                                           :op1 \"Hama\")\n                                  :location (c2 / country\n                                                :name (n2 / name\n                                                          :op1 \"Syria\"))))))",
      "(s / show-01\n   :ARG0 (s2 / series\n             :consist-of (p / photo))\n   :ARG1 (b / behead-01\n            :ARG1 (m / man)\n            :location (c / city\n                         :name (n / name\n                                  :op1 \"Hama\")\n                         :location (c2 / country\n                                       :name (n2 / name\n                                                 :op1 \"Syria\")))))",
      "(a / appear-02\n   :ARG1 (s / show-01))",
      "(s / show-01\n   :ARG0 (s2 / series))",
      "(b / behead-01\n   :ARG1 (m / man))",
      "(a / appear-02\n   :ARG1 (s / show-01))",
      "(s / show-01\n   :ARG0 (s2 / series))",
      "(b / behead-01\n   :ARG1 (m / man))",
      "(a / appear-02\n   :ARG1 (s / show-01\n            :ARG0 (s2 / series\n                      :consist-of (p / photo))\n            :ARG1 (b / behead-01\n                     :ARG1 (m / man))))",
      "(a / appear-02)",
      "(a / and\n   :op1 (h / handcuff-01\n           :ARG1 (m / man)))",
      "(a / and\n   :op2 (b / blindfold-01\n           :ARG1 (m / man)))",
      "(a / and\n   :time (l / lead-01\n            :ARG1 (m / man)\n            :ARG3 (v / van)\n            :ARG4 (a2 / area\n                      :mod (l2 / land))))",
      "(h / handcuff-01\n   :ARG1 (m / man))",
      "(l / lead-01\n   :ARG1 (m / man)\n   :ARG3 (v / van)\n   :ARG4 (a2 / area\n             :mod (l2 / land)))",
      "(h / handcuff-01\n   :ARG1 (m / man))",
      "(b / blindfold-01\n   :ARG1 (m / man))",
      "(l / lead-01\n   :ARG1 (m / man)\n   :ARG3 (v / van))",
      "(h / handcuff-01\n   :ARG1 (m / man))",
      "(b / blindfold-01\n   :ARG1 (m / man))",
      "(l / lead-01\n   :ARG1 (m / man))",
      "(l / lead-01\n   :ARG3 (v / van))",
      "(h / handcuff-01\n   :ARG1 (m / man))",
      "(b / blindfold-01\n   :ARG1 (m / man)\n   :time (l / lead-01\n            :ARG1 m\n            :ARG3 (v / van)\n            :ARG4 (a2 / area\n                      :mod (l2 / land))))",
      "(a / and\n   :op1 (h / handcuff-01\n           :ARG1 (m / man))\n   :op2 (b / blindfold-01\n           :ARG1 m))",
      "(a / and\n   :op1 (h / handcuff-01)\n   :op2 (b / blindfold-01)\n   :time (l / lead-01))",
      "(s / surround-01\n   :ARG1 (a / and\n            :op1 (m / man\n                    :ARG0-of (h / have-03\n                                :ARG1 (g / gun)))\n            :op2 (p / person\n                    :ARG0-of (e / execute-01)\n                    :ARG0-of (h2 / have-03\n                                 :ARG1 (c / cleaver\n                                          :purpose (m2 / meat))))))",
      "(s / surround-01\n   :ARG2 (h3 / he))",
      "(a / and\n   :op1 (m / man\n           :ARG0-of (h / have-03\n                       :ARG1 (g / gun)))\n   :op2 (p / person\n           :ARG0-of (e / execute-01)\n           :ARG0-of (h2 / have-03\n                        :ARG1 (c / cleaver\n                                 :purpose (m2 / meat)))))",
      "(s / surround-01\n   :ARG1 (a / and))",
      "(h / have-03\n   :ARG1 (g / gun))",
      "(e / execute-01)",
      "(h2 / have-03\n    :ARG1 (c / cleaver))",
      "(s / surround-01\n   :ARG1 (a / and))",
      "(h / have-03\n   :ARG1 (g / gun))",
      "(h2 / have-03\n    :ARG1 (c / cleaver))",
      "(s / surround-01\n   :ARG1 (m / man\n            :ARG0-of (h / have-03\n                        :ARG1 (g / gun)))\n   :ARG2 (h3 / he))",
      "(s / surround-01\n   :ARG1 (p / person\n            :ARG0-of (e / execute-01)\n            :ARG0-of (h2 / have-03\n                         :ARG1 (c / cleaver\n                                  :purpose (m2 / meat))))\n   :ARG2 (h3 / he)\n   :ARG2 h3)",
      "(s / surround-01\n   :ARG1 (a / and\n            :op1 (m / man\n                    :ARG0 (h / have-03\n                             :ARG1 (g / gun)))\n            :op2 (p / person\n                    :ARG0 (e / execute-01)\n                    :ARG0 (h2 / have-03\n                              :ARG1 (c / cleaver))))\n   :ARG2 (h3 / he))",
      "(s / surround-01)",
      "(c / claim-01\n   :ARG1 (b / behead-01\n            :ARG1 (m / man)\n            :ARG1-of (c2 / cause-01\n                         :ARG0 (b2 / blaspheme-01\n                                   :ARG0 m\n                                   :ARG1-of (a / allege-01)))))",
      "(b / behead-01\n   :ARG1 (m / man)\n   :ARG1-of (c2 / cause-01\n                :ARG0 (b2 / blaspheme-01\n                          :ARG0 m\n                          :ARG1-of (a / allege-01))))",
      "(c / claim-01\n   :ARG1 (b / behead-01))",
      "(b / behead-01\n   :ARG1 (m / man))",
      "(c2 / cause-01\n    :ARG0 (b2 / blaspheme-01))",
      "(b2 / blaspheme-01\n    :ARG0 (m / man))",
      "(a / allege-01)",
      "(c / claim-01\n   :ARG1 (b / behead-01))",
      "(b / behead-01\n   :ARG1 (m / man))",
      "(c2 / cause-01\n    :ARG0 (b2 / blaspheme-01))",
      "(b2 / blaspheme-01\n    :ARG0 (m / man))",
      "(c / claim-01\n   :ARG1 (b / behead-01\n            :ARG1 (m / man)\n            :ARG1 (c2 / cause-01\n                      :ARG0 (b2 / blaspheme-01\n                                :ARG0 m\n                                :ARG1 (a / allege-01)))))",
      "(c / claim-01)"
    ],
    "smus": [
      "Graphic Content Warning:",
      "Graphic Content",
      "Content Warning:",
      "Content Warning:",
      "Graphic Content Warning:",
      "Warning:",
      "The photo series appear to show a man being beheaded in Hama, Syria.",
      "The photo series will show the beheading of a man in Hama, Syria.",
      "The show appears.",
      "The series will show.",
      "The man was beheaded.",
      "The show appears.",
      "The series will show.",
      "The man was beheaded.",
      "The photo series appear to show a man being beheaded.",
      "appear...",
      "and the man was handcuffed.",
      "and the man was blindfolded.",
      "and when the man was led by a van to a land area.",
      "The man was handcuffed.",
      "The man was led by a van to a land area.",
      "The man was handcuffed.",
      "The man was blindfolded.",
      "The man was led to the van.",
      "The man was handcuffed.",
      "The man was blindfolded.",
      "The man was led.",
      "led by a van",
      "The man was handcuffed.",
      "The man was blindfolded as he was led by a van to a land area.",
      "The man was handcuffed and blindfolded.",
      "When led, handcuffed and blindfolded.",
      "The men were surrounded by guns and the executioner had a meat cleaver.",
      "He was surrounded.",
      "The men with guns and the executioner with a meat cleaver.",
      "The surrounding is...",
      "have guns.",
      "Execution",
      "a cleaver",
      "The surrounding is...",
      "have guns.",
      "a cleaver",
      "He was surrounded by men with guns.",
      "He was surrounded by an executioner with a meat cleaver.",
      "He was surrounded by men with guns and an executioner with a cleaver.",
      "surrounded",
      "The man was claimed to have been beheaded because of his alleged blasphemy.",
      "The man was beheaded because of his alleged blasphemy.",
      "The beheading was claimed.",
      "The man was beheaded.",
      "Because of blasphemy.",
      "The man is a blasphemer.",
      "Alleged.",
      "The beheading was claimed.",
      "The man was beheaded.",
      "Because of blasphemy.",
      "The man is a blasphemer.",
      "The man was claimed to have been beheaded because of his alleged blasphemy.",
      "Claim."
    ]
  },
  {
    "instance_id": "realsumm-37",
    "summary": "<t> Denise and Glen Higgs thought they 'd never have children . </t> <t> He was made infertile due to cancer treatment , but they tried IVF . </t> <t> Couple from of Braunton , Devon , had Mazy , born three years ago . </t> <t> Tried again using the same batch and had twins Carter & Carson last week . </t>",
    "summary_trees": [
      "# ::snt  Denise and Glen Higgs thought they 'd never have children . \n(t / think-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Denise\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Glenn\"\n                        :op2 \"Higgs\")))\n      :ARG1 (h / have-05\n            :polarity -\n            :ARG0 a\n            :ARG1 (c / child)\n            :time (e / ever)))",
      "# ::snt  He was made infertile due to cancer treatment , but they tried IVF . \n(c / contrast-01\n      :ARG1 (m / make-02\n            :ARG0 (t / treat-03\n                  :ARG1 (h / he)\n                  :ARG2 (d / disease\n                        :name (n / name\n                              :op1 \"cancer\")))\n            :ARG1 (ii / infertile\n                  :domain h))\n      :ARG2 (t2 / try-01\n            :ARG0 (t3 / they)\n            :ARG1 (f / fertilize-01\n                  :mod (m2 / multiple))))",
      "# ::snt  Couple from of Braunton , Devon , had Mazy , born three years ago . \n(h / have-05\n      :ARG0 (c / couple\n            :source (c2 / city\n                  :name (n / name\n                        :op1 \"Braunton\")\n                  :location (c3 / county\n                        :name (n2 / name\n                              :op1 \"Devon\"))))\n      :ARG1 (p / person\n            :name (n3 / name\n                  :op1 \"Mazy\")\n            :ARG1-of (b / bear-02\n                  :time (b2 / before\n                        :op1 (n4 / now)\n                        :quant (t / temporal-quantity\n                              :quant 3\n                              :unit (y / year))))))",
      "# ::snt  Tried again using the same batch and had twins Carter & Carson last week . \n(a / and\n      :op1 (t / try-01\n            :ARG0 (ii / i)\n            :mod (a2 / again)\n            :manner (u / use-01\n                  :ARG0 ii\n                  :ARG1 (b / batch\n                        :ARG1-of (s / same-01))))\n      :op2 (h / have-05\n            :ARG0 ii\n            :ARG1 (a3 / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Carter\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Carson\"))\n                  :mod (t2 / twin))\n            :time (w / week\n                  :mod (l / last))))"
    ],
    "tree": [
      "(t / think-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Denise\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Glenn\"\n                               :op2 \"Higgs\"))))",
      "(t / think-01\n   :ARG1 (h / have-05\n            :polarity -\n            :ARG0 (a / and)\n            :ARG1 (c / child)\n            :time (e / ever)))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Denise\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Glenn\"\n                      :op2 \"Higgs\")))",
      "(h / have-05\n   :polarity -\n   :ARG0 (a / and)\n   :ARG1 (c / child)\n   :time (e / ever))",
      "(t / think-01\n   :ARG0 (a / and))",
      "(h / have-05\n   :polarity -\n   :ARG0 (a / and)\n   :ARG1 (c / child))",
      "(t / think-01\n   :ARG0 (a / and))",
      "(h / have-05\n   :polarity -)",
      "(h / have-05\n   :ARG0 (a / and))",
      "(h / have-05\n   :ARG1 (c / child))",
      "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Denise\"))\n   :ARG1 (h / have-05\n            :polarity -\n            :ARG0 p\n            :ARG1 (c / child)\n            :time (e / ever)))",
      "(t / think-01\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Glenn\"\n                       :op2 \"Higgs\"))\n   :ARG1 (h / have-05\n            :polarity -\n            :ARG0 p2\n            :ARG1 (c / child)\n            :time (e / ever))\n   :ARG1 h)",
      "(t / think-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Denise\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Glenn\"\n                               :op2 \"Higgs\")))\n   :ARG1 (h / have-05\n            :polarity -\n            :ARG0 a\n            :ARG1 (c / child)))",
      "(t / think-01)",
      "(c / contrast-01\n   :ARG1 (m / make-02\n            :ARG0 (t / treat-03\n                     :ARG1 (h / he)\n                     :ARG2 (d / disease\n                              :name (n / name\n                                       :op1 \"cancer\")))\n            :ARG1 (ii / infertile\n                      :domain h)))",
      "(c / contrast-01\n   :ARG2 (t2 / try-01\n             :ARG0 (t3 / they)\n             :ARG1 (f / fertilize-01\n                      :mod (m2 / multiple))))",
      "(m / make-02\n   :ARG0 (t / treat-03\n            :ARG1 (h / he)\n            :ARG2 (d / disease\n                     :name (n / name\n                              :op1 \"cancer\")))\n   :ARG1 (ii / infertile\n             :domain h))",
      "(t2 / try-01\n    :ARG0 (t3 / they)\n    :ARG1 (f / fertilize-01\n             :mod (m2 / multiple)))",
      "(c / contrast-01\n   :ARG1 (m / make-02))",
      "(m / make-02\n   :ARG0 (t / treat-03))",
      "(t / treat-03\n   :ARG1 (h / he))",
      "(t2 / try-01\n    :ARG0 (t3 / they))",
      "(f / fertilize-01\n   :mod (m2 / multiple))",
      "(c / contrast-01\n   :ARG1 (m / make-02))",
      "(m / make-02\n   :ARG0 (t / treat-03))",
      "(t / treat-03\n   :ARG1 (h / he))",
      "(t2 / try-01\n    :ARG0 (t3 / they))",
      "(f / fertilize-01\n   :mod (m2 / multiple))",
      "(c / contrast-01\n   :ARG1 (m / make-02\n            :ARG0 (t / treat-03\n                     :ARG1 (h / he)\n                     :ARG2 (d / disease\n                              :name (n / name\n                                       :op1 \"cancer\")))\n            :ARG1 (ii / infertile\n                      :domain h))\n   :ARG2 (t2 / try-01\n             :ARG0 (t3 / they)\n             :ARG1 (f / fertilize-01\n                      :mod (m2 / multiple))))",
      "(c / contrast-01)",
      "(h / have-05\n   :ARG0 (c / couple\n            :source (c2 / city\n                        :name (n / name\n                                 :op1 \"Braunton\")\n                        :location (c3 / county\n                                      :name (n2 / name\n                                                :op1 \"Devon\")))))",
      "(h / have-05\n   :ARG1 (p / person\n            :name (n3 / name\n                      :op1 \"Mazy\")\n            :ARG1-of (b / bear-02\n                        :time (b2 / before\n                                  :op1 (n4 / now)\n                                  :quant (t / temporal-quantity\n                                            :quant 3\n                                            :unit (y / year))))))",
      "(c / couple\n   :source (c2 / city\n               :name (n / name\n                        :op1 \"Braunton\")\n               :location (c3 / county\n                             :name (n2 / name\n                                       :op1 \"Devon\"))))",
      "(p / person\n   :name (n3 / name\n             :op1 \"Mazy\")\n   :ARG1-of (b / bear-02\n               :time (b2 / before\n                         :op1 (n4 / now)\n                         :quant (t / temporal-quantity\n                                   :quant 3\n                                   :unit (y / year)))))",
      "(h / have-05\n   :ARG0 (c / couple))",
      "(b / bear-02\n   :time (b2 / before))",
      "(h / have-05\n   :ARG0 (c / couple))",
      "(b / bear-02\n   :time (b2 / before))",
      "(h / have-05\n   :ARG0 (c / couple)\n   :ARG1 (p / person\n            :name (n3 / name\n                      :op1 \"Mazy\")\n            :ARG1 (b / bear-02)))",
      "(h / have-05)",
      "(a / and\n   :op1 (t / try-01\n           :ARG0 (ii / i)\n           :mod (a2 / again)\n           :manner (u / use-01\n                      :ARG0 ii\n                      :ARG1 (b / batch\n                               :ARG1-of (s / same-01)))))",
      "(a / and\n   :op2 (h / have-05\n           :ARG0 (ii / i)\n           :ARG1 (a3 / and\n                     :op1 (p / person\n                             :name (n / name\n                                      :op1 \"Carter\"))\n                     :op2 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Carson\"))\n                     :mod (t2 / twin))\n           :time (w / week\n                    :mod (l / last))))",
      "(t / try-01\n   :ARG0 (ii / i)\n   :mod (a2 / again)\n   :manner (u / use-01\n              :ARG0 ii\n              :ARG1 (b / batch\n                       :ARG1-of (s / same-01))))",
      "(h / have-05\n   :ARG0 (ii / i)\n   :ARG1 (a3 / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Carter\"))\n             :op2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Carson\"))\n             :mod (t2 / twin))\n   :time (w / week\n            :mod (l / last)))",
      "(t / try-01\n   :ARG0 (ii / i))",
      "(u / use-01\n   :ARG0 (ii / i)\n   :ARG1 (b / batch))",
      "(s / same-01)",
      "(h / have-05\n   :ARG0 (ii / i)\n   :ARG1 (a3 / and))",
      "(t / try-01\n   :ARG0 (ii / i))",
      "(u / use-01\n   :ARG0 (ii / i))",
      "(u / use-01\n   :ARG1 (b / batch))",
      "(h / have-05\n   :ARG0 (ii / i))",
      "(h / have-05\n   :ARG1 (a3 / and))",
      "(t / try-01\n   :ARG0 (ii / i)\n   :mod (a2 / again)\n   :manner (u / use-01\n              :ARG0 ii\n              :ARG1 (b / batch\n                       :ARG1-of (s / same-01))))",
      "(h / have-05\n   :ARG0 (ii / i)\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Carter\")\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Carson\"))\n            :mod (t2 / twin))\n   :time (w / week\n            :mod (l / last)))",
      "(a / and\n   :op1 (t / try-01\n           :ARG0 (ii / i)\n           :mod (a2 / again)\n           :manner (u / use-01\n                      :ARG0 ii\n                      :ARG1 (b / batch\n                               :ARG1 (s / same-01))))\n   :op2 (h / have-05\n           :ARG0 ii\n           :ARG1 (a3 / and\n                     :op1 (p / person\n                             :name (n / name\n                                      :op1 \"Carter\"))\n                     :op2 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Carson\"))\n                     :mod (t2 / twin))))",
      "(a / and\n   :op1 (t / try-01\n           :mod (a2 / again)\n           :manner (u / use-01))\n   :op2 (h / have-05))"
    ],
    "smus": [
      "Denise and Glenn Higgs thought.",
      "Thought that the children would never have been.",
      "Denise and Glenn Higgs",
      "And the children will never have children.",
      "They thought.",
      "The children don't have children.",
      "They thought.",
      "Have no.",
      "Have and",
      "Have children.",
      "Denise thought she would never have children.",
      "Glenn Higgs thought he would never have children.",
      "Denise and Glenn Higgs thought they wouldn't have children.",
      "thought.",
      "But his cancer treatment has made him infertile.",
      "But the y tried multiple fertilization.",
      "His cancer treatment has made him infertile.",
      "The tried multiple fertilization.",
      "But made.",
      "Treatment is made.",
      "He was given treatment.",
      "The tried.",
      "Multiple fertilization.",
      "But made.",
      "Treatment is made.",
      "He was given treatment.",
      "The tried.",
      "Multiple fertilization.",
      "His cancer treatment has made him infertile, but the chemist tried multiple fertilization.",
      "But...",
      "The couple from Brainton, Devon had.",
      "Had Mazy born three years ago.",
      "A couple from Brainton, Devon.",
      "Mazy was born three years ago.",
      "The couple had.",
      "Born earlier.",
      "The couple had.",
      "Born earlier.",
      "The couple had Mazy born.",
      "Had.",
      "And I've tried again using the same batch.",
      "And last week I had Carter and Carson as twins.",
      "I've tried again using the same batch.",
      "Last week I had Carter and Carson as twins.",
      "I've tried.",
      "I'm using a batch.",
      "Same.",
      "I had it and.",
      "I've tried.",
      "I'm using.",
      "using a batch.",
      "I had.",
      "had them and...",
      "I've tried again using the same batch.",
      "Last week I had Carter and Carson as twins.",
      "I've tried again using the same batch and had Carter and Carter as twins.",
      "Trying again using and had."
    ]
  },
  {
    "instance_id": "realsumm-38",
    "summary": "<t> Speed camera discovered pointing at house in Handsworth , Birmingham . </t> <t> Fixed cameras switched off across the West Midlands in Spring of 2013 . </t> <t> Site is not going to be part of a new trial using digital technology . </t> <t> Obsolete camera may now be taken down after engineers examine device . </t>",
    "summary_trees": [
      "# ::snt  Speed camera discovered pointing at house in Handsworth , Birmingham . \n(d / discover-01\n      :ARG1 (c / camera\n            :mod (s / speed)\n            :ARG0-of (p / point-01\n                  :ARG2 (h / house\n                        :location (c2 / city-district\n                              :name (n / name\n                                    :op1 \"Handsworth\")\n                              :part-of (c3 / city\n                                    :name (n2 / name\n                                          :op1 \"Birmingham\")))))))",
      "# ::snt  Fixed cameras switched off across the West Midlands in Spring of 2013 . \n(s / switch-off-04\n      :ARG1 (c / camera\n            :ARG1-of (f / fix-03))\n      :location (a / across\n            :op1 (c2 / country-region\n                  :name (n / name\n                        :op1 \"West\"\n                        :op2 \"Midlands\")))\n      :time (d / date-entity\n            :year 2013\n            :season (s2 / spring)))",
      "# ::snt  Site is not going to be part of a new trial using digital technology . \n(h / have-part-91\n      :polarity -\n      :ARG1 (t / try-02\n            :ARG1-of (n / new-01)\n            :ARG0-of (u / use-01\n                  :ARG1 (t2 / technology\n                        :mod (d / digit))))\n      :ARG2 (s / site))",
      "# ::snt  Obsolete camera may now be taken down after engineers examine device . \n(p / possible-01\n      :ARG1 (t / take-down-22\n            :ARG1 (c / camera\n                  :mod (o / obsolete))\n            :time (a / after\n                  :op1 (e / examine-01\n                        :ARG0 (p2 / person\n                              :ARG0-of (e2 / engineer-01))\n                        :ARG1 (d / device))))\n      :time (n / now))"
    ],
    "tree": [
      "(d / discover-01\n   :ARG1 (c / camera\n            :mod (s / speed)\n            :ARG0-of (p / point-01\n                        :ARG2 (h / house\n                                 :location (c2 / city-district\n                                               :name (n / name\n                                                        :op1 \"Handsworth\")\n                                               :part-of (c3 / city\n                                                            :name (n2 / name\n                                                                      :op1 \"Birmingham\")))))))",
      "(c / camera\n   :mod (s / speed)\n   :ARG0-of (p / point-01\n               :ARG2 (h / house\n                        :location (c2 / city-district\n                                      :name (n / name\n                                               :op1 \"Handsworth\")\n                                      :part-of (c3 / city\n                                                   :name (n2 / name\n                                                             :op1 \"Birmingham\"))))))",
      "(d / discover-01\n   :ARG1 (c / camera))",
      "(p / point-01\n   :ARG2 (h / house))",
      "(d / discover-01\n   :ARG1 (c / camera))",
      "(p / point-01\n   :ARG2 (h / house))",
      "(d / discover-01\n   :ARG1 (c / camera\n            :mod (s / speed)\n            :ARG0 (p / point-01\n                     :ARG2 (h / house))))",
      "(d / discover-01)",
      "(s / switch-off-04\n   :ARG1 (c / camera\n            :ARG1-of (f / fix-03)))",
      "(s / switch-off-04\n   :location (a / across\n                :op1 (c2 / country-region\n                         :name (n / name\n                                  :op1 \"West\"\n                                  :op2 \"Midlands\"))))",
      "(s / switch-off-04\n   :time (d / date-entity\n            :year 2013\n            :season (s2 / spring)))",
      "(c / camera\n   :ARG1-of (f / fix-03))",
      "(a / across\n   :op1 (c2 / country-region\n            :name (n / name\n                     :op1 \"West\"\n                     :op2 \"Midlands\")))",
      "(d / date-entity\n   :year 2013\n   :season (s2 / spring))",
      "(s / switch-off-04\n   :ARG1 (c / camera))",
      "(f / fix-03)",
      "(s / switch-off-04\n   :ARG1 (c / camera))",
      "(s / switch-off-04\n   :ARG1 (c / camera\n            :ARG1 (f / fix-03)))",
      "(s / switch-off-04\n   :location (a / across\n                :op1 (c2 / country-region\n                         :name (n / name\n                                  :op1 \"West\"\n                                  :op2 \"Midlands\")))\n   :time (d / date-entity\n            :year 2013\n            :season (s2 / spring)))",
      "(h / have-part-91\n   :polarity -)",
      "(h / have-part-91\n   :ARG1 (t / try-02\n            :ARG1-of (n / new-01)\n            :ARG0-of (u / use-01\n                        :ARG1 (t2 / technology\n                                  :mod (d / digit)))))",
      "(h / have-part-91\n   :ARG2 (s / site))",
      "(t / try-02\n   :ARG1-of (n / new-01)\n   :ARG0-of (u / use-01\n               :ARG1 (t2 / technology\n                         :mod (d / digit))))",
      "(t / try-02)",
      "(n / new-01)",
      "(u / use-01\n   :ARG1 (t2 / technology))",
      "(u / use-01\n   :ARG1 (t2 / technology))",
      "(h / have-part-91\n   :polarity -\n   :ARG1 (t / try-02\n            :ARG1 (n / new-01)\n            :ARG0 (u / use-01\n                     :ARG1 (t2 / technology\n                               :mod (d / digit))))\n   :ARG2 (s / site))",
      "(h / have-part-91\n   :polarity -)",
      "(p / possible-01\n   :ARG1 (t / take-down-22\n            :ARG1 (c / camera\n                     :mod (o / obsolete))\n            :time (a / after\n                     :op1 (e / examine-01\n                             :ARG0 (p2 / person\n                                       :ARG0-of (e2 / engineer-01))\n                             :ARG1 (d / device)))))",
      "(p / possible-01\n   :time (n / now))",
      "(t / take-down-22\n   :ARG1 (c / camera\n            :mod (o / obsolete))\n   :time (a / after\n            :op1 (e / examine-01\n                    :ARG0 (p2 / person\n                              :ARG0-of (e2 / engineer-01))\n                    :ARG1 (d / device))))",
      "(p / possible-01\n   :ARG1 (t / take-down-22))",
      "(e / examine-01\n   :ARG0 (p2 / person))",
      "(e2 / engineer-01)",
      "(p / possible-01\n   :ARG1 (t / take-down-22))",
      "(e / examine-01\n   :ARG0 (p2 / person))",
      "(p / possible-01\n   :ARG1 (t / take-down-22\n            :ARG1 (c / camera\n                     :mod (o / obsolete))))",
      "(p / possible-01\n   :time (n / now))"
    ],
    "smus": [
      "A speed camera discovered pointing at a house in Handsworth, Birmingham.",
      "A speed camera pointing at a house in Handsworth, Birmingham.",
      "The camera was discovered.",
      "Point to the house.",
      "The camera was discovered.",
      "Point to the house.",
      "The speed camera discovered was pointing at the house.",
      "Discovered.",
      "Fixed cameras switched off.",
      "Switched off across the West Midlands.",
      "Switched off in Spring 2013.",
      "Fixed cameras.",
      "across the West Midlands",
      "Spring 2013",
      "The cameras switched off.",
      "fixed.",
      "The cameras switched off.",
      "The fixed camera switched off.",
      "Switched off across the West Midlands in spring 2013.",
      "Not in part.",
      "Part of the new trial is using digital technology.",
      "Part of the site.",
      "New trial using digital technology",
      "Try.",
      "New.",
      "using technology",
      "using technology",
      "The site is not part of a new trial of using digitized technology.",
      "Not in part.",
      "The obsolete camera can be taken down after engineers examine the device.",
      "Maybe now.",
      "The obsolete camera was taken down after engineers examine the device.",
      "Could be taken down.",
      "People examine.",
      "Engineers",
      "Could be taken down.",
      "People examine.",
      "The obsolete camera could have been taken down.",
      "Maybe now."
    ]
  },
  {
    "instance_id": "realsumm-39",
    "summary": "<t> Charles Terreni , 18 , was found dead March 18 at a frat house in Columbia . </t> <t> Terreni was a USC freshman and a member of the Pi Kappa Alpha house . </t> <t> Coroner identified cause of death as alcohol poisoning . </t> <t> Toxicology tests showed he had a blood alcohol of .375 . </t> <t> Neighbors said there was a large party ; a beer keg was still visible outside . </t>",
    "summary_trees": [
      "# ::snt  Charles Terreni , 18 , was found dead March 18 at a frat house in Columbia . \n(f / find-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Charles\"\n                  :op2 \"Terreni\")\n            :age (t / temporal-quantity\n                  :quant 18\n                  :unit (y / year)))\n      :ARG2 (d / die-01\n            :ARG1 p)\n      :time (d2 / date-entity\n            :day 18\n            :month 3)\n      :location (h / house\n            :mod (f2 / frat)\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Columbia\"))))",
      "# ::snt  Terreni was a USC freshman and a member of the Pi Kappa Alpha house . \n(a / and\n      :op1 (f / freshman\n            :domain (p / person\n                  :name (n / name\n                        :op1 \"Terreni\"))\n            :location (u / university\n                  :name (n2 / name\n                        :op1 \"USC\")))\n      :op2 (h / have-org-role-91\n            :ARG0 p\n            :ARG1 (h2 / house\n                  :name (n3 / name\n                        :op1 \"Pi\"\n                        :op2 \"Kappa\"\n                        :op3 \"Alpha\"))\n            :ARG2 (m / member)))",
      "# ::snt  Coroner identified cause of death as alcohol poisoning . \n(ii / identify-01\n      :ARG0 (c / coroner)\n      :ARG1 (c2 / cause-01\n            :ARG1 (d / die-01))\n      :ARG2 (p / poison-02\n            :ARG1 (a / alcohol)))",
      "# ::snt  Toxicology tests showed he had a blood alcohol of .375 . \n(s / show-01\n      :ARG0 (t / test-01\n            :ARG2 (t2 / toxicology))\n      :ARG1 (h / have-03\n            :ARG0 (h2 / he)\n            :ARG1 (a / alcohol\n                  :quant (c / concentration-quantity\n                        :quant.375 (f / fluid-ounce))\n                  :mod (b / blood))))",
      "# ::snt  Neighbors said there was a large party ; a beer keg was still visible outside . \n(a / and\n      :op1 (s / say-01\n            :ARG0 (n / neighbor)\n            :ARG1 (p / party-01\n                  :mod (l / large)))\n      :op2 (s2 / see-01\n            :ARG1 (k / keg\n                  :mod (b / beer))\n            :mod (s3 / still)\n            :location (o / outside)))"
    ],
    "tree": [
      "(f / find-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Charles\"\n                     :op2 \"Terreni\")\n            :age (t / temporal-quantity\n                    :quant 18\n                    :unit (y / year))))",
      "(f / find-01\n   :ARG2 (d / die-01\n            :ARG1 (p / person :name (n / name :op1 \"Charles\" :op2 \"Terreni\")))))",
      "(f / find-01\n   :time (d2 / date-entity\n             :day 18\n             :month 3))",
      "(f / find-01\n   :location (h / house\n                :mod (f2 / frat)\n                :location (c / city\n                             :name (n2 / name\n                                       :op1 \"Columbia\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Charles\"\n            :op2 \"Terreni\")\n   :age (t / temporal-quantity\n           :quant 18\n           :unit (y / year)))",
      "(d2 / date-entity\n    :day 18\n    :month 3)",
      "(h / house\n   :mod (f2 / frat)\n   :location (c / city\n                :name (n2 / name\n                          :op1 \"Columbia\")))",
      "(f / find-01\n   :ARG1 (p / person :name (n / name :op1 \"Charles\" :op2 \"Terreni\"))))",
      "(d / die-01\n   :ARG1 (p / person :name (n / name :op1 \"Charles\" :op2 \"Terreni\"))))",
      "(f / find-01\n   :ARG1 (p / person :name (n / name :op1 \"Charles\" :op2 \"Terreni\"))))",
      "(d / die-01\n   :ARG1 (p / person :name (n / name :op1 \"Charles\" :op2 \"Terreni\"))))",
      "(f / find-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Charles\"\n                     :op2 \"Terreni\")\n            :age (t / temporal-quantity\n                    :quant 18\n                    :unit (y / year)))\n   :ARG2 (d / die-01\n            :ARG1 p))",
      "(f / find-01\n   :time (d2 / date-entity)\n   :location (h / house\n                :mod (f2 / frat)\n                :location (c / city\n                             :name (n2 / name\n                                       :op1 \"Columbia\"))))",
      "(a / and\n   :op1 (f / freshman\n           :domain (p / person\n                      :name (n / name\n                               :op1 \"Terreni\"))\n           :location (u / university\n                        :name (n2 / name\n                                  :op1 \"USC\"))))",
      "(a / and\n   :op2 (h / have-org-role-91\n           :ARG0 (p / person :name (n / name :op1 \"Terreni\"))\n           :ARG1 (h2 / house\n                     :name (n3 / name\n                               :op1 \"Pi\"\n                               :op2 \"Kappa\"\n                               :op3 \"Alpha\"))\n           :ARG2 (m / member)))",
      "(f / freshman\n   :domain (p / person\n              :name (n / name\n                       :op1 \"Terreni\"))\n   :location (u / university\n                :name (n2 / name\n                          :op1 \"USC\")))",
      "(h / have-org-role-91\n   :ARG0 (p / person :name (n / name :op1 \"Terreni\"))\n   :ARG1 (h2 / house\n             :name (n3 / name\n                       :op1 \"Pi\"\n                       :op2 \"Kappa\"\n                       :op3 \"Alpha\"))\n   :ARG2 (m / member))",
      "(f / freshman\n   :domain (p / person\n              :name (n / name\n                       :op1 \"Terreni\"))\n   :location (u / university\n                :name (n2 / name\n                          :op1 \"USC\")))",
      "(h / have-org-role-91\n   :ARG0 (p / person :name (n / name :op1 \"Terreni\"))\n   :ARG1 (h2 / house\n             :name (n3 / name\n                       :op1 \"Pi\"\n                       :op2 \"Kappa\"\n                       :op3 \"Alpha\"))\n   :ARG2 (m / member))",
      "(a / and\n   :op1 (f / freshman\n           :domain (p / person\n                      :name (n / name\n                               :op1 \"Terreni\")))\n   :op2 (h / have-org-role-91\n           :ARG0 p\n           :ARG1 (h2 / house\n                     :name (n3 / name\n                               :op1 \"Pi\"\n                               :op2 \"Kappa\"\n                               :op3 \"Alpha\"))\n           :ARG2 (m / member)))",
      "(a / and\n   :op1 (f / freshman\n           :domain (p / person\n                      :name (n / name\n                               :op1 \"Terreni\"))\n           :location (u / university\n                        :name (n2 / name\n                                  :op1 \"USC\")))\n   :op2 (h / have-org-role-91))",
      "(ii / identify-01\n    :ARG0 (c / coroner))",
      "(ii / identify-01\n    :ARG1 (c2 / cause-01\n              :ARG1 (d / die-01)))",
      "(ii / identify-01\n    :ARG2 (p / poison-02\n             :ARG1 (a / alcohol)))",
      "(c2 / cause-01\n    :ARG1 (d / die-01))",
      "(p / poison-02\n   :ARG1 (a / alcohol))",
      "(ii / identify-01\n    :ARG0 (c / coroner))",
      "(c2 / cause-01\n    :ARG1 (d / die-01))",
      "(d / die-01)",
      "(p / poison-02\n   :ARG1 (a / alcohol))",
      "(ii / identify-01\n    :ARG0 (c / coroner))",
      "(c2 / cause-01\n    :ARG1 (d / die-01))",
      "(p / poison-02\n   :ARG1 (a / alcohol))",
      "(ii / identify-01\n    :ARG0 (c / coroner)\n    :ARG1 (c2 / cause-01\n              :ARG1 (d / die-01))\n    :ARG2 (p / poison-02\n             :ARG1 (a / alcohol)))",
      "(ii / identify-01)",
      "(s / show-01\n   :ARG0 (t / test-01\n            :ARG2 (t2 / toxicology)))",
      "(s / show-01\n   :ARG1 (h / have-03\n            :ARG0 (h2 / he)\n            :ARG1 (a / alcohol\n                     :quant (c / concentration-quantity\n                               :quant.375 (f / fluid-ounce))\n                     :mod (b / blood))))",
      "(t / test-01\n   :ARG2 (t2 / toxicology))",
      "(h / have-03\n   :ARG0 (h2 / he)\n   :ARG1 (a / alcohol\n            :quant (c / concentration-quantity\n                      :quant.375 (f / fluid-ounce))\n            :mod (b / blood)))",
      "(s / show-01\n   :ARG0 (t / test-01))",
      "(t / test-01\n   :ARG2 (t2 / toxicology))",
      "(h / have-03\n   :ARG0 (h2 / he))",
      "(s / show-01\n   :ARG0 (t / test-01))",
      "(t / test-01\n   :ARG2 (t2 / toxicology))",
      "(h / have-03\n   :ARG0 (h2 / he))",
      "(s / show-01\n   :ARG0 (t / test-01\n            :ARG2 (t2 / toxicology))\n   :ARG1 (h / have-03\n            :ARG0 (h2 / he)\n            :ARG1 (a / alcohol\n                     :quant (c / concentration-quantity\n                               :quant.375 (f / fluid-ounce))\n                     :mod (b / blood))))",
      "(s / show-01)",
      "(a / and\n   :op1 (s / say-01\n           :ARG0 (n / neighbor)\n           :ARG1 (p / party-01\n                    :mod (l / large))))",
      "(a / and\n   :op2 (s2 / see-01\n            :ARG1 (k / keg\n                     :mod (b / beer))\n            :mod (s3 / still)\n            :location (o / outside)))",
      "(s / say-01\n   :ARG0 (n / neighbor)\n   :ARG1 (p / party-01\n            :mod (l / large)))",
      "(s2 / see-01\n    :ARG1 (k / keg\n             :mod (b / beer))\n    :mod (s3 / still)\n    :location (o / outside))",
      "(s / say-01\n   :ARG0 (n / neighbor))",
      "(p / party-01\n   :mod (l / large))",
      "(s2 / see-01\n    :ARG1 (k / keg))",
      "(s / say-01\n   :ARG0 (n / neighbor))",
      "(p / party-01\n   :mod (l / large))",
      "(s2 / see-01\n    :ARG1 (k / keg))",
      "(s / say-01\n   :ARG0 (n / neighbor)\n   :ARG1 (p / party-01\n            :mod (l / large)))",
      "(s2 / see-01\n    :ARG1 (k / keg\n             :mod (b / beer))\n    :mod (s3 / still)\n    :location (o / outside))",
      "(a / and\n   :op1 (s / say-01\n           :ARG0 (n / neighbor)\n           :ARG1 (p / party-01\n                    :mod (l / large)))\n   :op2 (s2 / see-01\n            :ARG1 (k / keg\n                     :mod (b / beer))\n            :mod (s3 / still)))",
      "(a / and\n   :op1 (s / say-01)\n   :op2 (s2 / see-01\n            :mod (s3 / still)\n            :location (o / outside)))"
    ],
    "smus": [
      "Charles Terreni, 18, was found.",
      "Charles Terreni was found dead.",
      "Found on March 18.",
      "Found in a frat house in Columbia.",
      "Charles Terreni, 18,",
      "March 18",
      "a frat house in Columbia.",
      "Charles Terreni was found.",
      "Charles Terreni died.",
      "Charles Terreni was found.",
      "Charles Terreni died.",
      "Charles Terreni, 18, was found dead.",
      "Found in a frat house in Columbia.",
      "And Terreni is a freshman at USC.",
      "And Terreni is a member of the Pi Kappa Alpha house.",
      "Terreni is a freshman at USC.",
      "Terreni is a member of the Pi Kappa Alpha house.",
      "Terreni is a freshman at USC.",
      "Terreni is a member of the Pi Kappa Alpha house.",
      "Terreni is a freshman and a member of the Pi Kappa Alpha house.",
      "Terreni is a freshman at USC and is a USC employee.",
      "The coroner identified.",
      "The cause of death was identified.",
      "The alcohol poisoning was identified.",
      "Cause of Death",
      "Alcohol poisoning.",
      "The coroner identified.",
      "Cause of Death",
      "Death",
      "Alcohol poisoning.",
      "The coroner identified.",
      "Cause of Death",
      "Alcohol poisoning.",
      "The coroner identified the cause of death as alcohol poisoning.",
      "Identified.",
      "The toxicology tests showed --",
      "It showed he had.375 fl oz of alcohol in the blood.",
      "toxicology tests",
      "He had 375 fl.oz of alcohol in the blood.",
      "The tests showed --",
      "toxicology tests",
      "He had.",
      "The tests showed --",
      "toxicology tests",
      "He had.",
      "The toxicology tests showed he had.375 fl oz of alcohol in the blood.",
      "Showed.",
      "And neighbors said there was a large party.",
      "And there's still a beer keg outside.",
      "The neighbors said it was a large party.",
      "Still seeing a beer keg outside.",
      "\"Neighbors said.",
      "a large party",
      "See keg.",
      "\"Neighbors said.",
      "a large party",
      "See keg.",
      "The neighbors said it was a large party.",
      "Still seeing a beer keg outside.",
      "Neighbors said there was a large party, and still saw a beer keg.",
      "said, still seen outside."
    ]
  },
  {
    "instance_id": "realsumm-40",
    "summary": "<t> Air strikes were launched by Saudi forces a month ago against rebels . </t> <t> Saudi forces have focused on beating back Shiite Houthi rebels in Yemen . </t> <t> Prince Alwaleed Bin Talal pledged Bentleys for pilots involved in bombings . </t> <t> He made pledge on Wednesday after bombing raids appeared to resume , despite an official announcement that they would be halted last night . </t>",
    "summary_trees": [
      "# ::snt  Air strikes were launched by Saudi forces a month ago against rebels . \n(l / launch-01\n      :ARG0 (f / force\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Saudi\"\n                        :op2 \"Arabia\")))\n      :ARG1 (s / strike-01\n            :ARG0 f\n            :ARG1 (p / person\n                  :ARG0-of (r / rebel-01))\n            :path (a / air))\n      :time (b / before\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                  :quant 1\n                  :unit (m / month))))",
      "# ::snt  Saudi forces have focused on beating back Shiite Houthi rebels in Yemen . \n(f / focus-01\n      :ARG0 (f2 / force\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Saudi\"\n                        :op2 \"Arabia\")))\n      :ARG2 (b / beat-back-05\n            :ARG0 f2\n            :ARG1 (p / person\n                  :mod (r / religious-group\n                        :name (n2 / name\n                              :op1 \"Shiite\"\n                              :op2 \"Hathi\"))\n                  :location (c2 / country\n                        :name (n3 / name\n                              :op1 \"Yemen\"))\n                  :ARG0-of (r2 / rebel-01))))",
      "# ::snt  Prince Alwaleed Bin Talal pledged Bentleys for pilots involved in bombings . \n(p / pledge-01\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Alwaleed\"\n                  :op2 \"Bin\"\n                  :op3 \"Talal\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (p3 / prince)))\n      :ARG2 (c / car-make\n            :name (n2 / name\n                  :op1 \"Bentley\"))\n      :beneficiary (p4 / person\n            :ARG0-of (p5 / pilot-01)\n            :ARG1-of (ii / involve-01\n                  :ARG2 (b / bomb-01))))",
      "# ::snt  He made pledge on Wednesday after bombing raids appeared to resume , despite an official announcement that they would be halted last night . \n(p / pledge-01\n      :ARG0 (h / he)\n      :time (d / date-entity\n            :weekday (w / wednesday))\n      :time (a / after\n            :op1 (a2 / appear-02\n                  :ARG1 (r / resume-01\n                        :ARG1 (r2 / raid-01\n                              :manner (b / bomb-01)))))\n      :concession (a3 / announce-01\n            :ARG1 (h2 / halt-01\n                  :ARG1 r2\n                  :time (d2 / date-entity\n                        :dayperiod (n / night)\n                        :mod (y / yesterday)))\n            :mod (o / official)))"
    ],
    "tree": [
      "(l / launch-01\n   :ARG0 (f / force\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Saudi\"\n                             :op2 \"Arabia\"))))",
      "(l / launch-01\n   :ARG1 (s / strike-01\n            :ARG0 (f / force)\n            :ARG1 (p / person\n                     :ARG0-of (r / rebel-01))\n            :path (a / air)))",
      "(l / launch-01\n   :time (b / before\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                      :quant 1\n                      :unit (m / month))))",
      "(f / force\n   :mod (c / country\n           :name (n / name\n                    :op1 \"Saudi\"\n                    :op2 \"Arabia\")))",
      "(s / strike-01\n   :ARG0 (f / force)\n   :ARG1 (p / person\n            :ARG0-of (r / rebel-01))\n   :path (a / air))",
      "(b / before\n   :op1 (n2 / now)\n   :quant (t / temporal-quantity\n             :quant 1\n             :unit (m / month)))",
      "(l / launch-01\n   :ARG0 (f / force))",
      "(s / strike-01\n   :ARG0 (f / force)\n   :ARG1 (p / person))",
      "(r / rebel-01)",
      "(l / launch-01\n   :ARG0 (f / force))",
      "(s / strike-01\n   :ARG0 (f / force))",
      "(s / strike-01\n   :ARG1 (p / person))",
      "(l / launch-01\n   :ARG0 (f / force\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Saudi\"\n                             :op2 \"Arabia\")))\n   :ARG1 (s / strike-01\n            :ARG0 f\n            :ARG1 (p / person\n                     :ARG0 (r / rebel-01))\n            :path (a / air)))",
      "(l / launch-01\n   :time (b / before\n            :op1 (n2 / now)\n            :quant (t / temporal-quantity\n                      :quant 1\n                      :unit (m / month))))",
      "(f / focus-01\n   :ARG0 (f2 / force\n             :mod (c / country\n                     :name (n / name\n                              :op1 \"Saudi\"\n                              :op2 \"Arabia\"))))",
      "(f / focus-01\n   :ARG2 (b / beat-back-05\n            :ARG0 (f2 / force)\n            :ARG1 (p / person\n                     :mod (r / religious-group\n                             :name (n2 / name\n                                       :op1 \"Shiite\"\n                                       :op2 \"Hathi\"))\n                     :location (c2 / country\n                                   :name (n3 / name\n                                             :op1 \"Yemen\"))\n                     :ARG0-of (r2 / rebel-01))))",
      "(f2 / force\n    :mod (c / country\n            :name (n / name\n                     :op1 \"Saudi\"\n                     :op2 \"Arabia\")))",
      "(b / beat-back-05\n   :ARG0 (f2 / force)\n   :ARG1 (p / person\n            :mod (r / religious-group\n                    :name (n2 / name\n                              :op1 \"Shiite\"\n                              :op2 \"Hathi\"))\n            :location (c2 / country\n                          :name (n3 / name\n                                    :op1 \"Yemen\"))\n            :ARG0-of (r2 / rebel-01)))",
      "(f / focus-01\n   :ARG0 (f2 / force))",
      "(b / beat-back-05\n   :ARG0 (f2 / force)\n   :ARG1 (p / person))",
      "(r2 / rebel-01)",
      "(f / focus-01\n   :ARG0 (f2 / force))",
      "(b / beat-back-05\n   :ARG0 (f2 / force))",
      "(b / beat-back-05\n   :ARG1 (p / person))",
      "(f / focus-01\n   :ARG0 (f2 / force\n             :mod (c / country\n                     :name (n / name\n                              :op1 \"Saudi\"\n                              :op2 \"Arabia\")))\n   :ARG2 (b / beat-back-05\n            :ARG0 f2\n            :ARG1 (p / person\n                     :mod (r / religious-group\n                             :name (n2 / name\n                                       :op1 \"Shiite\"\n                                       :op2 \"Hathi\"))\n                     :ARG0 (r2 / rebel-01))))",
      "(f / focus-01)",
      "(p / pledge-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Alwaleed\"\n                      :op2 \"Bin\"\n                      :op3 \"Talal\")\n             :ARG0-of (h / have-org-role-91\n                         :ARG2 (p3 / prince))))",
      "(p / pledge-01\n   :ARG2 (c / car-make\n            :name (n2 / name\n                      :op1 \"Bentley\")))",
      "(p / pledge-01\n   :beneficiary (p4 / person\n                    :ARG0-of (p5 / pilot-01)\n                    :ARG1-of (ii / involve-01\n                                 :ARG2 (b / bomb-01))))",
      "(p2 / person\n    :name (n / name\n             :op1 \"Alwaleed\"\n             :op2 \"Bin\"\n             :op3 \"Talal\")\n    :ARG0-of (h / have-org-role-91\n                :ARG2 (p3 / prince)))",
      "(c / car-make\n   :name (n2 / name\n             :op1 \"Bentley\"))",
      "(p4 / person\n    :ARG0-of (p5 / pilot-01)\n    :ARG1-of (ii / involve-01\n                 :ARG2 (b / bomb-01)))",
      "(p / pledge-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Alwaleed\" :op2 \"Bin\" :op3 \"Talal\"))))",
      "(p5 / pilot-01)",
      "(ii / involve-01\n    :ARG2 (b / bomb-01))",
      "(b / bomb-01)",
      "(p / pledge-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Alwaleed\" :op2 \"Bin\" :op3 \"Talal\"))))",
      "(ii / involve-01\n    :ARG2 (b / bomb-01))",
      "(p / pledge-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Alwaleed\"\n                      :op2 \"Bin\"\n                      :op3 \"Talal\")\n             :ARG0 (h / have-org-role-91\n                      :ARG2 (p3 / prince)))\n   :ARG2 (c / car-make\n            :name (n2 / name\n                      :op1 \"Bentley\"))\n   :beneficiary (p4 / person\n                    :ARG0 (p5 / pilot-01)\n                    :ARG1 (ii / involve-01\n                              :ARG2 (b / bomb-01))))",
      "(p / pledge-01\n   :beneficiary (p4 / person))",
      "(p / pledge-01\n   :ARG0 (h / he))",
      "(p / pledge-01\n   :time (d / date-entity\n            :weekday (w / wednesday)))",
      "(p / pledge-01\n   :time (a / after\n            :op1 (a2 / appear-02\n                     :ARG1 (r / resume-01\n                              :ARG1 (r2 / raid-01\n                                        :manner (b / bomb-01))))))",
      "(p / pledge-01\n   :concession (a3 / announce-01\n                   :ARG1 (h2 / halt-01\n                             :ARG1 (r2 / raid-01)\n                             :time (d2 / date-entity\n                                       :dayperiod (n / night)\n                                       :mod (y / yesterday)))\n                   :mod (o / official)))",
      "(d / date-entity\n   :weekday (w / wednesday))",
      "(a / after\n   :op1 (a2 / appear-02\n            :ARG1 (r / resume-01\n                     :ARG1 (r2 / raid-01\n                               :manner (b / bomb-01)))))",
      "(a3 / announce-01\n    :ARG1 (h2 / halt-01\n              :ARG1 (r2 / raid-01)\n              :time (d2 / date-entity\n                        :dayperiod (n / night)\n                        :mod (y / yesterday)))\n    :mod (o / official))",
      "(p / pledge-01\n   :ARG0 (h / he))",
      "(a2 / appear-02\n    :ARG1 (r / resume-01))",
      "(r / resume-01\n   :ARG1 (r2 / raid-01))",
      "(r2 / raid-01\n    :manner (b / bomb-01))",
      "(b / bomb-01)",
      "(a3 / announce-01\n    :ARG1 (h2 / halt-01))",
      "(h2 / halt-01\n    :ARG1 (r2 / raid-01)\n    :time (d2 / date-entity))",
      "(p / pledge-01\n   :ARG0 (h / he))",
      "(a2 / appear-02\n    :ARG1 (r / resume-01))",
      "(r / resume-01\n   :ARG1 (r2 / raid-01))",
      "(r2 / raid-01\n    :manner (b / bomb-01))",
      "(a3 / announce-01\n    :ARG1 (h2 / halt-01))",
      "(h2 / halt-01\n    :ARG1 (r2 / raid-01))",
      "(h2 / halt-01\n    :time (d2 / date-entity))",
      "(p / pledge-01\n   :ARG0 (h / he)\n   :concession (a3 / announce-01\n                   :ARG1 (h2 / halt-01)\n                   :mod (o / official)))",
      "(p / pledge-01\n   :time (d / date-entity\n            :weekday (w / wednesday))\n   :time (a / after\n            :op1 (a2 / appear-02))\n   :concession (a3 / announce-01\n                   :mod (o / official)))"
    ],
    "smus": [
      "Saudi forces launched.",
      "Forces launched air strikes on rebels.",
      "The launch was a month ago.",
      "Saudi forces",
      "Forces launched airstrikes on rebels.",
      "A month ago.",
      "Forces launched.",
      "Forces strike people.",
      "Rebels",
      "Forces launched.",
      "Forces strikes",
      "People get struck.",
      "Saudi forces have launched airstrikes on rebels.",
      "The launch was a month ago.",
      "Saudi forces have focused.",
      "Forces were focused on beating back Shiite Hathi rebels in Yemen.",
      "Saudi forces",
      "Forces beating back Yemeni Shiite Hathi rebels",
      "Forces are focused.",
      "Forces beating people back.",
      "Rebels",
      "Forces are focused.",
      "Forces beating back.",
      "beating back people.",
      "Saudi forces have focused on beating back Shiite Hathi rebels.",
      "Focused.",
      "Prince Alwaleed Bin Talal pledged --",
      "The Bentleys were pledged.",
      "pledged for pilots involved in the bombings",
      "Prince Alwaleed Bin Talal",
      "- Bentleys",
      "Pilots involved in the bombings.",
      "Alwaleed Bin Talal pledged --",
      "Pilots.",
      "The bombs were involved.",
      "The bombs.",
      "Alwaleed Bin Talal pledged --",
      "The bombs were involved.",
      "Prince Alwaleed Bin Talal pledged a Bentley to pilots involved in the bombs.",
      "pledged for people",
      "He made the pledge.",
      "The pledge was made Wednesday.",
      "The pledge came after it appeared that bomb raids would resume.",
      "The pledge comes despite an official announcement that the raids were halted last night.",
      "Wednesday",
      "After it appeared the bomb raids would resume.",
      "The official announcement comes as the raids were halted last night.",
      "He made the pledge.",
      "appeared to resume.",
      "The raids will resume.",
      "Bombing raids",
      "The bombing.",
      "- An announcement that the halting was imminent.",
      "The raids were halted at the time.",
      "He made the pledge.",
      "appeared to resume.",
      "The raids will resume.",
      "Bombing raids",
      "- An announcement that the halting was imminent.",
      "The raids have been halted.",
      "- halted at the latest",
      "He made the pledge despite an official announcement that the halt had been made.",
      "The pledge was made Wednesday after it appeared despite the official announcement."
    ]
  },
  {
    "instance_id": "realsumm-41",
    "summary": "<t> Brawl at Spring Gardens station in Philadelphia was captured on CCTV . </t> <t> Fight involved students from nearby Benjamin Franklin High School . </t> <t> At one point an attacker falls onto the tracks , but manages to get back up . </t> <t> After the confrontation , the victims and attackers walk onto the same train . </t>",
    "summary_trees": [
      "# ::snt  Brawl at Spring Gardens station in Philadelphia was captured on CCTV . \n(c / capture-01\n      :ARG0 (p / publication\n            :name (n / name\n                  :op1 \"CCTV\"))\n      :ARG1 (b / brawl-01\n            :location (s / station\n                  :name (n2 / name\n                        :op1 \"Spring\"\n                        :op2 \"Gardens\")\n                  :location (c2 / city\n                        :name (n3 / name\n                              :op1 \"Philadelphia\")))))",
      "# ::snt  Fight involved students from nearby Benjamin Franklin High School . \n(ii / involve-01\n      :ARG1 (p / person\n            :ARG0-of (s / study-01)\n            :source (h / high-school\n                  :name (n / name\n                        :op1 \"Benjamin\"\n                        :op2 \"Franklin\"\n                        :op3 \"High\"\n                        :op4 \"School\")\n                  :location (n2 / nearby)))\n      :ARG2 (f / fight-01))",
      "# ::snt  At one point an attacker falls onto the tracks , but manages to get back up . \n(c / contrast-01\n      :ARG1 (f / fall-01\n            :ARG1 (p / person\n                  :ARG0-of (a / attack-01))\n            :ARG4 (t / track))\n      :ARG2 (m / manage-01\n            :ARG0 p\n            :ARG1 (g / get-back-10\n                  :ARG1 p\n                  :ARG2 t))\n      :time (p2 / point\n            :quant 1))",
      "# ::snt  After the confrontation , the victims and attackers walk onto the same train . \n(w / walk-01\n      :ARG0 (a / and\n            :op1 (v / victim)\n            :op2 (p / person\n                  :ARG0-of (a2 / attack-01)))\n      :destination (t / train\n            :ARG1-of (s / same-01))\n      :time (a3 / after\n            :op1 (c / confront-01)))"
    ],
    "tree": [
      "(c / capture-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"CCTV\")))",
      "(c / capture-01\n   :ARG1 (b / brawl-01\n            :location (s / station\n                         :name (n2 / name\n                                   :op1 \"Spring\"\n                                   :op2 \"Gardens\")\n                         :location (c2 / city\n                                       :name (n3 / name\n                                                 :op1 \"Philadelphia\")))))",
      "(p / publication\n   :name (n / name\n            :op1 \"CCTV\"))",
      "(b / brawl-01\n   :location (s / station\n                :name (n2 / name\n                          :op1 \"Spring\"\n                          :op2 \"Gardens\")\n                :location (c2 / city\n                              :name (n3 / name\n                                        :op1 \"Philadelphia\"))))",
      "(c / capture-01\n   :ARG0 (p / publication :name (n / name :op1 \"CCTV\")))",
      "(b / brawl-01\n   :location (s / station :name (n2 / name :op1 \"Spring\" :op2 \"Gardens\"))))",
      "(c / capture-01\n   :ARG0 (p / publication :name (n / name :op1 \"CCTV\")))",
      "(b / brawl-01\n   :location (s / station :name (n2 / name :op1 \"Spring\" :op2 \"Gardens\"))))",
      "(c / capture-01\n   :ARG0 (p / publication\n            :name (n / name\n                     :op1 \"CCTV\"))\n   :ARG1 (b / brawl-01))",
      "(c / capture-01)",
      "(ii / involve-01\n    :ARG1 (p / person\n             :ARG0-of (s / study-01)\n             :source (h / high-school\n                        :name (n / name\n                                 :op1 \"Benjamin\"\n                                 :op2 \"Franklin\"\n                                 :op3 \"High\"\n                                 :op4 \"School\")\n                        :location (n2 / nearby))))",
      "(ii / involve-01\n    :ARG2 (f / fight-01))",
      "(p / person\n   :ARG0-of (s / study-01)\n   :source (h / high-school\n              :name (n / name\n                       :op1 \"Benjamin\"\n                       :op2 \"Franklin\"\n                       :op3 \"High\"\n                       :op4 \"School\")\n              :location (n2 / nearby)))",
      "(ii / involve-01\n    :ARG1 (p / person))",
      "(s / study-01)",
      "(f / fight-01)",
      "(ii / involve-01\n    :ARG1 (p / person))",
      "(ii / involve-01\n    :ARG1 (p / person\n             :ARG0 (s / study-01))\n    :ARG2 (f / fight-01))",
      "(ii / involve-01)",
      "(c / contrast-01\n   :ARG1 (f / fall-01\n            :ARG1 (p / person\n                     :ARG0-of (a / attack-01))\n            :ARG4 (t / track)))",
      "(c / contrast-01\n   :ARG2 (m / manage-01\n            :ARG0 (p / person)\n            :ARG1 (g / get-back-10\n                     :ARG1 p\n                     :ARG2 (t / track))))",
      "(c / contrast-01\n   :time (p2 / point\n             :quant 1))",
      "(f / fall-01\n   :ARG1 (p / person\n            :ARG0-of (a / attack-01))\n   :ARG4 (t / track))",
      "(m / manage-01\n   :ARG0 (p / person)\n   :ARG1 (g / get-back-10\n            :ARG1 p\n            :ARG2 (t / track)))",
      "(c / contrast-01\n   :ARG1 (f / fall-01))",
      "(f / fall-01\n   :ARG1 (p / person))",
      "(a / attack-01)",
      "(m / manage-01\n   :ARG0 (p / person)\n   :ARG1 (g / get-back-10))",
      "(c / contrast-01\n   :ARG1 (f / fall-01))",
      "(f / fall-01\n   :ARG1 (p / person))",
      "(m / manage-01\n   :ARG0 (p / person))",
      "(m / manage-01\n   :ARG1 (g / get-back-10))",
      "(c / contrast-01\n   :ARG1 (f / fall-01\n            :ARG1 (p / person\n                     :ARG0 (a / attack-01))\n            :ARG4 (t / track))\n   :ARG2 (m / manage-01\n            :ARG0 p\n            :ARG1 (g / get-back-10\n                     :ARG1 p\n                     :ARG2 t)))",
      "(c / contrast-01\n   :time (p2 / point\n             :quant 1))",
      "(w / walk-01\n   :ARG0 (a / and\n            :op1 (v / victim)\n            :op2 (p / person\n                    :ARG0-of (a2 / attack-01))))",
      "(w / walk-01\n   :destination (t / train\n                   :ARG1-of (s / same-01)))",
      "(w / walk-01\n   :time (a3 / after\n             :op1 (c / confront-01)))",
      "(a / and\n   :op1 (v / victim)\n   :op2 (p / person\n           :ARG0-of (a2 / attack-01)))",
      "(t / train\n   :ARG1-of (s / same-01))",
      "(a3 / after\n    :op1 (c / confront-01))",
      "(w / walk-01\n   :ARG0 (a / and))",
      "(a2 / attack-01)",
      "(s / same-01)",
      "(c / confront-01)",
      "(w / walk-01\n   :ARG0 (a / and))",
      "(w / walk-01\n   :ARG0 (v / victim)\n   :destination (t / train\n                   :ARG1-of (s / same-01))\n   :time (a3 / after\n             :op1 (c / confront-01)))",
      "(w / walk-01\n   :ARG0 (p / person\n            :ARG0-of (a2 / attack-01))\n   :destination (t / train\n                   :ARG1-of (s / same-01))\n   :destination t\n   :time (a3 / after\n             :op1 (c / confront-01)))",
      "(w / walk-01\n   :ARG0 (a / and\n            :op1 (v / victim)\n            :op2 (p / person\n                    :ARG0 (a2 / attack-01)))\n   :destination (t / train\n                   :ARG1 (s / same-01)))",
      "(w / walk-01\n   :destination (t / train)\n   :time (a3 / after\n             :op1 (c / confront-01)))"
    ],
    "smus": [
      "CCTV has captured.",
      "Brawl at Spring Gardens in Philadelphia captured.",
      "a href=\"http://www.ctv.com/news/2011/06/06/ctv/show/show/show/show/show/show/show/show/show/show/show/show/show/show/show/show/show/show/show/show/show/show/show/show/show/show/show/show/show/show",
      "Brawl at Spring Gardens in Philadelphia",
      "CCTV has captured.",
      "Brawl at Spring Gardens station",
      "CCTV has captured.",
      "Brawl at Spring Gardens station",
      "The brawl was captured by CCTV.",
      "Captured.",
      "Students from nearby Benjamin Franklin High School were involved.",
      "The fight involved.",
      "Students from nearby Benjamin Franklin High School.",
      "People involved.",
      "Studies.",
      "There was a fight.",
      "People involved.",
      "The students were involved in the fight.",
      "involved.",
      "But the attacker falls on the tracks.",
      "But the person manages to get back on the tracks.",
      "But at one point.",
      "The attacker falls off the tracks.",
      "People manage to get back on track.",
      "But falls.",
      "People fall.",
      "An attack.",
      "People manage to get back.",
      "But falls.",
      "People fall.",
      "People manage.",
      "manages to get back.",
      "The attacker falls off the tracks but manages to get back on.",
      "But at one point.",
      "Victims and attackers walk.",
      "Walk to the same train.",
      "Walk after the confrontation.",
      "Victims and attackers",
      "the same train.",
      "After the confrontation.",
      "They walk.",
      "Attacks.",
      "Same.",
      "Confrontation.",
      "They walk.",
      "Victims walk to the same train after the confrontation.",
      "The attackers walk into the same train after the confrontation.",
      "Victims and attackers walk to the same train.",
      "After the confrontation, walk to the train."
    ]
  },
  {
    "instance_id": "realsumm-42",
    "summary": "<t> Paul and Laura Elliott met half way round at St Katharine Docks . </t> <t> Ceremony was witnessed by 80 guests . </t> <t> Pair ran across finish line under a shower of confetti . </t> <t> Returned to scene of ceremony for party later on . </t> <t> Raised \u00a3 7,000 for Cancer Research in honour of Paul 's father . </t>",
    "summary_trees": [
      "# ::snt  Paul and Laura Elliott met half way round at St Katharine Docks . \n(m / meet-03\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Paul\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Laura\"\n                        :op2 \"Elliott\")))\n      :location (r / round-03\n            :extent (h / half-way)\n            :location (p3 / port\n                  :name (n3 / name\n                        :op1 \"St\"\n                        :op2 \"Katharine\"\n                        :op3 \"Docks\"))))",
      "# ::snt  Ceremony was witnessed by 80 guests . \n(w / witness-01\n      :ARG0 (g / guest\n            :quant 80)\n      :ARG1 (c / ceremony))",
      "# ::snt  Pair ran across finish line under a shower of confetti . \n(r / run-02\n      :ARG0 (p / pair)\n      :path (a / across\n            :op1 (l / line\n                  :mod (f / finish-01)))\n      :time (s / shower-01\n            :ARG1 (c / confetti)))",
      "# ::snt  Returned to scene of ceremony for party later on . \n(r / return-01\n      :ARG4 (s / scene\n            :location-of (c / ceremony\n                  :purpose (p / party-01)))\n      :time (a / after))",
      "# ::snt  Raised \u00a3 7,000 for Cancer Research in honour of Paul 's father . \n(r / raise-02\n      :ARG1 (m / monetary-quantity\n            :quant 7000\n            :unit (p / pound))\n      :purpose (r2 / research-01\n            :ARG1 (c / cancer))\n      :manner (h / honor-01\n            :ARG1 (p2 / person\n                  :ARG0-of (h2 / have-rel-role-91\n                        :ARG1 (p3 / person\n                              :name (n / name\n                                    :op1 \"Paul\"))\n                        :ARG2 (f / father)))))"
    ],
    "tree": [
      "(m / meet-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Paul\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Laura\"\n                               :op2 \"Elliott\"))))",
      "(m / meet-03\n   :location (r / round-03\n                :extent (h / half-way)\n                :location (p3 / port\n                              :name (n3 / name\n                                        :op1 \"St\"\n                                        :op2 \"Katharine\"\n                                        :op3 \"Docks\"))))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Paul\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Laura\"\n                      :op2 \"Elliott\")))",
      "(r / round-03\n   :extent (h / half-way)\n   :location (p3 / port\n                 :name (n3 / name\n                           :op1 \"St\"\n                           :op2 \"Katharine\"\n                           :op3 \"Docks\")))",
      "(m / meet-03\n   :ARG0 (a / and))",
      "(r / round-03\n   :extent (h / half-way))",
      "(m / meet-03\n   :ARG0 (a / and))",
      "(r / round-03\n   :extent (h / half-way))",
      "(m / meet-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Paul\"))\n   :location (r / round-03\n                :extent (h / half-way)\n                :location (p3 / port\n                              :name (n3 / name\n                                        :op1 \"St\"\n                                        :op2 \"Katharine\"\n                                        :op3 \"Docks\"))))",
      "(m / meet-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Laura\"\n                       :op2 \"Elliott\"))\n   :location (r / round-03\n                :extent (h / half-way)\n                :location (p3 / port\n                              :name (n3 / name\n                                        :op1 \"St\"\n                                        :op2 \"Katharine\"\n                                        :op3 \"Docks\")))\n   :location r)",
      "(m / meet-03\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Paul\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Laura\"\n                               :op2 \"Elliott\"))))",
      "(m / meet-03\n   :location (r / round-03\n                :extent (h / half-way)\n                :location (p3 / port\n                              :name (n3 / name\n                                        :op1 \"St\"\n                                        :op2 \"Katharine\"\n                                        :op3 \"Docks\"))))",
      "(w / witness-01\n   :ARG0 (g / guest\n            :quant 80))",
      "(w / witness-01\n   :ARG1 (c / ceremony))",
      "(w / witness-01\n   :ARG0 (g / guest))",
      "(w / witness-01\n   :ARG0 (g / guest))",
      "(w / witness-01\n   :ARG0 (g / guest\n            :quant 80)\n   :ARG1 (c / ceremony))",
      "(w / witness-01)",
      "(r / run-02\n   :ARG0 (p / pair))",
      "(r / run-02\n   :path (a / across\n            :op1 (l / line\n                    :mod (f / finish-01))))",
      "(r / run-02\n   :time (s / shower-01\n            :ARG1 (c / confetti)))",
      "(a / across\n   :op1 (l / line\n           :mod (f / finish-01)))",
      "(s / shower-01\n   :ARG1 (c / confetti))",
      "(r / run-02\n   :ARG0 (p / pair))",
      "(f / finish-01)",
      "(s / shower-01\n   :ARG1 (c / confetti))",
      "(r / run-02\n   :ARG0 (p / pair))",
      "(s / shower-01\n   :ARG1 (c / confetti))",
      "(r / run-02\n   :ARG0 (p / pair)\n   :path (a / across\n            :op1 (l / line\n                    :mod (f / finish-01))))",
      "(r / run-02\n   :path (a / across\n            :op1 (l / line\n                    :mod (f / finish-01)))\n   :time (s / shower-01))",
      "(r / return-01\n   :ARG4 (s / scene\n            :location-of (c / ceremony\n                            :purpose (p / party-01))))",
      "(r / return-01\n   :time (a / after))",
      "(s / scene\n   :location-of (c / ceremony\n                   :purpose (p / party-01)))",
      "(r / return-01\n   :ARG4 (s / scene))",
      "(p / party-01)",
      "(r / return-01\n   :ARG4 (s / scene))",
      "(r / return-01\n   :ARG4 (s / scene))",
      "(r / return-01\n   :time (a / after))",
      "(r / raise-02\n   :ARG1 (m / monetary-quantity\n            :quant 7000\n            :unit (p / pound)))",
      "(r / raise-02\n   :purpose (r2 / research-01\n                :ARG1 (c / cancer)))",
      "(r / raise-02\n   :manner (h / honor-01\n              :ARG1 (p2 / person\n                        :ARG0-of (h2 / have-rel-role-91\n                                     :ARG1 (p3 / person\n                                               :name (n / name\n                                                        :op1 \"Paul\"))\n                                     :ARG2 (f / father)))))",
      "(m / monetary-quantity\n   :quant 7000\n   :unit (p / pound))",
      "(r2 / research-01\n    :ARG1 (c / cancer))",
      "(h / honor-01\n   :ARG1 (p2 / person\n             :ARG0-of (h2 / have-rel-role-91\n                          :ARG1 (p3 / person\n                                    :name (n / name\n                                             :op1 \"Paul\"))\n                          :ARG2 (f / father))))",
      "(r / raise-02\n   :ARG1 (m / monetary-quantity))",
      "(r2 / research-01\n    :ARG1 (c / cancer))",
      "(h / honor-01\n   :ARG1 (p2 / person))",
      "(r / raise-02\n   :ARG1 (m / monetary-quantity))",
      "(r2 / research-01\n    :ARG1 (c / cancer))",
      "(h / honor-01\n   :ARG1 (p2 / person))",
      "(r / raise-02\n   :ARG1 (m / monetary-quantity\n            :quant 7000\n            :unit (p / pound))\n   :manner (h / honor-01\n              :ARG1 (p2 / person\n                        :ARG0 (h2 / have-rel-role-91\n                                  :ARG1 (p3 / person\n                                            :name (n / name\n                                                     :op1 \"Paul\"))\n                                  :ARG2 (f / father)))))",
      "(r / raise-02\n   :purpose (r2 / research-01)\n   :manner (h / honor-01))"
    ],
    "smus": [
      "Paul and Laura Elliott met.",
      "The meeting took place half way round the St Katharine Docks.",
      "Paul and Laura Elliott",
      "Rounding half way at St Katharine Docks.",
      "The two met.",
      "Round half way.",
      "The two met.",
      "Round half way.",
      "Paul met half way round the St Katharine Docks.",
      "Laura Elliott met at the St. Katharine Docks half way round.",
      "Paul and Laura Elliott met.",
      "The meeting took place half way round the St Katharine Docks.",
      "80 guests were witnessed.",
      "The Ceremony was witnessed.",
      "The guests were witnessed.",
      "The guests were witnessed.",
      "The Ceremony was witnessed by 80 guests.",
      "Witnessed.",
      "The pair ran.",
      "ran across the finish line.",
      "Run during the confetti shower.",
      "across the finish line.",
      "Confetti shower",
      "The pair ran.",
      "(Finished)",
      "Confetti shower",
      "The pair ran.",
      "Confetti shower",
      "The pair ran across the finish line.",
      "ran across the finish line in the shower.",
      "The scene of the party ceremony was returned.",
      "Later, returned.",
      "Scene of party ceremony",
      "The scene was returned.",
      "party.",
      "The scene was returned.",
      "The scene was returned.",
      "Later, returned.",
      "PS7,000 raised.",
      "Raised for Cancer Research",
      "Raised in honor of Paul's father.",
      "PS7000",
      "Cancer Research",
      "Honor to Paul's father.",
      "raised $$$",
      "Cancer Research",
      "Honor the people.",
      "raised $$$",
      "Cancer Research",
      "Honor the people.",
      "The PS7,000 was raised in honor of Paul's father.",
      "Raised in honor of Research"
    ]
  },
  {
    "instance_id": "realsumm-43",
    "summary": "<t> Nasr Bitar spotted Google Street View car driving around last autumn . </t> <t> Decided it was ' his time to shine ' with it so followed in his car to get a selfie . </t> <t> Sensing the perfect moment , he got out and took the snap in Mississauga . </t> <t> Picture of Nasr 's selfie and the Street View image shared 2.9million times . </t>",
    "summary_trees": [
      "# ::snt  Nasr Bitar spotted Google Street View car driving around last autumn . \n(s / spot-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Nasr\"\n                  :op2 \"Bitar\"))\n      :ARG1 (d / drive-01\n            :ARG0 (c / car-make\n                  :name (n2 / name\n                        :op1 \"Google\"\n                        :op2 \"Street\"\n                        :op3 \"View\"))\n            :ARG1 (a / around))\n      :time (d2 / date-entity\n            :season (a2 / autumn\n                  :mod (l / last))))",
      "# ::snt  Decided it was ' his time to shine ' with it so followed in his car to get a selfie . \n(c / cause-01\n      :ARG0 (d / decide-01\n            :ARG1 (s / shine-01\n                  :ARG0 (ii / it)\n                  :ARG1 (h / he)\n                  :instrument ii))\n      :ARG1 (f / follow-01\n            :ARG1 (ii2 / i)\n            :ARG4 (c2 / car\n                  :poss h)\n            :purpose (g / get-01\n                  :ARG0 ii2\n                  :ARG1 (p / photograph-01\n                        :ARG0 ii2\n                        :ARG1 ii2))))",
      "# ::snt  Sensing the perfect moment , he got out and took the snap in Mississauga . \n(a / and\n      :op1 (g / get-05\n            :ARG1 (h / he)\n            :ARG2 (o / out))\n      :op2 (s / snap-01\n            :ARG0 h\n            :location (c / city\n                  :name (n / name\n                        :op1 \"Mississauga\")))\n      :ARG1-of (c2 / cause-01\n            :ARG0 (r / realize-01\n                  :ARG0 h\n                  :ARG1 (m / moment\n                        :ARG1-of (p / perfect-02)))))",
      "# ::snt  Picture of Nasr 's selfie and the Street View image shared 2.9million times . \n(a / and\n      :op1 (p / picture\n            :poss (p2 / person\n                  :name (n / name\n                        :op1 \"Nasr\")))\n      :op2 (ii / image\n            :mod (p3 / product\n                  :name (n2 / name\n                        :op1 \"Street\"\n                        :op2 \"View\"))\n            :ARG1-of (s / share-01\n                  :ARG3 (t / times\n                        :quant 2900000))))"
    ],
    "tree": [
      "(s / spot-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nasr\"\n                     :op2 \"Bitar\")))",
      "(s / spot-01\n   :ARG1 (d / drive-01\n            :ARG0 (c / car-make\n                     :name (n2 / name\n                               :op1 \"Google\"\n                               :op2 \"Street\"\n                               :op3 \"View\"))\n            :ARG1 (a / around)))",
      "(s / spot-01\n   :time (d2 / date-entity\n             :season (a2 / autumn\n                         :mod (l / last))))",
      "(p / person\n   :name (n / name\n            :op1 \"Nasr\"\n            :op2 \"Bitar\"))",
      "(d / drive-01\n   :ARG0 (c / car-make\n            :name (n2 / name\n                      :op1 \"Google\"\n                      :op2 \"Street\"\n                      :op3 \"View\"))\n   :ARG1 (a / around))",
      "(d2 / date-entity\n    :season (a2 / autumn\n                :mod (l / last)))",
      "(s / spot-01\n   :ARG0 (p / person :name (n / name :op1 \"Nasr\" :op2 \"Bitar\")))",
      "(d / drive-01\n   :ARG0 (c / car-make :name (n2 / name :op1 \"Google\" :op2 \"Street\" :op3 \"View\")))",
      "(s / spot-01\n   :ARG0 (p / person :name (n / name :op1 \"Nasr\" :op2 \"Bitar\")))",
      "(d / drive-01\n   :ARG0 (c / car-make :name (n2 / name :op1 \"Google\" :op2 \"Street\" :op3 \"View\")))",
      "(s / spot-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nasr\"\n                     :op2 \"Bitar\"))\n   :ARG1 (d / drive-01\n            :ARG0 (c / car-make\n                     :name (n2 / name\n                               :op1 \"Google\"\n                               :op2 \"Street\"\n                               :op3 \"View\"))\n            :ARG1 (a / around)))",
      "(s / spot-01\n   :time (d2 / date-entity\n             :season (a2 / autumn\n                         :mod (l / last))))",
      "(c / cause-01\n   :ARG0 (d / decide-01\n            :ARG1 (s / shine-01\n                     :ARG0 (ii / it)\n                     :ARG1 (h / he)\n                     :instrument ii)))",
      "(c / cause-01\n   :ARG1 (f / follow-01\n            :ARG1 (ii2 / i)\n            :ARG4 (c2 / car\n                      :poss (h / he))\n            :purpose (g / get-01\n                        :ARG0 ii2\n                        :ARG1 (p / photograph-01\n                                 :ARG0 ii2\n                                 :ARG1 ii2))))",
      "(d / decide-01\n   :ARG1 (s / shine-01\n            :ARG0 (ii / it)\n            :ARG1 (h / he)\n            :instrument ii))",
      "(f / follow-01\n   :ARG1 (ii2 / i)\n   :ARG4 (c2 / car\n             :poss (h / he))\n   :purpose (g / get-01\n               :ARG0 ii2\n               :ARG1 (p / photograph-01\n                        :ARG0 ii2\n                        :ARG1 ii2)))",
      "(c / cause-01\n   :ARG0 (d / decide-01))",
      "(d / decide-01\n   :ARG1 (s / shine-01))",
      "(s / shine-01\n   :ARG0 (ii / it))",
      "(f / follow-01\n   :ARG1 (ii2 / i))",
      "(g / get-01\n   :ARG0 (ii2 / i)\n   :ARG1 (p / photograph-01))",
      "(p / photograph-01\n   :ARG0 (ii2 / i)\n   :ARG1 ii2)",
      "(c / cause-01\n   :ARG0 (d / decide-01))",
      "(d / decide-01\n   :ARG1 (s / shine-01))",
      "(s / shine-01\n   :ARG0 (ii / it))",
      "(f / follow-01\n   :ARG1 (ii2 / i))",
      "(g / get-01\n   :ARG0 (ii2 / i))",
      "(g / get-01\n   :ARG1 (p / photograph-01))",
      "(p / photograph-01\n   :ARG0 (ii2 / i))",
      "(p / photograph-01\n   :ARG1 (ii2 / i))",
      "(c / cause-01\n   :ARG0 (d / decide-01\n            :ARG1 (s / shine-01\n                     :ARG0 (ii / it)\n                     :ARG1 (h / he)\n                     :instrument ii))\n   :ARG1 (f / follow-01\n            :ARG1 (ii2 / i)\n            :ARG4 (c2 / car\n                      :poss h)))",
      "(c / cause-01)",
      "(a / and\n   :op1 (g / get-05\n           :ARG1 (h / he)\n           :ARG2 (o / out)))",
      "(a / and\n   :op2 (s / snap-01\n           :ARG0 (h / he)\n           :location (c / city\n                        :name (n / name\n                                 :op1 \"Mississauga\"))))",
      "(a / and\n   :ARG1-of (c2 / cause-01\n                :ARG0 (r / realize-01\n                         :ARG0 (h / he)\n                         :ARG1 (m / moment\n                                  :ARG1-of (p / perfect-02)))))",
      "(g / get-05\n   :ARG1 (h / he)\n   :ARG2 (o / out))",
      "(s / snap-01\n   :ARG0 (h / he)\n   :location (c / city\n                :name (n / name\n                         :op1 \"Mississauga\")))",
      "(c2 / cause-01\n    :ARG0 (r / realize-01\n             :ARG0 (h / he)\n             :ARG1 (m / moment\n                      :ARG1-of (p / perfect-02))))",
      "(g / get-05\n   :ARG1 (h / he))",
      "(s / snap-01\n   :ARG0 (h / he)\n   :location (c / city :name (n / name :op1 \"Mississauga\")))",
      "(c2 / cause-01\n    :ARG0 (r / realize-01))",
      "(r / realize-01\n   :ARG0 (h / he)\n   :ARG1 (m / moment))",
      "(p / perfect-02)",
      "(g / get-05\n   :ARG1 (h / he))",
      "(s / snap-01\n   :ARG0 (h / he))",
      "(s / snap-01\n   :location (c / city :name (n / name :op1 \"Mississauga\")))",
      "(c2 / cause-01\n    :ARG0 (r / realize-01))",
      "(r / realize-01\n   :ARG0 (h / he))",
      "(r / realize-01\n   :ARG1 (m / moment))",
      "(g / get-05\n   :ARG1 (h / he)\n   :ARG2 (o / out))",
      "(s / snap-01\n   :ARG0 (h / he)\n   :location (c / city\n                :name (n / name\n                         :op1 \"Mississauga\"))\n   :ARG1-of (c2 / cause-01\n                :ARG0 (r / realize-01\n                         :ARG0 h\n                         :ARG1 (m / moment\n                                  :ARG1-of (p / perfect-02)))))",
      "(a / and\n   :op1 (g / get-05\n           :ARG1 (h / he)\n           :ARG2 (o / out))\n   :op2 (s / snap-01\n           :ARG0 h)\n   :ARG1 (c2 / cause-01\n             :ARG0 (r / realize-01\n                      :ARG0 h\n                      :ARG1 (m / moment\n                               :ARG1 (p / perfect-02)))))",
      "(a / and\n   :op1 (g / get-05)\n   :op2 (s / snap-01))",
      "(a / and\n   :op1 (p / picture\n           :poss (p2 / person\n                     :name (n / name\n                              :op1 \"Nasr\"))))",
      "(a / and\n   :op2 (ii / image\n            :mod (p3 / product\n                     :name (n2 / name\n                               :op1 \"Street\"\n                               :op2 \"View\"))\n            :ARG1-of (s / share-01\n                        :ARG3 (t / times\n                                 :quant 2900000))))",
      "(p / picture\n   :poss (p2 / person\n             :name (n / name\n                      :op1 \"Nasr\")))",
      "(ii / image\n    :mod (p3 / product\n             :name (n2 / name\n                       :op1 \"Street\"\n                       :op2 \"View\"))\n    :ARG1-of (s / share-01\n                :ARG3 (t / times\n                         :quant 2900000)))",
      "(s / share-01\n   :ARG3 (t / times))",
      "(s / share-01\n   :ARG3 (t / times))",
      "(p / picture\n   :poss (p2 / person\n             :name (n / name\n                      :op1 \"Nasr\")))",
      "(ii / image\n    :mod (p3 / product\n             :name (n2 / name\n                       :op1 \"Street\"\n                       :op2 \"View\"))\n    :ARG1-of (s / share-01\n                :ARG3 (t / times\n                         :quant 2900000)))",
      "(a / and\n   :op1 (p / picture\n           :poss (p2 / person\n                     :name (n / name\n                              :op1 \"Nasr\")))\n   :op2 (ii / image\n            :mod (p3 / product\n                     :name (n2 / name\n                               :op1 \"Street\"\n                               :op2 \"View\"))\n            :ARG1 (s / share-01\n                     :ARG3 (t / times\n                              :quant 2900000))))",
      "(a / and\n   :op1 (p / picture\n           :poss (p2 / person\n                     :name (n / name\n                              :op1 \"Nasr\")))\n   :op2 (ii / image\n            :mod (p3 / product\n                     :name (n2 / name\n                               :op1 \"Street\"\n                               :op2 \"View\"))))"
    ],
    "smus": [
      "Nasr biata spotted.",
      "A Google Street View spotted around.",
      "Spotted last autumn.",
      "Nasr biraat",
      "Google Street View is driving around.",
      "last autumn",
      "Nasr biata spotted.",
      "Driving a Google Street View.",
      "Nasr biata spotted.",
      "Driving a Google Street View.",
      "Nasr Balitar spotted a Google Street View driving around.",
      "Spotted last autumn.",
      "So decided it would shine on him.",
      "So I followed him in his car to get a photo of me.",
      "It decided to shine on him with it.",
      "I followed him in his car to get a photo of me.",
      "Because it was decided.",
      "'Shine' decided.",
      "It will shine.",
      "I followed.",
      "I did get a photo.",
      "I took a photo of myself.",
      "Because it was decided.",
      "'Shine' decided.",
      "It will shine.",
      "I followed.",
      "I'll get there.",
      "get a photo.",
      "I took a photo.",
      "I took a photo.",
      "I followed his car because it decided to shine on him.",
      "So...",
      "And he got out.",
      "And he snapped in Mississauga.",
      "And because he was aware of the perfect moment.",
      "He got out.",
      "He took a snap in Mississauga.",
      "Because he was aware of the perfect moment.",
      "He got.",
      "He took a snap in Mississauga.",
      "Because of awareness.",
      "He was aware of the moment.",
      "Perfect.",
      "He got.",
      "He snapped.",
      "Snap in Mississauga",
      "Because of awareness.",
      "He was aware.",
      "Moment of realization.",
      "He got out.",
      "He took a snap in Mississauga, realizing it was a perfect moment.",
      "He got out and snapped, realizing there was a perfect moment.",
      "Got and snapped.",
      "And Nasr's Picture:",
      "and a Street View image shared 2 million times.",
      "Nasr's Picture",
      "a href=\"http://www.streetview.com/images/show/29 million_shares.html\">Street View Image: Shared 29 million times/a>",
      "Shared times.",
      "Shared times.",
      "Nasr's Picture",
      "a href=\"http://www.streetview.com/images/show/29 million_shares.html\">Street View Image: Shared 29 million times/a>",
      "Nasr's Picture and Street View image shared 2.90 million times.",
      "Nasr's Picture and Street View image"
    ]
  },
  {
    "instance_id": "realsumm-44",
    "summary": "<t> Rory McIlroy bidding to win his first Masters title this week at Augusta . </t> <t> The Northern Irishman finished tied for eighth place last year in his best finish in Georgia . </t> <t> McIlroy looking for third straight major victory after winning The Open and USPGA Championship last year . </t> <t> One Direction star Niall Horan caddied for McIlroy in Wednesday 's Par-3 Contest . </t>",
    "summary_trees": [
      "# ::snt  Rory McIlroy bidding to win his first Masters title this week at Augusta . \n(b / bid-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rory\"\n                  :op2 \"McIlroy\"))\n      :ARG1 (w / win-01\n            :ARG0 p\n            :ARG1 (t / title\n                  :mod (g / game\n                        :name (n2 / name\n                              :op1 \"Masters\"))\n                  :ord (o / ordinal-entity\n                        :value 1))\n            :time (w2 / week\n                  :mod (t2 / this))\n            :location (f / facility\n                  :name (n3 / name\n                        :op1 \"Augusta\"))))",
      "# ::snt  The Northern Irishman finished tied for eighth place last year in his best finish in Georgia . \n(f / finish-07\n      :ARG0 (m / man\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Northern\"\n                        :op2 \"Ireland\")))\n      :ARG2 (t / tie-01\n            :ARG1 m\n            :ARG3 (p / place\n                  :ord (o / ordinal-entity\n                        :value 8)))\n      :time (y / year\n            :mod (l / last))\n      :subevent-of (f2 / finish-07\n            :ARG0 m\n            :location (c2 / country\n                  :name (n2 / name\n                        :op1 \"Georgia\"))\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (g / good-03\n                        :ARG1 f2)\n                  :ARG3 (m2 / most))))",
      "# ::snt  McIlroy looking for third straight major victory after winning The Open and USPGA Championship last year . \n(l / look-04\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"McIlroy\"))\n      :ARG1 (w / win-01\n            :ARG0 p\n            :mod (m / major)\n            :ord (o / ordinal-entity\n                  :value 3\n                  :range (s / straight)))\n      :time (a / after\n            :op1 (w2 / win-01\n                  :ARG0 p\n                  :ARG2 (a2 / and\n                        :op1 (e / event\n                              :name (n2 / name\n                                    :op1 \"The\"\n                                    :op2 \"Open\"))\n                        :op2 (e2 / event\n                              :name (n3 / name\n                                    :op1 \"USPGA\"\n                                    :op2 \"Championship\")))\n                  :time (y / year\n                        :mod (l2 / last)))))",
      "# ::snt  One Direction star Niall Horan caddied for McIlroy in Wednesday 's Par-3 Contest . \n(c / caddie-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Niall\"\n                  :op2 \"Horan\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (o / organization\n                        :name (n2 / name\n                              :op1 \"One\"\n                              :op2 \"Direction\"))\n                  :ARG2 (s / star)))\n      :ARG1 (p2 / person\n            :name (n3 / name\n                  :op1 \"McIlroy\"))\n      :subevent-of (c2 / contest-02\n            :name (n4 / name\n                  :op1 \"Par-3\")\n            :time (d / date-entity\n                  :weekday (w / wednesday))))"
    ],
    "tree": [
      "(b / bid-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rory\"\n                     :op2 \"McIlroy\")))",
      "(b / bid-01\n   :ARG1 (w / win-01\n            :ARG0 (p / person :name (n / name :op1 \"Rory\" :op2 \"McIlroy\"))\n            :ARG1 (t / title\n                     :mod (g / game\n                             :name (n2 / name\n                                       :op1 \"Masters\"))\n                     :ord (o / ordinal-entity\n                             :value 1))\n            :time (w2 / week\n                      :mod (t2 / this))\n            :location (f / facility\n                         :name (n3 / name\n                                   :op1 \"Augusta\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Rory\"\n            :op2 \"McIlroy\"))",
      "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"Rory\" :op2 \"McIlroy\"))\n   :ARG1 (t / title\n            :mod (g / game\n                    :name (n2 / name\n                              :op1 \"Masters\"))\n            :ord (o / ordinal-entity\n                    :value 1))\n   :time (w2 / week\n             :mod (t2 / this))\n   :location (f / facility\n                :name (n3 / name\n                          :op1 \"Augusta\")))",
      "(b / bid-01\n   :ARG0 (p / person :name (n / name :op1 \"Rory\" :op2 \"McIlroy\")))",
      "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"Rory\" :op2 \"McIlroy\"))\n   :ARG1 (t / title))",
      "(b / bid-01\n   :ARG0 (p / person :name (n / name :op1 \"Rory\" :op2 \"McIlroy\")))",
      "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"Rory\" :op2 \"McIlroy\")))",
      "(w / win-01\n   :ARG1 (t / title))",
      "(b / bid-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rory\"\n                     :op2 \"McIlroy\"))\n   :ARG1 (w / win-01\n            :ARG0 p\n            :ARG1 (t / title\n                     :mod (g / game\n                             :name (n2 / name\n                                       :op1 \"Masters\"))\n                     :ord (o / ordinal-entity\n                             :value 1))))",
      "(b / bid-01)",
      "(f / finish-07\n   :ARG0 (m / man\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Northern\"\n                             :op2 \"Ireland\"))))",
      "(f / finish-07\n   :ARG2 (t / tie-01\n            :ARG1 (m / man)\n            :ARG3 (p / place\n                     :ord (o / ordinal-entity\n                             :value 8))))",
      "(f / finish-07\n   :time (y / year\n            :mod (l / last)))",
      "(f / finish-07\n   :subevent-of (f2 / finish-07\n                    :ARG0 (m / man)\n                    :location (c2 / country\n                                  :name (n2 / name\n                                            :op1 \"Georgia\"))\n                    :ARG1-of (h / have-degree-91\n                                :ARG2 (g / good-03\n                                         :ARG1 f2)\n                                :ARG3 (m2 / most))))",
      "(m / man\n   :mod (c / country\n           :name (n / name\n                    :op1 \"Northern\"\n                    :op2 \"Ireland\")))",
      "(t / tie-01\n   :ARG1 (m / man)\n   :ARG3 (p / place\n            :ord (o / ordinal-entity\n                    :value 8)))",
      "(y / year\n   :mod (l / last))",
      "(f2 / finish-07\n    :ARG0 (m / man)\n    :location (c2 / country\n                  :name (n2 / name\n                            :op1 \"Georgia\"))\n    :ARG1-of (h / have-degree-91\n                :ARG2 (g / good-03\n                         :ARG1 f2)\n                :ARG3 (m2 / most)))",
      "(f / finish-07\n   :ARG0 (m / man))",
      "(t / tie-01\n   :ARG1 (m / man)\n   :ARG3 (p / place))",
      "(f2 / finish-07\n    :ARG0 (m / man)\n    :location (c2 / country :name (n2 / name :op1 \"Georgia\")))",
      "(g / good-03\n   :ARG1 (f2 / finish-07))",
      "(f / finish-07\n   :ARG0 (m / man))",
      "(t / tie-01\n   :ARG1 (m / man))",
      "(t / tie-01\n   :ARG3 (p / place))",
      "(f2 / finish-07\n    :ARG0 (m / man))",
      "(f2 / finish-07\n    :location (c2 / country :name (n2 / name :op1 \"Georgia\")))",
      "(g / good-03\n   :ARG1 (f2 / finish-07))",
      "(f / finish-07\n   :ARG0 (m / man\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Northern\"\n                             :op2 \"Ireland\")))\n   :ARG2 (t / tie-01\n            :ARG1 m\n            :ARG3 (p / place\n                     :ord (o / ordinal-entity\n                             :value 8)))\n   :subevent (f2 / finish-07\n                 :ARG0 m\n                 :ARG1 (h / have-degree-91\n                          :ARG2 (g / good-03\n                                   :ARG1 f2)\n                          :ARG3 (m2 / most))))",
      "(f / finish-07\n   :time (y / year\n            :mod (l / last))\n   :subevent (f2 / finish-07))",
      "(l / look-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McIlroy\")))",
      "(l / look-04\n   :ARG1 (w / win-01\n            :ARG0 (p / person :name (n / name :op1 \"McIlroy\"))\n            :mod (m / major)\n            :ord (o / ordinal-entity\n                    :value 3\n                    :range (s / straight))))",
      "(l / look-04\n   :time (a / after\n            :op1 (w2 / win-01\n                     :ARG0 (p / person :name (n / name :op1 \"McIlroy\"))\n                     :ARG2 (a2 / and\n                               :op1 (e / event\n                                       :name (n2 / name\n                                                 :op1 \"The\"\n                                                 :op2 \"Open\"))\n                               :op2 (e2 / event\n                                        :name (n3 / name\n                                                  :op1 \"USPGA\"\n                                                  :op2 \"Championship\")))\n                     :time (y / year\n                              :mod (l2 / last)))))",
      "(p / person\n   :name (n / name\n            :op1 \"McIlroy\"))",
      "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"McIlroy\"))\n   :mod (m / major)\n   :ord (o / ordinal-entity\n           :value 3\n           :range (s / straight)))",
      "(a / after\n   :op1 (w2 / win-01\n            :ARG0 (p / person :name (n / name :op1 \"McIlroy\"))\n            :ARG2 (a2 / and\n                      :op1 (e / event\n                              :name (n2 / name\n                                        :op1 \"The\"\n                                        :op2 \"Open\"))\n                      :op2 (e2 / event\n                               :name (n3 / name\n                                         :op1 \"USPGA\"\n                                         :op2 \"Championship\")))\n            :time (y / year\n                     :mod (l2 / last))))",
      "(l / look-04\n   :ARG0 (p / person :name (n / name :op1 \"McIlroy\")))",
      "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"McIlroy\"))\n   :mod (m / major))",
      "(w2 / win-01\n    :ARG0 (p / person :name (n / name :op1 \"McIlroy\"))\n    :ARG2 (a2 / and))",
      "(l / look-04\n   :ARG0 (p / person :name (n / name :op1 \"McIlroy\")))",
      "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"McIlroy\")))",
      "(w / win-01\n   :mod (m / major))",
      "(w2 / win-01\n    :ARG0 (p / person :name (n / name :op1 \"McIlroy\")))",
      "(w2 / win-01\n    :ARG2 (a2 / and))",
      "(l / look-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McIlroy\"))\n   :ARG1 (w / win-01\n            :ARG0 p\n            :mod (m / major)\n            :ord (o / ordinal-entity\n                    :value 3\n                    :range (s / straight)))\n   :time (a / after\n            :op1 (w2 / win-01\n                     :ARG0 p\n                     :ARG2 (e / event\n                              :name (n2 / name\n                                        :op1 \"The\"\n                                        :op2 \"Open\"))\n                     :time (y / year\n                              :mod (l2 / last)))))",
      "(l / look-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McIlroy\"))\n   :ARG1 (w / win-01\n            :ARG0 p\n            :mod (m / major)\n            :ord (o / ordinal-entity\n                    :value 3\n                    :range (s / straight)))\n   :time (a / after\n            :op1 (w2 / win-01\n                     :ARG0 p\n                     :ARG2 (e2 / event\n                               :name (n3 / name\n                                         :op1 \"USPGA\"\n                                         :op2 \"Championship\"))\n                     :time (y / year\n                              :mod (l2 / last))\n                     :time y)))",
      "(l / look-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McIlroy\"))\n   :ARG1 (w / win-01\n            :ARG0 p\n            :mod (m / major)\n            :ord (o / ordinal-entity\n                    :value 3\n                    :range (s / straight))))",
      "(l / look-04\n   :time (a / after\n            :op1 (w2 / win-01)))",
      "(c / caddie-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Niall\"\n                     :op2 \"Horan\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (o / organization\n                                 :name (n2 / name\n                                           :op1 \"One\"\n                                           :op2 \"Direction\"))\n                        :ARG2 (s / star))))",
      "(c / caddie-01\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"McIlroy\")))",
      "(c / caddie-01\n   :subevent-of (c2 / contest-02\n                    :name (n4 / name\n                              :op1 \"Par-3\")\n                    :time (d / date-entity\n                             :weekday (w / wednesday))))",
      "(p / person\n   :name (n / name\n            :op1 \"Niall\"\n            :op2 \"Horan\")\n   :ARG0-of (h / have-org-role-91\n               :ARG1 (o / organization\n                        :name (n2 / name\n                                  :op1 \"One\"\n                                  :op2 \"Direction\"))\n               :ARG2 (s / star)))",
      "(p2 / person\n    :name (n3 / name\n              :op1 \"McIlroy\"))",
      "(c2 / contest-02\n    :name (n4 / name\n              :op1 \"Par-3\")\n    :time (d / date-entity\n             :weekday (w / wednesday)))",
      "(c / caddie-01\n   :ARG0 (p / person :name (n / name :op1 \"Niall\" :op2 \"Horan\"))))",
      "(c2 / contest-02\n    :name (n4 / name))",
      "(c / caddie-01\n   :ARG0 (p / person :name (n / name :op1 \"Niall\" :op2 \"Horan\"))))",
      "(c2 / contest-02\n    :name (n4 / name))",
      "(c / caddie-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Niall\"\n                     :op2 \"Horan\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (o / organization\n                              :name (n2 / name\n                                        :op1 \"One\"\n                                        :op2 \"Direction\"))\n                     :ARG2 (s / star)))\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"McIlroy\"))\n   :subevent (c2 / contest-02\n                 :name (n4 / name\n                           :op1 \"Par-3\")))",
      "(c / caddie-01\n   :subevent (c2 / contest-02\n                 :name (n4 / name\n                           :op1 \"Par-3\")\n                 :time (d / date-entity\n                          :weekday (w / wednesday))))"
    ],
    "smus": [
      "Roy McIlroy is bidding.",
      "A bid for Ry McIlroy to win the first Masters title this week at Augusta.",
      "Ry McIlroy",
      "This week, at Augusta, Rory McIlroy will win the first Masters title.",
      "Roy McIlroy is bidding.",
      "Ryan McIlroy will win the title.",
      "Roy McIlroy is bidding.",
      "Ryan McIlroy will win.",
      "win the title",
      "Ry McIlroy bids to win the first Masters title.",
      "Bid.",
      "The Northern Irish man is finished.",
      "The finish was a man tied for 8th place.",
      "Finish of last year",
      "Best finish for a man in Georgia.",
      "Northern Irish man.",
      "The man was tied to the eighth place.",
      "Last year.",
      "Best finish for the man in Georgia.",
      "The man is finished.",
      "The man is tied to the place.",
      "The man is finishing in Georgia.",
      "Good finish.",
      "The man is finished.",
      "The man was tied.",
      "tied to place.",
      "The man is finished.",
      "Finish in Georgia",
      "Good finish.",
      "The Northern Irish man finished in 8th place in the best finish.",
      "Last year's finish was in the top 10.",
      "McIlroy is looking.",
      "It's looking like McIlroy is going to be the 3rd major straight up victory.",
      "Looking after McIlroy winning the Open and USPGA Championship last year.",
      "McIlroy",
      "McIlroy is the third major straight winner.",
      "After winning the Open and USPGA Championship last year, McIlroy is now in.",
      "McIlroy is looking.",
      "McIlroy is a major winner.",
      "McIlroy is winning, and so is McIlroy.",
      "McIlroy is looking.",
      "McIlroy is winning.",
      "Major victory.",
      "McIlroy is winning.",
      "The winners were...",
      "After winning the Open last year, McIlroy is looking to win his third major straight.",
      "After winning the USPGA Championship last year, McIlroy is looking to win his third straight major.",
      "McIlroy is looking to win his third straight major.",
      "Looking after winning.",
      "One Direction star Niall Horan caddied.",
      "McIlroy caddied.",
      "The caddied in the Par-3 Contest Wednesday.",
      "One Direction star Niall Horan",
      "McIlroy",
      "Par-3 Contest Wednesday",
      "Niall Horan caddied.",
      "Contest name.",
      "Niall Horan caddied.",
      "Contest name.",
      "One Direction star Niall Horan caddied for McIlroy in the Par-3 Contest.",
      "Caddied in the Par-3 Contest Wednesday."
    ]
  },
  {
    "instance_id": "realsumm-45",
    "summary": "<t> Danny Higginbotham covers his time under Roy Keane in his new book . </t> <t> He played for Keane 's Sunderland during the 2007 - 08 season . </t> <t> Keane told his players ' basically you 're s * * * ' before a game with Aston Villa . </t> <t> He also told one player he was ' not f * * * * * * good enough ' to play for the club . </t>",
    "summary_trees": [
      "# ::snt  Danny Higginbotham covers his time under Roy Keane in his new book . \n(c / cover-03\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Danny\"\n                  :op2 \"Higginbotham\"))\n      :ARG1 (t / time\n            :poss p\n            :prep-under (p2 / person\n                  :name (n2 / name\n                        :op1 \"Roy\"\n                        :op2 \"Keane\")))\n      :medium (b / book\n            :ARG1-of (n3 / new-01)\n            :poss p))",
      "# ::snt  He played for Keane 's Sunderland during the 2007 - 08 season . \n(p / play-01\n      :ARG0 (h / he)\n      :ARG2 (t / team\n            :name (n / name\n                  :op1 \"Sunderland\")\n            :ARG1-of (h2 / have-org-role-91\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Keane\"))))\n      :time (d / date-entity\n            :year 2007\n            :year2 2008\n            :season (s / season)))",
      "# ::snt  Keane told his players ' basically you 're s * * * ' before a game with Aston Villa . \n(t / tell-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Keane\"))\n      :ARG1 (s / shit\n            :mode expressive\n            :domain (p2 / person\n                  :ARG0-of (p3 / play-01)\n                  :poss p)\n            :mod (b / basic))\n      :ARG2 p2\n      :time (b2 / before\n            :op1 (g / game\n                  :mod (t2 / team\n                        :name (n2 / name\n                              :op1 \"Aston\"\n                              :op2 \"Villa\")))))",
      "# ::snt  He also told one player he was ' not f * * * * * * good enough ' to play for the club . \n(t / tell-01\n      :ARG0 (h / he)\n      :ARG1 (h2 / have-degree-91\n            :polarity -\n            :ARG1 (p / play-01\n                  :ARG0 (p2 / person\n                        :quant 1\n                        :ARG0-of (p3 / play-01)))\n            :ARG2 (g / good-03\n                  :ARG1 p)\n            :ARG3 (e / enough)\n            :ARG6 (p4 / play-01\n                  :ARG0 p2\n                  :ARG3 (c / club)))\n      :ARG2 p2\n      :mod (a / also))"
    ],
    "tree": [
      "(c / cover-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danny\"\n                     :op2 \"Higginbotham\")))",
      "(c / cover-03\n   :ARG1 (t / time\n            :poss (p / person :name (n / name :op1 \"Danny\" :op2 \"Higginbotham\"))\n            :prep-under (p2 / person\n                            :name (n2 / name\n                                      :op1 \"Roy\"\n                                      :op2 \"Keane\"))))",
      "(c / cover-03\n   :medium (b / book\n              :ARG1-of (n3 / new-01)\n              :poss (p / person :name (n / name :op1 \"Danny\" :op2 \"Higginbotham\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Danny\"\n            :op2 \"Higginbotham\"))",
      "(t / time\n   :poss (p / person :name (n / name :op1 \"Danny\" :op2 \"Higginbotham\"))\n   :prep-under (p2 / person\n                   :name (n2 / name\n                             :op1 \"Roy\"\n                             :op2 \"Keane\")))",
      "(b / book\n   :ARG1-of (n3 / new-01)\n   :poss (p / person :name (n / name :op1 \"Danny\" :op2 \"Higginbotham\")))",
      "(c / cover-03\n   :ARG0 (p / person :name (n / name :op1 \"Danny\" :op2 \"Higginbotham\")))",
      "(n3 / new-01)",
      "(c / cover-03\n   :ARG0 (p / person :name (n / name :op1 \"Danny\" :op2 \"Higginbotham\")))",
      "(c / cover-03\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Danny\"\n                     :op2 \"Higginbotham\"))\n   :ARG1 (t / time\n            :poss p\n            :prep-under (p2 / person\n                            :name (n2 / name\n                                      :op1 \"Roy\"\n                                      :op2 \"Keane\")))\n   :medium (b / book\n              :ARG1 (n3 / new-01)\n              :poss p))",
      "(c / cover-03\n   :medium (b / book))",
      "(p / play-01\n   :ARG0 (h / he))",
      "(p / play-01\n   :ARG2 (t / team\n            :name (n / name\n                     :op1 \"Sunderland\")\n            :ARG1-of (h2 / have-org-role-91\n                         :ARG0 (p2 / person\n                                   :name (n2 / name\n                                             :op1 \"Keane\")))))",
      "(p / play-01\n   :time (d / date-entity\n            :year 2007\n            :year2 2008\n            :season (s / season)))",
      "(t / team\n   :name (n / name\n            :op1 \"Sunderland\")\n   :ARG1-of (h2 / have-org-role-91\n                :ARG0 (p2 / person\n                          :name (n2 / name\n                                    :op1 \"Keane\"))))",
      "(d / date-entity\n   :year 2007\n   :year2 2008\n   :season (s / season))",
      "(p / play-01\n   :ARG0 (h / he))",
      "(p / play-01\n   :ARG0 (h / he))",
      "(p / play-01\n   :ARG0 (h / he)\n   :ARG2 (t / team\n            :name (n / name\n                     :op1 \"Sunderland\")\n            :ARG1 (h2 / have-org-role-91\n                      :ARG0 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Keane\")))))",
      "(p / play-01\n   :time (d / date-entity\n            :year 2007\n            :year2 2008\n            :season (s / season)))",
      "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Keane\")))",
      "(t / tell-01\n   :ARG1 (s / shit\n            :mode expressive\n            :domain (p2 / person\n                        :ARG0-of (p3 / play-01)\n                        :poss (p / person :name (n / name :op1 \"Keane\")))\n            :mod (b / basic)))",
      "(t / tell-01\n   :ARG2 (p2 / person))",
      "(t / tell-01\n   :time (b2 / before\n             :op1 (g / game\n                     :mod (t2 / team\n                              :name (n2 / name\n                                        :op1 \"Aston\"\n                                        :op2 \"Villa\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"Keane\"))",
      "(s / shit\n   :mode expressive\n   :domain (p2 / person\n               :ARG0-of (p3 / play-01)\n               :poss (p / person :name (n / name :op1 \"Keane\")))\n   :mod (b / basic))",
      "(b2 / before\n    :op1 (g / game\n            :mod (t2 / team\n                     :name (n2 / name\n                               :op1 \"Aston\"\n                               :op2 \"Villa\"))))",
      "(t / tell-01\n   :ARG0 (p / person :name (n / name :op1 \"Keane\")))",
      "(p3 / play-01)",
      "(t / tell-01\n   :ARG0 (p / person :name (n / name :op1 \"Keane\")))",
      "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Keane\"))\n   :ARG1 (s / shit\n            :mode expressive\n            :domain (p2 / person\n                        :ARG0 (p3 / play-01)\n                        :poss p)\n            :mod (b / basic))\n   :ARG2 p2)",
      "(t / tell-01)",
      "(t / tell-01\n   :ARG0 (h / he))",
      "(t / tell-01\n   :ARG1 (h2 / have-degree-91\n             :polarity -\n             :ARG1 (p / play-01\n                      :ARG0 (p2 / person\n                                :quant 1\n                                :ARG0-of (p3 / play-01)))\n             :ARG2 (g / good-03\n                      :ARG1 p)\n             :ARG3 (e / enough)\n             :ARG6 (p4 / play-01\n                       :ARG0 p2\n                       :ARG3 (c / club))))",
      "(t / tell-01\n   :ARG2 (p2 / person))",
      "(t / tell-01\n   :mod (a / also))",
      "(h2 / have-degree-91\n    :polarity -\n    :ARG1 (p / play-01\n             :ARG0 (p2 / person\n                       :quant 1\n                       :ARG0-of (p3 / play-01)))\n    :ARG2 (g / good-03\n             :ARG1 p)\n    :ARG3 (e / enough)\n    :ARG6 (p4 / play-01\n              :ARG0 p2\n              :ARG3 (c / club)))",
      "(t / tell-01\n   :ARG0 (h / he))",
      "(p / play-01\n   :ARG0 (p2 / person))",
      "(p3 / play-01)",
      "(g / good-03\n   :ARG1 (p / play-01))",
      "(p4 / play-01\n    :ARG0 (p2 / person)\n    :ARG3 (c / club))",
      "(t / tell-01\n   :ARG0 (h / he))",
      "(p / play-01\n   :ARG0 (p2 / person))",
      "(g / good-03\n   :ARG1 (p / play-01))",
      "(p4 / play-01\n    :ARG0 (p2 / person))",
      "(p4 / play-01\n    :ARG3 (c / club))",
      "(t / tell-01\n   :ARG0 (h / he)\n   :ARG1 (h2 / have-degree-91\n             :polarity -\n             :ARG1 (p / play-01\n                      :ARG0 (p2 / person\n                                :quant 1\n                                :ARG0 (p3 / play-01)))\n             :ARG2 (g / good-03\n                      :ARG1 p)\n             :ARG3 (e / enough)\n             :ARG6 (p4 / play-01\n                       :ARG0 p2\n                       :ARG3 (c / club)))\n   :ARG2 p2\n   :mod (a / also))",
      "(t / tell-01)"
    ],
    "smus": [
      "Danny Higginbotham covers.",
      "Covers Danny Higginbotham's time under Roy Keane.",
      "Covers in Danny Higginbotham's new book.",
      "Danny Higginbotham",
      "Dianna Higginbotham's time under Roy Keane.",
      "The new book of Danny Higginbotham.",
      "Danny Higginbotham covers.",
      "New.",
      "Danny Higginbotham covers.",
      "In his new book, Danny Higginbotham covers her time under Roy Keane.",
      "Covers the book.",
      "He played.",
      "played for sunderland under Keane.",
      "Played in the 2007-2008 season.",
      "-Keane: Scotland",
      "2007-2008 season",
      "He played.",
      "He played.",
      "He played for Sunderland with Keane.",
      "Played in the 2007-2008 season.",
      "\"It's going to be a long time,\" Keane told reporters.",
      "\"Keane's players are basically shit!\"",
      "People told --",
      "told before the Aston Villa game.",
      "@Keane,",
      "Basically, Keane's players are shit!",
      "Before the Aston Villa game.",
      "\"It's going to be a long time,\" Keane told reporters.",
      "Plays.",
      "\"It's going to be a long time,\" Keane told reporters.",
      "My players are basically shit,'' Keane told her.",
      "told.",
      "He told.",
      "\"One player was told that he did not play good enough for the club.\"",
      "People told...",
      "Also told.",
      "One player does not play good enough to play for a club.",
      "He told.",
      "People are playing.",
      "Play.",
      "Good play.",
      "People playing in clubs.",
      "He told.",
      "People are playing.",
      "Good play.",
      "People are playing.",
      "Playing for the club.",
      "He also told one player that he did not have played good enough to play for a club.",
      "told."
    ]
  },
  {
    "instance_id": "realsumm-46",
    "summary": "<t> Four - poster bed dumped in a hotel car park and sold at auction for \u00a3 2,200 . </t> <t> Owner suspected it had historic value and experts have been investigating . </t> <t> Historian now claims DNA from the timber proves it belonged to Henry VII . </t> <t> Ornate bed , now on display , was made for King and wife Elizabeth of York . </t>",
    "summary_trees": [
      "# ::snt  Four - poster bed dumped in a hotel car park and sold at auction for \u00a3 2,200 . \n(a / and\n      :op1 (d / dump-01\n            :ARG1 (b / bed\n                  :mod (p / poster\n                        :quant 4))\n            :location (p2 / park\n                  :mod (c / car)\n                  :mod (h / hotel)))\n      :op2 (s / sell-01\n            :ARG1 b\n            :ARG3 (m / monetary-quantity\n                  :quant 2100\n                  :unit (p3 / pound))\n            :time (a2 / auction-off-01)))",
      "# ::snt  Owner suspected it had historic value and experts have been investigating . \n(a / and\n      :op1 (s / suspect-01\n            :ARG0 (p / person\n                  :ARG0-of (o / own-01\n                        :ARG1 (ii / it)))\n            :ARG1 (v / value-01\n                  :ARG1 ii\n                  :mod (h / history)))\n      :op2 (ii2 / investigate-01\n            :ARG0 (p2 / person\n                  :ARG1-of (e / expert-01))))",
      "# ::snt  Historian now claims DNA from the timber proves it belonged to Henry VII . \n(c / claim-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (h2 / historian)))\n      :ARG1 (p2 / prove-01\n            :ARG0 (n / nucleic-acid\n                  :name (n2 / name\n                        :op1 \"DNA\")\n                  :part-of (t / timber))\n            :ARG1 (b / belong-01\n                  :ARG0 t\n                  :ARG1 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Henry\"\n                              :op2 \"VII\"))))\n      :time (n4 / now))",
      "# ::snt  Ornate bed , now on display , was made for King and wife Elizabeth of York . \n(m / make-01\n      :ARG1 (b / bed\n            :mod (o / ornate)\n            :ARG1-of (d / display-01\n                  :time (n / now)))\n      :ARG3 (p / person\n            :name (n2 / name\n                  :op1 \"Elizabeth\"\n                  :op2 \"of\"\n                  :op3 \"York\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (k / king))\n            :ARG0-of (h2 / have-rel-role-91\n                  :ARG2 (w / wife))))"
    ],
    "tree": [
      "(a / and\n   :op1 (d / dump-01\n           :ARG1 (b / bed\n                    :mod (p / poster\n                            :quant 4))\n           :location (p2 / park\n                         :mod (c / car)\n                         :mod (h / hotel))))",
      "(a / and\n   :op2 (s / sell-01\n           :ARG1 (b / bed)\n           :ARG3 (m / monetary-quantity\n                    :quant 2100\n                    :unit (p3 / pound))\n           :time (a2 / auction-off-01)))",
      "(d / dump-01\n   :ARG1 (b / bed\n            :mod (p / poster\n                    :quant 4))\n   :location (p2 / park\n                 :mod (c / car)\n                 :mod (h / hotel)))",
      "(s / sell-01\n   :ARG1 (b / bed)\n   :ARG3 (m / monetary-quantity\n            :quant 2100\n            :unit (p3 / pound))\n   :time (a2 / auction-off-01))",
      "(d / dump-01\n   :ARG1 (b / bed))",
      "(s / sell-01\n   :ARG1 (b / bed)\n   :ARG3 (m / monetary-quantity))",
      "(a2 / auction-off-01)",
      "(d / dump-01\n   :ARG1 (b / bed))",
      "(s / sell-01\n   :ARG1 (b / bed))",
      "(s / sell-01\n   :ARG3 (m / monetary-quantity))",
      "(d / dump-01\n   :ARG1 (b / bed\n            :mod (p / poster\n                    :quant 4))\n   :location (p2 / park\n                 :mod (c / car)\n                 :mod (h / hotel)))",
      "(s / sell-01\n   :ARG1 (b / bed)\n   :ARG3 (m / monetary-quantity\n            :quant 2100\n            :unit (p3 / pound))\n   :time (a2 / auction-off-01))",
      "(a / and\n   :op1 (d / dump-01\n           :ARG1 (b / bed\n                    :mod (p / poster\n                            :quant 4)))\n   :op2 (s / sell-01\n           :ARG1 b\n           :ARG3 (m / monetary-quantity\n                    :quant 2100\n                    :unit (p3 / pound))))",
      "(a / and\n   :op1 (d / dump-01\n           :location (p2 / park\n                         :mod (c / car)\n                         :mod (h / hotel)))\n   :op2 (s / sell-01))",
      "(a / and\n   :op1 (s / suspect-01\n           :ARG0 (p / person\n                    :ARG0-of (o / own-01\n                                :ARG1 (ii / it)))\n           :ARG1 (v / value-01\n                    :ARG1 ii\n                    :mod (h / history))))",
      "(a / and\n   :op2 (ii2 / investigate-01\n             :ARG0 (p2 / person\n                       :ARG1-of (e / expert-01))))",
      "(s / suspect-01\n   :ARG0 (p / person\n            :ARG0-of (o / own-01\n                        :ARG1 (ii / it)))\n   :ARG1 (v / value-01\n            :ARG1 ii\n            :mod (h / history)))",
      "(ii2 / investigate-01\n     :ARG0 (p2 / person\n               :ARG1-of (e / expert-01)))",
      "(s / suspect-01\n   :ARG0 (p / person))",
      "(o / own-01\n   :ARG1 (ii / it))",
      "(v / value-01\n   :ARG1 (ii / it)\n   :mod (h / history))",
      "(ii2 / investigate-01\n     :ARG0 (p2 / person))",
      "(e / expert-01)",
      "(s / suspect-01\n   :ARG0 (p / person))",
      "(o / own-01\n   :ARG1 (ii / it))",
      "(v / value-01\n   :ARG1 (ii / it))",
      "(v / value-01\n   :mod (h / history))",
      "(ii2 / investigate-01\n     :ARG0 (p2 / person))",
      "(s / suspect-01\n   :ARG0 (p / person\n            :ARG0-of (o / own-01\n                        :ARG1 (ii / it)))\n   :ARG1 (v / value-01\n            :ARG1 ii\n            :mod (h / history)))",
      "(ii2 / investigate-01\n     :ARG0 (p2 / person\n               :ARG1-of (e / expert-01)))",
      "(a / and\n   :op1 (s / suspect-01\n           :ARG0 (p / person\n                    :ARG0 (o / own-01\n                             :ARG1 (ii / it)))\n           :ARG1 (v / value-01\n                    :ARG1 ii\n                    :mod (h / history)))\n   :op2 (ii2 / investigate-01\n             :ARG0 (p2 / person\n                       :ARG1 (e / expert-01))))",
      "(a / and\n   :op1 (s / suspect-01)\n   :op2 (ii2 / investigate-01))",
      "(c / claim-01\n   :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                        :ARG2 (h2 / historian))))",
      "(c / claim-01\n   :ARG1 (p2 / prove-01\n             :ARG0 (n / nucleic-acid\n                      :name (n2 / name\n                                :op1 \"DNA\")\n                      :part-of (t / timber))\n             :ARG1 (b / belong-01\n                      :ARG0 t\n                      :ARG1 (p3 / person\n                                :name (n3 / name\n                                          :op1 \"Henry\"\n                                          :op2 \"VII\")))))",
      "(c / claim-01\n   :time (n4 / now))",
      "(p / person\n   :ARG0-of (h / have-org-role-91\n               :ARG2 (h2 / historian)))",
      "(p2 / prove-01\n    :ARG0 (n / nucleic-acid\n             :name (n2 / name\n                       :op1 \"DNA\")\n             :part-of (t / timber))\n    :ARG1 (b / belong-01\n             :ARG0 t\n             :ARG1 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Henry\"\n                                 :op2 \"VII\"))))",
      "(c / claim-01\n   :ARG0 (p / person))",
      "(p2 / prove-01\n    :ARG0 (n / nucleic-acid :name (n2 / name :op1 \"DNA\"))))",
      "(b / belong-01\n   :ARG0 (t / timber)\n   :ARG1 (p3 / person :name (n3 / name :op1 \"Henry\" :op2 \"VII\")))",
      "(c / claim-01\n   :ARG0 (p / person))",
      "(p2 / prove-01\n    :ARG0 (n / nucleic-acid :name (n2 / name :op1 \"DNA\"))))",
      "(b / belong-01\n   :ARG0 (t / timber))",
      "(b / belong-01\n   :ARG1 (p3 / person :name (n3 / name :op1 \"Henry\" :op2 \"VII\")))",
      "(c / claim-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (h2 / historian)))\n   :ARG1 (p2 / prove-01\n             :ARG0 (n / nucleic-acid\n                      :name (n2 / name\n                                :op1 \"DNA\")\n                      :part (t / timber))\n             :ARG1 (b / belong-01\n                      :ARG0 t\n                      :ARG1 (p3 / person\n                                :name (n3 / name\n                                          :op1 \"Henry\"\n                                          :op2 \"VII\")))))",
      "(c / claim-01\n   :time (n4 / now))",
      "(m / make-01\n   :ARG1 (b / bed\n            :mod (o / ornate)\n            :ARG1-of (d / display-01\n                        :time (n / now))))",
      "(m / make-01\n   :ARG3 (p / person\n            :name (n2 / name\n                      :op1 \"Elizabeth\"\n                      :op2 \"of\"\n                      :op3 \"York\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG2 (k / king))\n            :ARG0-of (h2 / have-rel-role-91\n                         :ARG2 (w / wife))))",
      "(b / bed\n   :mod (o / ornate)\n   :ARG1-of (d / display-01\n               :time (n / now)))",
      "(p / person\n   :name (n2 / name\n             :op1 \"Elizabeth\"\n             :op2 \"of\"\n             :op3 \"York\")\n   :ARG0-of (h / have-org-role-91\n               :ARG2 (k / king))\n   :ARG0-of (h2 / have-rel-role-91\n                :ARG2 (w / wife)))",
      "(m / make-01\n   :ARG1 (b / bed))",
      "(d / display-01\n   :time (n / now))",
      "(m / make-01\n   :ARG1 (b / bed))",
      "(d / display-01\n   :time (n / now))",
      "(m / make-01\n   :ARG1 (b / bed\n            :mod (o / ornate)\n            :ARG1 (d / display-01))\n   :ARG3 (p / person\n            :name (n2 / name\n                      :op1 \"Elizabeth\"\n                      :op2 \"of\"\n                      :op3 \"York\")\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (k / king))\n            :ARG0 (h2 / have-rel-role-91\n                      :ARG2 (w / wife))))",
      "(m / make-01)"
    ],
    "smus": [
      "And the 4 poster bed was dumped in a hotel car park.",
      "and the bed sold for PS2100 at the auction.",
      "4 poster bed dumped in hotel car park.",
      "The bed sold for PS2100 at the auction.",
      "Dumped in bed.",
      "The bed sold for $$$.",
      "Auction off.",
      "Dumped in bed.",
      "The bed sold.",
      "sold for $.",
      "4 poster bed dumped in hotel car park.",
      "The bed sold for PS2100 at the auction.",
      "4 poster bed dumped and sold for PS2100.",
      "Dumped in hotel car park and sold.",
      "And its owners suspected it of historical value.",
      "and experts are investigating.",
      "The owner of it suspected it had historical value.",
      "Experts are investigating.",
      "The people suspected.",
      "It's owned by the owner.",
      "It has a historical value.",
      "People are investigating.",
      "Experts",
      "The people suspected.",
      "It's owned by the owner.",
      "It has value.",
      "Historical value.",
      "People are investigating.",
      "The owner of it suspected it had historical value.",
      "Experts are investigating.",
      "The owners of it suspected it had a historical value and experts were investigating.",
      "Suspected and investigating.",
      "The historian claims.",
      "The claim claims that the DNA of the timber proves it belonged to Henry VI.",
      "Now claims.",
      "historian",
      "DNA in the timber proves it belonged to Henry VI.",
      "The person claims.",
      "DNA proves it.",
      "Timber belonged to Henry VI.",
      "The person claims.",
      "DNA proves it.",
      "The timber 'belonged to.",
      "Belonged to Henry VI.",
      "The historian claims that the DNA in the timber proves it belonged to Henry VI.",
      "Now claims.",
      "The ornate bed on display now is made.",
      "Made Queen Elizabeth of York's wife.",
      "The ornate bed on display now.",
      "Queen Elizabeth of York, wife",
      "Bed made.",
      "Now on display.",
      "Bed made.",
      "Now on display.",
      "The ornate bed for the display was made for Queen Elizabeth of York's wife.",
      "made."
    ]
  },
  {
    "instance_id": "realsumm-47",
    "summary": "<t> Attorney : Robert Bates assumed the gun was a Taser because he saw a laser sight on it . </t> <t> Harris family lawyers say there are stark differences between the gun and Taser used . </t> <t> In 2009 , an officer in California also said he mistakenly used his gun instead of a Taser . </t>",
    "summary_trees": [
      "# ::snt  Attorney : Robert Bates assumed the gun was a Taser because he saw a laser sight on it . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Robert\"\n                  :op2 \"Bates\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (a / attorney)))\n      :ARG1 (a2 / assume-02\n            :ARG0 p\n            :ARG1 (t / taser\n                  :domain (g / gun))\n            :ARG1-of (c / cause-01\n                  :ARG0 (s2 / see-01\n                        :ARG0 p\n                        :ARG1 (s3 / sight\n                              :mod (l / laser))\n                        :location g))))",
      "# ::snt  Harris family lawyers say there are stark differences between the gun and Taser used . \n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (f / family\n                        :name (n / name\n                              :op1 \"Harris\"))\n                  :ARG2 (l / lawyer)))\n      :ARG1 (d / differ-02\n            :ARG1 (g / gun)\n            :ARG2 (t / taser\n                  :ARG1-of (u / use-01))\n            :mod (s2 / stark)))",
      "# ::snt  In 2009 , an officer in California also said he mistakenly used his gun instead of a Taser . \n(s / say-01\n      :ARG0 (o / officer\n            :location (s2 / state\n                  :name (n / name\n                        :op1 \"California\")))\n      :ARG1 (u / use-01\n            :ARG0 o\n            :ARG1 (g / gun\n                  :poss o\n                  :ARG1-of (ii / instead-of-91\n                        :ARG2 (t / taser)))\n            :ARG1-of (m / mistake-01\n                  :ARG0 o))\n      :mod (a / also)\n      :time (d / date-entity\n            :year 2009))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Robert\"\n                     :op2 \"Bates\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG2 (a / attorney))))",
      "(s / say-01\n   :ARG1 (a2 / assume-02\n             :ARG0 (p / person :name (n / name :op1 \"Robert\" :op2 \"Bates\")))\n             :ARG1 (t / taser\n                      :domain (g / gun))\n             :ARG1-of (c / cause-01\n                         :ARG0 (s2 / see-01\n                                   :ARG0 p\n                                   :ARG1 (s3 / sight\n                                             :mod (l / laser))\n                                   :location g))))",
      "(p / person\n   :name (n / name\n            :op1 \"Robert\"\n            :op2 \"Bates\")\n   :ARG0-of (h / have-org-role-91\n               :ARG2 (a / attorney)))",
      "(a2 / assume-02\n    :ARG0 (p / person :name (n / name :op1 \"Robert\" :op2 \"Bates\")))\n    :ARG1 (t / taser\n             :domain (g / gun))\n    :ARG1-of (c / cause-01\n                :ARG0 (s2 / see-01\n                          :ARG0 p\n                          :ARG1 (s3 / sight\n                                    :mod (l / laser))\n                          :location g)))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Robert\" :op2 \"Bates\"))))",
      "(a2 / assume-02\n    :ARG0 (p / person :name (n / name :op1 \"Robert\" :op2 \"Bates\")))\n    :ARG1 (t / taser))",
      "(c / cause-01\n   :ARG0 (s2 / see-01))",
      "(s2 / see-01\n    :ARG0 (p / person :name (n / name :op1 \"Robert\" :op2 \"Bates\")))\n    :ARG1 (s3 / sight))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Robert\" :op2 \"Bates\"))))",
      "(a2 / assume-02\n    :ARG0 (p / person :name (n / name :op1 \"Robert\" :op2 \"Bates\"))))",
      "(a2 / assume-02\n    :ARG1 (t / taser))",
      "(c / cause-01\n   :ARG0 (s2 / see-01))",
      "(s2 / see-01\n    :ARG0 (p / person :name (n / name :op1 \"Robert\" :op2 \"Bates\"))))",
      "(s2 / see-01\n    :ARG1 (s3 / sight))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Robert\"\n                     :op2 \"Bates\")\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (a / attorney)))\n   :ARG1 (a2 / assume-02\n             :ARG0 p\n             :ARG1 (t / taser\n                      :domain (g / gun))\n             :ARG1 (c / cause-01\n                      :ARG0 (s2 / see-01\n                                :ARG0 p\n                                :ARG1 (s3 / sight\n                                          :mod (l / laser))))))",
      "(s / say-01)",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                        :ARG1 (f / family\n                                 :name (n / name\n                                          :op1 \"Harris\"))\n                        :ARG2 (l / lawyer))))",
      "(s / say-01\n   :ARG1 (d / differ-02\n            :ARG1 (g / gun)\n            :ARG2 (t / taser\n                     :ARG1-of (u / use-01))\n            :mod (s2 / stark)))",
      "(p / person\n   :ARG0-of (h / have-rel-role-91\n               :ARG1 (f / family\n                        :name (n / name\n                                 :op1 \"Harris\"))\n               :ARG2 (l / lawyer)))",
      "(d / differ-02\n   :ARG1 (g / gun)\n   :ARG2 (t / taser\n            :ARG1-of (u / use-01))\n   :mod (s2 / stark))",
      "(s / say-01\n   :ARG0 (p / person))",
      "(d / differ-02\n   :ARG1 (g / gun))",
      "(u / use-01)",
      "(s / say-01\n   :ARG0 (p / person))",
      "(d / differ-02\n   :ARG1 (g / gun))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (f / family\n                              :name (n / name\n                                       :op1 \"Harris\"))\n                     :ARG2 (l / lawyer)))\n   :ARG1 (d / differ-02\n            :ARG1 (g / gun)\n            :ARG2 (t / taser\n                     :ARG1 (u / use-01))\n            :mod (s2 / stark)))",
      "(s / say-01)",
      "(s / say-01\n   :ARG0 (o / officer\n            :location (s2 / state\n                          :name (n / name\n                                   :op1 \"California\"))))",
      "(s / say-01\n   :ARG1 (u / use-01\n            :ARG0 (o / officer)\n            :ARG1 (g / gun\n                     :poss o\n                     :ARG1-of (ii / instead-of-91\n                                  :ARG2 (t / taser)))\n            :ARG1-of (m / mistake-01\n                        :ARG0 o)))",
      "(s / say-01\n   :mod (a / also))",
      "(s / say-01\n   :time (d / date-entity\n            :year 2009))",
      "(o / officer\n   :location (s2 / state\n                 :name (n / name\n                          :op1 \"California\")))",
      "(u / use-01\n   :ARG0 (o / officer)\n   :ARG1 (g / gun\n            :poss o\n            :ARG1-of (ii / instead-of-91\n                         :ARG2 (t / taser)))\n   :ARG1-of (m / mistake-01\n               :ARG0 o))",
      "(s / say-01\n   :ARG0 (o / officer))",
      "(u / use-01\n   :ARG0 (o / officer)\n   :ARG1 (g / gun))",
      "(m / mistake-01\n   :ARG0 (o / officer))",
      "(s / say-01\n   :ARG0 (o / officer))",
      "(u / use-01\n   :ARG0 (o / officer))",
      "(u / use-01\n   :ARG1 (g / gun))",
      "(m / mistake-01\n   :ARG0 (o / officer))",
      "(s / say-01\n   :ARG0 (o / officer)\n   :ARG1 (u / use-01\n            :ARG0 o\n            :ARG1 (g / gun\n                     :poss o\n                     :ARG1 (ii / instead-of-91\n                               :ARG2 (t / taser)))\n            :ARG1 (m / mistake-01\n                     :ARG0 o))\n   :mod (a / also))",
      "(s / say-01\n   :mod (a / also)\n   :time (d / date-entity\n            :year 2009))"
    ],
    "smus": [
      "Attorney Robert Bates said --",
      "Robert Bates assumed the gun was a taser because he saw a laser sight on it.",
      "Attorney Robert Bates",
      "Robert Bates assumed the gun was a taser because he saw a laser sight on it.",
      "@Robert Bates,",
      "Robert Bates assumed the taser.",
      "Because it was seen.",
      "Robert Bates saw the sight.",
      "@Robert Bates,",
      "Robert Bates assumed --",
      "Assumed Tasers.",
      "Because it was seen.",
      "Robert Bates saw.",
      "The sight was seen.",
      "Attorney Robert Bates said he assumed the gun was a taser because he saw a laser sight.",
      "Says.",
      "Lawyers for the Harris family say --",
      "Guns and Tasers used are stark differences, they say.",
      "Harris family lawyers",
      "There are stark differences between a gun and the Taser used.",
      "People say...",
      "There are differences in gun.",
      "used.",
      "People say...",
      "There are differences in gun.",
      "Harris family lawyers say the gun and taser used are stark differences.",
      "Say.",
      "\"It's a California officer,\" said the Californian.",
      "The officer said he mistookly used his gun instead of a Taser.",
      "Also said.",
      "said in 2009",
      "-California officer",
      "The officer mistakenly used his gun instead of a Taser.",
      "\"It's going to be a long time,\" the officer said.",
      "The officer used a gun.",
      "The officer mistook.",
      "\"It's going to be a long time,\" the officer said.",
      "The officer used.",
      "The gun was used.",
      "The officer mistook.",
      "The officer also said he mistakenly used his gun, which was a taser instead.",
      "Also in 2009 said:"
    ]
  },
  {
    "instance_id": "realsumm-48",
    "summary": "<t> Singer arrived at artists ' entrance to gain entry to Drake 's gig . </t> <t> Security told him area was at full capacity and denied admission . </t> <t> A row erupted and a Coachella staffer tried to get Bieber into the gig . </t> <t> But festival security then intervened and put singer in chokehold and removed him from the area . </t>",
    "summary_trees": [
      "# ::snt  Singer arrived at artists ' entrance to gain entry to Drake 's gig . \n(a / arrive-01\n      :ARG1 (p / person\n            :ARG0-of (s / sing-01))\n      :ARG4 (e / entrance\n            :poss (a2 / artist))\n      :purpose (g / gain-02\n            :ARG0 p\n            :ARG1 (e2 / enter-01\n                  :ARG0 p\n                  :ARG1 (g2 / gig\n                        :poss (p2 / person\n                              :name (n / name\n                                    :op1 \"Drake\"))))))",
      "# ::snt  Security told him area was at full capacity and denied admission . \n(a / and\n      :op1 (t / tell-01\n            :ARG0 (s / security)\n            :ARG1 (c / capacity\n                  :ARG1-of (f / full-09)\n                  :domain (a2 / area))\n            :ARG2 (h / he))\n      :op2 (d / deny-01\n            :ARG0 s\n            :ARG1 (a3 / admit-02\n                  :ARG1 h)\n            :ARG2 h))",
      "# ::snt  A row erupted and a Coachella staffer tried to get Bieber into the gig . \n(a / and\n      :op1 (e / erupt-01\n            :ARG1 (r / row))\n      :op2 (t / try-01\n            :ARG0 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (o / organization\n                              :name (n / name\n                                    :op1 \"Coachella\"))\n                        :ARG2 (s / staffer)))\n            :ARG1 (g / get-05\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Bieber\"))\n                  :ARG2 (g2 / gig))))",
      "# ::snt  But festival security then intervened and put singer in chokehold and removed him from the area . \n(c / contrast-01\n      :ARG2 (a / and\n            :op1 (ii / intervene-01\n                  :ARG0 (s / security\n                        :mod (f / festival)))\n            :op2 (p / put-01\n                  :ARG0 s\n                  :ARG1 (p2 / person\n                        :ARG0-of (s2 / sing-01))\n                  :ARG2 (c2 / chokehold))\n            :op3 (r / remove-01\n                  :ARG0 s\n                  :ARG1 p2\n                  :ARG2 (a2 / area))\n            :time (t / then)))"
    ],
    "tree": [
      "(a / arrive-01\n   :ARG1 (p / person\n            :ARG0-of (s / sing-01)))",
      "(a / arrive-01\n   :ARG4 (e / entrance\n            :poss (a2 / artist)))",
      "(a / arrive-01\n   :purpose (g / gain-02\n               :ARG0 (p / person)\n               :ARG1 (e2 / enter-01\n                         :ARG0 p\n                         :ARG1 (g2 / gig\n                                   :poss (p2 / person\n                                             :name (n / name\n                                                      :op1 \"Drake\"))))))",
      "(p / person\n   :ARG0-of (s / sing-01))",
      "(e / entrance\n   :poss (a2 / artist))",
      "(g / gain-02\n   :ARG0 (p / person)\n   :ARG1 (e2 / enter-01\n             :ARG0 p\n             :ARG1 (g2 / gig\n                       :poss (p2 / person\n                                 :name (n / name\n                                          :op1 \"Drake\")))))",
      "(a / arrive-01\n   :ARG1 (p / person))",
      "(s / sing-01)",
      "(g / gain-02\n   :ARG0 (p / person)\n   :ARG1 (e2 / enter-01))",
      "(e2 / enter-01\n    :ARG0 (p / person)\n    :ARG1 (g2 / gig))",
      "(a / arrive-01\n   :ARG1 (p / person))",
      "(g / gain-02\n   :ARG0 (p / person))",
      "(g / gain-02\n   :ARG1 (e2 / enter-01))",
      "(e2 / enter-01\n    :ARG0 (p / person))",
      "(e2 / enter-01\n    :ARG1 (g2 / gig))",
      "(a / arrive-01\n   :ARG1 (p / person\n            :ARG0 (s / sing-01))\n   :ARG4 (e / entrance\n            :poss (a2 / artist)))",
      "(a / arrive-01\n   :purpose (g / gain-02))",
      "(a / and\n   :op1 (t / tell-01\n           :ARG0 (s / security)\n           :ARG1 (c / capacity\n                    :ARG1-of (f / full-09)\n                    :domain (a2 / area))\n           :ARG2 (h / he)))",
      "(a / and\n   :op2 (d / deny-01\n           :ARG0 (s / security)\n           :ARG1 (a3 / admit-02\n                     :ARG1 (h / he))\n           :ARG2 h))",
      "(t / tell-01\n   :ARG0 (s / security)\n   :ARG1 (c / capacity\n            :ARG1-of (f / full-09)\n            :domain (a2 / area))\n   :ARG2 (h / he))",
      "(d / deny-01\n   :ARG0 (s / security)\n   :ARG1 (a3 / admit-02\n             :ARG1 (h / he))\n   :ARG2 h)",
      "(t / tell-01\n   :ARG0 (s / security))",
      "(f / full-09)",
      "(d / deny-01\n   :ARG0 (s / security)\n   :ARG1 (a3 / admit-02))",
      "(a3 / admit-02\n    :ARG1 (h / he))",
      "(t / tell-01\n   :ARG0 (s / security))",
      "(d / deny-01\n   :ARG0 (s / security))",
      "(d / deny-01\n   :ARG1 (a3 / admit-02))",
      "(a3 / admit-02\n    :ARG1 (h / he))",
      "(t / tell-01\n   :ARG0 (s / security)\n   :ARG1 (c / capacity\n            :ARG1-of (f / full-09)\n            :domain (a2 / area))\n   :ARG2 (h / he))",
      "(d / deny-01\n   :ARG0 (s / security)\n   :ARG1 (a3 / admit-02\n             :ARG1 (h / he))\n   :ARG2 h)",
      "(a / and\n   :op1 (t / tell-01\n           :ARG0 (s / security)\n           :ARG1 (c / capacity\n                    :ARG1 (f / full-09)\n                    :domain (a2 / area))\n           :ARG2 (h / he))\n   :op2 (d / deny-01\n           :ARG0 s\n           :ARG1 (a3 / admit-02\n                     :ARG1 h)\n           :ARG2 h))",
      "(a / and\n   :op1 (t / tell-01)\n   :op2 (d / deny-01))",
      "(a / and\n   :op1 (e / erupt-01\n           :ARG1 (r / row)))",
      "(a / and\n   :op2 (t / try-01\n           :ARG0 (p / person\n                    :ARG0-of (h / have-org-role-91\n                                :ARG1 (o / organization\n                                         :name (n / name\n                                                  :op1 \"Coachella\"))\n                                :ARG2 (s / staffer)))\n           :ARG1 (g / get-05\n                    :ARG0 p\n                    :ARG1 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Bieber\"))\n                    :ARG2 (g2 / gig))))",
      "(e / erupt-01\n   :ARG1 (r / row))",
      "(t / try-01\n   :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (o / organization\n                                 :name (n / name\n                                          :op1 \"Coachella\"))\n                        :ARG2 (s / staffer)))\n   :ARG1 (g / get-05\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Bieber\"))\n            :ARG2 (g2 / gig)))",
      "(e / erupt-01\n   :ARG1 (r / row))",
      "(t / try-01\n   :ARG0 (p / person))",
      "(g / get-05\n   :ARG0 (p / person)\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Bieber\")))",
      "(e / erupt-01\n   :ARG1 (r / row))",
      "(t / try-01\n   :ARG0 (p / person))",
      "(g / get-05\n   :ARG0 (p / person))",
      "(g / get-05\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Bieber\")))",
      "(e / erupt-01\n   :ARG1 (r / row))",
      "(t / try-01\n   :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (o / organization\n                                 :name (n / name\n                                          :op1 \"Coachella\"))\n                        :ARG2 (s / staffer)))\n   :ARG1 (g / get-05\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Bieber\"))\n            :ARG2 (g2 / gig)))",
      "(a / and\n   :op1 (e / erupt-01\n           :ARG1 (r / row))\n   :op2 (t / try-01\n           :ARG0 (p / person\n                    :ARG0 (h / have-org-role-91\n                             :ARG1 (o / organization\n                                      :name (n / name\n                                               :op1 \"Coachella\"))\n                             :ARG2 (s / staffer)))\n           :ARG1 (g / get-05\n                    :ARG0 p\n                    :ARG1 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Bieber\"))\n                    :ARG2 (g2 / gig))))",
      "(a / and\n   :op1 (e / erupt-01)\n   :op2 (t / try-01))",
      "(c / contrast-01\n   :ARG2 (a / and\n            :op1 (ii / intervene-01\n                     :ARG0 (s / security\n                              :mod (f / festival)))\n            :op2 (p / put-01\n                    :ARG0 s\n                    :ARG1 (p2 / person\n                              :ARG0-of (s2 / sing-01))\n                    :ARG2 (c2 / chokehold))\n            :op3 (r / remove-01\n                    :ARG0 s\n                    :ARG1 p2\n                    :ARG2 (a2 / area))\n            :time (t / then)))",
      "(a / and\n   :op1 (ii / intervene-01\n            :ARG0 (s / security\n                     :mod (f / festival)))\n   :op2 (p / put-01\n           :ARG0 s\n           :ARG1 (p2 / person\n                     :ARG0-of (s2 / sing-01))\n           :ARG2 (c2 / chokehold))\n   :op3 (r / remove-01\n           :ARG0 s\n           :ARG1 p2\n           :ARG2 (a2 / area))\n   :time (t / then))",
      "(c / contrast-01\n   :ARG2 (a / and))",
      "(ii / intervene-01\n    :ARG0 (s / security))",
      "(p / put-01\n   :ARG0 (s / security)\n   :ARG1 (p2 / person))",
      "(s2 / sing-01)",
      "(r / remove-01\n   :ARG0 (s / security)\n   :ARG1 (p2 / person)\n   :ARG2 (a2 / area))",
      "(c / contrast-01\n   :ARG2 (a / and))",
      "(ii / intervene-01\n    :ARG0 (s / security))",
      "(p / put-01\n   :ARG0 (s / security))",
      "(p / put-01\n   :ARG1 (p2 / person))",
      "(r / remove-01\n   :ARG0 (s / security))",
      "(r / remove-01\n   :ARG1 (p2 / person))",
      "(r / remove-01\n   :ARG2 (a2 / area))",
      "(c / contrast-01\n   :ARG2 (ii / intervene-01\n             :ARG0 (s / security\n                      :mod (f / festival))))",
      "(c / contrast-01\n   :ARG2 (p / put-01\n            :ARG0 (s / security)\n            :ARG1 (p2 / person\n                      :ARG0-of (s2 / sing-01))\n            :ARG2 (c2 / chokehold)))",
      "(c / contrast-01\n   :ARG2 (r / remove-01\n            :ARG0 (s / security)\n            :ARG1 (p2 / person)\n            :ARG2 (a2 / area)\n            :time (t / then)))",
      "(c / contrast-01\n   :ARG2 (a / and\n            :op1 (ii / intervene-01\n                     :ARG0 (s / security\n                              :mod (f / festival)))\n            :op2 (p / put-01\n                    :ARG0 s\n                    :ARG1 (p2 / person\n                              :ARG0 (s2 / sing-01))\n                    :ARG2 (c2 / chokehold))\n            :op3 (r / remove-01\n                    :ARG0 s\n                    :ARG1 p2\n                    :ARG2 (a2 / area))))",
      "(c / contrast-01)"
    ],
    "smus": [
      "The Singer arrived.",
      "The artists' entrance arrived.",
      "People arrived to gain entry to Drake's gig.",
      "Singer.",
      "Artists' entrance",
      "People will gain entry to Drake's gig.",
      "People arrived.",
      "Sing.",
      "People will gain entry.",
      "People enter the gig.",
      "People arrived.",
      "People will gain.",
      "Gain entry.",
      "People entered.",
      "Enter the gig.",
      "The Singer arrived at the artists entrance.",
      "Arrived to gain.",
      "And Security told him the area was in full capacity.",
      "And Security denied him admission.",
      "Security told him the area was in full capacity.",
      "Security denied him admission.",
      "Security told --",
      "Full",
      "Security denied admission.",
      "He made an admission.",
      "Security told --",
      "Security denied.",
      "The admission was denied.",
      "He made an admission.",
      "Security told him the area was in full capacity.",
      "Security denied him admission.",
      "Security told him the area was in full capacity and denied him admission.",
      "told and denied.",
      "And a row erupted.",
      "And a Coachella staffer tried to get Bieber a gig.",
      "The row erupted.",
      "Coachella staffer tried to get Bieber a gig.",
      "The row erupted.",
      "People tried.",
      "People will get Bieber.",
      "The row erupted.",
      "People tried.",
      "People will get.",
      "Get Bieber.",
      "The row erupted.",
      "Coachella staffer tried to get Bieber a gig.",
      "A row erupted and a Coachella staffer tried to get Bieber a gig.",
      "Erupted and tried.",
      "But then festival security intervened, put the singer in a chokehold and removed him from the area.",
      "The festival security then intervened, put the singer in a chokehold and removed him from the area.",
      "But...",
      "Security intervened.",
      "Security will put people in.",
      "sing.",
      "Security removed people from the area.",
      "But...",
      "Security intervened.",
      "Put security in.",
      "Put people.",
      "Security removed.",
      "Removed people.",
      "The area was removed.",
      "But festival security intervened.",
      "But security would put the singer in a chokehold.",
      "But then security removed people from the area.",
      "But festival security intervened, put the singer in a chokehold and removed him from the area.",
      "But..."
    ]
  },
  {
    "instance_id": "realsumm-49",
    "summary": "<t> Sir Philip Carter died at his home on Thursday morning after a short illness . </t> <t> Carter served Everton during three spells after first joining the club in 1977 . </t> <t> Toffees chairman Bill Kenwright pays tribute to a ' great man and leader ' </t>",
    "summary_trees": [
      "# ::snt  Sir Philip Carter died at his home on Thursday morning after a short illness . \n(d / die-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Sir\"\n                  :op2 \"Philip\"\n                  :op3 \"Carter\"))\n      :location (h / home\n            :poss p)\n      :time (d2 / date-entity\n            :weekday (t / thursday)\n            :dayperiod (m / morning))\n      :time (a / after\n            :op1 (ii / ill-01\n                  :ARG1 p\n                  :ARG1-of (s / short-07))))",
      "# ::snt  Carter served Everton during three spells after first joining the club in 1977 . \n(s / serve-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Carter\"))\n      :ARG2 (t / team\n            :name (n2 / name\n                  :op1 \"Everton\"))\n      :duration (s2 / spell\n            :quant 3)\n      :time (a / after\n            :op1 (j / join-04\n                  :ARG0 p\n                  :ARG1 t\n                  :time (d / date-entity\n                        :year 1977)\n                  :ord (o / ordinal-entity\n                        :value 1))))",
      "# ::snt  Toffees chairman Bill Kenwright pays tribute to a ' great man and leader ' \n(p / pay\n      :ARG0 (p2 / person\n            :name (n / name\n                  :op1 \"Bill\"\n                  :op2 \"Kenwright\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (o / organization\n                        :name (n2 / name\n                              :op1 \"Toffees\"))\n                  :ARG2 (c / chairman)))\n      :ARG1 (a / and\n            :op1 (m / man\n                  :mod (g / great))\n            :op2 (p3 / person\n                  :ARG0-of (l / lead-02))))"
    ],
    "tree": [
      "(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Philip\"\n                     :op3 \"Carter\")))",
      "(d / die-01\n   :location (h / home\n                :poss (p / person :name (n / name :op1 \"Sir\" :op2 \"Philip\" :op3 \"Carter\"))))",
      "(d / die-01\n   :time (d2 / date-entity\n             :weekday (t / thursday)\n             :dayperiod (m / morning)))",
      "(d / die-01\n   :time (a / after\n            :op1 (ii / ill-01\n                     :ARG1 (p / person :name (n / name :op1 \"Sir\" :op2 \"Philip\" :op3 \"Carter\"))\n                     :ARG1-of (s / short-07))))",
      "(p / person\n   :name (n / name\n            :op1 \"Sir\"\n            :op2 \"Philip\"\n            :op3 \"Carter\"))",
      "(d2 / date-entity\n    :weekday (t / thursday)\n    :dayperiod (m / morning))",
      "(a / after\n   :op1 (ii / ill-01\n            :ARG1 (p / person :name (n / name :op1 \"Sir\" :op2 \"Philip\" :op3 \"Carter\"))\n            :ARG1-of (s / short-07)))",
      "(d / die-01\n   :ARG1 (p / person :name (n / name :op1 \"Sir\" :op2 \"Philip\" :op3 \"Carter\")))",
      "(ii / ill-01\n    :ARG1 (p / person :name (n / name :op1 \"Sir\" :op2 \"Philip\" :op3 \"Carter\")))",
      "(s / short-07)",
      "(d / die-01\n   :ARG1 (p / person :name (n / name :op1 \"Sir\" :op2 \"Philip\" :op3 \"Carter\")))",
      "(ii / ill-01\n    :ARG1 (p / person :name (n / name :op1 \"Sir\" :op2 \"Philip\" :op3 \"Carter\")))",
      "(d / die-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Philip\"\n                     :op3 \"Carter\")))",
      "(d / die-01\n   :location (h / home)\n   :time (d2 / date-entity\n             :weekday (t / thursday)\n             :dayperiod (m / morning))\n   :time (a / after\n            :op1 (ii / ill-01)))",
      "(s / serve-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Carter\")))",
      "(s / serve-01\n   :ARG2 (t / team\n            :name (n2 / name\n                      :op1 \"Everton\")))",
      "(s / serve-01\n   :duration (s2 / spell\n                 :quant 3))",
      "(s / serve-01\n   :time (a / after\n            :op1 (j / join-04\n                    :ARG0 (p / person :name (n / name :op1 \"Carter\"))\n                    :ARG1 (t / team :name (n2 / name :op1 \"Everton\"))\n                    :time (d / date-entity\n                             :year 1977)\n                    :ord (o / ordinal-entity\n                            :value 1))))",
      "(p / person\n   :name (n / name\n            :op1 \"Carter\"))",
      "(t / team\n   :name (n2 / name\n             :op1 \"Everton\"))",
      "(a / after\n   :op1 (j / join-04\n           :ARG0 (p / person :name (n / name :op1 \"Carter\"))\n           :ARG1 (t / team :name (n2 / name :op1 \"Everton\"))\n           :time (d / date-entity\n                    :year 1977)\n           :ord (o / ordinal-entity\n                   :value 1)))",
      "(s / serve-01\n   :ARG0 (p / person :name (n / name :op1 \"Carter\")))",
      "(j / join-04\n   :ARG0 (p / person :name (n / name :op1 \"Carter\"))\n   :ARG1 (t / team :name (n2 / name :op1 \"Everton\"))\n   :time (d / date-entity))",
      "(s / serve-01\n   :ARG0 (p / person :name (n / name :op1 \"Carter\")))",
      "(j / join-04\n   :ARG0 (p / person :name (n / name :op1 \"Carter\")))",
      "(j / join-04\n   :ARG1 (t / team :name (n2 / name :op1 \"Everton\")))",
      "(j / join-04\n   :time (d / date-entity))",
      "(s / serve-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Carter\"))\n   :ARG2 (t / team\n            :name (n2 / name\n                      :op1 \"Everton\"))\n   :duration (s2 / spell\n                 :quant 3))",
      "(s / serve-01\n   :duration (s2 / spell\n                 :quant 3)\n   :time (a / after\n            :op1 (j / join-04)))",
      "(p / pay\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Bill\"\n                      :op2 \"Kenwright\")\n             :ARG0-of (h / have-org-role-91\n                         :ARG1 (o / organization\n                                  :name (n2 / name\n                                            :op1 \"Toffees\"))\n                         :ARG2 (c / chairman))))",
      "(p / pay\n   :ARG1 (a / and\n            :op1 (m / man\n                    :mod (g / great))\n            :op2 (p3 / person\n                     :ARG0-of (l / lead-02))))",
      "(p2 / person\n    :name (n / name\n             :op1 \"Bill\"\n             :op2 \"Kenwright\")\n    :ARG0-of (h / have-org-role-91\n                :ARG1 (o / organization\n                         :name (n2 / name\n                                   :op1 \"Toffees\"))\n                :ARG2 (c / chairman)))",
      "(a / and\n   :op1 (m / man\n           :mod (g / great))\n   :op2 (p3 / person\n            :ARG0-of (l / lead-02)))",
      "(l / lead-02)",
      "(p / pay\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Bill\"\n                      :op2 \"Kenwright\")\n             :ARG0-of (h / have-org-role-91\n                         :ARG1 (o / organization\n                                  :name (n2 / name\n                                            :op1 \"Toffees\"))\n                         :ARG2 (c / chairman)))\n   :ARG1 (m / man\n            :mod (g / great)))",
      "(p / pay\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Bill\"\n                      :op2 \"Kenwright\")\n             :ARG0-of (h / have-org-role-91\n                         :ARG1 (o / organization\n                                  :name (n2 / name\n                                            :op1 \"Toffees\"))\n                         :ARG2 (c / chairman)))\n   :ARG1 (p3 / person\n             :ARG0-of (l / lead-02)))",
      "(p / pay\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Bill\"\n                      :op2 \"Kenwright\")\n             :ARG0 (h / have-org-role-91\n                      :ARG1 (o / organization\n                               :name (n2 / name\n                                         :op1 \"Toffees\"))\n                      :ARG2 (c / chairman)))\n   :ARG1 (a / and\n            :op1 (m / man\n                    :mod (g / great))\n            :op2 (p3 / person\n                     :ARG0 (l / lead-02))))",
      "(p / pay)"
    ],
    "smus": [
      "Sir Philip Carter died.",
      "Sir Philip Carter's home was where he died.",
      "Died Thursday morning.",
      "died after a short illness of Sir Philip Carter.",
      "Sir Philip Carter",
      "Thursday morning",
      "After Sir Philip Carter's short illness.",
      "Sir Philip Carter died.",
      "Sir Philip Carter is ill.",
      "Short.",
      "Sir Philip Carter died.",
      "Sir Philip Carter is ill.",
      "Sir Philip Carter died.",
      "Died at home Thursday morning after illness.",
      "Carter served.",
      "served on Everton.",
      "served for three spells.",
      "After Carter joined Everton in 1977 for the first time, it served.",
      "Carter.",
      "Everton",
      "After joining Everton in 1977 for the first time.",
      "Carter served.",
      "Carter will be joining Everton at the time.",
      "Carter served.",
      "Carter is joining.",
      "Joining Everton.",
      "Joining at the time.",
      "Carter served for three spells with Everton.",
      "After joining, served three spells.",
      "Toffees chairman Bill Kenwright pays.",
      "It pays for the great man and leader.",
      "Bill Kenwright, the Toffees chairman.",
      "Great man and leader.",
      "leadership",
      "Bill Kenwright, the chairman of the Toffees, pays a great man.",
      "Toffees chairman Bill Kenwright pays for the leader.",
      "Bill Kenwright, the chairman of the Toffees, pays for a great man and leader.",
      "Pays."
    ]
  },
  {
    "instance_id": "realsumm-50",
    "summary": "<t> Border collies Ace and Holly were caught on camera performing a gravity - defying feat together . </t> <t> The two pooches stood up on their hind legs while balancing on their owner and trainer Dai Aoki . </t> <t> They have appeared in a number of videos showing off their tricks . </t>",
    "summary_trees": [
      "# ::snt  Border collies Ace and Holly were caught on camera performing a gravity - defying feat together . \n(c / catch-03\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Ace\")\n                  :mod (b / border-line))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Holly\")\n                  :mod b))\n      :ARG2 (p3 / perform-01\n            :ARG0 a\n            :ARG1 (f / feat\n                  :mod (d / defy-01\n                        :ARG0 a\n                        :ARG1 (g / gravity)))\n            :manner (t / together))\n      :medium (c2 / camera))",
      "# ::snt  The two pooches stood up on their hind legs while balancing on their owner and trainer Dai Aoki . \n(s / stand-up-07\n      :ARG1 (p / pooche\n            :quant 2\n            :part (l / leg\n                  :mod (h / hind)))\n      :time (b / balance-01\n            :ARG1 p\n            :ARG2 (p2 / person\n                  :name (n / name\n                        :op1 \"Dai\"\n                        :op2 \"Aoki\")\n                  :ARG0-of (o / own-01\n                        :ARG1 p)\n                  :ARG0-of (t / train-01\n                        :ARG2 p))))",
      "# ::snt  They have appeared in a number of videos showing off their tricks . \n(a / appear-01\n      :ARG1 (t / they)\n      :medium (v / video\n            :quant (n / number)\n            :ARG0-of (s / show-off-03\n                  :ARG1 (t2 / trick-01\n                        :ARG0 t))))"
    ],
    "tree": [
      "(c / catch-03\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ace\")\n                    :mod (b / border-line))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Holly\")\n                     :mod b)))",
      "(c / catch-03\n   :ARG2 (p3 / perform-01\n             :ARG0 (a / and)\n             :ARG1 (f / feat\n                      :mod (d / defy-01\n                              :ARG0 a\n                              :ARG1 (g / gravity)))\n             :manner (t / together)))",
      "(c / catch-03\n   :medium (c2 / camera))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Ace\")\n           :mod (b / border-line))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Holly\")\n            :mod b))",
      "(p3 / perform-01\n    :ARG0 (a / and)\n    :ARG1 (f / feat\n             :mod (d / defy-01\n                     :ARG0 a\n                     :ARG1 (g / gravity)))\n    :manner (t / together))",
      "(c / catch-03\n   :ARG1 (a / and))",
      "(p3 / perform-01\n    :ARG0 (a / and)\n    :ARG1 (f / feat))",
      "(d / defy-01\n   :ARG0 (a / and)\n   :ARG1 (g / gravity))",
      "(c / catch-03\n   :ARG1 (a / and))",
      "(p3 / perform-01\n    :ARG0 (a / and))",
      "(p3 / perform-01\n    :ARG1 (f / feat))",
      "(d / defy-01\n   :ARG0 (a / and))",
      "(d / defy-01\n   :ARG1 (g / gravity))",
      "(c / catch-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ace\")\n            :mod (b / border-line))\n   :ARG2 (p3 / perform-01\n             :ARG0 p\n             :ARG1 (f / feat\n                      :mod (d / defy-01\n                              :ARG0 p\n                              :ARG1 (g / gravity)))\n             :manner (t / together))\n   :medium (c2 / camera))",
      "(c / catch-03\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Holly\")\n             :mod (b / border-line))\n   :ARG2 (p3 / perform-01\n             :ARG0 p2\n             :ARG1 (f / feat\n                      :mod (d / defy-01\n                              :ARG0 p2\n                              :ARG1 (g / gravity)))\n             :manner (t / together))\n   :ARG2 p3\n   :medium (c2 / camera))",
      "(c / catch-03\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Ace\")\n                    :mod (b / border-line))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Holly\")\n                     :mod b))\n   :ARG2 (p3 / perform-01\n             :ARG0 a\n             :ARG1 (f / feat\n                      :mod (d / defy-01\n                              :ARG0 a\n                              :ARG1 (g / gravity)))\n             :manner (t / together))\n   :medium (c2 / camera))",
      "(c / catch-03\n   :medium (c2 / camera))",
      "(s / stand-up-07\n   :ARG1 (p / pooche\n            :quant 2\n            :part (l / leg\n                     :mod (h / hind))))",
      "(s / stand-up-07\n   :time (b / balance-01\n            :ARG1 (p / pooche)\n            :ARG2 (p2 / person\n                      :name (n / name\n                               :op1 \"Dai\"\n                               :op2 \"Aoki\")\n                      :ARG0-of (o / own-01\n                                  :ARG1 p)\n                      :ARG0-of (t / train-01\n                                  :ARG2 p))))",
      "(p / pooche\n   :quant 2\n   :part (l / leg\n            :mod (h / hind)))",
      "(b / balance-01\n   :ARG1 (p / pooche)\n   :ARG2 (p2 / person\n             :name (n / name\n                      :op1 \"Dai\"\n                      :op2 \"Aoki\")\n             :ARG0-of (o / own-01\n                         :ARG1 p)\n             :ARG0-of (t / train-01\n                         :ARG2 p)))",
      "(s / stand-up-07\n   :ARG1 (p / pooche))",
      "(b / balance-01\n   :ARG1 (p / pooche)\n   :ARG2 (p2 / person :name (n / name :op1 \"Dai\" :op2 \"Aoki\"))))",
      "(o / own-01\n   :ARG1 (p / pooche))",
      "(t / train-01\n   :ARG2 (p / pooche))",
      "(s / stand-up-07\n   :ARG1 (p / pooche))",
      "(b / balance-01\n   :ARG1 (p / pooche))",
      "(b / balance-01\n   :ARG2 (p2 / person :name (n / name :op1 \"Dai\" :op2 \"Aoki\"))))",
      "(o / own-01\n   :ARG1 (p / pooche))",
      "(t / train-01\n   :ARG2 (p / pooche))",
      "(s / stand-up-07\n   :ARG1 (p / pooche\n            :quant 2\n            :part (l / leg\n                     :mod (h / hind))))",
      "(s / stand-up-07\n   :time (b / balance-01))",
      "(a / appear-01\n   :ARG1 (t / they))",
      "(a / appear-01\n   :medium (v / video\n              :quant (n / number)\n              :ARG0-of (s / show-off-03\n                          :ARG1 (t2 / trick-01\n                                    :ARG0 (t / they)))))",
      "(v / video\n   :quant (n / number)\n   :ARG0-of (s / show-off-03\n               :ARG1 (t2 / trick-01\n                         :ARG0 (t / they))))",
      "(a / appear-01\n   :ARG1 (t / they))",
      "(s / show-off-03\n   :ARG1 (t2 / trick-01))",
      "(t2 / trick-01\n    :ARG0 (t / they))",
      "(a / appear-01\n   :ARG1 (t / they))",
      "(s / show-off-03\n   :ARG1 (t2 / trick-01))",
      "(t2 / trick-01\n    :ARG0 (t / they))",
      "(a / appear-01\n   :ARG1 (t / they)\n   :medium (v / video\n              :quant (n / number)\n              :ARG0 (s / show-off-03\n                       :ARG1 (t2 / trick-01\n                                 :ARG0 t))))",
      "(a / appear-01\n   :medium (v / video\n              :quant (n / number)))"
    ],
    "smus": [
      "Catch the borderline Ace and Holly.",
      "Catching up with the two performing a feat of defying gravity together.",
      "caught on camera.",
      "Borderline Ace and Holly.",
      "Together, they are performing a feat of defying gravity.",
      "Catch and catch.",
      "The feat was performed by both.",
      "The defying of gravity.",
      "Catch and catch.",
      "Both are performing.",
      "performing the feat.",
      "Defiance by both.",
      "Defiance of gravity.",
      "Borderline Ace was caught on camera performing a feat of defiance to gravity together.",
      "Borderline Holly was caught on camera performing a feat of defying gravity together.",
      "Borderline Ace and Holly were caught on camera performing a feat of defying gravity together.",
      "caught on camera.",
      "Two pooches on the hind legs stood up.",
      "Standing up, pooches balancing with their owner and trainer Dai Aoki,",
      "Two pooches on the hind legs.",
      "Pooches are balancing with their owner and trainer Dai Aoki.",
      "Pooches stood up.",
      "Pouching with Dai Aoki.",
      "Pooch owners.",
      "Pooch training.",
      "Pooches stood up.",
      "Pooch balancing.",
      "Balancing Dai Aoki.",
      "Pooch owners.",
      "Pooch training.",
      "Two pooches on the hind legs stood up.",
      "stood up while balancing.",
      "They have appeared.",
      "A number of videos showing off their tricks have appeared.",
      "There are a number of videos showing off their tricks.",
      "They have appeared.",
      "Showing off the tricks.",
      "They do tricks.",
      "They have appeared.",
      "Showing off the tricks.",
      "They do tricks.",
      "They have appeared in a number of videos showing off their tricks.",
      "A number of videos have appeared."
    ]
  },
  {
    "instance_id": "realsumm-51",
    "summary": "<t> Dayna Dobias , 19 , has created a video in which she dances despite having a disability that makes it difficult for her to walk . </t> <t> She loves TV , film and fashion , and says she \u2019s not happy with how people with disabilities are represented . </t> <t> The teen has created several videos during the past year aimed at changing stereotypes . </t>",
    "summary_trees": [
      "# ::snt  Dayna Dobias , 19 , has created a video in which she dances despite having a disability that makes it difficult for her to walk . \n(c / create-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Dayna\"\n                  :op2 \"Dobias\")\n            :age (t / temporal-quantity\n                  :quant 19\n                  :unit (y / year)))\n      :ARG1 (v / video\n            :medium-of (d / dance-01\n                  :ARG0 p))\n      :concession (h / have-03\n            :ARG0 p\n            :ARG1 (d2 / disability\n                  :ARG0-of (m / make-02\n                        :ARG1 (d3 / difficult\n                              :domain (w / walk-01\n                                    :ARG0 p))))))",
      "# ::snt  She loves TV , film and fashion , and says she \u2019s not happy with how people with disabilities are represented . \n(a / and\n      :op1 (l / love-01\n            :ARG0 (s / she)\n            :ARG1 (a2 / and\n                  :op1 (t / television)\n                  :op2 (f / film)\n                  :op3 (f2 / fashion)))\n      :op2 (s2 / say-01\n            :ARG0 s\n            :ARG1 (h / happy-01\n                  :polarity -\n                  :ARG0 (t2 / thing\n                        :ARG2-of (r / represent-01\n                              :ARG1 (p / person\n                                    :ARG0-of (h2 / have-03\n                                          :ARG1 (d / disability)))))\n                  :ARG1 s)))",
      "# ::snt  The teen has created several videos during the past year aimed at changing stereotypes . \n(c / create-01\n      :ARG0 (t / teen)\n      :ARG1 (v / video\n            :ARG0-of (a / aim-02\n                  :ARG1 (c2 / change-01\n                        :ARG1 (s / stereotype-01)))\n            :quant (s2 / several))\n      :time (y / year\n            :mod (p / past)))"
    ],
    "tree": [
      "(c / create-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dayna\"\n                     :op2 \"Dobias\")\n            :age (t / temporal-quantity\n                    :quant 19\n                    :unit (y / year))))",
      "(c / create-01\n   :ARG1 (v / video\n            :medium-of (d / dance-01\n                          :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\"))))))",
      "(c / create-01\n   :concession (h / have-03\n                  :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\")))\n                  :ARG1 (d2 / disability\n                            :ARG0-of (m / make-02\n                                        :ARG1 (d3 / difficult\n                                                  :domain (w / walk-01\n                                                             :ARG0 p))))))",
      "(p / person\n   :name (n / name\n            :op1 \"Dayna\"\n            :op2 \"Dobias\")\n   :age (t / temporal-quantity\n           :quant 19\n           :unit (y / year)))",
      "(v / video\n   :medium-of (d / dance-01\n                 :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\")))))",
      "(h / have-03\n   :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\")))\n   :ARG1 (d2 / disability\n             :ARG0-of (m / make-02\n                         :ARG1 (d3 / difficult\n                                   :domain (w / walk-01\n                                              :ARG0 p)))))",
      "(c / create-01\n   :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\"))))",
      "(d / dance-01\n   :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\"))))",
      "(h / have-03\n   :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\")))\n   :ARG1 (d2 / disability))",
      "(m / make-02\n   :ARG1 (d3 / difficult))",
      "(w / walk-01\n   :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\"))))",
      "(c / create-01\n   :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\"))))",
      "(d / dance-01\n   :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\"))))",
      "(h / have-03\n   :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\"))))",
      "(h / have-03\n   :ARG1 (d2 / disability))",
      "(m / make-02\n   :ARG1 (d3 / difficult))",
      "(w / walk-01\n   :ARG0 (p / person :name (n / name :op1 \"Dayna\" :op2 \"Dobias\"))))",
      "(c / create-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Dayna\"\n                     :op2 \"Dobias\")\n            :age (t / temporal-quantity\n                    :quant 19\n                    :unit (y / year)))\n   :ARG1 (v / video\n            :medium (d / dance-01\n                       :ARG0 p))\n   :concession (h / have-03\n                  :ARG0 p\n                  :ARG1 (d2 / disability\n                            :ARG0 (m / make-02\n                                     :ARG1 (d3 / difficult\n                                               :domain (w / walk-01\n                                                          :ARG0 p))))))",
      "(c / create-01\n   :concession (h / have-03))",
      "(a / and\n   :op1 (l / love-01\n           :ARG0 (s / she)\n           :ARG1 (a2 / and\n                     :op1 (t / television)\n                     :op2 (f / film)\n                     :op3 (f2 / fashion))))",
      "(a / and\n   :op2 (s2 / say-01\n            :ARG0 (s / she)\n            :ARG1 (h / happy-01\n                     :polarity -\n                     :ARG0 (t2 / thing\n                               :ARG2-of (r / represent-01\n                                           :ARG1 (p / person\n                                                    :ARG0-of (h2 / have-03\n                                                                 :ARG1 (d / disability)))))\n                     :ARG1 s)))",
      "(l / love-01\n   :ARG0 (s / she)\n   :ARG1 (a2 / and\n             :op1 (t / television)\n             :op2 (f / film)\n             :op3 (f2 / fashion)))",
      "(s2 / say-01\n    :ARG0 (s / she)\n    :ARG1 (h / happy-01\n             :polarity -\n             :ARG0 (t2 / thing\n                       :ARG2-of (r / represent-01\n                                   :ARG1 (p / person\n                                            :ARG0-of (h2 / have-03\n                                                         :ARG1 (d / disability)))))\n             :ARG1 s))",
      "(l / love-01\n   :ARG0 (s / she))",
      "(s2 / say-01\n    :ARG0 (s / she)\n    :ARG1 (h / happy-01))",
      "(h / happy-01\n   :polarity -\n   :ARG0 (t2 / thing))",
      "(r / represent-01\n   :ARG1 (p / person))",
      "(h2 / have-03\n    :ARG1 (d / disability))",
      "(l / love-01\n   :ARG0 (s / she))",
      "(s2 / say-01\n    :ARG0 (s / she))",
      "(s2 / say-01\n    :ARG1 (h / happy-01))",
      "(h / happy-01\n   :polarity -)",
      "(h / happy-01\n   :ARG0 (t2 / thing))",
      "(r / represent-01\n   :ARG1 (p / person))",
      "(h2 / have-03\n    :ARG1 (d / disability))",
      "(l / love-01\n   :ARG0 (s / she)\n   :ARG1 (t / television\n            :op2 (f / film)\n            :op3 (f2 / fashion)))",
      "(s2 / say-01\n    :ARG0 (s / she)\n    :ARG1 (h / happy-01\n             :polarity -\n             :ARG0 (t2 / thing\n                       :ARG2-of (r / represent-01\n                                   :ARG1 (p / person\n                                            :ARG0-of (h2 / have-03\n                                                         :ARG1 (d / disability)))))\n             :ARG1 s))",
      "(a / and\n   :op1 (l / love-01\n           :ARG0 (s / she)\n           :ARG1 (a2 / and\n                     :op1 (t / television)\n                     :op2 (f / film)\n                     :op3 (f2 / fashion)))\n   :op2 (s2 / say-01\n            :ARG0 s\n            :ARG1 (h / happy-01\n                     :polarity -\n                     :ARG0 (t2 / thing\n                               :ARG2 (r / represent-01\n                                        :ARG1 (p / person\n                                                 :ARG0 (h2 / have-03\n                                                           :ARG1 (d / disability)))))\n                     :ARG1 s)))",
      "(a / and\n   :op1 (l / love-01)\n   :op2 (s2 / say-01))",
      "(c / create-01\n   :ARG0 (t / teen))",
      "(c / create-01\n   :ARG1 (v / video\n            :ARG0-of (a / aim-02\n                        :ARG1 (c2 / change-01\n                                  :ARG1 (s / stereotype-01)))\n            :quant (s2 / several)))",
      "(c / create-01\n   :time (y / year\n            :mod (p / past)))",
      "(v / video\n   :ARG0-of (a / aim-02\n               :ARG1 (c2 / change-01\n                         :ARG1 (s / stereotype-01)))\n   :quant (s2 / several))",
      "(y / year\n   :mod (p / past))",
      "(c / create-01\n   :ARG0 (t / teen))",
      "(a / aim-02\n   :ARG1 (c2 / change-01))",
      "(c2 / change-01\n    :ARG1 (s / stereotype-01))",
      "(s / stereotype-01)",
      "(c / create-01\n   :ARG0 (t / teen))",
      "(a / aim-02\n   :ARG1 (c2 / change-01))",
      "(c2 / change-01\n    :ARG1 (s / stereotype-01))",
      "(c / create-01\n   :ARG0 (t / teen)\n   :ARG1 (v / video\n            :ARG0 (a / aim-02\n                     :ARG1 (c2 / change-01\n                               :ARG1 (s / stereotype-01)))\n            :quant (s2 / several)))",
      "(c / create-01\n   :time (y / year\n            :mod (p / past)))"
    ],
    "smus": [
      "Created by 19-year-old Dayna Dobias.",
      "The video in which Dayna Dobias dances was created.",
      "Created even though Dayna Dobias has a disability that makes it difficult for her to walk.",
      "Dayna Dobias, 19, is",
      "a href=\"http://www.youtube.com/watch?v=dobias_1\">Video: Dayna Dobias Dances/a>",
      "Dayna Dobias has a disability that makes it difficult for her to walk.",
      "Dayna Dobias was created.",
      "Dayna Dobias dances.",
      "Dayna Dobias has a disability.",
      "Makes it difficult.",
      "Dayna Dobias will walk.",
      "Dayna Dobias was created.",
      "Dayna Dobias dances.",
      "Dayna Dobias has.",
      "has a disability.",
      "Makes it difficult.",
      "Dayna Dobias will walk.",
      "Dayna Dobias, 19, has created a video in which she dances, although she has a disability that makes it difficult for her to walk.",
      "Created, though has.",
      "And she loves TV, film and fashion.",
      "And she says she is not happy with what represents people with disabilities.",
      "She loves TV, film and fashion.",
      "She says she is not happy with what represents people with disabilities.",
      "She loves.",
      "She says, \"I'm happy.\"",
      "Not happy with it.",
      "representing the people.",
      "having disabilities.",
      "She loves.",
      "\"It's a'she says...",
      "Happy says.",
      "Not happy.",
      "happy.",
      "representing the people.",
      "having disabilities.",
      "She loves TV, film and fashion.",
      "She says she is not happy with what represents people with disabilities.",
      "She loves TV, film and fashion and says she is not happy with what represents people with disabilities.",
      "Loves and says.",
      "Created by a teen.",
      "Several videos aimed at changing stereotypes were created.",
      "Created in the past year.",
      "There are several videos aimed at changing stereotypes.",
      "past year",
      "Created by a teen.",
      "aimed at changing.",
      "Changing Stereotypes",
      "Stereotypes.",
      "Created by a teen.",
      "aimed at changing.",
      "Changing Stereotypes",
      "The teen has created several videos aimed at changing stereotypes.",
      "Created in the past year."
    ]
  },
  {
    "instance_id": "realsumm-52",
    "summary": "<t> Manchester United take on Manchester City on Sunday . </t> <t> Match will begin at 4 pm local time at United 's Old Trafford home . </t> <t> Police have no objections to kick - off being so late in the afternoon . </t> <t> Last late afternoon weekend kick - off in the Manchester derby saw 34 fans arrested at Wembley in 2011 FA Cup semi - final . </t>",
    "summary_trees": [
      "# ::snt  Manchester United take on Manchester City on Sunday . \n(t / take-on-09\n      :ARG0 (t2 / team\n            :name (n / name\n                  :op1 \"Manchester\"\n                  :op2 \"United\"))\n      :ARG1 (t3 / team\n            :name (n2 / name\n                  :op1 \"Manchester\"\n                  :op2 \"City\"))\n      :time (d / date-entity\n            :weekday (s / sunday)))",
      "# ::snt  Match will begin at 4 pm local time at United 's Old Trafford home . \n(b / begin-01\n      :ARG1 (m / match-03)\n      :location (h / home\n            :poss (t / team\n                  :name (n / name\n                        :op1 \"United\"))\n            :mod (s / sports-facility\n                  :name n\n                  :op1 \"Old\"\n                  :op2 \" Trafford\"))\n      :time (d / date-entity\n            :time \"16:00\"\n            :timezone (l / local-02)))",
      "# ::snt  Police have no objections to kick - off being so late in the afternoon . \n(o / object-01\n      :polarity -\n      :ARG0 (p / police)\n      :ARG1 (k / kick-off-04\n            :time (l / late\n                  :op1 (d / date-entity\n                        :dayperiod (a / afternoon))\n                  :degree (s / so))))",
      "# ::snt  Last late afternoon weekend kick - off in the Manchester derby saw 34 fans arrested at Wembley in 2011 FA Cup semi - final . \n(s / see-01\n      :ARG0 (k / kick-off-04\n            :ARG1 (d / derby\n                  :mod (c / city\n                        :name (n / name\n                              :op1 \"Manchester\")))\n            :time (w / weekend)\n            :time (d2 / date-entity\n                  :dayperiod (a / afternoon)\n                  :mod (l / late))\n            :mod (l2 / last))\n      :ARG1 (a2 / arrest-01\n            :ARG1 (f / fan\n                  :quant 34)\n            :location (s2 / sports-facility\n                  :name (n2 / name\n                        :op1 \"Wembley\"))\n            :time (f2 / final\n                  :mod (s3 / semi)\n                  :subevent-of (g / game\n                        :name (n3 / name\n                              :op1 \"FA\"\n                              :op2 \"Cup\")\n                        :time (d3 / date-entity\n                              :year 2011)))))"
    ],
    "tree": [
      "(t / take-on-09\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Manchester\"\n                      :op2 \"United\")))",
      "(t / take-on-09\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Manchester\"\n                       :op2 \"City\")))",
      "(t / take-on-09\n   :time (d / date-entity\n            :weekday (s / sunday)))",
      "(t2 / team\n    :name (n / name\n             :op1 \"Manchester\"\n             :op2 \"United\"))",
      "(t3 / team\n    :name (n2 / name\n              :op1 \"Manchester\"\n              :op2 \"City\"))",
      "(d / date-entity\n   :weekday (s / sunday))",
      "(t / take-on-09\n   :ARG0 (t2 / team :name (n / name :op1 \"Manchester\" :op2 \"United\")))",
      "(t / take-on-09\n   :ARG0 (t2 / team :name (n / name :op1 \"Manchester\" :op2 \"United\")))",
      "(t / take-on-09\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Manchester\"\n                      :op2 \"United\"))\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Manchester\"\n                       :op2 \"City\")))",
      "(t / take-on-09\n   :time (d / date-entity\n            :weekday (s / sunday)))",
      "(b / begin-01\n   :ARG1 (m / match-03))",
      "(b / begin-01\n   :location (h / home\n                :poss (t / team\n                         :name (n / name\n                                  :op1 \"United\"))\n                :mod (s / sports-facility\n                        :name n\n                        :op1 \"Old\"\n                        :op2 \" Trafford\")))",
      "(b / begin-01\n   :time (d / date-entity\n            :time \"16:00\"\n            :timezone (l / local-02)))",
      "(h / home\n   :poss (t / team\n            :name (n / name\n                     :op1 \"United\"))\n   :mod (s / sports-facility\n           :name n\n           :op1 \"Old\"\n           :op2 \" Trafford\"))",
      "(d / date-entity\n   :time \"16:00\"\n   :timezone (l / local-02))",
      "(b / begin-01\n   :ARG1 (m / match-03))",
      "(m / match-03)",
      "(l / local-02)",
      "(b / begin-01\n   :ARG1 (m / match-03))",
      "(b / begin-01\n   :ARG1 (m / match-03))",
      "(b / begin-01\n   :location (h / home\n                :poss (t / team\n                         :name (n / name\n                                  :op1 \"United\"))\n                :mod (s / sports-facility\n                        :name n\n                        :op1 \"Old\"\n                        :op2 \" Trafford\"))\n   :time (d / date-entity\n            :time \"16:00\"\n            :timezone (l / local-02)))",
      "(o / object-01\n   :polarity -)",
      "(o / object-01\n   :ARG0 (p / police))",
      "(o / object-01\n   :ARG1 (k / kick-off-04\n            :time (l / late\n                     :op1 (d / date-entity\n                             :dayperiod (a / afternoon))\n                     :degree (s / so))))",
      "(k / kick-off-04\n   :time (l / late\n            :op1 (d / date-entity\n                    :dayperiod (a / afternoon))\n            :degree (s / so)))",
      "(o / object-01\n   :polarity -\n   :ARG0 (p / police))",
      "(k / kick-off-04\n   :time (l / late))",
      "(o / object-01\n   :polarity -)",
      "(o / object-01\n   :ARG0 (p / police))",
      "(k / kick-off-04\n   :time (l / late))",
      "(o / object-01\n   :polarity -\n   :ARG0 (p / police)\n   :ARG1 (k / kick-off-04))",
      "(o / object-01\n   :polarity -)",
      "(s / see-01\n   :ARG0 (k / kick-off-04\n            :ARG1 (d / derby\n                     :mod (c / city\n                             :name (n / name\n                                      :op1 \"Manchester\")))\n            :time (w / weekend)\n            :time (d2 / date-entity\n                      :dayperiod (a / afternoon)\n                      :mod (l / late))\n            :mod (l2 / last)))",
      "(s / see-01\n   :ARG1 (a2 / arrest-01\n             :ARG1 (f / fan\n                      :quant 34)\n             :location (s2 / sports-facility\n                           :name (n2 / name\n                                     :op1 \"Wembley\"))\n             :time (f2 / final\n                       :mod (s3 / semi)\n                       :subevent-of (g / game\n                                       :name (n3 / name\n                                                 :op1 \"FA\"\n                                                 :op2 \"Cup\")\n                                       :time (d3 / date-entity\n                                                 :year 2011)))))",
      "(k / kick-off-04\n   :ARG1 (d / derby\n            :mod (c / city\n                    :name (n / name\n                             :op1 \"Manchester\")))\n   :time (w / weekend)\n   :time (d2 / date-entity\n             :dayperiod (a / afternoon)\n             :mod (l / late))\n   :mod (l2 / last))",
      "(a2 / arrest-01\n    :ARG1 (f / fan\n             :quant 34)\n    :location (s2 / sports-facility\n                  :name (n2 / name\n                            :op1 \"Wembley\"))\n    :time (f2 / final\n              :mod (s3 / semi)\n              :subevent-of (g / game\n                              :name (n3 / name\n                                        :op1 \"FA\"\n                                        :op2 \"Cup\")\n                              :time (d3 / date-entity\n                                        :year 2011))))",
      "(s / see-01\n   :ARG0 (k / kick-off-04))",
      "(k / kick-off-04\n   :ARG1 (d / derby))",
      "(a2 / arrest-01\n    :ARG1 (f / fan))",
      "(s / see-01\n   :ARG0 (k / kick-off-04))",
      "(k / kick-off-04\n   :ARG1 (d / derby))",
      "(a2 / arrest-01\n    :ARG1 (f / fan))",
      "(s / see-01\n   :ARG0 (k / kick-off-04\n            :ARG1 (d / derby\n                     :mod (c / city\n                             :name (n / name\n                                      :op1 \"Manchester\")))\n            :mod (l2 / last))\n   :ARG1 (a2 / arrest-01\n             :ARG1 (f / fan\n                      :quant 34)))",
      "(s / see-01)"
    ],
    "smus": [
      "Manchester United will take on",
      "Take on Manchester City",
      "Take on Sunday.",
      "Manchester United",
      "Manchester City",
      "Sunday",
      "Manchester United will take on",
      "Manchester United will take on",
      "Manchester United will take on Manchester City.",
      "Take on Sunday.",
      "The Match will begin.",
      "Beginning at Old Trafford, United",
      "The time will begin at 6pm local time.",
      "United home at Old Trafford",
      "16:00 local time",
      "The Match will begin.",
      "Match.",
      "Local.",
      "The Match will begin.",
      "The Match will begin.",
      "Beginning at 6pm local time United will begin at Old Trafford.",
      "No objections.",
      "Police objects.",
      "Objections to kick off so late in the afternoon.",
      "Kicking off so late in the afternoon.",
      "No police objections.",
      "Kick off late.",
      "No objections.",
      "Police objects.",
      "Kick off late.",
      "There were no police objections to the kickoff.",
      "No objections.",
      "The Manchester derby last weekend kicked off late afternoon.",
      "34 fans were arrested in the WC semi-finals of the 2011 FA Cup.",
      "Last weekend the Manchester derby kicked off in late afternoon.",
      "34 fans were arrested at Wimbledon in the semi-finals of the 2011 FA Cup.",
      "The kick off saw.",
      "Kick off the derby.",
      "The fans were arrested.",
      "The kick off saw.",
      "Kick off the derby.",
      "The fans were arrested.",
      "The last kick off to the Manchester derby saw 34 fans arrested.",
      "Seed."
    ]
  },
  {
    "instance_id": "realsumm-53",
    "summary": "<t> Kamal criticised umpires ' decision to award controversial no - ball against Rohit Sharma in India 's World Cup match with Bangladesh . </t> <t> The Bangladeshi president alleged India had used its influence in the ICC . </t> <t> Governing body asked him to withdraw his statement or apologise . </t> <t> But Kamal confirmed his intention to step down . </t>",
    "summary_trees": [
      "# ::snt  Kamal criticised umpires ' decision to award controversial no - ball against Rohit Sharma in India 's World Cup match with Bangladesh . \n(c / criticize-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kamal\"))\n      :ARG1 (d / decide-01\n            :ARG0 (u / umpire)\n            :ARG1 (a / award-01\n                  :ARG0 u\n                  :ARG1 (b / ball\n                        :mod (c2 / controversy))\n                  :ARG2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Rohit\"\n                              :op2 \"Sharma\"))\n                  :time (m / match-03\n                        :ARG0 (c3 / country\n                              :name (n3 / name\n                                    :op1 \"India\"))\n                        :ARG1 (c4 / country\n                              :name (n4 / name\n                                    :op1 \"Bangladesh\"))\n                        :subevent-of (g / game\n                              :name (n5 / name\n                                    :op1 \"World\"\n                                    :op2 \"Cup\"))))))",
      "# ::snt  The Bangladeshi president alleged India had used its influence in the ICC . \n(a / allege-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c / country\n                        :name (n / name\n                              :op1 \"Bangladesh\"))\n                  :ARG2 (p2 / president)))\n      :ARG1 (u / use-01\n            :ARG0 (c2 / country\n                  :name (n2 / name\n                        :op1 \"India\"))\n            :ARG1 (ii / influence-01\n                  :ARG0 c2\n                  :ARG1 (o / organization\n                        :name (n3 / name\n                              :op1 \"ICC\")))))",
      "# ::snt  Governing body asked him to withdraw his statement or apologise . \n(a / ask-02\n      :ARG0 (b / body\n            :ARG0-of (g / govern-01))\n      :ARG1 (o / or\n            :op1 (w / withdraw-01\n                  :ARG0 (h / he)\n                  :ARG1 (s / state-01\n                        :ARG0 h))\n            :op2 (a2 / apologize-01\n                  :ARG0 h))\n      :ARG2 h)",
      "# ::snt  But Kamal confirmed his intention to step down . \n(c / contrast-01\n      :ARG2 (c2 / confirm-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Kamal\"))\n            :ARG1 (ii / intend-01\n                  :ARG0 p\n                  :ARG1 (s / step-down-04\n                        :ARG0 p))))"
    ],
    "tree": [
      "(c / criticize-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kamal\")))",
      "(c / criticize-01\n   :ARG1 (d / decide-01\n            :ARG0 (u / umpire)\n            :ARG1 (a / award-01\n                     :ARG0 u\n                     :ARG1 (b / ball\n                              :mod (c2 / controversy))\n                     :ARG2 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Rohit\"\n                                         :op2 \"Sharma\"))\n                     :time (m / match-03\n                              :ARG0 (c3 / country\n                                        :name (n3 / name\n                                                  :op1 \"India\"))\n                              :ARG1 (c4 / country\n                                        :name (n4 / name\n                                                  :op1 \"Bangladesh\"))\n                              :subevent-of (g / game\n                                              :name (n5 / name\n                                                        :op1 \"World\"\n                                                        :op2 \"Cup\"))))))",
      "(p / person\n   :name (n / name\n            :op1 \"Kamal\"))",
      "(d / decide-01\n   :ARG0 (u / umpire)\n   :ARG1 (a / award-01\n            :ARG0 u\n            :ARG1 (b / ball\n                     :mod (c2 / controversy))\n            :ARG2 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Rohit\"\n                                :op2 \"Sharma\"))\n            :time (m / match-03\n                     :ARG0 (c3 / country\n                               :name (n3 / name\n                                         :op1 \"India\"))\n                     :ARG1 (c4 / country\n                               :name (n4 / name\n                                         :op1 \"Bangladesh\"))\n                     :subevent-of (g / game\n                                     :name (n5 / name\n                                               :op1 \"World\"\n                                               :op2 \"Cup\")))))",
      "(c / criticize-01\n   :ARG0 (p / person :name (n / name :op1 \"Kamal\")))",
      "(d / decide-01\n   :ARG0 (u / umpire))",
      "(a / award-01\n   :ARG0 (u / umpire)\n   :ARG1 (b / ball))",
      "(m / match-03\n   :ARG0 (c3 / country :name (n3 / name :op1 \"India\")))",
      "(c / criticize-01\n   :ARG0 (p / person :name (n / name :op1 \"Kamal\")))",
      "(d / decide-01\n   :ARG0 (u / umpire))",
      "(a / award-01\n   :ARG0 (u / umpire))",
      "(a / award-01\n   :ARG1 (b / ball))",
      "(m / match-03\n   :ARG0 (c3 / country :name (n3 / name :op1 \"India\")))",
      "(c / criticize-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kamal\"))\n   :ARG1 (d / decide-01\n            :ARG0 (u / umpire)\n            :ARG1 (a / award-01\n                     :ARG0 u\n                     :ARG1 (b / ball\n                              :mod (c2 / controversy))\n                     :ARG2 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Rohit\"\n                                         :op2 \"Sharma\")))))",
      "(c / criticize-01)",
      "(a / allege-01\n   :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (c / country\n                                 :name (n / name\n                                          :op1 \"Bangladesh\"))\n                        :ARG2 (p2 / president))))",
      "(a / allege-01\n   :ARG1 (u / use-01\n            :ARG0 (c2 / country\n                      :name (n2 / name\n                                :op1 \"India\"))\n            :ARG1 (ii / influence-01\n                      :ARG0 c2\n                      :ARG1 (o / organization\n                               :name (n3 / name\n                                         :op1 \"ICC\")))))",
      "(p / person\n   :ARG0-of (h / have-org-role-91\n               :ARG1 (c / country\n                        :name (n / name\n                                 :op1 \"Bangladesh\"))\n               :ARG2 (p2 / president)))",
      "(u / use-01\n   :ARG0 (c2 / country\n             :name (n2 / name\n                       :op1 \"India\"))\n   :ARG1 (ii / influence-01\n             :ARG0 c2\n             :ARG1 (o / organization\n                      :name (n3 / name\n                                :op1 \"ICC\"))))",
      "(a / allege-01\n   :ARG0 (p / person))",
      "(u / use-01\n   :ARG0 (c2 / country :name (n2 / name :op1 \"India\")))",
      "(ii / influence-01\n    :ARG0 (c2 / country :name (n2 / name :op1 \"India\"))\n    :ARG1 (o / organization :name (n3 / name :op1 \"ICC\")))",
      "(a / allege-01\n   :ARG0 (p / person))",
      "(u / use-01\n   :ARG0 (c2 / country :name (n2 / name :op1 \"India\")))",
      "(ii / influence-01\n    :ARG0 (c2 / country :name (n2 / name :op1 \"India\")))",
      "(ii / influence-01\n    :ARG1 (o / organization :name (n3 / name :op1 \"ICC\")))",
      "(a / allege-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (c / country\n                              :name (n / name\n                                       :op1 \"Bangladesh\"))\n                     :ARG2 (p2 / president)))\n   :ARG1 (u / use-01\n            :ARG0 (c2 / country\n                      :name (n2 / name\n                                :op1 \"India\"))\n            :ARG1 (ii / influence-01\n                      :ARG0 c2\n                      :ARG1 (o / organization\n                               :name (n3 / name\n                                         :op1 \"ICC\")))))",
      "(a / allege-01)",
      "(a / ask-02\n   :ARG0 (b / body\n            :ARG0-of (g / govern-01)))",
      "(a / ask-02\n   :ARG1 (o / or\n            :op1 (w / withdraw-01\n                    :ARG0 (h / he)\n                    :ARG1 (s / state-01\n                             :ARG0 h))\n            :op2 (a2 / apologize-01\n                     :ARG0 h)))",
      "(a / ask-02\n   :ARG2 (h / he))",
      "(b / body\n   :ARG0-of (g / govern-01))",
      "(o / or\n   :op1 (w / withdraw-01\n           :ARG0 (h / he)\n           :ARG1 (s / state-01\n                    :ARG0 h))\n   :op2 (a2 / apologize-01\n            :ARG0 h))",
      "(a / ask-02\n   :ARG0 (b / body))",
      "(g / govern-01)",
      "(w / withdraw-01\n   :ARG0 (h / he))",
      "(s / state-01\n   :ARG0 (h / he))",
      "(a2 / apologize-01\n    :ARG0 (h / he))",
      "(a / ask-02\n   :ARG0 (b / body))",
      "(w / withdraw-01\n   :ARG0 (h / he))",
      "(s / state-01\n   :ARG0 (h / he))",
      "(a2 / apologize-01\n    :ARG0 (h / he))",
      "(a / ask-02\n   :ARG0 (b / body\n            :ARG0 (g / govern-01))\n   :ARG1 (o / or\n            :op1 (w / withdraw-01\n                    :ARG0 (h / he)\n                    :ARG1 (s / state-01\n                             :ARG0 h))\n            :op2 (a2 / apologize-01\n                     :ARG0 h))\n   :ARG2 h)",
      "(a / ask-02)",
      "(c / contrast-01\n   :ARG2 (c2 / confirm-01\n             :ARG0 (p / person\n                      :name (n / name\n                               :op1 \"Kamal\"))\n             :ARG1 (ii / intend-01\n                       :ARG0 p\n                       :ARG1 (s / step-down-04\n                                :ARG0 p))))",
      "(c2 / confirm-01\n    :ARG0 (p / person\n             :name (n / name\n                      :op1 \"Kamal\"))\n    :ARG1 (ii / intend-01\n              :ARG0 p\n              :ARG1 (s / step-down-04\n                       :ARG0 p)))",
      "(c / contrast-01\n   :ARG2 (c2 / confirm-01))",
      "(c2 / confirm-01\n    :ARG0 (p / person :name (n / name :op1 \"Kamal\")))",
      "(ii / intend-01\n    :ARG0 (p / person :name (n / name :op1 \"Kamal\"))\n    :ARG1 (s / step-down-04))",
      "(s / step-down-04\n   :ARG0 (p / person :name (n / name :op1 \"Kamal\")))",
      "(c / contrast-01\n   :ARG2 (c2 / confirm-01))",
      "(c2 / confirm-01\n    :ARG0 (p / person :name (n / name :op1 \"Kamal\")))",
      "(ii / intend-01\n    :ARG0 (p / person :name (n / name :op1 \"Kamal\")))",
      "(ii / intend-01\n    :ARG1 (s / step-down-04))",
      "(s / step-down-04\n   :ARG0 (p / person :name (n / name :op1 \"Kamal\")))",
      "(c / contrast-01\n   :ARG2 (c2 / confirm-01\n             :ARG0 (p / person\n                      :name (n / name\n                               :op1 \"Kamal\"))\n             :ARG1 (ii / intend-01\n                       :ARG0 p\n                       :ARG1 (s / step-down-04\n                                :ARG0 p))))",
      "(c / contrast-01)"
    ],
    "smus": [
      "Kamal criticized.",
      "Criticized the decision by umpires to award Rohit Sharma the controversial ball in India - Bangladesh World Cup match",
      "Kamal",
      "The umpires' decision to award Rohit Sharma the controversial ball in India - Bangladesh match of the World Cup.",
      "Kamal criticized.",
      "The umpires made the decision.",
      "The umpires will award the ball.",
      "India is the match.",
      "Kamal criticized.",
      "The umpires made the decision.",
      "The umpires will award.",
      "award the ball",
      "India is the match.",
      "Kamal criticized the decision of umpires to award the controversial ball to Rohit Sharma.",
      "Criticized.",
      "The Bangladeshi president alleged --",
      "India allegedly used influence over the ICC.",
      "Bangladesh's president",
      "India has used its influence on the ICC.",
      "The people alleged --",
      "India has used it.",
      "India has influence over the ICC.",
      "The people alleged --",
      "India has used it.",
      "India has influence.",
      "Influence of the ICC",
      "Bangladesh's president alleged India had used influence over the ICC.",
      "alleged.",
      "The governing body asked --",
      "He was asked to withdraw his statement or make an apology.",
      "He asked.",
      "Government body",
      "He will withdraw his statement or make an apology.",
      "The body asked.",
      "Government.",
      "He did withdraw.",
      "He made the statement.",
      "He made an apology.",
      "The body asked.",
      "He did withdraw.",
      "He made the statement.",
      "He made an apology.",
      "The governing body asked him to withdraw his statement or make an apology.",
      "asked.",
      "But Kamal confirmed his intention to step down.",
      "Kamal confirmed his intention to step down.",
      "But confirmed.",
      "Kamal confirmed --",
      "Kamal has the intention to step down.",
      "Kamal will step down.",
      "But confirmed.",
      "Kamal confirmed --",
      "Kamal had a plan.",
      "There is intent to step down.",
      "Kamal will step down.",
      "But Kamal confirmed his intention to step down.",
      "But..."
    ]
  },
  {
    "instance_id": "realsumm-54",
    "summary": "<t> Floyd Mayweather and Manny Pacquiao face off in Las Vegas on May 2 . </t> <t> Joe Calzaghe believes Mayweather 's unbeaten record is a burden . </t> <t> Despite that , the Welshman thinks Mayweather will beat his opponent . </t> <t> READ : Ricky Hatton gives his prediction to Jeff Powell ahead of the fight . </t> <t> READ : Floyd Mayweather vs Manny Pacquiao tickets FINALLY go on sale . </t>",
    "summary_trees": [
      "# ::snt  Floyd Mayweather and Manny Pacquiao face off in Las Vegas on May 2 . \n(f / face-off-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Floyd\"\n                  :op2 \"Mayweather\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Manny\"\n                  :op2 \"Pacquiao\"))\n      :location (c / city\n            :name (n3 / name\n                  :op1 \"Las\"\n                  :op2 \"Vegas\"))\n      :time (d / date-entity\n            :day 2\n            :month 5))",
      "# ::snt  Joe Calzaghe believes Mayweather 's unbeaten record is a burden . \n(b / believe-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Joe\"\n                  :op2 \"Calzaghe\"))\n      :ARG1 (b2 / burden-01\n            :ARG2 (r / record\n                  :poss (p2 / person\n                        :name (n2 / name\n                              :op1 \"Mayweather\"))\n                  :ARG1-of (b3 / beat-03\n                        :polarity -))))",
      "# ::snt  Despite that , the Welshman thinks Mayweather will beat his opponent . \n(t / think-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Walesman\"))\n      :ARG1 (b / beat-03\n            :ARG0 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Mayweather\"))\n            :ARG1 (p3 / person\n                  :ARG0-of (o / oppose-01\n                        :ARG1 p2)))\n      :concession (t2 / that))",
      "# ::snt  READ : Ricky Hatton gives his prediction to Jeff Powell ahead of the fight . \n(r / read-01\n      :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (p / predict-01\n            :ARG0 (p2 / person\n                  :name (n / name\n                        :op1 \"Ricky\"\n                        :op2 \"Hatton\"))\n            :ARG2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Jeff\"\n                        :op2 \"Powell\"))\n            :time (a / ahead\n                  :op1 (f / fight-01))))",
      "# ::snt  READ : Floyd Mayweather vs Manny Pacquiao tickets FINALLY go on sale . \n(r / read-01\n      :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (s / sell-01\n            :ARG1 (t / ticket\n                  :mod (o / oppose-01\n                        :ARG0 (p / person\n                              :name (n / name\n                                    :op1 \"Floyd\"\n                                    :op2 \"Mayweather\"))\n                        :ARG1 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Manny\"\n                                    :op2 \"Pacquiao\"))))\n            :time (f / final)))"
    ],
    "tree": [
      "(f / face-off-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Floyd\"\n                     :op2 \"Mayweather\")))",
      "(f / face-off-02\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Manny\"\n                       :op2 \"Pacquiao\")))",
      "(f / face-off-02\n   :location (c / city\n                :name (n3 / name\n                          :op1 \"Las\"\n                          :op2 \"Vegas\")))",
      "(f / face-off-02\n   :time (d / date-entity\n            :day 2\n            :month 5))",
      "(p / person\n   :name (n / name\n            :op1 \"Floyd\"\n            :op2 \"Mayweather\"))",
      "(p2 / person\n    :name (n2 / name\n              :op1 \"Manny\"\n              :op2 \"Pacquiao\"))",
      "(c / city\n   :name (n3 / name\n             :op1 \"Las\"\n             :op2 \"Vegas\"))",
      "(d / date-entity\n   :day 2\n   :month 5)",
      "(f / face-off-02\n   :ARG0 (p / person :name (n / name :op1 \"Floyd\" :op2 \"Mayweather\")))",
      "(f / face-off-02\n   :ARG0 (p / person :name (n / name :op1 \"Floyd\" :op2 \"Mayweather\")))",
      "(f / face-off-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Floyd\"\n                     :op2 \"Mayweather\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Manny\"\n                       :op2 \"Pacquiao\")))",
      "(f / face-off-02\n   :location (c / city\n                :name (n3 / name\n                          :op1 \"Las\"\n                          :op2 \"Vegas\"))\n   :time (d / date-entity\n            :day 2\n            :month 5))",
      "(b / believe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joe\"\n                     :op2 \"Calzaghe\")))",
      "(b / believe-01\n   :ARG1 (b2 / burden-01\n             :ARG2 (r / record\n                      :poss (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Mayweather\"))\n                      :ARG1-of (b3 / beat-03\n                                   :polarity -))))",
      "(p / person\n   :name (n / name\n            :op1 \"Joe\"\n            :op2 \"Calzaghe\"))",
      "(b2 / burden-01\n    :ARG2 (r / record\n             :poss (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Mayweather\"))\n             :ARG1-of (b3 / beat-03\n                          :polarity -)))",
      "(b / believe-01\n   :ARG0 (p / person :name (n / name :op1 \"Joe\" :op2 \"Calzaghe\")))",
      "(b2 / burden-01\n    :ARG2 (r / record))",
      "(b3 / beat-03\n    :polarity -)",
      "(b / believe-01\n   :ARG0 (p / person :name (n / name :op1 \"Joe\" :op2 \"Calzaghe\")))",
      "(b2 / burden-01\n    :ARG2 (r / record))",
      "(b3 / beat-03\n    :polarity -)",
      "(b / believe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Joe\"\n                     :op2 \"Calzaghe\"))\n   :ARG1 (b2 / burden-01\n             :ARG2 (r / record\n                      :poss (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Mayweather\"))\n                      :ARG1 (b3 / beat-03\n                                :polarity -))))",
      "(b / believe-01)",
      "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Walesman\")))",
      "(t / think-01\n   :ARG1 (b / beat-03\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Mayweather\"))\n            :ARG1 (p3 / person\n                      :ARG0-of (o / oppose-01\n                                  :ARG1 p2))))",
      "(t / think-01\n   :concession (t2 / that))",
      "(p / person\n   :name (n / name\n            :op1 \"Walesman\"))",
      "(b / beat-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mayweather\"))\n   :ARG1 (p3 / person\n             :ARG0-of (o / oppose-01\n                         :ARG1 p2)))",
      "(t / think-01\n   :ARG0 (p / person :name (n / name :op1 \"Walesman\")))",
      "(b / beat-03\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Mayweather\")))",
      "(o / oppose-01\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Mayweather\")))",
      "(t / think-01\n   :ARG0 (p / person :name (n / name :op1 \"Walesman\")))",
      "(b / beat-03\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Mayweather\")))",
      "(o / oppose-01\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Mayweather\")))",
      "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Walesman\"))\n   :ARG1 (b / beat-03\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Mayweather\"))\n            :ARG1 (p3 / person\n                      :ARG0 (o / oppose-01\n                               :ARG1 p2)))\n   :concession (t2 / that))",
      "(t / think-01\n   :concession (t2 / that))",
      "(r / read-01\n   :mode imperative)",
      "(r / read-01\n   :ARG0 (y / you))",
      "(r / read-01\n   :ARG1 (p / predict-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Ricky\"\n                               :op2 \"Hatton\"))\n            :ARG2 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Jeff\"\n                                :op2 \"Powell\"))\n            :time (a / ahead\n                     :op1 (f / fight-01))))",
      "(p / predict-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Ricky\"\n                      :op2 \"Hatton\"))\n   :ARG2 (p3 / person\n             :name (n2 / name\n                       :op1 \"Jeff\"\n                       :op2 \"Powell\"))\n   :time (a / ahead\n            :op1 (f / fight-01)))",
      "(r / read-01\n   :mode imperative\n   :ARG0 (y / you))",
      "(p / predict-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Ricky\" :op2 \"Hatton\")))",
      "(f / fight-01)",
      "(r / read-01\n   :mode imperative)",
      "(r / read-01\n   :ARG0 (y / you))",
      "(p / predict-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Ricky\" :op2 \"Hatton\")))",
      "(r / read-01\n   :mode imperative\n   :ARG0 (y / you)\n   :ARG1 (p / predict-01\n            :ARG0 (p2 / person\n                      :name (n / name\n                               :op1 \"Ricky\"\n                               :op2 \"Hatton\"))\n            :ARG2 (p3 / person\n                      :name (n2 / name\n                                :op1 \"Jeff\"\n                                :op2 \"Powell\"))))",
      "(r / read-01\n   :mode imperative)",
      "(r / read-01\n   :mode imperative)",
      "(r / read-01\n   :ARG0 (y / you))",
      "(r / read-01\n   :ARG1 (s / sell-01\n            :ARG1 (t / ticket\n                     :mod (o / oppose-01\n                             :ARG0 (p / person\n                                      :name (n / name\n                                               :op1 \"Floyd\"\n                                               :op2 \"Mayweather\"))\n                             :ARG1 (p2 / person\n                                       :name (n2 / name\n                                                 :op1 \"Manny\"\n                                                 :op2 \"Pacquiao\"))))\n            :time (f / final)))",
      "(s / sell-01\n   :ARG1 (t / ticket\n            :mod (o / oppose-01\n                    :ARG0 (p / person\n                             :name (n / name\n                                      :op1 \"Floyd\"\n                                      :op2 \"Mayweather\"))\n                    :ARG1 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Manny\"\n                                        :op2 \"Pacquiao\"))))\n   :time (f / final))",
      "(r / read-01\n   :mode imperative\n   :ARG0 (y / you))",
      "(s / sell-01\n   :ARG1 (t / ticket))",
      "(o / oppose-01\n   :ARG0 (p / person :name (n / name :op1 \"Floyd\" :op2 \"Mayweather\")))",
      "(r / read-01\n   :mode imperative)",
      "(r / read-01\n   :ARG0 (y / you))",
      "(s / sell-01\n   :ARG1 (t / ticket))",
      "(o / oppose-01\n   :ARG0 (p / person :name (n / name :op1 \"Floyd\" :op2 \"Mayweather\")))",
      "(r / read-01\n   :mode imperative\n   :ARG0 (y / you)\n   :ARG1 (s / sell-01\n            :ARG1 (t / ticket\n                     :mod (o / oppose-01\n                             :ARG0 (p / person\n                                      :name (n / name\n                                               :op1 \"Floyd\"\n                                               :op2 \"Mayweather\"))\n                             :ARG1 (p2 / person\n                                       :name (n2 / name\n                                                 :op1 \"Manny\"\n                                                 :op2 \"Pacquiao\"))))))",
      "(r / read-01\n   :mode imperative)"
    ],
    "smus": [
      "Floyd Mayweather and...",
      "Manny Pacquiao and the others face off.",
      "Face off in Las Vegas.",
      "Face off on May 2.",
      "Floyd Mayweather",
      "Manny Pacquiao",
      "Las Vegas",
      "May 2",
      "Floyd Mayweather and...",
      "Floyd Mayweather and...",
      "Floyd Mayweather and Manny Pacquiao face off.",
      "On May 2, face off in Las Vegas.",
      "Joe Calzaghe believes --",
      "Mayweather believes the burden is on his unbeaten record.",
      "Joe Calzaghe",
      "The burden is on Mayweather's unbeaten record.",
      "Joe Calzaghe believes --",
      "The record is a burden.",
      "Not beat.",
      "Joe Calzaghe believes --",
      "The record is a burden.",
      "Not beat.",
      "Joe Calzaghe believes Mayweather's unbeaten record is a burden.",
      "Believes.",
      "Walesman thinks.",
      "Mayweather thinks he will beat his opponent.",
      "That thinks.",
      "Walesman",
      "Mayweather will beat his opponent.",
      "Walesman thinks.",
      "Mayweather will beat.",
      "Anti-Mayweather.",
      "Walesman thinks.",
      "Mayweather will beat.",
      "Anti-Mayweather.",
      "That said, Walesman thinks Mayweather will beat his opponents.",
      "That thinks.",
      "Read.",
      "You have read.",
      "Ricky Hatton's prediction for Jeff Powell ahead of the fight has been read as \"...",
      "Ricky Hatton predicts Jeff Powell ahead of the fight.",
      "Read.",
      "Ricky Hatton's prediction:",
      "There was a fight.",
      "Read.",
      "You have read.",
      "Ricky Hatton's prediction:",
      "Read Ricky Hatton's prediction about Jeff Powell.",
      "Read.",
      "Read.",
      "You have read.",
      "The tickets against Floyd Mayweather and Manny Pacquiao have finally been sold, it was read.",
      "The Floyd Mayweather v. Manny Pacquiao tickets were finally sold.",
      "Read.",
      "Tickets are on sale.",
      "Floyd Mayweather is against.",
      "Read.",
      "You have read.",
      "Tickets are on sale.",
      "Floyd Mayweather is against.",
      "Read the sale of Floyd Mayweather v. Manny Pacquiao tickets.",
      "Read."
    ]
  },
  {
    "instance_id": "realsumm-55",
    "summary": "<t> Winchester Council in Hampshire claimed annual clean - up hit by new rules . </t> <t> But the Health and Safety Executive denied tightening rules and added that councils were \u2018 over - interpreting \u2019 legislation . </t> <t> Poet Laureate Sir Andrew Motion accused town hall bosses and Highways Agency of ruining the countryside by failing to remove rubbish . </t>",
    "summary_trees": [
      "# ::snt  Winchester Council in Hampshire claimed annual clean - up hit by new rules . \n(c / claim-01\n      :ARG0 (c2 / council\n            :mod (c3 / city\n                  :name (n / name\n                        :op1 \"Winchester\")\n                  :location (c4 / county\n                        :name (n2 / name\n                              :op1 \"Hampshire\"))))\n      :ARG1 (c5 / clean-up-02\n            :ARG1-of (h / hit-01\n                  :ARG0 (r / rule\n                        :ARG1-of (n3 / new-01)))\n            :frequency (r2 / rate-entity-91\n                  :ARG3 (t / temporal-quantity\n                        :quant 1\n                        :unit (y / year)))))",
      "# ::snt  But the Health and Safety Executive denied tightening rules and added that councils were \u2018 over - interpreting \u2019 legislation . \n(c / contrast-01\n      :ARG2 (a / and\n            :op1 (d / deny-01\n                  :ARG0 (g / government-organization\n                        :name (n / name\n                              :op1 \"Health\"\n                              :op2 \"and\"\n                              :op3 \"Safety\"\n                              :op4 \"Executive\"))\n                  :ARG1 (t / tighten-01\n                        :ARG1 (r / rule)))\n            :op2 (a2 / add-01\n                  :ARG0 g\n                  :ARG1 (ii / interpret-01\n                        :ARG0 (c2 / council)\n                        :ARG1 (l / legislate-01)\n                        :ARG1-of (o / over-03)))))",
      "# ::snt  Poet Laureate Sir Andrew Motion accused town hall bosses and Highways Agency of ruining the countryside by failing to remove rubbish . \n(a / accuse-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sir\"\n                  :op2 \"Andrew\"\n                  :op3 \"Motion\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (l / laureate\n                        :mod (p2 / poet))))\n      :ARG1 (a2 / and\n            :op1 (p3 / person\n                  :ARG0-of h\n                  :ARG1 (h2 / hall\n                        :mod (t / town))\n                  :ARG2 (b / boss)))\n      :op2 (g / government-organization\n            :name (n2 / name\n                  :op1 \"Highways\"\n                  :op2 \"Agency\"))\n      :ARG2 (r / ruin-01\n            :ARG0 a2\n            :ARG1 (c / countryside)\n            :ARG3 (f / fail-01\n                  :ARG0 a2\n                  :ARG1 (r2 / remove-01\n                        :ARG0 a2\n                        :ARG1 (r3 / rubbish)))))"
    ],
    "tree": [
      "(c / claim-01\n   :ARG0 (c2 / council\n             :mod (c3 / city\n                      :name (n / name\n                               :op1 \"Winchester\")\n                      :location (c4 / county\n                                    :name (n2 / name\n                                              :op1 \"Hampshire\")))))",
      "(c / claim-01\n   :ARG1 (c5 / clean-up-02\n             :ARG1-of (h / hit-01\n                         :ARG0 (r / rule\n                                  :ARG1-of (n3 / new-01)))\n             :frequency (r2 / rate-entity-91\n                            :ARG3 (t / temporal-quantity\n                                     :quant 1\n                                     :unit (y / year)))))",
      "(c2 / council\n    :mod (c3 / city\n             :name (n / name\n                      :op1 \"Winchester\")\n             :location (c4 / county\n                           :name (n2 / name\n                                     :op1 \"Hampshire\"))))",
      "(c5 / clean-up-02\n    :ARG1-of (h / hit-01\n                :ARG0 (r / rule\n                         :ARG1-of (n3 / new-01)))\n    :frequency (r2 / rate-entity-91\n                   :ARG3 (t / temporal-quantity\n                            :quant 1\n                            :unit (y / year))))",
      "(c / claim-01\n   :ARG0 (c2 / council))",
      "(c5 / clean-up-02)",
      "(h / hit-01\n   :ARG0 (r / rule))",
      "(n3 / new-01)",
      "(c / claim-01\n   :ARG0 (c2 / council))",
      "(h / hit-01\n   :ARG0 (r / rule))",
      "(c / claim-01\n   :ARG0 (c2 / council\n             :mod (c3 / city\n                      :name (n / name\n                               :op1 \"Winchester\")))\n   :ARG1 (c5 / clean-up-02\n             :ARG1 (h / hit-01\n                      :ARG0 (r / rule\n                               :ARG1 (n3 / new-01)))\n             :frequency (r2 / rate-entity-91\n                            :ARG3 (t / temporal-quantity\n                                     :quant 1\n                                     :unit (y / year)))))",
      "(c / claim-01)",
      "(c / contrast-01\n   :ARG2 (a / and\n            :op1 (d / deny-01\n                    :ARG0 (g / government-organization\n                             :name (n / name\n                                      :op1 \"Health\"\n                                      :op2 \"and\"\n                                      :op3 \"Safety\"\n                                      :op4 \"Executive\"))\n                    :ARG1 (t / tighten-01\n                             :ARG1 (r / rule)))\n            :op2 (a2 / add-01\n                     :ARG0 g\n                     :ARG1 (ii / interpret-01\n                               :ARG0 (c2 / council)\n                               :ARG1 (l / legislate-01)\n                               :ARG1-of (o / over-03)))))",
      "(a / and\n   :op1 (d / deny-01\n           :ARG0 (g / government-organization\n                    :name (n / name\n                             :op1 \"Health\"\n                             :op2 \"and\"\n                             :op3 \"Safety\"\n                             :op4 \"Executive\"))\n           :ARG1 (t / tighten-01\n                    :ARG1 (r / rule)))\n   :op2 (a2 / add-01\n            :ARG0 g\n            :ARG1 (ii / interpret-01\n                      :ARG0 (c2 / council)\n                      :ARG1 (l / legislate-01)\n                      :ARG1-of (o / over-03))))",
      "(c / contrast-01\n   :ARG2 (a / and))",
      "(d / deny-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"Health\" :op2 \"and\" :op3 \"Safety\" :op4 \"Executive\")))",
      "(t / tighten-01\n   :ARG1 (r / rule))",
      "(a2 / add-01\n    :ARG0 (g / government-organization :name (n / name :op1 \"Health\" :op2 \"and\" :op3 \"Safety\" :op4 \"Executive\"))\n    :ARG1 (ii / interpret-01))",
      "(ii / interpret-01\n    :ARG0 (c2 / council))",
      "(l / legislate-01)",
      "(o / over-03)",
      "(c / contrast-01\n   :ARG2 (a / and))",
      "(d / deny-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"Health\" :op2 \"and\" :op3 \"Safety\" :op4 \"Executive\")))",
      "(t / tighten-01\n   :ARG1 (r / rule))",
      "(a2 / add-01\n    :ARG0 (g / government-organization :name (n / name :op1 \"Health\" :op2 \"and\" :op3 \"Safety\" :op4 \"Executive\")))",
      "(a2 / add-01\n    :ARG1 (ii / interpret-01))",
      "(ii / interpret-01\n    :ARG0 (c2 / council))",
      "(c / contrast-01\n   :ARG2 (d / deny-01\n            :ARG0 (g / government-organization\n                     :name (n / name\n                              :op1 \"Health\"\n                              :op2 \"and\"\n                              :op3 \"Safety\"\n                              :op4 \"Executive\"))\n            :ARG1 (t / tighten-01\n                     :ARG1 (r / rule))))",
      "(c / contrast-01\n   :ARG2 (a2 / add-01\n             :ARG0 (g / government-organization :name (n / name :op1 \"Health\" :op2 \"and\" :op3 \"Safety\" :op4 \"Executive\"))\n             :ARG1 (ii / interpret-01\n                       :ARG0 (c2 / council)\n                       :ARG1 (l / legislate-01)\n                       :ARG1-of (o / over-03))))",
      "(c / contrast-01\n   :ARG2 (a / and\n            :op1 (d / deny-01\n                    :ARG0 (g / government-organization\n                             :name (n / name\n                                      :op1 \"Health\"\n                                      :op2 \"and\"\n                                      :op3 \"Safety\"\n                                      :op4 \"Executive\"))\n                    :ARG1 (t / tighten-01\n                             :ARG1 (r / rule)))\n            :op2 (a2 / add-01\n                     :ARG0 g\n                     :ARG1 (ii / interpret-01\n                               :ARG0 (c2 / council)\n                               :ARG1 (l / legislate-01)\n                               :ARG1 (o / over-03)))))",
      "(c / contrast-01)",
      "(a / accuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Andrew\"\n                     :op3 \"Motion\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG2 (l / laureate\n                                 :mod (p2 / poet)))))",
      "(a / accuse-01\n   :ARG1 (a2 / and\n             :op1 (p3 / person\n                      :ARG0-of (h / have-org-role-91)\n                      :ARG1 (h2 / hall\n                                :mod (t / town))\n                      :ARG2 (b / boss))))",
      "(a / accuse-01\n   :op2 (g / government-organization\n           :name (n2 / name\n                     :op1 \"Highways\"\n                     :op2 \"Agency\")))",
      "(a / accuse-01\n   :ARG2 (r / ruin-01\n            :ARG0 (a2 / and)\n            :ARG1 (c / countryside)\n            :ARG3 (f / fail-01\n                     :ARG0 a2\n                     :ARG1 (r2 / remove-01\n                               :ARG0 a2\n                               :ARG1 (r3 / rubbish)))))",
      "(p / person\n   :name (n / name\n            :op1 \"Sir\"\n            :op2 \"Andrew\"\n            :op3 \"Motion\")\n   :ARG0-of (h / have-org-role-91\n               :ARG2 (l / laureate\n                        :mod (p2 / poet))))",
      "(a2 / and\n    :op1 (p3 / person\n             :ARG0-of (h / have-org-role-91)\n             :ARG1 (h2 / hall\n                       :mod (t / town))\n             :ARG2 (b / boss)))",
      "(g / government-organization\n   :name (n2 / name\n             :op1 \"Highways\"\n             :op2 \"Agency\"))",
      "(r / ruin-01\n   :ARG0 (a2 / and)\n   :ARG1 (c / countryside)\n   :ARG3 (f / fail-01\n            :ARG0 a2\n            :ARG1 (r2 / remove-01\n                      :ARG0 a2\n                      :ARG1 (r3 / rubbish))))",
      "(a / accuse-01\n   :ARG0 (p / person :name (n / name :op1 \"Sir\" :op2 \"Andrew\" :op3 \"Motion\"))))",
      "(r / ruin-01\n   :ARG0 (a2 / and)\n   :ARG1 (c / countryside))",
      "(f / fail-01\n   :ARG0 (a2 / and)\n   :ARG1 (r2 / remove-01))",
      "(r2 / remove-01\n    :ARG0 (a2 / and)\n    :ARG1 (r3 / rubbish))",
      "(a / accuse-01\n   :ARG0 (p / person :name (n / name :op1 \"Sir\" :op2 \"Andrew\" :op3 \"Motion\"))))",
      "(r / ruin-01\n   :ARG0 (a2 / and))",
      "(r / ruin-01\n   :ARG1 (c / countryside))",
      "(f / fail-01\n   :ARG0 (a2 / and))",
      "(f / fail-01\n   :ARG1 (r2 / remove-01))",
      "(r2 / remove-01\n    :ARG0 (a2 / and))",
      "(r2 / remove-01\n    :ARG1 (r3 / rubbish))",
      "(a / accuse-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Andrew\"\n                     :op3 \"Motion\")\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (l / laureate\n                              :mod (p2 / poet))))\n   :ARG1 (a2 / and\n             :op1 (p3 / person\n                      :ARG0-of h\n                      :ARG1 (h2 / hall\n                                :mod (t / town))\n                      :ARG2 (b / boss)))\n   :op2 (g / government-organization\n           :name (n2 / name\n                     :op1 \"Highways\"\n                     :op2 \"Agency\"))\n   :ARG2 (r / ruin-01\n            :ARG0 a2\n            :ARG1 (c / countryside)\n            :ARG3 (f / fail-01\n                     :ARG0 a2\n                     :ARG1 (r2 / remove-01\n                               :ARG0 a2\n                               :ARG1 (r3 / rubbish)))))",
      "(a / accuse-01\n   :op2 (g / government-organization\n           :name (n2 / name\n                     :op1 \"Highways\"\n                     :op2 \"Agency\")))"
    ],
    "smus": [
      "Winchester, Hampshire Council claimed.",
      "The claim was made that the clean-up was hit by the new rules every year.",
      "b>Winchester Council/b> (Hampshire)",
      "The clean up is hit by new rules every year.",
      "The Council claimed.",
      "Clean up.",
      "The rules have hit.",
      "New.",
      "The Council claimed.",
      "The rules have hit.",
      "The Winchester Council claimed that the new rules had been \"wiped out\" every year.",
      "claimed.",
      "But the Health and Safety Executive denied tightening the rules and added that the councils were overinterpreting the legislation.",
      "The Health and Safety Executive denied tightening the rules and added that the councils were overinterpreting the legislation.",
      "But...",
      "The Health and Safety Executive denied.",
      "tightening the rules.",
      "The Health and Safety Executive added that the interpretation was \"...",
      "Councils are interpreting.",
      "Legislation.",
      "over.",
      "But...",
      "The Health and Safety Executive denied.",
      "tightening the rules.",
      "The Health and Safety Executive added --",
      "Added the interpreting.",
      "Councils are interpreting.",
      "But the Health and Safety Executive denied tightening the rules.",
      "But the Health and Safety Executive added that the councils were overinterpreting the legislation.",
      "But the Health and Safety Executive denied tightening the rules and added that the councils were interpreting the legislation over.",
      "But...",
      "Poetry laureate Sir Andrew Motion accused.",
      "The bosses of the town hall were accused.",
      "accused the Highway Agency of...",
      "The accused accused the countryside of 'ruining' by failing to remove rubbish.",
      "Sir Andrew Motion, poet laureate",
      "And the bosses of the town hall.",
      "The Highways Agency",
      "The countryside is ruined by the countryside failing to remove rubbish.",
      "Sir Andrew Motion accused.",
      "The countryside is being ruined by the 'people' and 'people' of the countryside.",
      "The removal and removal is failing.",
      "and remove the rubbish.",
      "Sir Andrew Motion accused.",
      "The ands are ruining.",
      "Ruining the countryside.",
      "Both are failing.",
      "FAILING to remove",
      "Remove and...",
      "Remove the rubbish.",
      "Poetry laureate Sir Andrew Motion accused town hall bosses and the Highways Agency of ruining the countryside by failing to remove rubbish.",
      "accused the Highway Agency of..."
    ]
  },
  {
    "instance_id": "realsumm-56",
    "summary": "<t> Simon Wood , 38 , from Oldham won Masterchef last Friday . </t> <t> Father - of - four got cooking skills by feeding culinary creations to his kids . </t> <t> The award - winning chef says one of his favourite meals is a plain omelette . </t>",
    "summary_trees": [
      "# ::snt  Simon Wood , 38 , from Oldham won Masterchef last Friday . \n(w / win-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Simon\"\n                  :op2 \"Wood\")\n            :age (t / temporal-quantity\n                  :quant 38\n                  :unit (y / year))\n            :source (c / city\n                  :name (n2 / name\n                        :op1 \"Oldham\")))\n      :ARG1 (a / award\n            :name (n3 / name\n                  :op1 \"Masterchef\"))\n      :time (d / date-entity\n            :weekday (f / friday)\n            :mod (l / last)))",
      "# ::snt  Father - of - four got cooking skills by feeding culinary creations to his kids . \n(g / get-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :quant 4)\n                  :ARG2 (f / father)))\n      :ARG1 (s / skill\n            :topic (c / cook-01))\n      :manner (f2 / feed-01\n            :ARG0 p\n            :ARG1 (t / thing\n                  :ARG1-of (c2 / create-01\n                        :mod (c3 / culinary)))\n            :ARG2 (p3 / person\n                  :ARG0-of (h2 / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (k / kid)))))",
      "# ::snt  The award - winning chef says one of his favourite meals is a plain omelette . \n(s / say-01\n      :ARG0 (c / chef\n            :ARG0-of (w / win-01\n                  :ARG1 (a / award)))\n      :ARG1 (o / omelette\n            :mod (p / plain)\n            :domain (m / meal\n                  :ARG1-of (ii / include-91\n                        :ARG2 (m2 / meal\n                              :ARG1-of (f / favor-01\n                                    :ARG0 c))))))"
    ],
    "tree": [
      "(w / win-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simon\"\n                     :op2 \"Wood\")\n            :age (t / temporal-quantity\n                    :quant 38\n                    :unit (y / year))\n            :source (c / city\n                       :name (n2 / name\n                                 :op1 \"Oldham\"))))",
      "(w / win-01\n   :ARG1 (a / award\n            :name (n3 / name\n                      :op1 \"Masterchef\")))",
      "(w / win-01\n   :time (d / date-entity\n            :weekday (f / friday)\n            :mod (l / last)))",
      "(p / person\n   :name (n / name\n            :op1 \"Simon\"\n            :op2 \"Wood\")\n   :age (t / temporal-quantity\n           :quant 38\n           :unit (y / year))\n   :source (c / city\n              :name (n2 / name\n                        :op1 \"Oldham\")))",
      "(a / award\n   :name (n3 / name\n             :op1 \"Masterchef\"))",
      "(d / date-entity\n   :weekday (f / friday)\n   :mod (l / last))",
      "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"Simon\" :op2 \"Wood\"))))",
      "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"Simon\" :op2 \"Wood\"))))",
      "(w / win-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Simon\"\n                     :op2 \"Wood\")\n            :age (t / temporal-quantity\n                    :quant 38\n                    :unit (y / year)))\n   :ARG1 (a / award\n            :name (n3 / name\n                      :op1 \"Masterchef\")))",
      "(w / win-01\n   :time (d / date-entity\n            :weekday (f / friday)\n            :mod (l / last)))",
      "(g / get-01\n   :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                        :ARG1 (p2 / person\n                                  :quant 4)\n                        :ARG2 (f / father))))",
      "(g / get-01\n   :ARG1 (s / skill\n            :topic (c / cook-01)))",
      "(g / get-01\n   :manner (f2 / feed-01\n               :ARG0 (p / person)\n               :ARG1 (t / thing\n                        :ARG1-of (c2 / create-01\n                                     :mod (c3 / culinary)))\n               :ARG2 (p3 / person\n                         :ARG0-of (h2 / have-rel-role-91\n                                      :ARG1 p\n                                      :ARG2 (k / kid)))))",
      "(p / person\n   :ARG0-of (h / have-rel-role-91\n               :ARG1 (p2 / person\n                         :quant 4)\n               :ARG2 (f / father)))",
      "(s / skill\n   :topic (c / cook-01))",
      "(f2 / feed-01\n    :ARG0 (p / person)\n    :ARG1 (t / thing\n             :ARG1-of (c2 / create-01\n                          :mod (c3 / culinary)))\n    :ARG2 (p3 / person\n              :ARG0-of (h2 / have-rel-role-91\n                           :ARG1 p\n                           :ARG2 (k / kid))))",
      "(g / get-01\n   :ARG0 (p / person))",
      "(c / cook-01)",
      "(f2 / feed-01\n    :ARG0 (p / person)\n    :ARG1 (t / thing))",
      "(c2 / create-01\n    :mod (c3 / culinary))",
      "(g / get-01\n   :ARG0 (p / person))",
      "(f2 / feed-01\n    :ARG0 (p / person))",
      "(f2 / feed-01\n    :ARG1 (t / thing))",
      "(c2 / create-01\n    :mod (c3 / culinary))",
      "(g / get-01\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :quant 4)\n                     :ARG2 (f / father)))\n   :ARG1 (s / skill\n            :topic (c / cook-01))\n   :manner (f2 / feed-01\n               :ARG0 p\n               :ARG1 (t / thing\n                        :ARG1 (c2 / create-01\n                                  :mod (c3 / culinary)))\n               :ARG2 (p3 / person\n                         :ARG0 (h2 / have-rel-role-91\n                                   :ARG1 p\n                                   :ARG2 (k / kid)))))",
      "(g / get-01\n   :manner (f2 / feed-01))",
      "(s / say-01\n   :ARG0 (c / chef\n            :ARG0-of (w / win-01\n                        :ARG1 (a / award))))",
      "(s / say-01\n   :ARG1 (o / omelette\n            :mod (p / plain)\n            :domain (m / meal\n                       :ARG1-of (ii / include-91\n                                    :ARG2 (m2 / meal\n                                              :ARG1-of (f / favor-01\n                                                          :ARG0 (c / chef)))))))",
      "(c / chef\n   :ARG0-of (w / win-01\n               :ARG1 (a / award)))",
      "(o / omelette\n   :mod (p / plain)\n   :domain (m / meal\n              :ARG1-of (ii / include-91\n                           :ARG2 (m2 / meal\n                                     :ARG1-of (f / favor-01\n                                                 :ARG0 (c / chef))))))",
      "(s / say-01\n   :ARG0 (c / chef))",
      "(w / win-01\n   :ARG1 (a / award))",
      "(f / favor-01\n   :ARG0 (c / chef))",
      "(s / say-01\n   :ARG0 (c / chef))",
      "(w / win-01\n   :ARG1 (a / award))",
      "(f / favor-01\n   :ARG0 (c / chef))",
      "(s / say-01\n   :ARG0 (c / chef\n            :ARG0 (w / win-01\n                     :ARG1 (a / award)))\n   :ARG1 (o / omelette\n            :mod (p / plain)\n            :domain (m / meal\n                       :ARG1 (ii / include-91\n                                 :ARG2 (m2 / meal\n                                           :ARG1 (f / favor-01\n                                                    :ARG0 c))))))",
      "(s / say-01)"
    ],
    "smus": [
      "Simon Wood, 38, of Oldham won.",
      "Masterchef won.",
      "The last Friday, the winner was",
      "Simon Wood, 38, of Oldham",
      "Masterchef.",
      "Last Friday.",
      "Simon Wood won.",
      "Simon Wood won.",
      "Simon Wood, 38, won the Masterchef award.",
      "The last Friday, the winner was",
      "The Father got 4 people.",
      "got cooking skills.",
      "People got their culinary creations from their kids.",
      "The Father of 4",
      "Cooking skills",
      "People feeding their kids culinary creations.",
      "People got it.",
      "Cooking.",
      "People are feeding things.",
      "culinary creations",
      "People got it.",
      "People are feeding.",
      "feeding things.",
      "culinary creations",
      "The 4 Fathers got cooking skills by feeding their kids culinary creations.",
      "Got by feeding.",
      "\"The chef, who won the award, says:",
      "\"One of the chef's favorite meals is plain omelette,\" says the chef.",
      "the chef won an award",
      "One of the chef's favorite meals is plain omelette.",
      "\"The chef says...",
      "winning the award",
      "The chef is a favorit.",
      "\"The chef says...",
      "winning the award",
      "The chef is a favorit.",
      "\"Meals are plain omelettes, one of my favorite,\" says the award-winner chef.",
      "says."
    ]
  },
  {
    "instance_id": "realsumm-57",
    "summary": "<t> Swansea 's Gerhard Tremmel in goal behind the Free Agents ' 4 - 4 - 2 . </t> <t> Glen Johnson , Kolo Toure , Ron Vlaar and Luke Garbutt at the back . </t> <t> James Milner , Mikel Arteta , Tom Cleverley and Jonas Gutierrez in midfield . </t> <t> Burnley 's Danny Ings and Manchester United 's James Wilson up front . </t>",
    "summary_trees": [
      "# ::snt  Swansea 's Gerhard Tremmel in goal behind the Free Agents ' 4 - 4 - 2 . \n(b / be-located-at-91\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Gerhard\"\n                  :op2 \"Tremmel\")\n            :poss (t / team\n                  :name (n2 / name\n                        :op1 \"Swansea\")))\n      :ARG2 (g / goal)\n      :location (b2 / behind\n            :op1 (t2 / team\n                  :ARG1-of (f / free-04)\n                  :quant (s / score-entity\n                        :op1 4\n                        :op2 4\n                        :op3 2))))",
      "# ::snt  Glen Johnson , Kolo Toure , Ron Vlaar and Luke Garbutt at the back . \n(b / be-located-at-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Glen\"\n                        :op2 \"Johnson\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Kolo\"\n                        :op2 \"Toure\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Ron\"\n                        :op2 \"Vlaar\"))\n            :op4 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Luke\"\n                        :op2 \"Garbutt\")))\n      :ARG2 (b2 / back))",
      "# ::snt  James Milner , Mikel Arteta , Tom Cleverley and Jonas Gutierrez in midfield . \n(b / be-located-at-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"James\"\n                        :op2 \"Milner\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Mikel\"\n                        :op2 \"Arteta\"))\n            :op3 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Tom\"\n                        :op2 \"Cleverley\"))\n            :op4 (p4 / person\n                  :name (n4 / name\n                        :op1 \"Jonas\"\n                        :op2 \"Gutierrez\")))\n      :ARG2 (m / midfield))",
      "# ::snt  Burnley 's Danny Ings and Manchester United 's James Wilson up front . \n(a / and\n      :op1 (p / person\n            :name (n / name\n                  :op1 \"Danny\"\n                  :op2 \"Ingers\")\n            :poss (t / team\n                  :name (n2 / name\n                        :op1 \"Burnley\")))\n      :op2 (p2 / person\n            :name (n3 / name\n                  :op1 \"James\"\n                  :op2 \"Wilson\")\n            :poss (t2 / team\n                  :name (n4 / name\n                        :op1 \"Manchester\"\n                        :op2 \"United\")))\n      :location (u / up-front))"
    ],
    "tree": [
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Gerhard\"\n                     :op2 \"Tremmel\")\n            :poss (t / team\n                     :name (n2 / name\n                               :op1 \"Swansea\"))))",
      "(b / be-located-at-91\n   :ARG2 (g / goal))",
      "(b / be-located-at-91\n   :location (b2 / behind\n                 :op1 (t2 / team\n                          :ARG1-of (f / free-04)\n                          :quant (s / score-entity\n                                    :op1 4\n                                    :op2 4\n                                    :op3 2))))",
      "(p / person\n   :name (n / name\n            :op1 \"Gerhard\"\n            :op2 \"Tremmel\")\n   :poss (t / team\n            :name (n2 / name\n                      :op1 \"Swansea\")))",
      "(b2 / behind\n    :op1 (t2 / team\n             :ARG1-of (f / free-04)\n             :quant (s / score-entity\n                       :op1 4\n                       :op2 4\n                       :op3 2)))",
      "(f / free-04)",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Gerhard\"\n                     :op2 \"Tremmel\")\n            :poss (t / team\n                     :name (n2 / name\n                               :op1 \"Swansea\")))\n   :ARG2 (g / goal))",
      "(b / be-located-at-91\n   :location (b2 / behind\n                 :op1 (t2 / team\n                          :quant (s / score-entity\n                                    :op1 4\n                                    :op2 4\n                                    :op3 2))))",
      "(b / be-located-at-91\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Glen\"\n                             :op2 \"Johnson\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kolo\"\n                               :op2 \"Toure\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Ron\"\n                               :op2 \"Vlaar\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Luke\"\n                               :op2 \"Garbutt\"))))",
      "(b / be-located-at-91\n   :ARG2 (b2 / back))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Glen\"\n                    :op2 \"Johnson\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Kolo\"\n                      :op2 \"Toure\"))\n   :op3 (p3 / person\n            :name (n3 / name\n                      :op1 \"Ron\"\n                      :op2 \"Vlaar\"))\n   :op4 (p4 / person\n            :name (n4 / name\n                      :op1 \"Luke\"\n                      :op2 \"Garbutt\")))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Glen\"\n                     :op2 \"Johnson\"))\n   :ARG2 (b2 / back))",
      "(b / be-located-at-91\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Kolo\"\n                       :op2 \"Toure\"))\n   :ARG2 (b2 / back))",
      "(b / be-located-at-91\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Ron\"\n                       :op2 \"Vlaar\"))\n   :ARG2 (b2 / back))",
      "(b / be-located-at-91\n   :ARG1 (p4 / person\n             :name (n4 / name\n                       :op1 \"Luke\"\n                       :op2 \"Garbutt\"))\n   :ARG2 (b2 / back)\n   :ARG2 b2)",
      "(b / be-located-at-91\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Glen\"\n                             :op2 \"Johnson\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Kolo\"\n                               :op2 \"Toure\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Ron\"\n                               :op2 \"Vlaar\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Luke\"\n                               :op2 \"Garbutt\")))\n   :ARG2 (b2 / back))",
      "(b / be-located-at-91)",
      "(b / be-located-at-91\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"James\"\n                             :op2 \"Milner\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Mikel\"\n                               :op2 \"Arteta\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Tom\"\n                               :op2 \"Cleverley\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Jonas\"\n                               :op2 \"Gutierrez\"))))",
      "(b / be-located-at-91\n   :ARG2 (m / midfield))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"James\"\n                    :op2 \"Milner\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Mikel\"\n                      :op2 \"Arteta\"))\n   :op3 (p3 / person\n            :name (n3 / name\n                      :op1 \"Tom\"\n                      :op2 \"Cleverley\"))\n   :op4 (p4 / person\n            :name (n4 / name\n                      :op1 \"Jonas\"\n                      :op2 \"Gutierrez\")))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"James\"\n                     :op2 \"Milner\"))\n   :ARG2 (m / midfield))",
      "(b / be-located-at-91\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Mikel\"\n                       :op2 \"Arteta\"))\n   :ARG2 (m / midfield))",
      "(b / be-located-at-91\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Tom\"\n                       :op2 \"Cleverley\"))\n   :ARG2 (m / midfield))",
      "(b / be-located-at-91\n   :ARG1 (p4 / person\n             :name (n4 / name\n                       :op1 \"Jonas\"\n                       :op2 \"Gutierrez\"))\n   :ARG2 (m / midfield)\n   :ARG2 m)",
      "(b / be-located-at-91\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"James\"\n                             :op2 \"Milner\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Mikel\"\n                               :op2 \"Arteta\"))\n            :op3 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Tom\"\n                               :op2 \"Cleverley\"))\n            :op4 (p4 / person\n                     :name (n4 / name\n                               :op1 \"Jonas\"\n                               :op2 \"Gutierrez\")))\n   :ARG2 (m / midfield))",
      "(b / be-located-at-91)",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Danny\"\n                    :op2 \"Ingers\")\n           :poss (t / team\n                    :name (n2 / name\n                              :op1 \"Burnley\"))))",
      "(a / and\n   :op2 (p2 / person\n            :name (n3 / name\n                      :op1 \"James\"\n                      :op2 \"Wilson\")\n            :poss (t2 / team\n                      :name (n4 / name\n                                :op1 \"Manchester\"\n                                :op2 \"United\"))))",
      "(a / and\n   :location (u / up-front))",
      "(p / person\n   :name (n / name\n            :op1 \"Danny\"\n            :op2 \"Ingers\")\n   :poss (t / team\n            :name (n2 / name\n                      :op1 \"Burnley\")))",
      "(p2 / person\n    :name (n3 / name\n              :op1 \"James\"\n              :op2 \"Wilson\")\n    :poss (t2 / team\n              :name (n4 / name\n                        :op1 \"Manchester\"\n                        :op2 \"United\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Danny\"\n            :op2 \"Ingers\")\n   :poss (t / team\n            :name (n2 / name\n                      :op1 \"Burnley\")))",
      "(p2 / person\n    :name (n3 / name\n              :op1 \"James\"\n              :op2 \"Wilson\")\n    :poss (t2 / team\n              :name (n4 / name\n                        :op1 \"Manchester\"\n                        :op2 \"United\"))\n    :location (u / up-front))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Danny\"\n                    :op2 \"Ingers\")\n           :poss (t / team\n                    :name (n2 / name\n                              :op1 \"Burnley\")))\n   :op2 (p2 / person\n            :name (n3 / name\n                      :op1 \"James\"\n                      :op2 \"Wilson\")\n            :poss (t2 / team\n                      :name (n4 / name\n                                :op1 \"Manchester\"\n                                :op2 \"United\"))))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Danny\"\n                    :op2 \"Ingers\")\n           :poss (t / team\n                    :name (n2 / name\n                              :op1 \"Burnley\")))\n   :op2 (p2 / person\n            :name (n3 / name\n                      :op1 \"James\"\n                      :op2 \"Wilson\")\n            :poss (t2 / team\n                      :name (n4 / name\n                                :op1 \"Manchester\"\n                                :op2 \"United\")))\n   :location (u / up-front))"
    ],
    "smus": [
      "Gerhard Tremmel of Swansea.",
      "where the goal is.",
      "behind 4-4 and 2 Free teams.",
      "Swansea's Gerhard Tremmel",
      "Behind 4-4 and 2 Free teams.",
      "Freedom.",
      "Swansea's Gerhard Tremmel is in goal.",
      "behind 4-4 and 2 teams.",
      "Glen Johnson, Kolo Toure, Ron Vaar and Luke Garbutt.",
      "Back.",
      "Glen Johnson, Kolo Toure, Ron Vaar and Luke Garbutt.",
      "Glen Johnson is back.",
      "Kolo Toure is back.",
      "Ron Vaar is back.",
      "Luke Garbutt is back at the back.",
      "Glen Johnson, Kolo Toure, Ron Vaar and Luke Garbutt are back.",
      "There.",
      "James Milner, Micel Arteta, Tom Cleverley and Jonas Gutierrez.",
      "in midfield.",
      "James Milner, Micel Arteta, Tom Clarke, Jonas Gutierrez...",
      "James Milner is in midfield.",
      "Mikkel Arteta is in midfield.",
      "Tom Clarke is in midfield.",
      "Jonas Gutierrez is in midfield.",
      "James Milner, Micel Arteta, Tom Cleverley and Jonathan Gutierrez are in midfield.",
      "There.",
      "And Burnley's Danny Ingers.",
      "And Manchester United's James Wilson.",
      "and up front.",
      "Burton's Danny Ingers",
      "Manchester United's James Wilson",
      "Burton's Danny Ingers",
      "Manchester United's James Wilson up front.",
      "Burton's Danny Ingers and Manchester United's James Wilson",
      "Burton's Danny Ingers and Manchester United's James Wilson were up front."
    ]
  },
  {
    "instance_id": "realsumm-58",
    "summary": "<t> Michigan high school students Mikenzy Snell and Matt Pliska who has Down syndrome , made plans to go to their junior prom together last year . </t> <t> For their prom picture , the pair held up a sign which read : ' Real friends do n't count chromosomes ' . </t> <t> The sign references the fact that people with Down syndrome have an extra copy of chromosome 21 . </t>",
    "summary_trees": [
      "# ::snt  Michigan high school students Mikenzy Snell and Matt Pliska who has Down syndrome , made plans to go to their junior prom together last year . \n(p / plan-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"Mikenzy\"\n                        :op2 \"Snell\")\n                  :ARG0-of (s / study-01\n                        :location (h / high-school\n                              :location (s2 / state\n                                    :name (n2 / name\n                                          :op1 \"Michigan\")))))\n            :op2 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Matt\"\n                        :op2 \"Pliska\")\n                  :ARG0-of (h2 / have-03\n                        :ARG1 (m / medical-condition\n                              :name (n4 / name\n                                    :op1 \"Down\"\n                                    :op2 \"Syndrome\")))))\n      :ARG1 (g / go-02\n            :ARG0 a\n            :ARG4 (p4 / prom\n                  :mod (j / junior)\n                  :poss a)\n            :manner (t / together))\n      :time (y / year\n            :mod (l / last)))",
      "# ::snt  For their prom picture , the pair held up a sign which read : ' Real friends do n't count chromosomes ' . \n(h / hold-up-10\n      :ARG0 (p / pair)\n      :ARG1 (s / sign\n            :ARG1-of (r / read-01\n                  :ARG3 (c / count-01\n                        :polarity -\n                        :ARG0 (p2 / person\n                              :ARG0-of (h2 / have-rel-role-91\n                                    :ARG2 (f / friend\n                                          :ARG1-of (r2 / real-04))))\n                        :ARG1 (c2 / chromosome))))\n      :purpose (p3 / picture-01\n            :ARG1 p\n            :mod (p4 / prom)))",
      "# ::snt  The sign references the fact that people with Down syndrome have an extra copy of chromosome 21 . \n(r / reference-04\n      :ARG0 (s / sign)\n      :ARG1 (h / have-03\n            :ARG0 (p / person\n                  :ARG1 (m / medical-condition\n                        :name (n / name\n                              :op1 \"Down\"\n                              :op2 \"Syndrome\")))\n            :ARG0 p)\n      :ARG1 (c / copy-01\n            :ARG1 (c2 / chromosome\n                  :mod 21)\n            :mod (e / extra)))"
    ],
    "tree": [
      "(p / plan-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Mikenzy\"\n                              :op2 \"Snell\")\n                     :ARG0-of (s / study-01\n                                 :location (h / high-school\n                                              :location (s2 / state\n                                                            :name (n2 / name\n                                                                      :op1 \"Michigan\")))))\n            :op2 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Matt\"\n                               :op2 \"Pliska\")\n                     :ARG0-of (h2 / have-03\n                                  :ARG1 (m / medical-condition\n                                           :name (n4 / name\n                                                     :op1 \"Down\"\n                                                     :op2 \"Syndrome\"))))))",
      "(p / plan-01\n   :ARG1 (g / go-02\n            :ARG0 (a / and)\n            :ARG4 (p4 / prom\n                      :mod (j / junior)\n                      :poss a)\n            :manner (t / together)))",
      "(p / plan-01\n   :time (y / year\n            :mod (l / last)))",
      "(a / and\n   :op1 (p2 / person\n            :name (n / name\n                     :op1 \"Mikenzy\"\n                     :op2 \"Snell\")\n            :ARG0-of (s / study-01\n                        :location (h / high-school\n                                     :location (s2 / state\n                                                   :name (n2 / name\n                                                             :op1 \"Michigan\")))))\n   :op2 (p3 / person\n            :name (n3 / name\n                      :op1 \"Matt\"\n                      :op2 \"Pliska\")\n            :ARG0-of (h2 / have-03\n                         :ARG1 (m / medical-condition\n                                  :name (n4 / name\n                                            :op1 \"Down\"\n                                            :op2 \"Syndrome\")))))",
      "(g / go-02\n   :ARG0 (a / and)\n   :ARG4 (p4 / prom\n             :mod (j / junior)\n             :poss a)\n   :manner (t / together))",
      "(y / year\n   :mod (l / last))",
      "(p / plan-01\n   :ARG0 (a / and))",
      "(s / study-01\n   :location (h / high-school))",
      "(h2 / have-03\n    :ARG1 (m / medical-condition :name (n4 / name :op1 \"Down\" :op2 \"Syndrome\")))",
      "(g / go-02\n   :ARG0 (a / and)\n   :ARG4 (p4 / prom))",
      "(p / plan-01\n   :ARG0 (a / and))",
      "(s / study-01\n   :location (h / high-school))",
      "(h2 / have-03\n    :ARG1 (m / medical-condition :name (n4 / name :op1 \"Down\" :op2 \"Syndrome\")))",
      "(g / go-02\n   :ARG0 (a / and))",
      "(g / go-02\n   :ARG4 (p4 / prom))",
      "(p / plan-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"Mikenzy\"\n                      :op2 \"Snell\")\n             :ARG0-of (s / study-01\n                         :location (h / high-school\n                                      :location (s2 / state\n                                                    :name (n2 / name\n                                                              :op1 \"Michigan\")))))\n   :ARG1 (g / go-02\n            :ARG0 p2\n            :ARG4 (p4 / prom\n                      :mod (j / junior)\n                      :poss p2)\n            :manner (t / together))\n   :time (y / year\n            :mod (l / last)))",
      "(p / plan-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Matt\"\n                       :op2 \"Pliska\")\n             :ARG0-of (h2 / have-03\n                          :ARG1 (m / medical-condition\n                                   :name (n4 / name\n                                             :op1 \"Down\"\n                                             :op2 \"Syndrome\"))))\n   :ARG1 (g / go-02\n            :ARG0 p3\n            :ARG4 (p4 / prom\n                      :mod (j / junior)\n                      :poss p3)\n            :manner (t / together))\n   :ARG1 g\n   :time (y / year\n            :mod (l / last)))",
      "(p / plan-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"Mikenzy\"\n                              :op2 \"Snell\")\n                     :ARG0 (s / study-01))\n            :op2 (p3 / person\n                     :name (n3 / name\n                               :op1 \"Matt\"\n                               :op2 \"Pliska\")\n                     :ARG0 (h2 / have-03\n                               :ARG1 (m / medical-condition\n                                        :name (n4 / name\n                                                  :op1 \"Down\"\n                                                  :op2 \"Syndrome\")))))\n   :ARG1 (g / go-02\n            :ARG0 a\n            :ARG4 (p4 / prom\n                      :mod (j / junior)\n                      :poss a)\n            :manner (t / together)))",
      "(p / plan-01\n   :time (y / year\n            :mod (l / last)))",
      "(h / hold-up-10\n   :ARG0 (p / pair))",
      "(h / hold-up-10\n   :ARG1 (s / sign\n            :ARG1-of (r / read-01\n                        :ARG3 (c / count-01\n                                 :polarity -\n                                 :ARG0 (p2 / person\n                                           :ARG0-of (h2 / have-rel-role-91\n                                                        :ARG2 (f / friend\n                                                                 :ARG1-of (r2 / real-04))))\n                                 :ARG1 (c2 / chromosome)))))",
      "(h / hold-up-10\n   :purpose (p3 / picture-01\n                :ARG1 (p / pair)\n                :mod (p4 / prom)))",
      "(s / sign\n   :ARG1-of (r / read-01\n               :ARG3 (c / count-01\n                        :polarity -\n                        :ARG0 (p2 / person\n                                  :ARG0-of (h2 / have-rel-role-91\n                                               :ARG2 (f / friend\n                                                        :ARG1-of (r2 / real-04))))\n                        :ARG1 (c2 / chromosome))))",
      "(p3 / picture-01\n    :ARG1 (p / pair)\n    :mod (p4 / prom))",
      "(r / read-01\n   :ARG3 (c / count-01))",
      "(c / count-01\n   :polarity -\n   :ARG0 (p2 / person))",
      "(r2 / real-04)",
      "(p3 / picture-01\n    :ARG1 (p / pair)\n    :mod (p4 / prom))",
      "(r / read-01\n   :ARG3 (c / count-01))",
      "(c / count-01\n   :polarity -)",
      "(c / count-01\n   :ARG0 (p2 / person))",
      "(p3 / picture-01\n    :ARG1 (p / pair))",
      "(p3 / picture-01\n    :mod (p4 / prom))",
      "(h / hold-up-10\n   :ARG0 (p / pair)\n   :ARG1 (s / sign\n            :ARG1 (r / read-01\n                     :ARG3 (c / count-01\n                              :polarity -\n                              :ARG0 (p2 / person\n                                        :ARG0 (h2 / have-rel-role-91\n                                                  :ARG2 (f / friend\n                                                           :ARG1 (r2 / real-04))))\n                              :ARG1 (c2 / chromosome)))))",
      "(h / hold-up-10\n   :purpose (p3 / picture-01))",
      "(r / reference-04\n   :ARG0 (s / sign))",
      "(r / reference-04\n   :ARG1 (h / have-03\n            :ARG0 (p / person\n                     :ARG1 (m / medical-condition\n                              :name (n / name\n                                       :op1 \"Down\"\n                                       :op2 \"Syndrome\")))\n            :ARG0 p))",
      "(r / reference-04\n   :ARG1 (c / copy-01\n            :ARG1 (c2 / chromosome\n                      :mod 21)\n            :mod (e / extra)))",
      "(h / have-03\n   :ARG0 (p / person\n            :ARG1 (m / medical-condition\n                     :name (n / name\n                              :op1 \"Down\"\n                              :op2 \"Syndrome\")))\n   :ARG0 p)",
      "(c / copy-01\n   :ARG1 (c2 / chromosome\n             :mod 21)\n   :mod (e / extra))",
      "(r / reference-04\n   :ARG0 (s / sign))",
      "(h / have-03\n   :ARG0 (p / person))",
      "(c / copy-01\n   :ARG1 (c2 / chromosome))",
      "(r / reference-04\n   :ARG0 (s / sign))",
      "(h / have-03\n   :ARG0 (p / person))",
      "(c / copy-01\n   :ARG1 (c2 / chromosome))",
      "(r / reference-04\n   :ARG0 (s / sign)\n   :ARG1 (h / have-03\n            :ARG0 (p / person\n                     :ARG1 (m / medical-condition\n                              :name (n / name\n                                       :op1 \"Down\"\n                                       :op2 \"Syndrome\")))\n            :ARG0 p)\n   :ARG1 (c / copy-01\n            :ARG1 (c2 / chromosome\n                      :mod 21)\n            :mod (e / extra)))",
      "(r / reference-04)"
    ],
    "smus": [
      "Mikenzy Snell, a Michigan high school student, and Matt Pliska, who has Down Syndrome, have made plans.",
      "Plans are to go together to their junior prom.",
      "Plans from last year",
      "Mikenzy Snell, a high school student in Michigan, and Matt Pliska, who has Down Syndrome, are both students.",
      "and go to their junior prom together.",
      "Last year.",
      "The plans of both.",
      "High school studies.",
      "has Down syndrome.",
      "and go to prom.",
      "The plans of both.",
      "High school studies.",
      "has Down syndrome.",
      "Go and...",
      "Go to prom.",
      "Mikenzy Snell, a high school student in Michigan, plans to go together to his junior prom last year.",
      "Last year, Matt Pliska, who has Down syndrome, plans to go to his junior prom together.",
      "Mikenzy Snell, the student, and Matt Pliska, who has Down Syndrome, have plans to go to their junior prom together.",
      "Plans from last year",
      "The pair held up.",
      "The sign held up that read \"real friends don't count chromosomes.\"",
      "Holded up for a prom picture of the pair.",
      "A sign that reads \"real friends don't count chromosomes.\"",
      "a pair of prom pictures",
      "Read count.",
      "People don't count.",
      "Really.",
      "a pair of prom pictures",
      "Read count.",
      "Doesn't count.",
      "People will count.",
      "The pair are in the picture.",
      "Prom picture.",
      "The pair held up a sign that read \"real friends don't count chromosomes.\"",
      "held up for a picture.",
      "The sign references:",
      "Refers to people with Down Syndrome.",
      "References an extra copy of chromosome 21.",
      "People with Down syndrome have it.",
      "An extra copy of chromosome 21.",
      "The sign references:",
      "People have.",
      "a copy of the chromosome",
      "The sign references:",
      "People have.",
      "a copy of the chromosome",
      "The sign references people with Down Syndrome who have an extra copy of chromosome 21.",
      "References:"
    ]
  },
  {
    "instance_id": "realsumm-59",
    "summary": "<t> Police say Michael Scott Shemansky came to their attention after he failed to appear for a supervised visit with his son Saturday . </t> <t> That same day mother Sandra Shemansky , 57 , was found dead at the home they shared in Winter Garden , Florida . </t> <t> Michael Shemansky was going through a difficult divorce and neighbors believe the stress may have caused him to snap . </t>",
    "summary_trees": [
      "# ::snt  Police say Michael Scott Shemansky came to their attention after he failed to appear for a supervised visit with his son Saturday . \n(s / say-01\n      :ARG0 (p / police)\n      :ARG1 (c / come-01\n            :ARG1 (p2 / person\n                  :name (n / name\n                        :op1 \"Michael\"\n                        :op2 \"Scott\"\n                        :op3 \"Shemansky\"))\n            :ARG4 (a / attend-02\n                  :ARG0 p\n                  :ARG1 p2\n                  :time (a2 / after\n                        :op1 (f / fail-01\n                              :ARG1 p2\n                              :ARG2 (a3 / appear-01\n                                    :ARG1 p2\n                                    :purpose (v / visit-01\n                                          :ARG0 p2\n                                          :ARG1 (p3 / person\n                                                :ARG0-of (h / have-rel-role-91\n                                                      :ARG1 p2\n                                                      :ARG2 (s2 / son)))\n                                          :ARG1-of (s3 / supervise-01))\n                                    :time (d / date-entity\n                                          :weekday (s4 / saturday))))))))",
      "# ::snt  That same day mother Sandra Shemansky , 57 , was found dead at the home they shared in Winter Garden , Florida . \n(f / find-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Sandra\"\n                  :op2 \"Shemansky\")\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (m / mother))\n            :age (t / temporal-quantity\n                  :quant 57\n                  :unit (y / year)))\n      :ARG2 (d / die-01\n            :ARG1 p)\n      :time (d2 / day\n            :ARG1-of (s / same-01)\n            :mod (t2 / that))\n      :location (h2 / home\n            :ARG1-of (s2 / share-01\n                  :ARG0 p\n                  :ARG2 p)\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Winter\"\n                        :op2 \"Garden\")\n                  :location (s3 / state\n                        :name (n3 / name\n                              :op1 \"Florida\")))))",
      "# ::snt  Michael Shemansky was going through a difficult divorce and neighbors believe the stress may have caused him to snap . \n(a / and\n      :op1 (g / go-through-20\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Michael\"\n                        :op2 \"Shemansky\"))\n            :ARG1 (d / divorce-01\n                  :ARG0 p\n                  :mod (d2 / difficult)))\n      :op2 (b / believe-01\n            :ARG0 (p2 / person\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (n2 / neighbor)))\n            :ARG1 (p3 / possible-01\n                  :ARG1 (c / cause-01\n                        :ARG0 (s / stress-02)\n                        :ARG1 (s2 / snap-04\n                              :ARG1 p)))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / police))",
      "(s / say-01\n   :ARG1 (c / come-01\n            :ARG1 (p2 / person\n                      :name (n / name\n                               :op1 \"Michael\"\n                               :op2 \"Scott\"\n                               :op3 \"Shemansky\"))\n            :ARG4 (a / attend-02\n                     :ARG0 (p / police)\n                     :ARG1 p2\n                     :time (a2 / after\n                               :op1 (f / fail-01\n                                       :ARG1 p2\n                                       :ARG2 (a3 / appear-01\n                                                 :ARG1 p2\n                                                 :purpose (v / visit-01\n                                                             :ARG0 p2\n                                                             :ARG1 (p3 / person\n                                                                       :ARG0-of (h / have-rel-role-91\n                                                                                   :ARG1 p2\n                                                                                   :ARG2 (s2 / son)))\n                                                             :ARG1-of (s3 / supervise-01))\n                                                 :time (d / date-entity\n                                                          :weekday (s4 / saturday))))))))",
      "(c / come-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Michael\"\n                      :op2 \"Scott\"\n                      :op3 \"Shemansky\"))\n   :ARG4 (a / attend-02\n            :ARG0 (p / police)\n            :ARG1 p2\n            :time (a2 / after\n                      :op1 (f / fail-01\n                              :ARG1 p2\n                              :ARG2 (a3 / appear-01\n                                        :ARG1 p2\n                                        :purpose (v / visit-01\n                                                    :ARG0 p2\n                                                    :ARG1 (p3 / person\n                                                              :ARG0-of (h / have-rel-role-91\n                                                                          :ARG1 p2\n                                                                          :ARG2 (s2 / son)))\n                                                    :ARG1-of (s3 / supervise-01))\n                                        :time (d / date-entity\n                                                 :weekday (s4 / saturday)))))))",
      "(s / say-01\n   :ARG0 (p / police))",
      "(c / come-01\n   :ARG1 (p2 / person :name (n / name :op1 \"Michael\" :op2 \"Scott\" :op3 \"Shemansky\")))",
      "(a / attend-02\n   :ARG0 (p / police)\n   :ARG1 (p2 / person :name (n / name :op1 \"Michael\" :op2 \"Scott\" :op3 \"Shemansky\"))\n   :time (a2 / after))",
      "(f / fail-01\n   :ARG1 (p2 / person :name (n / name :op1 \"Michael\" :op2 \"Scott\" :op3 \"Shemansky\"))\n   :ARG2 (a3 / appear-01))",
      "(a3 / appear-01\n    :ARG1 (p2 / person :name (n / name :op1 \"Michael\" :op2 \"Scott\" :op3 \"Shemansky\"))\n    :purpose (v / visit-01))",
      "(v / visit-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Michael\" :op2 \"Scott\" :op3 \"Shemansky\"))\n   :ARG1 (p3 / person))",
      "(s3 / supervise-01)",
      "(s / say-01\n   :ARG0 (p / police))",
      "(c / come-01\n   :ARG1 (p2 / person :name (n / name :op1 \"Michael\" :op2 \"Scott\" :op3 \"Shemansky\")))",
      "(a / attend-02\n   :ARG0 (p / police))",
      "(a / attend-02\n   :ARG1 (p2 / person :name (n / name :op1 \"Michael\" :op2 \"Scott\" :op3 \"Shemansky\")))",
      "(a / attend-02\n   :time (a2 / after))",
      "(f / fail-01\n   :ARG1 (p2 / person :name (n / name :op1 \"Michael\" :op2 \"Scott\" :op3 \"Shemansky\")))",
      "(f / fail-01\n   :ARG2 (a3 / appear-01))",
      "(a3 / appear-01\n    :ARG1 (p2 / person :name (n / name :op1 \"Michael\" :op2 \"Scott\" :op3 \"Shemansky\")))",
      "(a3 / appear-01\n    :purpose (v / visit-01))",
      "(v / visit-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Michael\" :op2 \"Scott\" :op3 \"Shemansky\")))",
      "(v / visit-01\n   :ARG1 (p3 / person))",
      "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (c / come-01\n            :ARG1 (p2 / person\n                      :name (n / name\n                               :op1 \"Michael\"\n                               :op2 \"Scott\"\n                               :op3 \"Shemansky\"))\n            :ARG4 (a / attend-02\n                     :ARG0 p\n                     :ARG1 p2)))",
      "(s / say-01)",
      "(f / find-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sandra\"\n                     :op2 \"Shemansky\")\n            :ARG0-of (h / have-rel-role-91\n                        :ARG2 (m / mother))\n            :age (t / temporal-quantity\n                    :quant 57\n                    :unit (y / year))))",
      "(f / find-01\n   :ARG2 (d / die-01\n            :ARG1 (p / person :name (n / name :op1 \"Sandra\" :op2 \"Shemansky\")))))",
      "(f / find-01\n   :time (d2 / day\n             :ARG1-of (s / same-01)\n             :mod (t2 / that)))",
      "(f / find-01\n   :location (h2 / home\n                 :ARG1-of (s2 / share-01\n                              :ARG0 (p / person :name (n / name :op1 \"Sandra\" :op2 \"Shemansky\")))\n                              :ARG2 p)\n                 :location (c / city\n                              :name (n2 / name\n                                        :op1 \"Winter\"\n                                        :op2 \"Garden\")\n                              :location (s3 / state\n                                            :name (n3 / name\n                                                      :op1 \"Florida\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"Sandra\"\n            :op2 \"Shemansky\")\n   :ARG0-of (h / have-rel-role-91\n               :ARG2 (m / mother))\n   :age (t / temporal-quantity\n           :quant 57\n           :unit (y / year)))",
      "(d2 / day\n    :ARG1-of (s / same-01)\n    :mod (t2 / that))",
      "(h2 / home\n    :ARG1-of (s2 / share-01\n                 :ARG0 (p / person :name (n / name :op1 \"Sandra\" :op2 \"Shemansky\")))\n                 :ARG2 p)\n    :location (c / city\n                 :name (n2 / name\n                           :op1 \"Winter\"\n                           :op2 \"Garden\")\n                 :location (s3 / state\n                               :name (n3 / name\n                                         :op1 \"Florida\"))))",
      "(f / find-01\n   :ARG1 (p / person :name (n / name :op1 \"Sandra\" :op2 \"Shemansky\"))))",
      "(d / die-01\n   :ARG1 (p / person :name (n / name :op1 \"Sandra\" :op2 \"Shemansky\"))))",
      "(s / same-01)",
      "(s2 / share-01\n    :ARG0 (p / person :name (n / name :op1 \"Sandra\" :op2 \"Shemansky\")))\n    :ARG2 p)",
      "(f / find-01\n   :ARG1 (p / person :name (n / name :op1 \"Sandra\" :op2 \"Shemansky\"))))",
      "(d / die-01\n   :ARG1 (p / person :name (n / name :op1 \"Sandra\" :op2 \"Shemansky\"))))",
      "(s2 / share-01\n    :ARG0 (p / person :name (n / name :op1 \"Sandra\" :op2 \"Shemansky\"))))",
      "(s2 / share-01\n    :ARG2 (p / person :name (n / name :op1 \"Sandra\" :op2 \"Shemansky\"))))",
      "(f / find-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sandra\"\n                     :op2 \"Shemansky\")\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (m / mother))\n            :age (t / temporal-quantity\n                    :quant 57\n                    :unit (y / year)))\n   :ARG2 (d / die-01\n            :ARG1 p))",
      "(f / find-01\n   :time (d2 / day\n             :mod (t2 / that))\n   :location (h2 / home\n                 :location (c / city\n                              :name (n2 / name\n                                        :op1 \"Winter\"\n                                        :op2 \"Garden\")\n                              :location (s3 / state\n                                            :name (n3 / name\n                                                      :op1 \"Florida\")))))",
      "(a / and\n   :op1 (g / go-through-20\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Michael\"\n                             :op2 \"Shemansky\"))\n           :ARG1 (d / divorce-01\n                    :ARG0 p\n                    :mod (d2 / difficult))))",
      "(a / and\n   :op2 (b / believe-01\n           :ARG0 (p2 / person\n                     :ARG0-of (h / have-rel-role-91\n                                 :ARG1 (p / person :name (n / name :op1 \"Michael\" :op2 \"Shemansky\"))\n                                 :ARG2 (n2 / neighbor)))\n           :ARG1 (p3 / possible-01\n                     :ARG1 (c / cause-01\n                              :ARG0 (s / stress-02)\n                              :ARG1 (s2 / snap-04\n                                        :ARG1 p)))))",
      "(g / go-through-20\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\"\n                     :op2 \"Shemansky\"))\n   :ARG1 (d / divorce-01\n            :ARG0 p\n            :mod (d2 / difficult)))",
      "(b / believe-01\n   :ARG0 (p2 / person\n             :ARG0-of (h / have-rel-role-91\n                         :ARG1 (p / person :name (n / name :op1 \"Michael\" :op2 \"Shemansky\"))\n                         :ARG2 (n2 / neighbor)))\n   :ARG1 (p3 / possible-01\n             :ARG1 (c / cause-01\n                      :ARG0 (s / stress-02)\n                      :ARG1 (s2 / snap-04\n                                :ARG1 p))))",
      "(d / divorce-01\n   :ARG0 (p / person :name (n / name :op1 \"Michael\" :op2 \"Shemansky\"))\n   :mod (d2 / difficult))",
      "(b / believe-01\n   :ARG0 (p2 / person))",
      "(p3 / possible-01\n    :ARG1 (c / cause-01))",
      "(c / cause-01\n   :ARG0 (s / stress-02))",
      "(s / stress-02)",
      "(s2 / snap-04\n    :ARG1 (p / person :name (n / name :op1 \"Michael\" :op2 \"Shemansky\")))",
      "(d / divorce-01\n   :ARG0 (p / person :name (n / name :op1 \"Michael\" :op2 \"Shemansky\")))",
      "(d / divorce-01\n   :mod (d2 / difficult))",
      "(b / believe-01\n   :ARG0 (p2 / person))",
      "(p3 / possible-01\n    :ARG1 (c / cause-01))",
      "(c / cause-01\n   :ARG0 (s / stress-02))",
      "(s2 / snap-04\n    :ARG1 (p / person :name (n / name :op1 \"Michael\" :op2 \"Shemansky\")))",
      "(g / go-through-20\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\"\n                     :op2 \"Shemansky\"))\n   :ARG1 (d / divorce-01\n            :ARG0 p\n            :mod (d2 / difficult)))",
      "(b / believe-01\n   :ARG0 (p2 / person\n             :ARG0-of (h / have-rel-role-91\n                         :ARG1 (p / person :name (n / name :op1 \"Michael\" :op2 \"Shemansky\"))\n                         :ARG2 (n2 / neighbor)))\n   :ARG1 (p3 / possible-01\n             :ARG1 (c / cause-01\n                      :ARG0 (s / stress-02)\n                      :ARG1 (s2 / snap-04\n                                :ARG1 p))))",
      "(a / and\n   :op1 (g / go-through-20\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"Michael\"\n                             :op2 \"Shemansky\"))\n           :ARG1 (d / divorce-01\n                    :ARG0 p\n                    :mod (d2 / difficult)))\n   :op2 (b / believe-01\n           :ARG0 (p2 / person\n                     :ARG0 (h / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (n2 / neighbor)))\n           :ARG1 (p3 / possible-01\n                     :ARG1 (c / cause-01\n                              :ARG0 (s / stress-02)\n                              :ARG1 (s2 / snap-04\n                                        :ARG1 p)))))",
      "(a / and\n   :op1 (g / go-through-20)\n   :op2 (b / believe-01))"
    ],
    "smus": [
      "Police say.",
      "Michael Scott Shemansky came under police attention after he failed to appear for a surveillance visit to his son Saturday, police say.",
      "Michael Scott Shemansky came under police attention after he failed to appear for a surveillance visit to his son Saturday.",
      "Police say.",
      "Michael Scott Shemansky came.",
      "Police later paid attention to Michael Scott Shemansky.",
      "Michael Scott Shemansky failed to appear.",
      "Michael Scott Shemansky did appear for the visit.",
      "Michael Scott Shemansky made a visit to the person.",
      "Supervised.",
      "Police say.",
      "Michael Scott Shemansky came.",
      "Police were paying attention.",
      "Michael Scott Shemansky was the one paying attention.",
      "Afterward attention.",
      "Michael Scott Shemansky failed.",
      "failed to appear.",
      "Michael Scott Shemansky did appear.",
      "appear for a visit",
      "Michael Scott Shemansky made the visit.",
      "Visit to person",
      "Police say Michael Scott Shemansky came to his attention.",
      "Say.",
      "The mother, Sandra Shemansky, 57, was found.",
      "Sandra Shemansky was found dead.",
      "Found on that same day.",
      "Sandra Shemansky was found in Florida's Winter Garden in a home shared with her.",
      "Sandra Shemansky, 57, is the mother of the children.",
      "That same day.",
      "Sandra Shemansky shared her home in Winter Garden, Florida.",
      "Sandra Shemansky was found.",
      "Sandra Shemansky died.",
      "Same.",
      "Sandra Shemansky shared her.",
      "Sandra Shemansky was found.",
      "Sandra Shemansky died.",
      "Sandra Shemansky shared.",
      "Shared with Sandra Shemansky.",
      "Sandra Shemansky, mother of 57, was found dead.",
      "That day, I was found in a home in Winter Garden, FL.",
      "Michael Shemansky went through a difficult divorce and:",
      "And Michael Shemansky's neighbors believe that stress may have caused him to snap.",
      "Michael Shemansky went through a difficult divorce.",
      "Michael Shemansky's neighbors believe stress may have caused him to snap.",
      "Michael Shemansky had a difficult divorce.",
      "People believe.",
      "Perhaps because.",
      "Stress caused.",
      "Stress.",
      "Snap Michael Shemansky.",
      "Michael Shemansky's divorce",
      "Divorce is a difficult one.",
      "People believe.",
      "Perhaps because.",
      "Stress caused.",
      "Snap Michael Shemansky.",
      "Michael Shemansky went through a difficult divorce.",
      "Michael Shemansky's neighbors believe stress may have caused him to snap.",
      "Michael Shemansky went through a difficult divorce and his neighbors believe that stress may have caused him to snap.",
      "Go through and believe."
    ]
  },
  {
    "instance_id": "realsumm-60",
    "summary": "<t> Bayern Munich beat Porto 6 - 1 in the Champions League on Tuesday . </t> <t> Pep Guardiola 's side progressed 7 - 4 on aggregate to reach semi - finals . </t> <t> Thomas Muller scored 27th Champions League goal to pass Mario Gomez . </t> <t> Muller is now the leading German scorer in the competition . </t> <t> After game Muller led the celebrations with supporters using a megaphone . </t>",
    "summary_trees": [
      "# ::snt  Bayern Munich beat Porto 6 - 1 in the Champions League on Tuesday . \n(b / beat-03\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Bayern\"\n                  :op2 \"Munich\"))\n      :ARG1 (t2 / team\n            :name (n2 / name\n                  :op1 \"Porto\"))\n      :ARG2 (g / game\n            :name (n3 / name\n                  :op1 \"Champions\"\n                  :op2 \"League\"))\n      :time (d / date-entity\n            :weekday (t3 / tuesday))\n      :quant (s / score-entity\n            :op1 6\n            :op2 1))",
      "# ::snt  Pep Guardiola 's side progressed 7 - 4 on aggregate to reach semi - finals . \n(p / progress-01\n      :ARG1 (s / side\n            :poss (p2 / person\n                  :name (n / name\n                        :op1 \"Pep\"\n                        :op2 \"Guardiola\")))\n      :ARG4 (r / reach-01\n            :ARG0 s\n            :ARG1 (f / final\n                  :mod (s2 / semi)))\n      :manner (s3 / score-entity\n            :op1 7\n            :op2 4)\n      :ARG4-of (a / aggregate-01))",
      "# ::snt  Thomas Muller scored 27th Champions League goal to pass Mario Gomez . \n(s / score-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Thomas\"\n                  :op2 \"Muller\"))\n      :ARG1 (g / goal\n            :ord (o / ordinal-entity\n                  :value 27)\n            :mod (g2 / game\n                  :name (n2 / name\n                        :op1 \"Champions\"\n                        :op2 \"League\")))\n      :ARG2-of (p2 / pass-03\n            :ARG0 p\n            :ARG1 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Mario\"\n                        :op2 \"Gomez\"))))",
      "# ::snt  Muller is now the leading German scorer in the competition . \n(p / person\n      :name (n / name\n            :op1 \"Muller\")\n      :ARG0-of (s / score-01\n            :ARG2 (p2 / person\n                  :ARG0-of (c / compete-01))\n            :ARG3 (l / lead-01\n                  :ARG0 p\n                  :ARG1 p2))\n      :mod (c2 / country\n            :name (n2 / name\n                  :op1 \"Germany\"))\n      :time (n3 / now))",
      "# ::snt  After game Muller led the celebrations with supporters using a megaphone . \n(l / lead-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Muller\"))\n      :ARG1 (c / celebrate-02\n            :accompanier (p2 / person\n                  :ARG0-of (s / support-01)\n                  :ARG0-of (u / use-01\n                        :ARG1 (m / megaphone))))\n      :time (a / after\n            :op1 (g / game)))"
    ],
    "tree": [
      "(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Bayern\"\n                     :op2 \"Munich\")))",
      "(b / beat-03\n   :ARG1 (t2 / team\n             :name (n2 / name\n                       :op1 \"Porto\")))",
      "(b / beat-03\n   :ARG2 (g / game\n            :name (n3 / name\n                      :op1 \"Champions\"\n                      :op2 \"League\")))",
      "(b / beat-03\n   :time (d / date-entity\n            :weekday (t3 / tuesday)))",
      "(b / beat-03\n   :quant (s / score-entity\n             :op1 6\n             :op2 1))",
      "(t / team\n   :name (n / name\n            :op1 \"Bayern\"\n            :op2 \"Munich\"))",
      "(t2 / team\n    :name (n2 / name\n              :op1 \"Porto\"))",
      "(g / game\n   :name (n3 / name\n             :op1 \"Champions\"\n             :op2 \"League\"))",
      "(d / date-entity\n   :weekday (t3 / tuesday))",
      "(s / score-entity\n   :op1 6\n   :op2 1)",
      "(b / beat-03\n   :ARG0 (t / team :name (n / name :op1 \"Bayern\" :op2 \"Munich\")))",
      "(b / beat-03\n   :ARG0 (t / team :name (n / name :op1 \"Bayern\" :op2 \"Munich\")))",
      "(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Bayern\"\n                     :op2 \"Munich\"))\n   :ARG1 (t2 / team\n             :name (n2 / name\n                       :op1 \"Porto\"))\n   :ARG2 (g / game\n            :name (n3 / name\n                      :op1 \"Champions\"\n                      :op2 \"League\"))\n   :quant (s / score-entity\n             :op1 6\n             :op2 1))",
      "(b / beat-03\n   :time (d / date-entity\n            :weekday (t3 / tuesday))\n   :quant (s / score-entity\n             :op1 6\n             :op2 1))",
      "(p / progress-01\n   :ARG1 (s / side\n            :poss (p2 / person\n                      :name (n / name\n                               :op1 \"Pep\"\n                               :op2 \"Guardiola\"))))",
      "(p / progress-01\n   :ARG4 (r / reach-01\n            :ARG0 (s / side)\n            :ARG1 (f / final\n                     :mod (s2 / semi))))",
      "(p / progress-01\n   :manner (s3 / score-entity\n               :op1 7\n               :op2 4))",
      "(p / progress-01\n   :ARG4-of (a / aggregate-01))",
      "(s / side\n   :poss (p2 / person\n             :name (n / name\n                      :op1 \"Pep\"\n                      :op2 \"Guardiola\")))",
      "(r / reach-01\n   :ARG0 (s / side)\n   :ARG1 (f / final\n            :mod (s2 / semi)))",
      "(s3 / score-entity\n    :op1 7\n    :op2 4)",
      "(p / progress-01\n   :ARG1 (s / side))",
      "(r / reach-01\n   :ARG0 (s / side)\n   :ARG1 (f / final))",
      "(a / aggregate-01)",
      "(p / progress-01\n   :ARG1 (s / side))",
      "(r / reach-01\n   :ARG0 (s / side))",
      "(r / reach-01\n   :ARG1 (f / final))",
      "(p / progress-01\n   :ARG1 (s / side\n            :poss (p2 / person\n                      :name (n / name\n                               :op1 \"Pep\"\n                               :op2 \"Guardiola\")))\n   :ARG4 (r / reach-01\n            :ARG0 s\n            :ARG1 (f / final\n                     :mod (s2 / semi)))\n   :manner (s3 / score-entity\n               :op1 7\n               :op2 4)\n   :ARG4 (a / aggregate-01))",
      "(p / progress-01\n   :manner (s3 / score-entity\n               :op1 7\n               :op2 4))",
      "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"\n                     :op2 \"Muller\")))",
      "(s / score-01\n   :ARG1 (g / goal\n            :ord (o / ordinal-entity\n                    :value 27)\n            :mod (g2 / game\n                     :name (n2 / name\n                               :op1 \"Champions\"\n                               :op2 \"League\"))))",
      "(s / score-01\n   :ARG2-of (p2 / pass-03\n                :ARG0 (p / person :name (n / name :op1 \"Thomas\" :op2 \"Muller\"))\n                :ARG1 (p3 / person\n                          :name (n3 / name\n                                    :op1 \"Mario\"\n                                    :op2 \"Gomez\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Thomas\"\n            :op2 \"Muller\"))",
      "(g / goal\n   :ord (o / ordinal-entity\n           :value 27)\n   :mod (g2 / game\n            :name (n2 / name\n                      :op1 \"Champions\"\n                      :op2 \"League\")))",
      "(p2 / pass-03\n    :ARG0 (p / person :name (n / name :op1 \"Thomas\" :op2 \"Muller\"))\n    :ARG1 (p3 / person\n              :name (n3 / name\n                        :op1 \"Mario\"\n                        :op2 \"Gomez\")))",
      "(s / score-01\n   :ARG0 (p / person :name (n / name :op1 \"Thomas\" :op2 \"Muller\")))",
      "(p2 / pass-03\n    :ARG0 (p / person :name (n / name :op1 \"Thomas\" :op2 \"Muller\"))\n    :ARG1 (p3 / person :name (n3 / name :op1 \"Mario\" :op2 \"Gomez\")))",
      "(s / score-01\n   :ARG0 (p / person :name (n / name :op1 \"Thomas\" :op2 \"Muller\")))",
      "(p2 / pass-03\n    :ARG0 (p / person :name (n / name :op1 \"Thomas\" :op2 \"Muller\")))",
      "(p2 / pass-03\n    :ARG1 (p3 / person :name (n3 / name :op1 \"Mario\" :op2 \"Gomez\")))",
      "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Thomas\"\n                     :op2 \"Muller\"))\n   :ARG1 (g / goal\n            :ord (o / ordinal-entity\n                    :value 27)\n            :mod (g2 / game\n                     :name (n2 / name\n                               :op1 \"Champions\"\n                               :op2 \"League\")))\n   :ARG2 (p2 / pass-03\n             :ARG0 p\n             :ARG1 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Mario\"\n                                 :op2 \"Gomez\"))))",
      "(s / score-01)",
      "(p / person\n   :name (n / name\n            :op1 \"Muller\"))",
      "(p / person\n   :ARG0-of (s / score-01\n               :ARG2 (p2 / person\n                         :ARG0-of (c / compete-01))\n               :ARG3 (l / lead-01)))",
      "(p / person\n   :ARG0-of (l :ARG1 p2))",
      "(p / person\n   :mod (c2 / country\n            :name (n2 / name\n                      :op1 \"Germany\")))",
      "(p / person\n   :time (n3 / now))",
      "(s / score-01\n   :ARG2 (p2 / person\n             :ARG0-of (c / compete-01))\n   :ARG3 (l / lead-01))",
      "(c2 / country\n    :name (n2 / name\n              :op1 \"Germany\"))",
      "(s / score-01\n   :ARG2 (p2 / person))",
      "(c / compete-01)",
      "(l / lead-01\n   :ARG0 (p / person :name (n / name :op1 \"Muller\")))\n   :ARG1 (p2 / person))",
      "(s / score-01\n   :ARG2 (p2 / person))",
      "(l / lead-01\n   :ARG0 (p / person :name (n / name :op1 \"Muller\"))))",
      "(l / lead-01\n   :ARG1 (p2 / person))",
      "(p / person\n   :name (n / name\n            :op1 \"Muller\")\n   :ARG0 (s / score-01\n            :ARG2 (p2 / person\n                      :ARG0 (c / compete-01))\n            :ARG3 (l / lead-01\n                     :ARG0 p\n                     :ARG1 p2))\n   :mod (c2 / country\n            :name (n2 / name\n                      :op1 \"Germany\")))",
      "(p / person\n   :name (n / name\n            :op1 \"Muller\"))",
      "(l / lead-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Muller\")))",
      "(l / lead-02\n   :ARG1 (c / celebrate-02\n            :accompanier (p2 / person\n                             :ARG0-of (s / support-01)\n                             :ARG0-of (u / use-01\n                                         :ARG1 (m / megaphone)))))",
      "(l / lead-02\n   :time (a / after\n            :op1 (g / game)))",
      "(p / person\n   :name (n / name\n            :op1 \"Muller\"))",
      "(c / celebrate-02\n   :accompanier (p2 / person\n                    :ARG0-of (s / support-01)\n                    :ARG0-of (u / use-01\n                                :ARG1 (m / megaphone))))",
      "(a / after\n   :op1 (g / game))",
      "(l / lead-02\n   :ARG0 (p / person :name (n / name :op1 \"Muller\")))",
      "(c / celebrate-02\n   :accompanier (p2 / person))",
      "(s / support-01)",
      "(u / use-01\n   :ARG1 (m / megaphone))",
      "(l / lead-02\n   :ARG0 (p / person :name (n / name :op1 \"Muller\")))",
      "(c / celebrate-02\n   :accompanier (p2 / person))",
      "(u / use-01\n   :ARG1 (m / megaphone))",
      "(l / lead-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Muller\"))\n   :ARG1 (c / celebrate-02\n            :accompanier (p2 / person\n                             :ARG0 (s / support-01)\n                             :ARG0 (u / use-01\n                                      :ARG1 (m / megaphone)))))",
      "(l / lead-02\n   :time (a / after\n            :op1 (g / game)))"
    ],
    "smus": [
      "Bayern Munich beat",
      "Porto beat.",
      "beat the Champions League",
      "beat Tuesday",
      "Beat 6-1",
      "Bayern Munich",
      "Porto",
      "The Champions League",
      "Tuesday",
      "6/1",
      "Bayern Munich beat",
      "Bayern Munich beat",
      "Bayern M\u00fcnchen beat Porto 6-0 in the Champions League.",
      "Tuesday beat, 6-1",
      "Pep Guardiola's side progressed.",
      "Progressed to reach the semi-finals.",
      "Progressed 7-4.",
      "Aggregately, progressed.",
      "Pep Guardiola's side",
      "The side will reach the semi-finals.",
      "7-4",
      "The side progressed.",
      "The side will reach the finals.",
      "In aggregate.",
      "The side progressed.",
      "Reach out.",
      "Reach the finals",
      "Pep Guardiola's side progressed to reach the semi-finals with a 7-4 aggregate.",
      "Progressed 7-4.",
      "Thomas Muller scored.",
      "The 27th goal in the Champions League was scored.",
      "Thomas Muller passed Mario Gomez with a score of -",
      "Thomas Muller",
      "27th goal in the Champions League",
      "Thomas Muller will pass Mario Gomez.",
      "Thomas Muller scored.",
      "Thomas Muller will pass Mario Gomez.",
      "Thomas Muller scored.",
      "Thomas Muller will pass.",
      "Pass Mario Gomez.",
      "Thomas Muller scored the 27th goal in the Champions League to pass Mario Gomez.",
      "Scored.",
      "Muller.",
      "leader-scorer of the competition",
      "You.",
      "German.",
      "Now people.",
      "Leading score for the competitor",
      "Germany (DE)",
      "Scores for people.",
      "Competition.",
      "Muller is leading people.",
      "Scores for people.",
      "Muller was leading.",
      "Leading people.",
      "Muller is German with the leading score of the competition.",
      "Muller.",
      "Muller led.",
      "led to celebrations with supporters using the megaphone.",
      "Lead after the game.",
      "Muller.",
      "Celebrations with supporters using the megaphone",
      "After the game.",
      "Muller led.",
      "Celebrations with people",
      "Supports.",
      "using a megaphone",
      "Muller led.",
      "Celebrations with people",
      "using a megaphone",
      "Muller led celebrations with supporters using the megaphone.",
      "Lead after the game."
    ]
  },
  {
    "instance_id": "realsumm-61",
    "summary": "<t> Domenico Rancadore given a seven - year sentence by Italian court in 1999 . </t> <t> He was convicted for role as a ' man of honour ' , taking bribes from builders . </t> <t> In February the Sicilian Mafia fugitive lost battle against extradition to Italy . </t> <t> Today it emerged that the 65-year - old 's case expired in October last year . </t>",
    "summary_trees": [
      "# ::snt  Domenico Rancadore given a seven - year sentence by Italian court in 1999 . \n(s / sentence-01\n      :ARG0 (c / court\n            :mod (c2 / country\n                  :name (n / name\n                        :op1 \"Italy\")))\n      :ARG1 (p / person\n            :name (n2 / name\n                  :op1 \"Domenico\"\n                  :op2 \"Rancadore\"))\n      :ARG2 (t / temporal-quantity\n            :quant 7\n            :unit (y / year))\n      :time (d / date-entity\n            :year 1999))",
      "# ::snt  He was convicted for role as a ' man of honour ' , taking bribes from builders . \n(c / convict-01\n      :ARG1 (h / he)\n      :ARG2 (a / and\n            :op1 (r / role\n                  :mod (m / man\n                        :mod (h2 / honor))\n                  :domain h)\n            :op2 (b / bribe-01\n                  :ARG0 h\n                  :ARG1 (p / person\n                        :ARG0-of (b2 / build-01)))))",
      "# ::snt  In February the Sicilian Mafia fugitive lost battle against extradition to Italy . \n(l / lose-03\n      :ARG0 (f / fugitive\n            :mod (c / criminal-organization\n                  :name (n / name\n                        :op1 \"Mafia\"))\n            :mod (ii / island\n                  :name (n2 / name\n                        :op1 \"Sicily\")))\n      :ARG1 (b / battle-01\n            :ARG0 f\n            :ARG1 (e / extradite-01\n                  :ARG1 f\n                  :ARG3 (c2 / country\n                        :name (n3 / name\n                              :op1 \"Italy\"))))\n      :time (d / date-entity\n            :month 2))",
      "# ::snt  Today it emerged that the 65-year - old 's case expired in October last year . \n(e / emerge-02\n      :ARG1 (e2 / expire-01\n            :ARG1 (c / case-03\n                  :ARG2 (p / person\n                        :age (t / temporal-quantity\n                              :quant 65\n                              :unit (y / year))))\n            :time (d / date-entity\n                  :month 10\n                  :mod (y2 / year\n                        :mod (l / last))))\n      :time (t2 / today))"
    ],
    "tree": [
      "(s / sentence-01\n   :ARG0 (c / court\n            :mod (c2 / country\n                     :name (n / name\n                              :op1 \"Italy\"))))",
      "(s / sentence-01\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Domenico\"\n                      :op2 \"Rancadore\")))",
      "(s / sentence-01\n   :ARG2 (t / temporal-quantity\n            :quant 7\n            :unit (y / year)))",
      "(s / sentence-01\n   :time (d / date-entity\n            :year 1999))",
      "(c / court\n   :mod (c2 / country\n            :name (n / name\n                     :op1 \"Italy\")))",
      "(p / person\n   :name (n2 / name\n             :op1 \"Domenico\"\n             :op2 \"Rancadore\"))",
      "(t / temporal-quantity\n   :quant 7\n   :unit (y / year))",
      "(s / sentence-01\n   :ARG0 (c / court))",
      "(s / sentence-01\n   :ARG0 (c / court))",
      "(s / sentence-01\n   :ARG0 (c / court\n            :mod (c2 / country\n                     :name (n / name\n                              :op1 \"Italy\")))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Domenico\"\n                      :op2 \"Rancadore\"))\n   :ARG2 (t / temporal-quantity\n            :quant 7\n            :unit (y / year)))",
      "(s / sentence-01\n   :time (d / date-entity\n            :year 1999))",
      "(c / convict-01\n   :ARG1 (h / he))",
      "(c / convict-01\n   :ARG2 (a / and\n            :op1 (r / role\n                    :mod (m / man\n                            :mod (h2 / honor))\n                    :domain h)\n            :op2 (b / bribe-01\n                    :ARG0 (h / he)\n                    :ARG1 (p / person\n                             :ARG0-of (b2 / build-01)))))",
      "(a / and\n   :op1 (r / role\n           :mod (m / man\n                   :mod (h2 / honor))\n           :domain h)\n   :op2 (b / bribe-01\n           :ARG0 (h / he)\n           :ARG1 (p / person\n                    :ARG0-of (b2 / build-01))))",
      "(c / convict-01\n   :ARG1 (h / he))",
      "(b / bribe-01\n   :ARG0 (h / he)\n   :ARG1 (p / person))",
      "(b2 / build-01)",
      "(c / convict-01\n   :ARG1 (h / he))",
      "(b / bribe-01\n   :ARG0 (h / he))",
      "(b / bribe-01\n   :ARG1 (p / person))",
      "(c / convict-01\n   :ARG1 (h / he)\n   :ARG2 (r / role\n            :mod (m / man\n                    :mod (h2 / honor))\n            :domain h))",
      "(c / convict-01\n   :ARG1 (h / he)\n   :ARG2 (b / bribe-01\n            :ARG0 h\n            :ARG1 (p / person\n                     :ARG0-of (b2 / build-01))))",
      "(c / convict-01\n   :ARG1 (h / he)\n   :ARG2 (a / and\n            :op1 (r / role\n                    :mod (m / man\n                            :mod (h2 / honor))\n                    :domain h)\n            :op2 (b / bribe-01\n                    :ARG0 h\n                    :ARG1 (p / person\n                             :ARG0 (b2 / build-01)))))",
      "(c / convict-01)",
      "(l / lose-03\n   :ARG0 (f / fugitive\n            :mod (c / criminal-organization\n                    :name (n / name\n                             :op1 \"Mafia\"))\n            :mod (ii / island\n                     :name (n2 / name\n                               :op1 \"Sicily\"))))",
      "(l / lose-03\n   :ARG1 (b / battle-01\n            :ARG0 (f / fugitive)\n            :ARG1 (e / extradite-01\n                     :ARG1 f\n                     :ARG3 (c2 / country\n                               :name (n3 / name\n                                         :op1 \"Italy\")))))",
      "(l / lose-03\n   :time (d / date-entity\n            :month 2))",
      "(f / fugitive\n   :mod (c / criminal-organization\n           :name (n / name\n                    :op1 \"Mafia\"))\n   :mod (ii / island\n            :name (n2 / name\n                      :op1 \"Sicily\")))",
      "(b / battle-01\n   :ARG0 (f / fugitive)\n   :ARG1 (e / extradite-01\n            :ARG1 f\n            :ARG3 (c2 / country\n                      :name (n3 / name\n                                :op1 \"Italy\"))))",
      "(l / lose-03\n   :ARG0 (f / fugitive))",
      "(b / battle-01\n   :ARG0 (f / fugitive)\n   :ARG1 (e / extradite-01))",
      "(e / extradite-01\n   :ARG1 (f / fugitive)\n   :ARG3 (c2 / country :name (n3 / name :op1 \"Italy\")))",
      "(l / lose-03\n   :ARG0 (f / fugitive))",
      "(b / battle-01\n   :ARG0 (f / fugitive))",
      "(b / battle-01\n   :ARG1 (e / extradite-01))",
      "(e / extradite-01\n   :ARG1 (f / fugitive))",
      "(e / extradite-01\n   :ARG3 (c2 / country :name (n3 / name :op1 \"Italy\")))",
      "(l / lose-03\n   :ARG0 (f / fugitive\n            :mod (c / criminal-organization\n                    :name (n / name\n                             :op1 \"Mafia\"))\n            :mod (ii / island\n                     :name (n2 / name\n                               :op1 \"Sicily\")))\n   :ARG1 (b / battle-01\n            :ARG0 f\n            :ARG1 (e / extradite-01\n                     :ARG1 f\n                     :ARG3 (c2 / country\n                               :name (n3 / name\n                                         :op1 \"Italy\")))))",
      "(l / lose-03\n   :time (d / date-entity\n            :month 2))",
      "(e / emerge-02\n   :ARG1 (e2 / expire-01\n             :ARG1 (c / case-03\n                      :ARG2 (p / person\n                               :age (t / temporal-quantity\n                                       :quant 65\n                                       :unit (y / year))))\n             :time (d / date-entity\n                      :month 10\n                      :mod (y2 / year\n                               :mod (l / last)))))",
      "(e / emerge-02\n   :time (t2 / today))",
      "(e2 / expire-01\n    :ARG1 (c / case-03\n             :ARG2 (p / person\n                      :age (t / temporal-quantity\n                              :quant 65\n                              :unit (y / year))))\n    :time (d / date-entity\n             :month 10\n             :mod (y2 / year\n                      :mod (l / last))))",
      "(e / emerge-02\n   :ARG1 (e2 / expire-01))",
      "(e2 / expire-01\n    :ARG1 (c / case-03))",
      "(c / case-03\n   :ARG2 (p / person))",
      "(e / emerge-02\n   :ARG1 (e2 / expire-01))",
      "(e2 / expire-01\n    :ARG1 (c / case-03))",
      "(c / case-03\n   :ARG2 (p / person))",
      "(e / emerge-02\n   :ARG1 (e2 / expire-01\n             :ARG1 (c / case-03\n                      :ARG2 (p / person\n                               :age (t / temporal-quantity\n                                       :quant 65\n                                       :unit (y / year))))))",
      "(e / emerge-02\n   :time (t2 / today))"
    ],
    "smus": [
      "The sentence was given by an Italian court.",
      "The sentence was given to Domenico Rancadore.",
      "The sentence is a seven year sentence.",
      "The sentence was in 1999.",
      "The Italian court.",
      "Domenico Rancadore",
      "7 year",
      "The court sentenced.",
      "The court sentenced.",
      "A court in Italy sentenced Domenico Rancadore to seven years.",
      "The sentence was in 1999.",
      "He was convicted.",
      "He was convicted of a role of honor man and bribing builders.",
      "He was an honor man's role, he bribed builders.",
      "He was convicted.",
      "He bribes people.",
      "Buildings",
      "He was convicted.",
      "He took bribes.",
      "Bribes to people.",
      "He was convicted of the role of an honorable man.",
      "He was convicted of bribing builders.",
      "He was convicted of a role of honor man and bribery to builders.",
      "Convicted.",
      "The fugitive Mafia of Sicily lost.",
      "The fugitive lost the battle to be extradited to Italy.",
      "Losed in February.",
      "Mafia fugitive from Sicily",
      "The fugitive is in battle over extradition to Italy.",
      "The fugitive lost.",
      "The fugitive is in battle over extradition.",
      "The fugitive was extradited to Italy.",
      "The fugitive lost.",
      "The fugitive is in battle.",
      "The extradition battle is brewing.",
      "Extradition of the fugitive",
      "Extradition to Italy",
      "The fugitive Italian Mafia fugitive lost the battle over extradition to Italy.",
      "Losed in February.",
      "The case of the 65 year old emerged in October of last year.",
      "Today, it emerged.",
      "The case of the 65 year old expired in October of last year.",
      "The expiration emerged.",
      "The case has expired.",
      "The case is with the people.",
      "The expiration emerged.",
      "The case has expired.",
      "The case is with the people.",
      "The 65 year old case emerged to have expired.",
      "Today, it emerged."
    ]
  },
  {
    "instance_id": "realsumm-62",
    "summary": "<t> Baron the German Shepard was filmed as he helped get the dishes done at home in California . </t> <t> The pup was professionally trained at the Hill Country K9 school . </t> <t> To date the clip of Baron dishwashing has been watched over 27,000 times . </t> <t> Many viewers have deemed the dog 's cleaning antics ' cute ' and adorable ' </t>",
    "summary_trees": [
      "# ::snt  Baron the German Shepard was filmed as he helped get the dishes done at home in California . \n(f / film-01\n      :ARG1 (a / animal\n            :name (n / name\n                  :op1 \"Baron\"\n                  :op2 \"the\"\n                  :op3 \"German\"\n                  :op4 \"Shepard\"))\n      :time (h / help-01\n            :ARG0 a\n            :ARG1 (d / do-02\n                  :ARG1 (d2 / dish)\n                  :location (h2 / home\n                        :location (s / state\n                              :name (n2 / name\n                                    :op1 \"California\"))))))",
      "# ::snt  The pup was professionally trained at the Hill Country K9 school . \n(t / train-01\n      :ARG0 (s / school\n            :name (n / name\n                  :op1 \"Hill\"\n                  :op2 \"Country\"\n                  :op3 \"K9\"))\n      :ARG2 (p / pup)\n      :manner (p2 / professional))",
      "# ::snt  To date the clip of Baron dishwashing has been watched over 27,000 times . \n(w / watch-01\n      :ARG1 (c / clip\n            :topic (w2 / wash-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Baron\"))\n                  :ARG1 (d / dish)))\n      :time (t / to-date)\n      :quant (o / over\n            :op1 27000))",
      "# ::snt  Many viewers have deemed the dog 's cleaning antics ' cute ' and adorable ' \n(d / deem-01\n      :ARG0 (p / person\n            :ARG0-of (v / view-01)\n            :quant (m / many))\n      :ARG1 (a / and\n            :op1 (c / cute)\n            :op2 (a2 / adorable)\n            :domain (a3 / antics\n                  :topic (c2 / clean-01\n                        :ARG0 (d2 / dog)))))"
    ],
    "tree": [
      "(f / film-01\n   :ARG1 (a / animal\n            :name (n / name\n                     :op1 \"Baron\"\n                     :op2 \"the\"\n                     :op3 \"German\"\n                     :op4 \"Shepard\")))",
      "(f / film-01\n   :time (h / help-01\n            :ARG0 (a / animal :name (n / name :op1 \"Baron\" :op2 \"the\" :op3 \"German\" :op4 \"Shepard\"))\n            :ARG1 (d / do-02\n                     :ARG1 (d2 / dish)\n                     :location (h2 / home\n                                   :location (s / state\n                                                :name (n2 / name\n                                                          :op1 \"California\"))))))",
      "(a / animal\n   :name (n / name\n            :op1 \"Baron\"\n            :op2 \"the\"\n            :op3 \"German\"\n            :op4 \"Shepard\"))",
      "(h / help-01\n   :ARG0 (a / animal :name (n / name :op1 \"Baron\" :op2 \"the\" :op3 \"German\" :op4 \"Shepard\"))\n   :ARG1 (d / do-02\n            :ARG1 (d2 / dish)\n            :location (h2 / home\n                          :location (s / state\n                                       :name (n2 / name\n                                                 :op1 \"California\")))))",
      "(f / film-01\n   :ARG1 (a / animal :name (n / name :op1 \"Baron\" :op2 \"the\" :op3 \"German\" :op4 \"Shepard\")))",
      "(h / help-01\n   :ARG0 (a / animal :name (n / name :op1 \"Baron\" :op2 \"the\" :op3 \"German\" :op4 \"Shepard\"))\n   :ARG1 (d / do-02))",
      "(d / do-02\n   :ARG1 (d2 / dish))",
      "(f / film-01\n   :ARG1 (a / animal :name (n / name :op1 \"Baron\" :op2 \"the\" :op3 \"German\" :op4 \"Shepard\")))",
      "(h / help-01\n   :ARG0 (a / animal :name (n / name :op1 \"Baron\" :op2 \"the\" :op3 \"German\" :op4 \"Shepard\")))",
      "(h / help-01\n   :ARG1 (d / do-02))",
      "(d / do-02\n   :ARG1 (d2 / dish))",
      "(f / film-01\n   :ARG1 (a / animal\n            :name (n / name\n                     :op1 \"Baron\"\n                     :op2 \"the\"\n                     :op3 \"German\"\n                     :op4 \"Shepard\")))",
      "(f / film-01\n   :time (h / help-01))",
      "(t / train-01\n   :ARG0 (s / school\n            :name (n / name\n                     :op1 \"Hill\"\n                     :op2 \"Country\"\n                     :op3 \"K9\")))",
      "(t / train-01\n   :ARG2 (p / pup))",
      "(t / train-01\n   :manner (p2 / professional))",
      "(s / school\n   :name (n / name\n            :op1 \"Hill\"\n            :op2 \"Country\"\n            :op3 \"K9\"))",
      "(t / train-01\n   :ARG0 (s / school :name (n / name :op1 \"Hill\" :op2 \"Country\" :op3 \"K9\")))",
      "(t / train-01\n   :ARG0 (s / school :name (n / name :op1 \"Hill\" :op2 \"Country\" :op3 \"K9\")))",
      "(t / train-01\n   :ARG0 (s / school\n            :name (n / name\n                     :op1 \"Hill\"\n                     :op2 \"Country\"\n                     :op3 \"K9\"))\n   :ARG2 (p / pup)\n   :manner (p2 / professional))",
      "(t / train-01\n   :manner (p2 / professional))",
      "(w / watch-01\n   :ARG1 (c / clip\n            :topic (w2 / wash-01\n                       :ARG0 (p / person\n                                :name (n / name\n                                         :op1 \"Baron\"))\n                       :ARG1 (d / dish))))",
      "(w / watch-01\n   :time (t / to-date))",
      "(w / watch-01\n   :quant (o / over\n             :op1 27000))",
      "(c / clip\n   :topic (w2 / wash-01\n              :ARG0 (p / person\n                       :name (n / name\n                                :op1 \"Baron\"))\n              :ARG1 (d / dish)))",
      "(w / watch-01\n   :ARG1 (c / clip))",
      "(w2 / wash-01\n    :ARG0 (p / person :name (n / name :op1 \"Baron\")))",
      "(w / watch-01\n   :ARG1 (c / clip))",
      "(w2 / wash-01\n    :ARG0 (p / person :name (n / name :op1 \"Baron\")))",
      "(w / watch-01\n   :ARG1 (c / clip\n            :topic (w2 / wash-01\n                       :ARG0 (p / person\n                                :name (n / name\n                                         :op1 \"Baron\"))\n                       :ARG1 (d / dish)))\n   :quant (o / over\n             :op1 27000))",
      "(w / watch-01\n   :time (t / to-date)\n   :quant (o / over\n             :op1 27000))",
      "(d / deem-01\n   :ARG0 (p / person\n            :ARG0-of (v / view-01)\n            :quant (m / many)))",
      "(d / deem-01\n   :ARG1 (a / and\n            :op1 (c / cute)\n            :op2 (a2 / adorable)\n            :domain (a3 / antics\n                        :topic (c2 / clean-01\n                                   :ARG0 (d2 / dog)))))",
      "(p / person\n   :ARG0-of (v / view-01)\n   :quant (m / many))",
      "(a / and\n   :op1 (c / cute)\n   :op2 (a2 / adorable)\n   :domain (a3 / antics\n               :topic (c2 / clean-01\n                          :ARG0 (d2 / dog))))",
      "(d / deem-01\n   :ARG0 (p / person))",
      "(v / view-01)",
      "(c2 / clean-01\n    :ARG0 (d2 / dog))",
      "(d / deem-01\n   :ARG0 (p / person))",
      "(c2 / clean-01\n    :ARG0 (d2 / dog))",
      "(d / deem-01\n   :ARG0 (p / person\n            :ARG0-of (v / view-01)\n            :quant (m / many))\n   :ARG1 (c / cute))",
      "(d / deem-01\n   :ARG0 (p / person\n            :ARG0-of (v / view-01)\n            :quant (m / many))\n   :ARG1 (a2 / adorable\n             :domain (a3 / antics\n                         :topic (c2 / clean-01\n                                    :ARG0 (d2 / dog)))))",
      "(d / deem-01\n   :ARG0 (p / person\n            :ARG0 (v / view-01)\n            :quant (m / many))\n   :ARG1 (a / and\n            :op1 (c / cute)\n            :op2 (a2 / adorable)\n            :domain (a3 / antics\n                        :topic (c2 / clean-01\n                                   :ARG0 (d2 / dog)))))",
      "(d / deem-01)"
    ],
    "smus": [
      "Baron the German Shepard was filmed.",
      "Filmed as Baron the German Shepard helped do the dishes at his California home.",
      "Baron the German Shepard.",
      "Baron the German Shepard helped do the dishes at his California home.",
      "Baron the German Shepard was filmed.",
      "Baron the German Shepard helped get it done.",
      "The dishes were done.",
      "Baron the German Shepard was filmed.",
      "Baron the German Shepard helped.",
      "Helped get done.",
      "The dishes were done.",
      "Baron the German Shepard was filmed.",
      "Filmed when helped.",
      "The Hill Country K9 school was trained.",
      "The pup was trained.",
      "Professionally trained.",
      "Hill Country K9",
      "The Hill Country K9 school was trained.",
      "The Hill Country K9 school was trained.",
      "The Hill Country K9 school has professionally trained the pup.",
      "Professionally trained.",
      "Watched the clip of Baron washing the dish.",
      "Watched to date.",
      "Over 27,000 watched.",
      "a href=\"http://www.youtube.com/watch?v=bgwgw\">Clip: Baron Washing Dishes/a>",
      "Watch clip.",
      "Baron washed.",
      "Watch clip.",
      "Baron washed.",
      "Over 27,000 watched the clip of Baron washing the dish.",
      "Over 27,000 watched to date.",
      "As deemed by many viewers.",
      "The dog cleaning antics are deemed cute and adorable.",
      "There are many viewers.",
      "The dog cleaning antics are cute and adorable.",
      "As deemed by the people.",
      "Views",
      "Dog cleaning",
      "As deemed by the people.",
      "Dog cleaning",
      "Many viewers have deemed it cute.",
      "The dog cleaning antics are deemed adorable by many viewers.",
      "Many viewers have deemed the dog's cleaning antics cute and adorable.",
      "deemed."
    ]
  },
  {
    "instance_id": "realsumm-63",
    "summary": "<t> Jihadis face fines , whipping or even jail time for wearing Nike products . </t> <t> Ban is also partly due to the brand sharing its name with a Greek Goddess . </t> <t> Commanders say the name also sounds like sexual slang words in Arabic . </t> <t> Those living under ISIS are already banned from wearing jeans or items of clothing carrying provocative language or swear words . </t>",
    "summary_trees": [
      "# ::snt  Jihadis face fines , whipping or even jail time for wearing Nike products . \n(f / face-01\n      :ARG0 (j / jihadi)\n      :ARG1 (o / or\n            :op1 (f2 / fine-01)\n            :op2 (w / whip-01)\n            :op3 (j2 / jail-01\n                  :mod (e / even)))\n      :ARG1-of (c / cause-01\n            :ARG0 (w2 / wear-01\n                  :ARG0 j\n                  :ARG1 (p / product\n                        :mod (c2 / company\n                              :name (n / name\n                                    :op1 \"Nike\"))))))",
      "# ::snt  Ban is also partly due to the brand sharing its name with a Greek Goddess . \n(c / cause-01\n      :ARG0 (s / share-01\n            :ARG0 (b / brand)\n            :ARG1 (n / name\n                  :poss b)\n            :ARG2 (p / person\n                  :name (n2 / name\n                        :op1 \"Goddess\")\n                  :mod (c2 / country\n                        :name (n3 / name\n                              :op1 \"Greece\"))))\n      :ARG1 (b2 / ban-01)\n      :degree (p2 / part)\n      :mod (a / also))",
      "# ::snt  Commanders say the name also sounds like sexual slang words in Arabic . \n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (c / commander)))\n      :ARG1 (s2 / sound-01\n            :ARG1 (n / name)\n            :ARG2 (w / word\n                  :mod (s3 / slang\n                        :mod (s4 / sex))\n                  :medium (l / language\n                        :name (n2 / name\n                              :op1 \"Arabic\")))\n            :mod (a / also)))",
      "# ::snt  Those living under ISIS are already banned from wearing jeans or items of clothing carrying provocative language or swear words . \n(b / ban-01\n      :ARG1 (w / wear-01\n            :ARG0 (p / person\n                  :mod (t / that)\n                  :ARG0-of (l / live-01\n                        :location (u / under\n                              :op1 (c / criminal-organization\n                                    :name (n / name\n                                          :op1 \"ISIS\")))))\n            :ARG1 (o / or\n                  :op1 (j / jeans)\n                  :op2 (ii / item\n                        :ARG2-of (c2 / clothe-01))\n                  :ARG0-of (c3 / carry-01\n                        :ARG1 (o2 / or\n                              :op1 (l2 / language\n                                    :ARG0-of (p2 / provoke-01))\n                              :op2 (w2 / word\n                                    :ARG1-of (s / swear-01))))))\n      :ARG2 p\n      :time (a / already))"
    ],
    "tree": [
      "(f / face-01\n   :ARG0 (j / jihadi))",
      "(f / face-01\n   :ARG1 (o / or\n            :op1 (f2 / fine-01)\n            :op2 (w / whip-01)\n            :op3 (j2 / jail-01\n                     :mod (e / even))))",
      "(f / face-01\n   :ARG1-of (c / cause-01\n               :ARG0 (w2 / wear-01\n                         :ARG0 (j / jihadi)\n                         :ARG1 (p / product\n                                  :mod (c2 / company\n                                           :name (n / name\n                                                    :op1 \"Nike\"))))))",
      "(o / or\n   :op1 (f2 / fine-01)\n   :op2 (w / whip-01)\n   :op3 (j2 / jail-01\n            :mod (e / even)))",
      "(c / cause-01\n   :ARG0 (w2 / wear-01\n             :ARG0 (j / jihadi)\n             :ARG1 (p / product\n                      :mod (c2 / company\n                               :name (n / name\n                                        :op1 \"Nike\")))))",
      "(f / face-01\n   :ARG0 (j / jihadi))",
      "(f2 / fine-01)",
      "(w / whip-01)",
      "(j2 / jail-01\n    :mod (e / even))",
      "(c / cause-01\n   :ARG0 (w2 / wear-01))",
      "(w2 / wear-01\n    :ARG0 (j / jihadi)\n    :ARG1 (p / product))",
      "(f / face-01\n   :ARG0 (j / jihadi))",
      "(j2 / jail-01\n    :mod (e / even))",
      "(c / cause-01\n   :ARG0 (w2 / wear-01))",
      "(w2 / wear-01\n    :ARG0 (j / jihadi))",
      "(w2 / wear-01\n    :ARG1 (p / product))",
      "(f / face-01\n   :ARG0 (j / jihadi)\n   :ARG1 (o / or\n            :op1 (f2 / fine-01)\n            :op2 (w / whip-01)\n            :op3 (j2 / jail-01\n                     :mod (e / even)))\n   :ARG1 (c / cause-01\n            :ARG0 (w2 / wear-01\n                      :ARG0 j\n                      :ARG1 (p / product\n                               :mod (c2 / company\n                                        :name (n / name\n                                                 :op1 \"Nike\"))))))",
      "(f / face-01)",
      "(c / cause-01\n   :ARG0 (s / share-01\n            :ARG0 (b / brand)\n            :ARG1 (n / name\n                     :poss b)\n            :ARG2 (p / person\n                     :name (n2 / name\n                               :op1 \"Goddess\")\n                     :mod (c2 / country\n                              :name (n3 / name\n                                        :op1 \"Greece\")))))",
      "(c / cause-01\n   :ARG1 (b2 / ban-01))",
      "(c / cause-01\n   :degree (p2 / part))",
      "(c / cause-01\n   :mod (a / also))",
      "(s / share-01\n   :ARG0 (b / brand)\n   :ARG1 (n / name\n            :poss b)\n   :ARG2 (p / person\n            :name (n2 / name\n                      :op1 \"Goddess\")\n            :mod (c2 / country\n                     :name (n3 / name\n                               :op1 \"Greece\"))))",
      "(c / cause-01\n   :ARG0 (s / share-01 :name (n / name )))",
      "(s / share-01\n   :ARG0 (b / brand))",
      "(b2 / ban-01)",
      "(c / cause-01\n   :ARG0 (s / share-01 :name (n / name )))",
      "(s / share-01\n   :ARG0 (b / brand))",
      "(c / cause-01\n   :ARG0 (s / share-01\n            :ARG0 (b / brand)\n            :ARG1 (n / name\n                     :poss b)\n            :ARG2 (p / person\n                     :name (n2 / name\n                               :op1 \"Goddess\")\n                     :mod (c2 / country\n                              :name (n3 / name\n                                        :op1 \"Greece\"))))\n   :ARG1 (b2 / ban-01)\n   :degree (p2 / part)\n   :mod (a / also))",
      "(c / cause-01\n   :degree (p2 / part)\n   :mod (a / also))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                        :ARG2 (c / commander))))",
      "(s / say-01\n   :ARG1 (s2 / sound-01\n             :ARG1 (n / name)\n             :ARG2 (w / word\n                      :mod (s3 / slang\n                               :mod (s4 / sex))\n                      :medium (l / language\n                                 :name (n2 / name\n                                           :op1 \"Arabic\")))\n             :mod (a / also)))",
      "(p / person\n   :ARG0-of (h / have-org-role-91\n               :ARG2 (c / commander)))",
      "(s2 / sound-01\n    :ARG1 (n / name)\n    :ARG2 (w / word\n             :mod (s3 / slang\n                      :mod (s4 / sex))\n             :medium (l / language\n                        :name (n2 / name\n                                  :op1 \"Arabic\")))\n    :mod (a / also))",
      "(s / say-01\n   :ARG0 (p / person))",
      "(s2 / sound-01\n    :ARG1 (n / name))",
      "(s / say-01\n   :ARG0 (p / person))",
      "(s2 / sound-01\n    :ARG1 (n / name))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (c / commander)))\n   :ARG1 (s2 / sound-01\n             :ARG1 (n / name)\n             :ARG2 (w / word\n                      :mod (s3 / slang\n                               :mod (s4 / sex))\n                      :medium (l / language\n                                 :name (n2 / name\n                                           :op1 \"Arabic\")))\n             :mod (a / also)))",
      "(s / say-01)",
      "(b / ban-01\n   :ARG1 (w / wear-01\n            :ARG0 (p / person\n                     :mod (t / that)\n                     :ARG0-of (l / live-01\n                                 :location (u / under\n                                              :op1 (c / criminal-organization\n                                                      :name (n / name\n                                                               :op1 \"ISIS\")))))\n            :ARG1 (o / or\n                     :op1 (j / jeans)\n                     :op2 (ii / item\n                              :ARG2-of (c2 / clothe-01))\n                     :ARG0-of (c3 / carry-01\n                                  :ARG1 (o2 / or\n                                            :op1 (l2 / language\n                                                     :ARG0-of (p2 / provoke-01))\n                                            :op2 (w2 / word\n                                                     :ARG1-of (s / swear-01)))))))",
      "(b / ban-01\n   :ARG2 (p / person))",
      "(b / ban-01\n   :time (a / already))",
      "(w / wear-01\n   :ARG0 (p / person\n            :mod (t / that)\n            :ARG0-of (l / live-01\n                        :location (u / under\n                                     :op1 (c / criminal-organization\n                                             :name (n / name\n                                                      :op1 \"ISIS\")))))\n   :ARG1 (o / or\n            :op1 (j / jeans)\n            :op2 (ii / item\n                     :ARG2-of (c2 / clothe-01))\n            :ARG0-of (c3 / carry-01\n                         :ARG1 (o2 / or\n                                   :op1 (l2 / language\n                                            :ARG0-of (p2 / provoke-01))\n                                   :op2 (w2 / word\n                                            :ARG1-of (s / swear-01))))))",
      "(b / ban-01\n   :ARG1 (w / wear-01))",
      "(w / wear-01\n   :ARG0 (p / person))",
      "(l / live-01\n   :location (u / under))",
      "(c2 / clothe-01)",
      "(c3 / carry-01\n    :ARG1 (o2 / or))",
      "(p2 / provoke-01)",
      "(s / swear-01)",
      "(b / ban-01\n   :ARG1 (w / wear-01))",
      "(w / wear-01\n   :ARG0 (p / person))",
      "(l / live-01\n   :location (u / under))",
      "(c3 / carry-01\n    :ARG1 (o2 / or))",
      "(b / ban-01\n   :ARG1 (w / wear-01\n            :ARG0 (p / person\n                     :mod (t / that)\n                     :ARG0 (l / live-01))\n            :ARG1 (o / or\n                     :op1 (j / jeans)\n                     :op2 (ii / item\n                              :ARG2 (c2 / clothe-01))\n                     :ARG0 (c3 / carry-01\n                               :ARG1 (o2 / or\n                                         :op1 (l2 / language\n                                                  :ARG0 (p2 / provoke-01))\n                                         :op2 (w2 / word\n                                                  :ARG1 (s / swear-01))))))\n   :ARG2 p)",
      "(b / ban-01)"
    ],
    "smus": [
      "Jihadis face.",
      "Face fines, whipping or even jail.",
      "Jihadis face wearing Nike products.",
      "Fines, whipping, or even jail.",
      "Because Jihadis are wearing Nike products.",
      "Jihadis face.",
      "Fines.",
      "Whipping.",
      "Even jail.",
      "Because of wearing.",
      "Jihadis are wearing products.",
      "Jihadis face.",
      "Even jail.",
      "Because of wearing.",
      "Jihadis are wearing shirts.",
      "Wearing products",
      "Jihadis face fines, whipping or even jail for wearing Nike products.",
      "Face it.",
      "Because the brand is sharing its name with the Goddess of Greece.",
      "So ban.",
      "partly because",
      "Also because...",
      "The brand is sharing its name with the Goddess of Greece.",
      "Because the name is shared.",
      "The brand is sharing.",
      "BANNING.",
      "Because the name is shared.",
      "The brand is sharing.",
      "The ban is also partially due to the brand sharing its name with the Greek goddess.",
      "Also partly because...",
      "Commanders say --",
      "Say the name also sounds like sex slang words in Arabic.",
      "Commanders",
      "The name also sounds like sex slang words in Arabic.",
      "People say...",
      "Sounds like a name.",
      "People say...",
      "Sounds like a name.",
      "Commanders say the name also sounds like sex slang words in Arabic.",
      "Say.",
      "Those living under ISIS are banned from wearing jeans or other clothing items carrying provocative language or swearing wors.",
      "People are banned.",
      "It's already banned.",
      "Those living under ISIS are wearing jeans or other clothing items carrying provocative language or swearing wors.",
      "Wearing is banned.",
      "People are wearing.",
      "Living under.",
      "Clothing",
      "Carrying or",
      "Provoked.",
      "swearing.",
      "Wearing is banned.",
      "People are wearing.",
      "Living under.",
      "Carrying or",
      "Living people are banned from wearing jeans or other clothing items carrying provocative language or swearing wors.",
      "Banned."
    ]
  },
  {
    "instance_id": "realsumm-64",
    "summary": "<t> Lorraine Bracco was asked by The Sopranos creator to be Carmela . </t> <t> The actress turned him down because she played a mobster 's wife in Martin Scorsese 's Goodfellas in 1990 . </t> <t> Convinced showrunner David Chase to let her play the role of Dr. Jennifer Melfi . </t>",
    "summary_trees": [
      "# ::snt  Lorraine Bracco was asked by The Sopranos creator to be Carmela . \n(a / ask-02\n      :ARG0 (p / person\n            :ARG0-of (c / create-01\n                  :ARG1 (b / broadcast-program\n                        :name (n / name\n                              :op1 \"The\"\n                              :op2 \"Sopranos\"))))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Carmela\")\n            :domain (p3 / person\n                  :name (n3 / name\n                        :op1 \"Lorraine\"\n                        :op2 \"Bracco\")))\n      :ARG2 p3)",
      "# ::snt  The actress turned him down because she played a mobster 's wife in Martin Scorsese 's Goodfellas in 1990 . \n(t / turn-down-05\n      :ARG0 (p / person\n            :ARG0-of (a / act-01))\n      :ARG1 (h / he)\n      :ARG1-of (c / cause-01\n            :ARG0 (p2 / play-02\n                  :ARG0 p\n                  :ARG1 (p3 / person\n                        :ARG0-of (h2 / have-rel-role-91\n                              :ARG1 (m / mobster)\n                              :ARG2 (w / wife)))\n                  :time (w2 / work-of-art\n                        :name (n / name\n                              :op1 \"Goodfellas\")\n                        :poss (p4 / person\n                              :name (n2 / name\n                                    :op1 \"Martin\"\n                                    :op2 \"Scorsese\"))\n                        :time (d / date-entity\n                              :year 1990)))))",
      "# ::snt  Convinced showrunner David Chase to let her play the role of Dr. Jennifer Melfi . \n(c / convince-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"David\"\n                  :op2 \"Chase\")\n            :ARG0-of (r / run-01\n                  :ARG1 (s / show)))\n      :ARG2 (l / let-01\n            :ARG0 p\n            :ARG1 (p2 / play-02\n                  :ARG0 (s2 / she)\n                  :ARG1 (p3 / person\n                        :name (n2 / name\n                              :op1 \"Dr.\"\n                              :op2 \"Jennifer\"\n                              :op3 \"Melfi\")))))"
    ],
    "tree": [
      "(a / ask-02\n   :ARG0 (p / person\n            :ARG0-of (c / create-01\n                        :ARG1 (b / broadcast-program\n                                 :name (n / name\n                                          :op1 \"The\"\n                                          :op2 \"Sopranos\")))))",
      "(a / ask-02\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Carmela\")\n             :domain (p3 / person\n                         :name (n3 / name\n                                   :op1 \"Lorraine\"\n                                   :op2 \"Bracco\"))))",
      "(a / ask-02\n   :ARG2 (p3 / person :name (n3 / name :op1 \"Lorraine\" :op2 \"Bracco\")))",
      "(p / person\n   :ARG0-of (c / create-01\n               :ARG1 (b / broadcast-program\n                        :name (n / name\n                                 :op1 \"The\"\n                                 :op2 \"Sopranos\"))))",
      "(p2 / person\n    :name (n2 / name\n              :op1 \"Carmela\")\n    :domain (p3 / person\n                :name (n3 / name\n                          :op1 \"Lorraine\"\n                          :op2 \"Bracco\")))",
      "(a / ask-02\n   :ARG0 (p / person))",
      "(c / create-01\n   :ARG1 (b / broadcast-program :name (n / name :op1 \"The\" :op2 \"Sopranos\")))",
      "(a / ask-02\n   :ARG0 (p / person))",
      "(c / create-01\n   :ARG1 (b / broadcast-program :name (n / name :op1 \"The\" :op2 \"Sopranos\")))",
      "(a / ask-02\n   :ARG0 (p / person\n            :ARG0 (c / create-01\n                     :ARG1 (b / broadcast-program\n                              :name (n / name\n                                       :op1 \"The\"\n                                       :op2 \"Sopranos\"))))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Carmela\")\n             :domain (p3 / person\n                         :name (n3 / name\n                                   :op1 \"Lorraine\"\n                                   :op2 \"Bracco\")))\n   :ARG2 p3)",
      "(a / ask-02)",
      "(t / turn-down-05\n   :ARG0 (p / person\n            :ARG0-of (a / act-01)))",
      "(t / turn-down-05\n   :ARG1 (h / he))",
      "(t / turn-down-05\n   :ARG1-of (c / cause-01\n               :ARG0 (p2 / play-02\n                         :ARG0 (p / person)\n                         :ARG1 (p3 / person\n                                   :ARG0-of (h2 / have-rel-role-91\n                                                :ARG1 (m / mobster)\n                                                :ARG2 (w / wife)))\n                         :time (w2 / work-of-art\n                                   :name (n / name\n                                            :op1 \"Goodfellas\")\n                                   :poss (p4 / person\n                                             :name (n2 / name\n                                                       :op1 \"Martin\"\n                                                       :op2 \"Scorsese\"))\n                                   :time (d / date-entity\n                                            :year 1990)))))",
      "(p / person\n   :ARG0-of (a / act-01))",
      "(c / cause-01\n   :ARG0 (p2 / play-02\n             :ARG0 (p / person)\n             :ARG1 (p3 / person\n                       :ARG0-of (h2 / have-rel-role-91\n                                    :ARG1 (m / mobster)\n                                    :ARG2 (w / wife)))\n             :time (w2 / work-of-art\n                       :name (n / name\n                                :op1 \"Goodfellas\")\n                       :poss (p4 / person\n                                 :name (n2 / name\n                                           :op1 \"Martin\"\n                                           :op2 \"Scorsese\"))\n                       :time (d / date-entity\n                                :year 1990))))",
      "(t / turn-down-05\n   :ARG0 (p / person))",
      "(a / act-01)",
      "(c / cause-01\n   :ARG0 (p2 / play-02))",
      "(p2 / play-02\n    :ARG0 (p / person)\n    :ARG1 (p3 / person))",
      "(t / turn-down-05\n   :ARG0 (p / person))",
      "(c / cause-01\n   :ARG0 (p2 / play-02))",
      "(p2 / play-02\n    :ARG0 (p / person))",
      "(p2 / play-02\n    :ARG1 (p3 / person))",
      "(t / turn-down-05\n   :ARG0 (p / person\n            :ARG0 (a / act-01))\n   :ARG1 (h / he)\n   :ARG1 (c / cause-01\n            :ARG0 (p2 / play-02\n                      :ARG0 p\n                      :ARG1 (p3 / person\n                                :ARG0 (h2 / have-rel-role-91\n                                          :ARG1 (m / mobster)\n                                          :ARG2 (w / wife))))))",
      "(t / turn-down-05)",
      "(c / convince-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Chase\")\n            :ARG0-of (r / run-01\n                        :ARG1 (s / show))))",
      "(c / convince-01\n   :ARG2 (l / let-01\n            :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Chase\")))\n            :ARG1 (p2 / play-02\n                      :ARG0 (s2 / she)\n                      :ARG1 (p3 / person\n                                :name (n2 / name\n                                          :op1 \"Dr.\"\n                                          :op2 \"Jennifer\"\n                                          :op3 \"Melfi\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"David\"\n            :op2 \"Chase\")\n   :ARG0-of (r / run-01\n               :ARG1 (s / show)))",
      "(l / let-01\n   :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Chase\")))\n   :ARG1 (p2 / play-02\n             :ARG0 (s2 / she)\n             :ARG1 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Dr.\"\n                                 :op2 \"Jennifer\"\n                                 :op3 \"Melfi\"))))",
      "(c / convince-01\n   :ARG1 (p / person :name (n / name :op1 \"David\" :op2 \"Chase\"))))",
      "(r / run-01\n   :ARG1 (s / show))",
      "(l / let-01\n   :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Chase\")))\n   :ARG1 (p2 / play-02))",
      "(p2 / play-02\n    :ARG0 (s2 / she))",
      "(c / convince-01\n   :ARG1 (p / person :name (n / name :op1 \"David\" :op2 \"Chase\"))))",
      "(r / run-01\n   :ARG1 (s / show))",
      "(l / let-01\n   :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Chase\"))))",
      "(l / let-01\n   :ARG1 (p2 / play-02))",
      "(p2 / play-02\n    :ARG0 (s2 / she))",
      "(c / convince-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Chase\")\n            :ARG0 (r / run-01\n                     :ARG1 (s / show)))\n   :ARG2 (l / let-01\n            :ARG0 p\n            :ARG1 (p2 / play-02\n                      :ARG0 (s2 / she)\n                      :ARG1 (p3 / person\n                                :name (n2 / name\n                                          :op1 \"Dr.\"\n                                          :op2 \"Jennifer\"\n                                          :op3 \"Melfi\")))))",
      "(c / convince-01)"
    ],
    "smus": [
      "asked the creator of The Sopranos.",
      "asked if Lorraine Bracco was Carmela?",
      "asked Lorraine Bracco.",
      "The creator of The Sopranos.",
      "Lorraine Bracco is Carmela.",
      "People have asked.",
      "The Sopranos was a creation.",
      "People have asked.",
      "The Sopranos was a creation.",
      "The creators of The Sopranos have asked her to be Carmela Lorraine Bracco.",
      "asked.",
      "The actor turned down.",
      "He was turned down.",
      "Turned down because people played the wife of a mobster in Martin Scorsese's Goodfellas in 1990.",
      "Actor:",
      "Because in Martin Scorsese's Goodfellas in 1990, people played the wife of a mobster.",
      "People turned down.",
      "Act.",
      "Because it played.",
      "People played people.",
      "People turned down.",
      "Because it played.",
      "People played.",
      "Played with people.",
      "The actor turned him down because he played the wife of a mobster.",
      "Turned down.",
      "David Chase, the show's showrunner, was convinced.",
      "David Chase was convinced that she would let her play Dr. Jennifer Melfi.",
      "Showrunner David Chase",
      "David Chase will let her play Dr. Jennifer Melfi.",
      "David Chase was convinced.",
      "The show is running.",
      "David Chase will let play.",
      "She'll play.",
      "David Chase was convinced.",
      "The show is running.",
      "David Chase, let's.",
      "Let's play.",
      "She'll play.",
      "David Chase, the show's showrunner, was convinced to let her play Dr. Jennifer Melfi.",
      "Convincing."
    ]
  },
  {
    "instance_id": "realsumm-65",
    "summary": "<t> Kevin Carr set off on his epic journey from Haytor , Dartmoor in July 2013 . </t> <t> He is now less than 24 hours away from completing his epic trip . </t> <t> Mr Carr ran around the world unsupported - taking his own tent with him . </t> <t> He is set to break the previous record held by an Australian by 24 hours . </t>",
    "summary_trees": [
      "# ::snt  Kevin Carr set off on his epic journey from Haytor , Dartmoor in July 2013 . \n(s / set-off-06\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Kevin\"\n                  :op2 \"Carr\"))\n      :ARG1 (j / journey-01\n            :ARG0 p\n            :mod (e / epic))\n      :source (l / location\n            :name (n2 / name\n                  :op1 \"Haytor\")\n            :part-of (ii / island\n                  :name (n3 / name\n                        :op1 \"Dartmoor\")))\n      :time (d / date-entity\n            :month 7\n            :year 2013))",
      "# ::snt  He is now less than 24 hours away from completing his epic trip . \n(b / be-temporally-at-91\n      :ARG1 (h / he)\n      :ARG2 (a / away\n            :op1 (c / complete-01\n                  :ARG0 h\n                  :ARG1 (t / trip-03\n                        :ARG0 h\n                        :mod (e / epic)))\n            :quant (l / less-than\n                  :op1 (t2 / temporal-quantity\n                        :quant 24\n                        :unit (h2 / hour))))\n      :time (n / now))",
      "# ::snt  Mr Carr ran around the world unsupported - taking his own tent with him . \n(r / run-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Mr\"\n                  :op2 \"Carr\"))\n      :ARG1 (a / around\n            :op1 (w / world))\n      :manner (s / support-01\n            :polarity -\n            :ARG1 p)\n      :manner (t / take-01\n            :ARG0 p\n            :ARG1 (t2 / tent\n                  :poss p)\n            :accompanier w))",
      "# ::snt  He is set to break the previous record held by an Australian by 24 hours . \n(s / set-08\n      :ARG1 (h / he)\n      :ARG2 (b / break-02\n            :ARG0 h\n            :ARG1 (r / record\n                  :time (p / previous)\n                  :ARG1-of (h2 / hold-01\n                        :ARG0 (p2 / person\n                              :mod (c / country\n                                    :name (n / name\n                                          :op1 \"Australia\")))))\n            :extent (t / temporal-quantity\n                  :quant 24\n                  :unit (h3 / hour))))"
    ],
    "tree": [
      "(s / set-off-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Carr\")))",
      "(s / set-off-06\n   :ARG1 (j / journey-01\n            :ARG0 (p / person :name (n / name :op1 \"Kevin\" :op2 \"Carr\"))\n            :mod (e / epic)))",
      "(s / set-off-06\n   :source (l / location\n              :name (n2 / name\n                        :op1 \"Haytor\")\n              :part-of (ii / island\n                           :name (n3 / name\n                                     :op1 \"Dartmoor\"))))",
      "(s / set-off-06\n   :time (d / date-entity\n            :month 7\n            :year 2013))",
      "(p / person\n   :name (n / name\n            :op1 \"Kevin\"\n            :op2 \"Carr\"))",
      "(j / journey-01\n   :ARG0 (p / person :name (n / name :op1 \"Kevin\" :op2 \"Carr\"))\n   :mod (e / epic))",
      "(l / location\n   :name (n2 / name\n             :op1 \"Haytor\")\n   :part-of (ii / island\n                :name (n3 / name\n                          :op1 \"Dartmoor\")))",
      "(d / date-entity\n   :month 7\n   :year 2013)",
      "(s / set-off-06\n   :ARG0 (p / person :name (n / name :op1 \"Kevin\" :op2 \"Carr\")))",
      "(j / journey-01\n   :ARG0 (p / person :name (n / name :op1 \"Kevin\" :op2 \"Carr\"))\n   :mod (e / epic))",
      "(s / set-off-06\n   :ARG0 (p / person :name (n / name :op1 \"Kevin\" :op2 \"Carr\")))",
      "(j / journey-01\n   :ARG0 (p / person :name (n / name :op1 \"Kevin\" :op2 \"Carr\")))",
      "(j / journey-01\n   :mod (e / epic))",
      "(s / set-off-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Kevin\"\n                     :op2 \"Carr\"))\n   :ARG1 (j / journey-01\n            :ARG0 p\n            :mod (e / epic)))",
      "(s / set-off-06\n   :source (l / location\n              :name (n2 / name\n                        :op1 \"Haytor\")\n              :part (ii / island\n                        :name (n3 / name\n                                  :op1 \"Dartmoor\")))\n   :time (d / date-entity\n            :month 7\n            :year 2013))",
      "(b / be-temporally-at-91\n   :ARG1 (h / he))",
      "(b / be-temporally-at-91\n   :ARG2 (a / away\n            :op1 (c / complete-01\n                    :ARG0 (h / he)\n                    :ARG1 (t / trip-03\n                             :ARG0 h\n                             :mod (e / epic)))\n            :quant (l / less-than\n                      :op1 (t2 / temporal-quantity\n                               :quant 24\n                               :unit (h2 / hour)))))",
      "(b / be-temporally-at-91\n   :time (n / now))",
      "(a / away\n   :op1 (c / complete-01\n           :ARG0 (h / he)\n           :ARG1 (t / trip-03\n                    :ARG0 h\n                    :mod (e / epic)))\n   :quant (l / less-than\n             :op1 (t2 / temporal-quantity\n                      :quant 24\n                      :unit (h2 / hour))))",
      "(c / complete-01\n   :ARG0 (h / he)\n   :ARG1 (t / trip-03))",
      "(t / trip-03\n   :ARG0 (h / he)\n   :mod (e / epic))",
      "(c / complete-01\n   :ARG0 (h / he))",
      "(c / complete-01\n   :ARG1 (t / trip-03))",
      "(t / trip-03\n   :ARG0 (h / he))",
      "(t / trip-03\n   :mod (e / epic))",
      "(b / be-temporally-at-91\n   :ARG1 (h / he)\n   :ARG2 (a / away\n            :op1 (c / complete-01\n                    :ARG0 h\n                    :ARG1 (t / trip-03\n                             :ARG0 h\n                             :mod (e / epic)))\n            :quant (l / less-than\n                      :op1 (t2 / temporal-quantity\n                               :quant 24\n                               :unit (h2 / hour)))))",
      "(b / be-temporally-at-91\n   :time (n / now))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carr\")))",
      "(r / run-02\n   :ARG1 (a / around\n            :op1 (w / world)))",
      "(r / run-02\n   :manner (s / support-01\n              :polarity -\n              :ARG1 (p / person :name (n / name :op1 \"Mr\" :op2 \"Carr\"))))",
      "(r / run-02\n   :manner (t / take-01\n              :ARG0 (p / person :name (n / name :op1 \"Mr\" :op2 \"Carr\"))\n              :ARG1 (t2 / tent\n                        :poss p)\n              :accompanier (w / world)))",
      "(p / person\n   :name (n / name\n            :op1 \"Mr\"\n            :op2 \"Carr\"))",
      "(a / around\n   :op1 (w / world))",
      "(s / support-01\n   :polarity -\n   :ARG1 (p / person :name (n / name :op1 \"Mr\" :op2 \"Carr\")))",
      "(t / take-01\n   :ARG0 (p / person :name (n / name :op1 \"Mr\" :op2 \"Carr\"))\n   :ARG1 (t2 / tent\n             :poss p)\n   :accompanier (w / world))",
      "(r / run-02\n   :ARG0 (p / person :name (n / name :op1 \"Mr\" :op2 \"Carr\")))",
      "(s / support-01\n   :polarity -\n   :ARG1 (p / person :name (n / name :op1 \"Mr\" :op2 \"Carr\")))",
      "(t / take-01\n   :ARG0 (p / person :name (n / name :op1 \"Mr\" :op2 \"Carr\"))\n   :ARG1 (t2 / tent))",
      "(r / run-02\n   :ARG0 (p / person :name (n / name :op1 \"Mr\" :op2 \"Carr\")))",
      "(s / support-01\n   :polarity -)",
      "(s / support-01\n   :ARG1 (p / person :name (n / name :op1 \"Mr\" :op2 \"Carr\")))",
      "(t / take-01\n   :ARG0 (p / person :name (n / name :op1 \"Mr\" :op2 \"Carr\")))",
      "(t / take-01\n   :ARG1 (t2 / tent))",
      "(r / run-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Mr\"\n                     :op2 \"Carr\"))\n   :ARG1 (a / around\n            :op1 (w / world))\n   :manner (s / support-01\n              :polarity -\n              :ARG1 p)\n   :manner (t / take-01\n              :ARG0 p\n              :ARG1 (t2 / tent\n                        :poss p)\n              :accompanier w))",
      "(r / run-02\n   :manner (s / support-01\n              :polarity -)\n   :manner (t / take-01))",
      "(s / set-08\n   :ARG1 (h / he))",
      "(s / set-08\n   :ARG2 (b / break-02\n            :ARG0 (h / he)\n            :ARG1 (r / record\n                     :time (p / previous)\n                     :ARG1-of (h2 / hold-01\n                                  :ARG0 (p2 / person\n                                            :mod (c / country\n                                                    :name (n / name\n                                                             :op1 \"Australia\")))))\n            :extent (t / temporal-quantity\n                       :quant 24\n                       :unit (h3 / hour))))",
      "(b / break-02\n   :ARG0 (h / he)\n   :ARG1 (r / record\n            :time (p / previous)\n            :ARG1-of (h2 / hold-01\n                         :ARG0 (p2 / person\n                                   :mod (c / country\n                                           :name (n / name\n                                                    :op1 \"Australia\")))))\n   :extent (t / temporal-quantity\n              :quant 24\n              :unit (h3 / hour)))",
      "(s / set-08\n   :ARG1 (h / he))",
      "(b / break-02\n   :ARG0 (h / he)\n   :ARG1 (r / record))",
      "(h2 / hold-01\n    :ARG0 (p2 / person))",
      "(s / set-08\n   :ARG1 (h / he))",
      "(b / break-02\n   :ARG0 (h / he))",
      "(b / break-02\n   :ARG1 (r / record))",
      "(h2 / hold-01\n    :ARG0 (p2 / person))",
      "(s / set-08\n   :ARG1 (h / he)\n   :ARG2 (b / break-02\n            :ARG0 h\n            :ARG1 (r / record\n                     :ARG1 (h2 / hold-01\n                               :ARG0 (p2 / person\n                                         :mod (c / country\n                                                 :name (n / name\n                                                          :op1 \"Australia\")))))\n            :extent (t / temporal-quantity\n                       :quant 24\n                       :unit (h3 / hour))))",
      "(s / set-08)"
    ],
    "smus": [
      "Kevin Carr set off.",
      "Kevin Carr's epic journey is set off.",
      "Set off from Haytor on Dartmoor.",
      "Set off in July 2013.",
      "Kevin Carr",
      "Kevin Carr's journey has been epic.",
      "Haytor on Dartmoor",
      "July 2013",
      "Kevin Carr set off.",
      "Kevin Carr's journey has been epic.",
      "Kevin Carr set off.",
      "Kevin Carr's journey",
      "An epic journey.",
      "Kevin Carr has set off on an epic journey.",
      "Set off from Haytor on Dartmoor in July 2013.",
      "He was.",
      "less than 24 hours away from completing his epic trip.",
      "Now.",
      "He was less than 24 hours away from completing his epic trip.",
      "He is completing the trip.",
      "He had an epic trip.",
      "He is complete.",
      "Completing the trip.",
      "He's on a trip.",
      "It was an epic trip.",
      "He was less than 24 hours away from completing his epic trip.",
      "Now.",
      "Mr Carr ran.",
      "ran around the world.",
      "ran unsupported for Mr Carr.",
      "ran with the world taking Mr Carr's tent.",
      "Mr Carr",
      "Around the world.",
      "Mr Carr is not supported.",
      "Mr Carr took his tent with the world.",
      "Mr Carr ran.",
      "Mr Carr is not supported.",
      "Mr Carr took the tent.",
      "Mr Carr ran.",
      "Unsupported.",
      "Mr Carr is supportive.",
      "Mr Carr took it.",
      "Take the tent.",
      "Mr Carr ran around the world unsupported, taking his tent with him.",
      "The run was taken without support.",
      "He's set.",
      "He was set to break the previous Australian record in 24 hours.",
      "He will break the previous record held by the Australians in 24 hours.",
      "He's set.",
      "He did break the record.",
      "People are being held.",
      "He's set.",
      "He did break.",
      "Break the record.",
      "People are being held.",
      "He has set a record of 24 hours to break the Australian record of being held by a person.",
      "Set."
    ]
  },
  {
    "instance_id": "realsumm-66",
    "summary": "<t> David Axelrod masterminded two Obama presidential election victories . </t> <t> He was hired by Labour leader Ed Miliband amid great fanfare last year . </t> <t> Revealed at a book launch that he is not resident for tax purposes in UK . </t> <t> Labour confirms it pays Mr Axelrod in dollars through consultancy firm . </t>",
    "summary_trees": [
      "# ::snt  David Axelrod masterminded two Obama presidential election victories . \n(m / mastermind-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"David\"\n                  :op2 \"Axelrod\"))\n      :ARG1 (w / win-01\n            :quant 2\n            :ARG1 (e / elect-01\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Obama\"))\n                  :ARG2 (p3 / president))))",
      "# ::snt  He was hired by Labour leader Ed Miliband amid great fanfare last year . \n(h / hire-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Ed\"\n                  :op2 \"Miliband\")\n            :ARG0-of (l / lead-02\n                  :ARG1 (p2 / political-party\n                        :name (n2 / name\n                              :op1 \"Labour\"))))\n      :ARG1 (h2 / he)\n      :time (y / year\n            :mod (l2 / last))\n      :manner (f / fanfare\n            :mod (g / great)))",
      "# ::snt  Revealed at a book launch that he is not resident for tax purposes in UK . \n(r / reveal-01\n      :ARG1 (r2 / reside-01\n            :polarity -\n            :ARG0 (h / he)\n            :ARG1 (c / country\n                  :name (n / name\n                        :op1 \"UK\"))\n            :purpose (t / tax-01))\n      :location (l / launch-01\n            :ARG1 (b / book)))",
      "# ::snt  Labour confirms it pays Mr Axelrod in dollars through consultancy firm . \n(c / confirm-01\n      :ARG0 (p / political-party\n            :name (n / name\n                  :op1 \"Labour\"))\n      :ARG1 (p2 / pay-01\n            :ARG0 p\n            :ARG2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Mr\"\n                        :op2 \"Axelrod\"))\n            :manner (d / dollar)\n            :instrument (f / firm\n                  :ARG0-of (c2 / consult-01))))"
    ],
    "tree": [
      "(m / mastermind-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Axelrod\")))",
      "(m / mastermind-01\n   :ARG1 (w / win-01\n            :quant 2\n            :ARG1 (e / elect-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Obama\"))\n                     :ARG2 (p3 / president))))",
      "(p / person\n   :name (n / name\n            :op1 \"David\"\n            :op2 \"Axelrod\"))",
      "(w / win-01\n   :quant 2\n   :ARG1 (e / elect-01\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Obama\"))\n            :ARG2 (p3 / president)))",
      "(m / mastermind-01\n   :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Axelrod\")))",
      "(w / win-01\n   :quant 2\n   :ARG1 (e / elect-01))",
      "(e / elect-01\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Obama\")))",
      "(m / mastermind-01\n   :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Axelrod\")))",
      "(w / win-01\n   :quant 2)",
      "(w / win-01\n   :ARG1 (e / elect-01))",
      "(e / elect-01\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Obama\")))",
      "(m / mastermind-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Axelrod\"))\n   :ARG1 (w / win-01\n            :quant 2\n            :ARG1 (e / elect-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Obama\"))\n                     :ARG2 (p3 / president))))",
      "(m / mastermind-01)",
      "(h / hire-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ed\"\n                     :op2 \"Miliband\")\n            :ARG0-of (l / lead-02\n                        :ARG1 (p2 / political-party\n                                  :name (n2 / name\n                                            :op1 \"Labour\")))))",
      "(h / hire-01\n   :ARG1 (h2 / he))",
      "(h / hire-01\n   :time (y / year\n            :mod (l2 / last)))",
      "(h / hire-01\n   :manner (f / fanfare\n              :mod (g / great)))",
      "(p / person\n   :name (n / name\n            :op1 \"Ed\"\n            :op2 \"Miliband\")\n   :ARG0-of (l / lead-02\n               :ARG1 (p2 / political-party\n                         :name (n2 / name\n                                   :op1 \"Labour\"))))",
      "(y / year\n   :mod (l2 / last))",
      "(f / fanfare\n   :mod (g / great))",
      "(h / hire-01\n   :ARG0 (p / person :name (n / name :op1 \"Ed\" :op2 \"Miliband\"))))",
      "(l / lead-02\n   :ARG1 (p2 / political-party :name (n2 / name :op1 \"Labour\")))",
      "(h / hire-01\n   :ARG0 (p / person :name (n / name :op1 \"Ed\" :op2 \"Miliband\"))))",
      "(l / lead-02\n   :ARG1 (p2 / political-party :name (n2 / name :op1 \"Labour\")))",
      "(h / hire-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Ed\"\n                     :op2 \"Miliband\")\n            :ARG0 (l / lead-02\n                     :ARG1 (p2 / political-party\n                               :name (n2 / name\n                                         :op1 \"Labour\"))))\n   :ARG1 (h2 / he)\n   :manner (f / fanfare\n              :mod (g / great)))",
      "(h / hire-01\n   :time (y / year\n            :mod (l2 / last))\n   :manner (f / fanfare\n              :mod (g / great)))",
      "(r / reveal-01\n   :ARG1 (r2 / reside-01\n             :polarity -\n             :ARG0 (h / he)\n             :ARG1 (c / country\n                      :name (n / name\n                               :op1 \"UK\"))\n             :purpose (t / tax-01)))",
      "(r / reveal-01\n   :location (l / launch-01\n                :ARG1 (b / book)))",
      "(r2 / reside-01\n    :polarity -\n    :ARG0 (h / he)\n    :ARG1 (c / country\n             :name (n / name\n                      :op1 \"UK\"))\n    :purpose (t / tax-01))",
      "(l / launch-01\n   :ARG1 (b / book))",
      "(r / reveal-01\n   :ARG1 (r2 / reside-01))",
      "(r2 / reside-01\n    :polarity -\n    :ARG0 (h / he))",
      "(t / tax-01)",
      "(l / launch-01\n   :ARG1 (b / book))",
      "(r / reveal-01\n   :ARG1 (r2 / reside-01))",
      "(r2 / reside-01\n    :polarity -)",
      "(r2 / reside-01\n    :ARG0 (h / he))",
      "(l / launch-01\n   :ARG1 (b / book))",
      "(r / reveal-01\n   :ARG1 (r2 / reside-01\n             :polarity -\n             :ARG0 (h / he)\n             :ARG1 (c / country\n                      :name (n / name\n                               :op1 \"UK\"))))",
      "(r / reveal-01\n   :location (l / launch-01))",
      "(c / confirm-01\n   :ARG0 (p / political-party\n            :name (n / name\n                     :op1 \"Labour\")))",
      "(c / confirm-01\n   :ARG1 (p2 / pay-01\n             :ARG0 (p / political-party :name (n / name :op1 \"Labour\"))\n             :ARG2 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Mr\"\n                                 :op2 \"Axelrod\"))\n             :manner (d / dollar)\n             :instrument (f / firm\n                            :ARG0-of (c2 / consult-01))))",
      "(p / political-party\n   :name (n / name\n            :op1 \"Labour\"))",
      "(p2 / pay-01\n    :ARG0 (p / political-party :name (n / name :op1 \"Labour\"))\n    :ARG2 (p3 / person\n              :name (n2 / name\n                        :op1 \"Mr\"\n                        :op2 \"Axelrod\"))\n    :manner (d / dollar)\n    :instrument (f / firm\n                   :ARG0-of (c2 / consult-01)))",
      "(c / confirm-01\n   :ARG0 (p / political-party :name (n / name :op1 \"Labour\")))",
      "(p2 / pay-01\n    :ARG0 (p / political-party :name (n / name :op1 \"Labour\"))\n    :ARG2 (p3 / person :name (n2 / name :op1 \"Mr\" :op2 \"Axelrod\")))",
      "(c2 / consult-01)",
      "(c / confirm-01\n   :ARG0 (p / political-party :name (n / name :op1 \"Labour\")))",
      "(p2 / pay-01\n    :ARG0 (p / political-party :name (n / name :op1 \"Labour\")))",
      "(p2 / pay-01\n    :ARG2 (p3 / person :name (n2 / name :op1 \"Mr\" :op2 \"Axelrod\")))",
      "(c / confirm-01\n   :ARG0 (p / political-party\n            :name (n / name\n                     :op1 \"Labour\"))\n   :ARG1 (p2 / pay-01\n             :ARG0 p\n             :ARG2 (p3 / person\n                       :name (n2 / name\n                                 :op1 \"Mr\"\n                                 :op2 \"Axelrod\"))\n             :manner (d / dollar)\n             :instrument (f / firm\n                            :ARG0 (c2 / consult-01))))",
      "(c / confirm-01)"
    ],
    "smus": [
      "David Axelrod masterminded.",
      "Masterminded the two presidential elections Obama won.",
      "David Axelrod",
      "Obama's presidential election has won 2",
      "David Axelrod masterminded.",
      "Two victories in the election.",
      "Obama's election",
      "David Axelrod masterminded.",
      "Two victories.",
      "The election is a victory.",
      "Obama's election",
      "David Axelrod masterminded two victories in Obama's presidential election.",
      "Masterminded.",
      "Labour leader Ed Miliband was hired.",
      "He was hired.",
      "Hired last year.",
      "Hired with great fanfare.",
      "Labour leader Ed Miliband",
      "Last year.",
      "Great fanfare.",
      "Ed Miliband was hired.",
      "Labour leadership",
      "Ed Miliband was hired.",
      "Labour leadership",
      "Labour leader Ed Miliband has hired him with great fanfare.",
      "Hired last year with great fanfare.",
      "It was revealed that he was not resident in the UK for tax purposes.",
      "revealed at book launch",
      "He is not resident in the UK for tax purposes.",
      "The book will be launched.",
      "Residence revealed.",
      "He is not residing.",
      "Taxes.",
      "The book will be launched.",
      "Residence revealed.",
      "Not residing.",
      "He is a resident.",
      "The book will be launched.",
      "It was revealed that he was not residing in the UK.",
      "revealed at launch",
      "Labour confirms.",
      "The confirmation is that Labour pays Mr Axelrod dollars through a consulting firm.",
      "Labour.",
      "Labour pays Mr Axelrod dollars through a consulting firm.",
      "Labour confirms.",
      "Labour pays Mr Axelrod.",
      "Consultation:",
      "Labour confirms.",
      "Labour pays.",
      "Mr Axelrod pays.",
      "Labour confirms it pays Mr Axelrod with dollars through a consulting firm.",
      "confirms."
    ]
  },
  {
    "instance_id": "realsumm-67",
    "summary": "<t> HBO is the US network behind Game of Thrones and the Sopranos . </t> <t> Service is available on Apple TV and iOS exclusively for three months . </t> <t> Apple has also cut the price of Apple TV system from $ 99 ( \u00a3 65 ) to $ 69 . </t>",
    "summary_trees": [
      "# ::snt  HBO is the US network behind Game of Thrones and the Sopranos . \n(n / network\n      :domain (b / broadcast-program\n            :name (n2 / name\n                  :op1 \"HBO\"))\n      :mod (c / country\n            :name (n3 / name\n                  :op1 \"US\"))\n      :location (b2 / behind\n            :op1 (a / and\n                  :op1 (b3 / broadcast-program\n                        :name (n4 / name\n                              :op1 \"Game\"\n                              :op2 \"of\"\n                              :op3 \"Thrones\"))\n                  :op2 (b4 / broadcast-program\n                        :name (n5 / name\n                              :op1 \"The\"\n                              :op2 \"Sapranos\")))))",
      "# ::snt  Service is available on Apple TV and iOS exclusively for three months . \n(a / available-02\n      :ARG2 (s / service)\n      :location (a2 / and\n            :op1 (p / product\n                  :name (n / name\n                        :op1 \"Apple\"\n                        :op2 \"TV\"))\n            :op2 (p2 / product\n                  :name (n2 / name\n                        :op1 \"iOS\")))\n      :duration (t / temporal-quantity\n            :quant 3\n            :unit (m / month)\n            :ARG0-of (e / exclusive-02)))",
      "# ::snt  Apple has also cut the price of Apple TV system from $ 99 ( \u00a3 65 ) to $ 69 . \n(c / cut-02\n      :ARG0 (c2 / company\n            :name (n / name\n                  :op1 \"Apple\"))\n      :ARG1 (p / price-01\n            :ARG1 (s / system\n                  :mod (p2 / product\n                        :name (n2 / name\n                              :op1 \"Apple\"\n                              :op2 \"TV\"))))\n      :ARG3 (m / monetary-quantity\n            :quant 99\n            :unit (d / dollar))\n      :ARG4 (m2 / monetary-quantity\n            :quant 69\n            :unit (d2 / dollar))\n      :mod (a / also))"
    ],
    "tree": [
      "(n / network\n   :domain (b / broadcast-program\n              :name (n2 / name\n                        :op1 \"HBO\")))",
      "(n / network\n   :mod (c / country\n           :name (n3 / name\n                     :op1 \"US\")))",
      "(n / network\n   :location (b2 / behind\n                 :op1 (a / and\n                         :op1 (b3 / broadcast-program\n                                  :name (n4 / name\n                                            :op1 \"Game\"\n                                            :op2 \"of\"\n                                            :op3 \"Thrones\"))\n                         :op2 (b4 / broadcast-program\n                                  :name (n5 / name\n                                            :op1 \"The\"\n                                            :op2 \"Sapranos\")))))",
      "(b / broadcast-program\n   :name (n2 / name\n             :op1 \"HBO\"))",
      "(c / country\n   :name (n3 / name\n             :op1 \"US\"))",
      "(b2 / behind\n    :op1 (a / and\n            :op1 (b3 / broadcast-program\n                     :name (n4 / name\n                               :op1 \"Game\"\n                               :op2 \"of\"\n                               :op3 \"Thrones\"))\n            :op2 (b4 / broadcast-program\n                     :name (n5 / name\n                               :op1 \"The\"\n                               :op2 \"Sapranos\"))))",
      "(n / network\n   :domain (b / broadcast-program\n              :name (n2 / name\n                        :op1 \"HBO\"))\n   :mod (c / country\n           :name (n3 / name\n                     :op1 \"US\"))\n   :location (b2 / behind\n                 :op1 (b3 / broadcast-program\n                          :name (n4 / name\n                                    :op1 \"Game\"\n                                    :op2 \"of\"\n                                    :op3 \"Thrones\"))))",
      "(n / network\n   :domain (b / broadcast-program\n              :name (n2 / name\n                        :op1 \"HBO\"))\n   :mod (c / country\n           :name (n3 / name\n                     :op1 \"US\"))\n   :location (b2 / behind\n                 :op1 (b4 / broadcast-program\n                          :name (n5 / name\n                                    :op1 \"The\"\n                                    :op2 \"Sapranos\"))))",
      "(n / network\n   :domain (b / broadcast-program\n              :name (n2 / name\n                        :op1 \"HBO\"))\n   :mod (c / country\n           :name (n3 / name\n                     :op1 \"US\")))",
      "(n / network\n   :domain (b / broadcast-program\n              :name (n2 / name\n                        :op1 \"HBO\"))\n   :mod (c / country\n           :name (n3 / name\n                     :op1 \"US\"))\n   :location (b2 / behind\n                 :op1 (a / and\n                         :op1 (b3 / broadcast-program\n                                  :name (n4 / name\n                                            :op1 \"Game\"\n                                            :op2 \"of\"\n                                            :op3 \"Thrones\"))\n                         :op2 (b4 / broadcast-program\n                                  :name (n5 / name\n                                            :op1 \"The\"\n                                            :op2 \"Sapranos\")))))",
      "(a / available-02\n   :ARG2 (s / service))",
      "(a / available-02\n   :location (a2 / and\n                 :op1 (p / product\n                         :name (n / name\n                                  :op1 \"Apple\"\n                                  :op2 \"TV\"))\n                 :op2 (p2 / product\n                          :name (n2 / name\n                                    :op1 \"iOS\"))))",
      "(a / available-02\n   :duration (t / temporal-quantity\n                :quant 3\n                :unit (m / month)\n                :ARG0-of (e / exclusive-02)))",
      "(a2 / and\n    :op1 (p / product\n            :name (n / name\n                     :op1 \"Apple\"\n                     :op2 \"TV\"))\n    :op2 (p2 / product\n             :name (n2 / name\n                       :op1 \"iOS\")))",
      "(t / temporal-quantity\n   :quant 3\n   :unit (m / month)\n   :ARG0-of (e / exclusive-02))",
      "(a / available-02\n   :ARG2 (s / service))",
      "(e / exclusive-02)",
      "(a / available-02\n   :ARG2 (s / service))",
      "(a / available-02\n   :ARG2 (s / service)\n   :location (p / product\n                :name (n / name\n                         :op1 \"Apple\"\n                         :op2 \"TV\"))\n   :duration (t / temporal-quantity\n                :quant 3\n                :unit (m / month)\n                :ARG0-of (e / exclusive-02)))",
      "(a / available-02\n   :ARG2 (s / service)\n   :location (p2 / product\n                 :name (n2 / name\n                           :op1 \"iOS\"))\n   :duration (t / temporal-quantity\n                :quant 3\n                :unit (m / month)\n                :ARG0-of (e / exclusive-02))\n   :duration t)",
      "(a / available-02\n   :ARG2 (s / service)\n   :duration (t / temporal-quantity\n                :quant 3\n                :unit (m / month)\n                :ARG0 (e / exclusive-02)))",
      "(a / available-02\n   :location (a2 / and\n                 :op1 (p / product\n                         :name (n / name\n                                  :op1 \"Apple\"\n                                  :op2 \"TV\"))\n                 :op2 (p2 / product\n                          :name (n2 / name\n                                    :op1 \"iOS\")))\n   :duration (t / temporal-quantity\n                :quant 3\n                :unit (m / month)))",
      "(c / cut-02\n   :ARG0 (c2 / company\n             :name (n / name\n                      :op1 \"Apple\")))",
      "(c / cut-02\n   :ARG1 (p / price-01\n            :ARG1 (s / system\n                     :mod (p2 / product\n                              :name (n2 / name\n                                        :op1 \"Apple\"\n                                        :op2 \"TV\")))))",
      "(c / cut-02\n   :ARG3 (m / monetary-quantity\n            :quant 99\n            :unit (d / dollar)))",
      "(c / cut-02\n   :ARG4 (m2 / monetary-quantity\n             :quant 69\n             :unit (d2 / dollar)))",
      "(c / cut-02\n   :mod (a / also))",
      "(c2 / company\n    :name (n / name\n             :op1 \"Apple\"))",
      "(p / price-01\n   :ARG1 (s / system\n            :mod (p2 / product\n                     :name (n2 / name\n                               :op1 \"Apple\"\n                               :op2 \"TV\"))))",
      "(m / monetary-quantity\n   :quant 99\n   :unit (d / dollar))",
      "(m2 / monetary-quantity\n    :quant 69\n    :unit (d2 / dollar))",
      "(c / cut-02\n   :ARG0 (c2 / company :name (n / name :op1 \"Apple\")))",
      "(p / price-01\n   :ARG1 (s / system))",
      "(c / cut-02\n   :ARG0 (c2 / company :name (n / name :op1 \"Apple\")))",
      "(p / price-01\n   :ARG1 (s / system))",
      "(c / cut-02\n   :ARG0 (c2 / company\n             :name (n / name\n                      :op1 \"Apple\"))\n   :ARG1 (p / price-01\n            :ARG1 (s / system\n                     :mod (p2 / product\n                              :name (n2 / name\n                                        :op1 \"Apple\"\n                                        :op2 \"TV\"))))\n   :ARG3 (m / monetary-quantity\n            :quant 99\n            :unit (d / dollar))\n   :ARG4 (m2 / monetary-quantity\n             :quant 69\n             :unit (d2 / dollar))\n   :mod (a / also))",
      "(c / cut-02\n   :mod (a / also))"
    ],
    "smus": [
      "HBO is a network.",
      "US network",
      "The network behind Game of Thrones and The Sapranos.",
      "HBO",
      "US",
      "Behind Game of Thrones and The Sapranos.",
      "HBO is the US network behind the Game of Thrones.",
      "HBO is the US network behind The Sapranos.",
      "HBO is a US network.",
      "HBO is the US network behind Game of Thrones and The Sapranos.",
      "Service is available.",
      "Available on Apple TV and iOS.",
      "Exclusively available for three months.",
      "Apple TV and iOS.",
      "Exclusively for 3 months.",
      "Service is available.",
      "Exclusively.",
      "Service is available.",
      "Service is exclusively available on Apple TV for 3 months.",
      "Service will be available exclusively on iOS for 3 months.",
      "The Service will be available exclusively for 3 months.",
      "Apple TV and iOS are available for 3 months.",
      "Apple has cut.",
      "Price cut for Apple TV system",
      "The cut was 99 dollars.",
      "Cut to $69.",
      "Also cut.",
      "Apple",
      "The price for the Apple TV system is $9.99.",
      "99",
      "$69",
      "Apple has cut.",
      "system price",
      "Apple has cut.",
      "system price",
      "Apple has also cut the price of the Apple TV system from $99 to $69.",
      "Also cut."
    ]
  },
  {
    "instance_id": "realsumm-68",
    "summary": "<t> Huma Abedin came under fire for not tipping at Chipotle in Iowa . </t> <t> She is Hillary Clinton 's most trusted aide for the 2016 campaign . </t> <t> On Saturday , she and husband Anthony Weiner went for Mexican lunch . </t> <t> It is one of their final weekends before the campaign gets into swing . </t>",
    "summary_trees": [
      "# ::snt  Huma Abedin came under fire for not tipping at Chipotle in Iowa . \n(f / fire-02\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Huma\"\n                  :op2 \"Abedin\"))\n      :ARG2 (t / tip-02\n            :polarity -\n            :ARG0 p\n            :location (c / company\n                  :name (n2 / name\n                        :op1 \"Chipotle\")\n                  :location (s / state\n                        :name (n3 / name\n                              :op1 \"Iowa\")))))",
      "# ::snt  She is Hillary Clinton 's most trusted aide for the 2016 campaign . \n(h / have-org-role-91\n      :ARG0 (s / she)\n      :ARG1 (c / campaign-01\n            :time (d / date-entity\n                  :year 2016))\n      :ARG2 (a / aide\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Hillary\"\n                        :op2 \"Clinton\"))\n            :ARG1-of (t / trust-02\n                  :ARG2-of (h2 / have-degree-91\n                        :ARG1 a\n                        :ARG3 (m / most)))))",
      "# ::snt  On Saturday , she and husband Anthony Weiner went for Mexican lunch . \n(g / go-02\n      :ARG0 (a / and\n            :op1 (s / she)\n            :op2 (p / person\n                  :name (n / name\n                        :op1 \"Anthony\"\n                        :op2 \"Weiner\")\n                  :ARG0-of (h / have-rel-role-91\n                        :ARG1 s\n                        :ARG2 (h2 / husband))))\n      :ARG4 (l / lunch\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"Mexico\")))\n      :time (d / date-entity\n            :weekday (s2 / saturday)))",
      "# ::snt  It is one of their final weekends before the campaign gets into swing . \n(w / weekend\n      :ARG1-of (ii / include-91\n            :ARG2 (w2 / weekend\n                  :poss (t / they)\n                  :mod (f / final)\n                  :time (b / before\n                        :op1 (s / swing-06\n                              :ARG1 (c / campaign-01)))))\n      :domain (ii2 / it))"
    ],
    "tree": [
      "(f / fire-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Huma\"\n                     :op2 \"Abedin\")))",
      "(f / fire-02\n   :ARG2 (t / tip-02\n            :polarity -\n            :ARG0 (p / person :name (n / name :op1 \"Huma\" :op2 \"Abedin\"))\n            :location (c / company\n                         :name (n2 / name\n                                   :op1 \"Chipotle\")\n                         :location (s / state\n                                      :name (n3 / name\n                                                :op1 \"Iowa\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"Huma\"\n            :op2 \"Abedin\"))",
      "(t / tip-02\n   :polarity -\n   :ARG0 (p / person :name (n / name :op1 \"Huma\" :op2 \"Abedin\"))\n   :location (c / company\n                :name (n2 / name\n                          :op1 \"Chipotle\")\n                :location (s / state\n                             :name (n3 / name\n                                       :op1 \"Iowa\"))))",
      "(f / fire-02\n   :ARG1 (p / person :name (n / name :op1 \"Huma\" :op2 \"Abedin\")))",
      "(t / tip-02\n   :polarity -\n   :ARG0 (p / person :name (n / name :op1 \"Huma\" :op2 \"Abedin\"))\n   :location (c / company :name (n2 / name :op1 \"Chipotle\"))))",
      "(f / fire-02\n   :ARG1 (p / person :name (n / name :op1 \"Huma\" :op2 \"Abedin\")))",
      "(t / tip-02\n   :polarity -)",
      "(t / tip-02\n   :ARG0 (p / person :name (n / name :op1 \"Huma\" :op2 \"Abedin\")))",
      "(t / tip-02\n   :location (c / company :name (n2 / name :op1 \"Chipotle\"))))",
      "(f / fire-02\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Huma\"\n                     :op2 \"Abedin\"))\n   :ARG2 (t / tip-02\n            :polarity -\n            :ARG0 p))",
      "(f / fire-02)",
      "(h / have-org-role-91\n   :ARG0 (s / she))",
      "(h / have-org-role-91\n   :ARG1 (c / campaign-01\n            :time (d / date-entity\n                     :year 2016)))",
      "(h / have-org-role-91\n   :ARG2 (a / aide\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Hillary\"\n                              :op2 \"Clinton\"))\n            :ARG1-of (t / trust-02\n                        :ARG2-of (h2 / have-degree-91\n                                     :ARG1 a\n                                     :ARG3 (m / most)))))",
      "(c / campaign-01\n   :time (d / date-entity\n            :year 2016))",
      "(a / aide\n   :poss (p / person\n            :name (n / name\n                     :op1 \"Hillary\"\n                     :op2 \"Clinton\"))\n   :ARG1-of (t / trust-02\n               :ARG2-of (h2 / have-degree-91\n                            :ARG1 a\n                            :ARG3 (m / most))))",
      "(c / campaign-01\n   :time (d / date-entity))",
      "(t / trust-02)",
      "(c / campaign-01\n   :time (d / date-entity))",
      "(h / have-org-role-91\n   :ARG0 (s / she)\n   :ARG1 (c / campaign-01)\n   :ARG2 (a / aide\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Hillary\"\n                              :op2 \"Clinton\"))\n            :ARG1 (t / trust-02\n                     :ARG2 (h2 / have-degree-91\n                               :ARG1 a\n                               :ARG3 (m / most)))))",
      "(h / have-org-role-91)",
      "(g / go-02\n   :ARG0 (a / and\n            :op1 (s / she)\n            :op2 (p / person\n                    :name (n / name\n                             :op1 \"Anthony\"\n                             :op2 \"Weiner\")\n                    :ARG0-of (h / have-rel-role-91\n                                :ARG1 s\n                                :ARG2 (h2 / husband)))))",
      "(g / go-02\n   :ARG4 (l / lunch\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"Mexico\"))))",
      "(g / go-02\n   :time (d / date-entity\n            :weekday (s2 / saturday)))",
      "(a / and\n   :op1 (s / she)\n   :op2 (p / person\n           :name (n / name\n                    :op1 \"Anthony\"\n                    :op2 \"Weiner\")\n           :ARG0-of (h / have-rel-role-91\n                       :ARG1 s\n                       :ARG2 (h2 / husband))))",
      "(l / lunch\n   :mod (c / country\n           :name (n2 / name\n                     :op1 \"Mexico\")))",
      "(d / date-entity\n   :weekday (s2 / saturday))",
      "(g / go-02\n   :ARG0 (a / and))",
      "(g / go-02\n   :ARG0 (a / and))",
      "(g / go-02\n   :ARG0 (s / she)\n   :ARG4 (l / lunch\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"Mexico\")))\n   :time (d / date-entity\n            :weekday (s2 / saturday)))",
      "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Anthony\"\n                     :op2 \"Weiner\")\n            :ARG0-of (h / have-rel-role-91\n                        :ARG1 (s / she)\n                        :ARG2 (h2 / husband)))\n   :ARG4 (l / lunch\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"Mexico\")))\n   :ARG4 l\n   :time (d / date-entity\n            :weekday (s2 / saturday)))",
      "(g / go-02\n   :ARG0 (a / and\n            :op1 (s / she)\n            :op2 (p / person\n                    :name (n / name\n                             :op1 \"Anthony\"\n                             :op2 \"Weiner\")\n                    :ARG0 (h / have-rel-role-91\n                             :ARG1 s\n                             :ARG2 (h2 / husband))))\n   :ARG4 (l / lunch\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"Mexico\"))))",
      "(g / go-02\n   :time (d / date-entity\n            :weekday (s2 / saturday)))",
      "(w / weekend\n   :ARG1-of (ii / include-91\n                :ARG2 (w2 / weekend\n                          :poss (t / they)\n                          :mod (f / final)\n                          :time (b / before\n                                   :op1 (s / swing-06\n                                           :ARG1 (c / campaign-01))))))",
      "(w / weekend\n   :domain (ii2 / it))",
      "(ii / include-91\n    :ARG2 (w2 / weekend\n              :poss (t / they)\n              :mod (f / final)\n              :time (b / before\n                       :op1 (s / swing-06\n                               :ARG1 (c / campaign-01)))))",
      "(s / swing-06\n   :ARG1 (c / campaign-01))",
      "(c / campaign-01)",
      "(s / swing-06\n   :ARG1 (c / campaign-01))",
      "(w / weekend\n   :ARG1 (ii / include-91\n             :ARG2 (w2 / weekend\n                       :poss (t / they)\n                       :mod (f / final)))\n   :domain (ii2 / it))",
      "(w / weekend\n   :domain (ii2 / it))"
    ],
    "smus": [
      "Huma Abedin was fired.",
      "Huma Abedin was fired for not tipping Chipotle in Iowa.",
      "Huma Abedin",
      "Huma Abedin was not tipping at Chipotle in Iowa.",
      "Huma Abedin was fired.",
      "Huma Abedin was not tipping at Chipotle.",
      "Huma Abedin was fired.",
      "Not tipping.",
      "Kuma Abedin is tipped.",
      "Tipping at Chipotle.",
      "Huma Abedin was fired not for tipping.",
      "Fire.",
      "She is.",
      "The 2016 campaign is...",
      "Hillary Clinton's most trusted aide",
      "The campaign is in 2016.",
      "Hillary Clinton's most trusted aide",
      "Campaign at the time.",
      "Trusted.",
      "Campaign at the time.",
      "She was Hillary Clinton's most trusted aide in the campaign.",

      "She and her husband, Anthony Weiner, went.",
      "went to a Mexican lunch.",
      "Saturday went.",
      "She and her husband, Anthony Weiner.",
      "Mexican lunch",
      "Saturday",
      "And went.",
      "And went.",
      "She went to a Mexican lunch Saturday.",
      "Her husband, Anthony Weiner, went to a Mexican lunch Saturday.",
      "She and her husband, Anthony Weiner, went to a Mexican lunch.",
      "Saturday went.",
      "One of their final weekends before the campaign swings in.",
      "It's weekend.",
      "One of their final weekends before the campaign swings in.",
      "Campaign in swing.",
      "Campaign.",
      "Campaign in swing.",
      "It was one of their final weekends.",
      "It's weekend."
    ]
  },
  {
    "instance_id": "realsumm-69",
    "summary": "<t> Gary fell from 147th most popular British name in 1996 to 1,001st in 2013 . </t> <t> Reached height of its popularity in 1964 , when it was ranked 16th . </t> <t> Meanwhile , names including Dexter and Jenson are now in the top 100 . </t>",
    "summary_trees": [
      "# ::snt  Gary fell from 147th most popular British name in 1996 to 1,001st in 2013 . \n(f / fall-01\n      :ARG1 (n / name\n            :name (n2 / name\n                  :op1 \"Gary\"))\n      :ARG3 (r / rank-01\n            :ARG2 147\n            :ARG1 n\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (p / popular-02\n                        :ARG1 n)\n                  :ARG3 (m / most)\n                  :ARG5 (n3 / name\n                        :mod (c / country\n                              :name (n4 / name\n                                    :op1 \"Britain\"))))\n            :time (d / date-entity\n                  :year 1996))\n      :ARG4 (r2 / rank-01\n            :ARG2 1091\n            :ARG1 n\n            :time (d2 / date-entity\n                  :year 2013)))",
      "# ::snt  Reached height of its popularity in 1964 , when it was ranked 16th . \n(r / reach-01\n      :ARG1 (h / high-02\n            :ARG1 (p / popularity\n                  :poss (ii / it)))\n      :time (d / date-entity\n            :year 1964\n            :time-of (r2 / rank-01\n                  :ARG1 ii\n                  :ARG2 16)))",
      "# ::snt  Meanwhile , names including Dexter and Jenson are now in the top 100 . \n(b / be-located-at-91\n      :ARG1 (n / name\n            :ARG2-of (ii / include-01\n                  :ARG1 (a / and\n                        :op1 (p / person\n                              :name (n2 / name\n                                    :op1 \"Dexter\"))\n                        :op2 (p2 / person\n                              :name (n3 / name\n                                    :op1 \"Jenson\")))))\n      :ARG2 (t / top\n            :ord (o / ordinal-entity\n                  :value 100))\n      :time (n4 / now)\n      :time (m / meanwhile))"
    ],
    "tree": [
      "(f / fall-01\n   :ARG1 (n / name\n            :name (n2 / name\n                      :op1 \"Gary\")))",
      "(f / fall-01\n   :ARG3 (r / rank-01\n            :ARG2 147\n            :ARG1 (n / name :name (n2 / name :op1 \"Gary\"))\n            :ARG1-of (h / have-degree-91\n                        :ARG2 (p / popular-02\n                                 :ARG1 n)\n                        :ARG3 (m / most)\n                        :ARG5 (n3 / name\n                                  :mod (c / country\n                                          :name (n4 / name\n                                                    :op1 \"Britain\"))))\n            :time (d / date-entity\n                     :year 1996)))",
      "(f / fall-01\n   :ARG4 (r2 / rank-01\n             :ARG2 1091\n             :ARG1 (n / name :name (n2 / name :op1 \"Gary\"))\n             :time (d2 / date-entity\n                       :year 2013)))",
      "(n / name\n   :name (n2 / name\n             :op1 \"Gary\"))",
      "(r / rank-01\n   :ARG2 147\n   :ARG1 (n / name :name (n2 / name :op1 \"Gary\"))\n   :ARG1-of (h / have-degree-91\n               :ARG2 (p / popular-02\n                        :ARG1 n)\n               :ARG3 (m / most)\n               :ARG5 (n3 / name\n                         :mod (c / country\n                                 :name (n4 / name\n                                           :op1 \"Britain\"))))\n   :time (d / date-entity\n            :year 1996))",
      "(r2 / rank-01\n    :ARG2 1091\n    :ARG1 (n / name :name (n2 / name :op1 \"Gary\"))\n    :time (d2 / date-entity\n              :year 2013))",
      "(f / fall-01\n   :ARG1 (n / name :name (n2 / name :op1 \"Gary\")))",
      "(r / rank-01\n   :ARG2 147\n   :ARG1 (n / name :name (n2 / name :op1 \"Gary\")))",
      "(p / popular-02\n   :ARG1 (n / name :name (n2 / name :op1 \"Gary\")))",
      "(r2 / rank-01\n    :ARG2 1091\n    :ARG1 (n / name :name (n2 / name :op1 \"Gary\"))\n    :time (d2 / date-entity))",
      "(f / fall-01\n   :ARG1 (n / name :name (n2 / name :op1 \"Gary\")))",
      "(r / rank-01\n   :ARG2 147)",
      "(r / rank-01\n   :ARG1 (n / name :name (n2 / name :op1 \"Gary\")))",
      "(p / popular-02\n   :ARG1 (n / name :name (n2 / name :op1 \"Gary\")))",
      "(r2 / rank-01\n    :ARG2 1091)",
      "(r2 / rank-01\n    :ARG1 (n / name :name (n2 / name :op1 \"Gary\")))",
      "(r2 / rank-01\n    :time (d2 / date-entity))",
      "(f / fall-01\n   :ARG1 (n / name\n            :name (n2 / name\n                      :op1 \"Gary\"))\n   :ARG3 (r / rank-01\n            :ARG2 147\n            :ARG1 n\n            :ARG1 (h / have-degree-91\n                     :ARG2 (p / popular-02\n                              :ARG1 n)\n                     :ARG3 (m / most)\n                     :ARG5 (n3 / name\n                               :mod (c / country\n                                       :name (n4 / name\n                                                 :op1 \"Britain\")))))\n   :ARG4 (r2 / rank-01\n             :ARG2 1091\n             :ARG1 n))",
      "(f / fall-01)",
      "(r / reach-01\n   :ARG1 (h / high-02\n            :ARG1 (p / popularity\n                     :poss (ii / it))))",
      "(r / reach-01\n   :time (d / date-entity\n            :year 1964\n            :time-of (r2 / rank-01\n                         :ARG1 (ii / it)\n                         :ARG2 16)))",
      "(h / high-02\n   :ARG1 (p / popularity\n            :poss (ii / it)))",
      "(d / date-entity\n   :year 1964\n   :time-of (r2 / rank-01\n                :ARG1 (ii / it)\n                :ARG2 16))",
      "(r / reach-01\n   :ARG1 (h / high-02))",
      "(h / high-02\n   :ARG1 (p / popularity))",
      "(r2 / rank-01\n    :ARG1 (ii / it)\n    :ARG2 16)",
      "(r / reach-01\n   :ARG1 (h / high-02))",
      "(h / high-02\n   :ARG1 (p / popularity))",
      "(r2 / rank-01\n    :ARG1 (ii / it))",
      "(r2 / rank-01\n    :ARG2 16)",
      "(r / reach-01\n   :ARG1 (h / high-02\n            :ARG1 (p / popularity\n                     :poss (ii / it))))",
      "(r / reach-01\n   :time (d / date-entity\n            :year 1964\n            :time (r2 / rank-01)))",
      "(b / be-located-at-91\n   :ARG1 (n / name\n            :ARG2-of (ii / include-01\n                         :ARG1 (a / and\n                                  :op1 (p / person\n                                          :name (n2 / name\n                                                    :op1 \"Dexter\"))\n                                  :op2 (p2 / person\n                                           :name (n3 / name\n                                                     :op1 \"Jenson\"))))))",
      "(b / be-located-at-91\n   :ARG2 (t / top\n            :ord (o / ordinal-entity\n                    :value 100)))",
      "(b / be-located-at-91\n   :time (n4 / now))",
      "(b / be-located-at-91\n   :time (m / meanwhile))",
      "(n / name\n   :ARG2-of (ii / include-01\n                :ARG1 (a / and\n                         :op1 (p / person\n                                 :name (n2 / name\n                                           :op1 \"Dexter\"))\n                         :op2 (p2 / person\n                                  :name (n3 / name\n                                            :op1 \"Jenson\")))))",
      "(t / top\n   :ord (o / ordinal-entity\n           :value 100))",
      "(ii / include-01\n    :ARG1 (a / and))",
      "(ii / include-01\n    :ARG1 (a / and))",
      "(b / be-located-at-91\n   :ARG1 (n / name\n            :ARG2-of (ii / include-01\n                         :ARG1 (p / person\n                                  :name (n2 / name\n                                            :op1 \"Dexter\")))))",
      "(b / be-located-at-91\n   :ARG1 (n / name\n            :ARG2-of (ii / include-01\n                         :ARG1 (p2 / person\n                                   :name (n3 / name\n                                             :op1 \"Jenson\"))))\n   :ARG2 (t / top\n            :ord (o / ordinal-entity\n                    :value 100))\n   :time (n4 / now)\n   :time (m / meanwhile))",
      "(b / be-located-at-91\n   :ARG1 (n / name\n            :ARG2 (ii / include-01\n                      :ARG1 (a / and\n                               :op1 (p / person\n                                       :name (n2 / name\n                                                 :op1 \"Dexter\"))\n                               :op2 (p2 / person\n                                        :name (n3 / name\n                                                  :op1 \"Jenson\")))))\n   :ARG2 (t / top\n            :ord (o / ordinal-entity\n                    :value 100)))",
      "(b / be-located-at-91\n   :time (n4 / now)\n   :time (m / meanwhile))"
    ],
    "smus": [
      "The name Gary fell.",
      "Gary fell to 147th place as the most popular British name in 1996.",
      "Gary fell to 1091st in 2013",
      "Gary",
      "Gary was ranked 147th most popular British name in 1996.",
      "Gary is number 1091 in 2013.",
      "The name Gary fell.",
      "Gary ranks 147th in the name of the man.",
      "Gary is a popular name.",
      "Gary is number 1091 in the name of the day.",
      "The name Gary fell.",
      "147)",
      "Gary ranks.",
      "Gary is a popular name.",
      "109",
      "Gary ranks.",
      "Rangers by date.",
      "Gary fell from 107th to 1091st as the most popular British name.",
      "fell.",
      "Its popularitiy reached high.",
      "It reached its 16th rank in 1964.",
      "Its popularity is high.",
      "It was in 1964 and ranked 16th.",
      "The high reached.",
      "Popularit is high.",
      "It's ranked 16th.",
      "The high reached.",
      "Popularit is high.",
      "It's ranked.",
      "16th",
      "Its popularitiy reached high.",
      "Reached in 1964 when ranked.",
      "There are names including Dexter and Johnson.",
      "Top 100",
      "Now there.",
      "Meanwhile...",
      "names including deexter and jenson.",
      "Top 100",
      "including...",
      "including...",
      "In names including Dexter.",
      "Meanwhile, names including Johnson are now in the top 100.",
      "Names including Dexter and Johnson are in the top 100.",
      "Meanwhile, there's now."
    ]
  },
  {
    "instance_id": "realsumm-70",
    "summary": "<t> Leanne Mitchell has been dropped by her label and sings at a holiday camp . </t> <t> Andrea Begley and Jermain Jackman are yet to become household names . </t> <t> Will 2015 winner Stevie become a chart success or another Voice flop ? </t> <t> . </t>",
    "summary_trees": [
      "# ::snt  Leanne Mitchell has been dropped by her label and sings at a holiday camp . \n(a / and\n      :op1 (d / drop-05\n            :ARG0 (l / label\n                  :poss (p / person\n                        :name (n / name\n                              :op1 \"Leanne\"\n                              :op2 \"Mitchell\")))\n            :ARG1 p)\n      :op2 (s / sing-01\n            :ARG0 p\n            :location (c / camp\n                  :mod (h / holiday))))",
      "# ::snt  Andrea Begley and Jermain Jackman are yet to become household names . \n(h / have-11\n      :ARG0 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Andrea\"\n                        :op2 \"Begley\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Jermain\"\n                        :op2 \"Jackman\")))\n      :ARG1 (y / yet)\n      :ARG2 (b / become-01\n            :ARG1 a\n            :ARG2 (n3 / name\n                  :mod (h2 / household))))",
      "# ::snt  Will 2015 winner Stevie become a chart success or another Voice flop ? \n(b / become-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Stevie\")\n            :ARG0-of (w / win-01\n                  :time (d / date-entity\n                        :year 2015)))\n      :ARG2 (a / amr-choice\n            :op1 (s / succeed-01\n                  :ARG0 p\n                  :ARG1 (c / chart-01))\n            :op2 (f / flop-01\n                  :ARG1 p\n                  :mod (v / voice-01)\n                  :mod (a2 / another))))",
      "# ::snt  . \n(a / amr-empty)"
    ],
    "tree": [
      "(a / and\n   :op1 (d / drop-05\n           :ARG0 (l / label\n                    :poss (p / person\n                             :name (n / name\n                                      :op1 \"Leanne\"\n                                      :op2 \"Mitchell\")))\n           :ARG1 p))",
      "(a / and\n   :op2 (s / sing-01\n           :ARG0 (p / person :name (n / name :op1 \"Leanne\" :op2 \"Mitchell\"))\n           :location (c / camp\n                        :mod (h / holiday))))",
      "(d / drop-05\n   :ARG0 (l / label\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Leanne\"\n                              :op2 \"Mitchell\")))\n   :ARG1 p)",
      "(s / sing-01\n   :ARG0 (p / person :name (n / name :op1 \"Leanne\" :op2 \"Mitchell\"))\n   :location (c / camp\n                :mod (h / holiday)))",
      "(d / drop-05\n   :ARG0 (l / label))",
      "(s / sing-01\n   :ARG0 (p / person :name (n / name :op1 \"Leanne\" :op2 \"Mitchell\"))\n   :location (c / camp))",
      "(d / drop-05\n   :ARG0 (l / label))",
      "(s / sing-01\n   :ARG0 (p / person :name (n / name :op1 \"Leanne\" :op2 \"Mitchell\")))",
      "(s / sing-01\n   :location (c / camp))",
      "(d / drop-05\n   :ARG0 (l / label\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Leanne\"\n                              :op2 \"Mitchell\")))\n   :ARG1 p)",
      "(s / sing-01\n   :ARG0 (p / person :name (n / name :op1 \"Leanne\" :op2 \"Mitchell\"))\n   :location (c / camp\n                :mod (h / holiday)))",
      "(a / and\n   :op1 (d / drop-05\n           :ARG0 (l / label\n                    :poss (p / person\n                             :name (n / name\n                                      :op1 \"Leanne\"\n                                      :op2 \"Mitchell\")))\n           :ARG1 p)\n   :op2 (s / sing-01\n           :ARG0 p))",
      "(a / and\n   :op1 (d / drop-05)\n   :op2 (s / sing-01))",
      "(h / have-11\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Andrea\"\n                             :op2 \"Begley\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Jermain\"\n                               :op2 \"Jackman\"))))",
      "(h / have-11\n   :ARG1 (y / yet))",
      "(h / have-11\n   :ARG2 (b / become-01\n            :ARG1 (a / and)\n            :ARG2 (n3 / name\n                      :mod (h2 / household))))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Andrea\"\n                    :op2 \"Begley\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Jermain\"\n                      :op2 \"Jackman\")))",
      "(b / become-01\n   :ARG1 (a / and)\n   :ARG2 (n3 / name\n             :mod (h2 / household)))",
      "(b / become-01\n   :ARG1 (a / and)\n   :ARG2 (n3 / name))",
      "(b / become-01\n   :ARG1 (a / and))",
      "(b / become-01\n   :ARG2 (n3 / name))",
      "(h / have-11\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrea\"\n                     :op2 \"Begley\"))\n   :ARG1 (y / yet)\n   :ARG2 (b / become-01\n            :ARG1 p\n            :ARG2 (n3 / name\n                      :mod (h2 / household))))",
      "(h / have-11\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jermain\"\n                       :op2 \"Jackman\"))\n   :ARG1 (y / yet)\n   :ARG1 y\n   :ARG2 (b / become-01\n            :ARG1 p2\n            :ARG2 (n3 / name\n                      :mod (h2 / household))))",
      "(h / have-11\n   :ARG0 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Andrea\"\n                             :op2 \"Begley\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Jermain\"\n                               :op2 \"Jackman\")))\n   :ARG1 (y / yet)\n   :ARG2 (b / become-01\n            :ARG1 a\n            :ARG2 (n3 / name\n                      :mod (h2 / household))))",
      "(h / have-11)",
      "(b / become-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Stevie\")\n            :ARG0-of (w / win-01\n                        :time (d / date-entity\n                                 :year 2015))))",
      "(b / become-01\n   :ARG2 (a / amr-choice\n            :op1 (s / succeed-01\n                    :ARG0 (p / person :name (n / name :op1 \"Stevie\")))\n                    :ARG1 (c / chart-01))\n            :op2 (f / flop-01\n                    :ARG1 p\n                    :mod (v / voice-01)\n                    :mod (a2 / another))))",
      "(p / person\n   :name (n / name\n            :op1 \"Stevie\")\n   :ARG0-of (w / win-01\n               :time (d / date-entity\n                        :year 2015)))",
      "(a / amr-choice\n   :op1 (s / succeed-01\n           :ARG0 (p / person :name (n / name :op1 \"Stevie\")))\n           :ARG1 (c / chart-01))\n   :op2 (f / flop-01\n           :ARG1 p\n           :mod (v / voice-01)\n           :mod (a2 / another)))",
      "(b / become-01\n   :ARG1 (p / person :name (n / name :op1 \"Stevie\"))))",
      "(w / win-01\n   :time (d / date-entity))",
      "(s / succeed-01\n   :ARG0 (p / person :name (n / name :op1 \"Stevie\")))\n   :ARG1 (c / chart-01))",
      "(c / chart-01)",
      "(f / flop-01\n   :ARG1 (p / person :name (n / name :op1 \"Stevie\")))\n   :mod (v / voice-01))",
      "(v / voice-01)",
      "(b / become-01\n   :ARG1 (p / person :name (n / name :op1 \"Stevie\"))))",
      "(w / win-01\n   :time (d / date-entity))",
      "(s / succeed-01\n   :ARG0 (p / person :name (n / name :op1 \"Stevie\"))))",
      "(s / succeed-01\n   :ARG1 (c / chart-01))",
      "(f / flop-01\n   :ARG1 (p / person :name (n / name :op1 \"Stevie\"))))",
      "(f / flop-01\n   :mod (v / voice-01))",
      "(b / become-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Stevie\")\n            :ARG0 (w / win-01))\n   :ARG2 (a / amr-choice\n            :op1 (s / succeed-01\n                    :ARG0 p\n                    :ARG1 (c / chart-01))\n            :op2 (f / flop-01\n                    :ARG1 p\n                    :mod (v / voice-01)\n                    :mod (a2 / another))))",
      "(b / become-01)",
      "(a / amr-empty)",
      "(a / amr-empty)"
    ],
    "smus": [
      "And Leanne Mitchell's label has dropped her.",
      "And Leanne Mitchell sings at a holiday camp.",
      "Leanne Mitchell's label has dropped her.",
      "Leanne Mitchell sings at a holiday camp.",
      "The label has dropped.",
      "Leanne Mitchell sings in the camp.",
      "The label has dropped.",
      "Leanne Mitchell sings.",
      "sings in camp.",
      "Leanne Mitchell's label has dropped her.",
      "Leanne Mitchell sings at a holiday camp.",
      "Leanne Mitchell's label has dropped her and she sings.",
      "Dropped and sings.",
      "Andrea Begley and Jerry Jackson.",
      "Yet.",
      "have become a household name.",
      "Andrea Begley and Jerry Jackson",
      "and become a household name.",
      "and become names.",
      "and become.",
      "become a name.",
      "Andrea Begley has yet to become a household name.",
      "Jermain Jackson has yet to become a household name.",
      "Andrea Begley and Jerry Jackson have yet to become household names.",
      "Have.",
      "Steve became the 2015 winner.",
      "So, did Steve become a chart success or was he another Voice flop?",
      "Steve won in 2015.",
      "Steve's chart success or another Voice Flop?",
      "Steve became.",
      "The win was in.",
      "Steve's success on the chart.",
      "Chart.",
      "Steve is a Voice Flop.",
      "Voice.",
      "Steve became.",
      "The win was in.",
      "Steve's success.",
      "Chart success.",
      "Steve was a flop.",
      "Voice Flop.",
      "Steve's win became his chart success or another Voice flop?",
      "became.",
      "SetC-WP-01",
      "SetC-WP-01"
    ]
  },
  {
    "instance_id": "realsumm-71",
    "summary": "<t> Romanian - born Alexandra Harra , 28 , has become an Instagram star . </t> <t> Model , who 's posed for Playboy , posts selfies with inspirational messages . </t> <t> After dyeing locks black , being hailed as a rival to Kim Kardashian . </t>",
    "summary_trees": [
      "# ::snt  Romanian - born Alexandra Harra , 28 , has become an Instagram star . \n(b / become-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Alexandra\"\n                  :op2 \"Harra\")\n            :ARG1-of (b2 / bear-02\n                  :location (c / country\n                        :name (n2 / name\n                              :op1 \"Romania\")))\n            :age (t / temporal-quantity\n                  :quant 28\n                  :unit (y / year)))\n      :ARG2 (s / star\n            :mod (p2 / publication\n                  :name (n3 / name\n                        :op1 \"Instagram\"))))",
      "# ::snt  Model , who 's posed for Playboy , posts selfies with inspirational messages . \n(p / post-01\n      :ARG0 (m / model\n            :ARG0-of (p2 / pose-01\n                  :ARG2 (m2 / magazine\n                        :name (n / name\n                              :op1 \"Playboy\"))))\n      :ARG1 (s / selfie\n            :accompanier (m3 / message-01\n                  :ARG0-of (ii / inspire-01))))",
      "# ::snt  After dyeing locks black , being hailed as a rival to Kim Kardashian . \n(h / hail-02\n      :ARG1 (r / rival-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Kim\"\n                        :op2 \"Kardinez\")))\n      :time (a / after\n            :op1 (d / dye-01\n                  :ARG1 (l / lock)\n                  :ARG2 (b / black-04\n                        :ARG1 l))))"
    ],
    "tree": [
      "(b / become-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Alexandra\"\n                     :op2 \"Harra\")\n            :ARG1-of (b2 / bear-02\n                         :location (c / country\n                                      :name (n2 / name\n                                                :op1 \"Romania\")))\n            :age (t / temporal-quantity\n                    :quant 28\n                    :unit (y / year))))",
      "(b / become-01\n   :ARG2 (s / star\n            :mod (p2 / publication\n                     :name (n3 / name\n                               :op1 \"Instagram\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"Alexandra\"\n            :op2 \"Harra\")\n   :ARG1-of (b2 / bear-02\n                :location (c / country\n                             :name (n2 / name\n                                       :op1 \"Romania\")))\n   :age (t / temporal-quantity\n           :quant 28\n           :unit (y / year)))",
      "(s / star\n   :mod (p2 / publication\n            :name (n3 / name\n                      :op1 \"Instagram\")))",
      "(b / become-01\n   :ARG1 (p / person :name (n / name :op1 \"Alexandra\" :op2 \"Harra\"))))",
      "(b2 / bear-02\n    :location (c / country :name (n2 / name :op1 \"Romania\")))",
      "(b / become-01\n   :ARG1 (p / person :name (n / name :op1 \"Alexandra\" :op2 \"Harra\"))))",
      "(b2 / bear-02\n    :location (c / country :name (n2 / name :op1 \"Romania\")))",
      "(b / become-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Alexandra\"\n                     :op2 \"Harra\")\n            :ARG1 (b2 / bear-02)\n            :age (t / temporal-quantity\n                    :quant 28\n                    :unit (y / year)))\n   :ARG2 (s / star\n            :mod (p2 / publication\n                     :name (n3 / name\n                               :op1 \"Instagram\"))))",
      "(b / become-01)",
      "(p / post-01\n   :ARG0 (m / model\n            :ARG0-of (p2 / pose-01\n                         :ARG2 (m2 / magazine\n                                   :name (n / name\n                                            :op1 \"Playboy\")))))",
      "(p / post-01\n   :ARG1 (s / selfie\n            :accompanier (m3 / message-01\n                             :ARG0-of (ii / inspire-01))))",
      "(m / model\n   :ARG0-of (p2 / pose-01\n                :ARG2 (m2 / magazine\n                          :name (n / name\n                                   :op1 \"Playboy\"))))",
      "(s / selfie\n   :accompanier (m3 / message-01\n                    :ARG0-of (ii / inspire-01)))",
      "(p / post-01\n   :ARG0 (m / model))",
      "(p2 / pose-01\n    :ARG2 (m2 / magazine :name (n / name :op1 \"Playboy\")))",
      "(m3 / message-01)",
      "(ii / inspire-01)",
      "(p / post-01\n   :ARG0 (m / model))",
      "(p2 / pose-01\n    :ARG2 (m2 / magazine :name (n / name :op1 \"Playboy\")))",
      "(p / post-01\n   :ARG0 (m / model\n            :ARG0 (p2 / pose-01\n                      :ARG2 (m2 / magazine\n                                :name (n / name\n                                         :op1 \"Playboy\"))))\n   :ARG1 (s / selfie\n            :accompanier (m3 / message-01\n                             :ARG0 (ii / inspire-01))))",
      "(p / post-01)",
      "(h / hail-02\n   :ARG1 (r / rival-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Kim\"\n                              :op2 \"Kardinez\"))))",
      "(h / hail-02\n   :time (a / after\n            :op1 (d / dye-01\n                    :ARG1 (l / lock)\n                    :ARG2 (b / black-04\n                             :ARG1 l))))",
      "(r / rival-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Kim\"\n                     :op2 \"Kardinez\")))",
      "(a / after\n   :op1 (d / dye-01\n           :ARG1 (l / lock)\n           :ARG2 (b / black-04\n                    :ARG1 l)))",
      "(h / hail-02\n   :ARG1 (r / rival-01))",
      "(r / rival-01\n   :ARG1 (p / person :name (n / name :op1 \"Kim\" :op2 \"Kardinez\")))",
      "(d / dye-01\n   :ARG1 (l / lock))",
      "(b / black-04\n   :ARG1 (l / lock))",
      "(h / hail-02\n   :ARG1 (r / rival-01))",
      "(r / rival-01\n   :ARG1 (p / person :name (n / name :op1 \"Kim\" :op2 \"Kardinez\")))",
      "(d / dye-01\n   :ARG1 (l / lock))",
      "(b / black-04\n   :ARG1 (l / lock))",
      "(h / hail-02\n   :ARG1 (r / rival-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Kim\"\n                              :op2 \"Kardinez\"))))",
      "(h / hail-02\n   :time (a / after\n            :op1 (d / dye-01)))"
    ],
    "smus": [
      "Romanian-born Alexandra Harra has become a 28-year-old.",
      "Has become an Instagram star.",
      "Alexandra Harra is a Romanian born and raised.",
      "Instagram star",
      "Anna Harra has become.",
      "Born in Romania.",
      "Anna Harra has become.",
      "Born in Romania.",
      "Anna Harra, 28, became an Instagram star.",
      "become.",
      "Posts by Model Posing for Playboy",
      "Posts selfies with inspiring messages",
      "Model posing for Playboy",
      "selfies with inspiring messages",
      "Model posts.",
      "Posing for Playboy.",
      "messages",
      "Inspirational.",
      "Model posts.",
      "Posing for Playboy.",
      "Model posed for Playboy posts selfies with inspirational messages",
      "Posts:",
      "Kim Kardinez's rivalry was hailed.",
      "Hail a day after the locks were dyed black.",
      "Kim Kardinez is a rival.",
      "After the locks are dyed black.",
      "The rivalry is hailed.",
      "Kim Kardinez is a rival.",
      "Locks dyed.",
      "The locks are black.",
      "The rivalry is hailed.",
      "Kim Kardinez is a rival.",
      "Locks dyed.",
      "The locks are black.",
      "Kim Kardinez's rivalry was hailed.",
      "Hail after dyeing."
    ]
  },
  {
    "instance_id": "realsumm-72",
    "summary": "<t> Nadir Ciftci celebrated by blowing a kiss at rival goalkeeper Scott Bain . </t> <t> However , Ciftci was left blushing as rivals earned impressive victory . </t> <t> Win gave hosts Dundee their first derby win in more than a decade . </t> <t> Goals from Greg Stewart , Jake McPake and Paul Heffernen secured win . </t>",
    "summary_trees": [
      "# ::snt  Nadir Ciftci celebrated by blowing a kiss at rival goalkeeper Scott Bain . \n(c / celebrate-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Nadir\"\n                  :op2 \"Ciftci\"))\n      :manner (b / blow-01\n            :ARG0 p\n            :ARG1 (k / kiss-01\n                  :ARG0 p\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Scott\"\n                              :op2 \"Bain\")\n                        :ARG0-of (g / goalkeeper-01)\n                        :ARG0-of (r / rival-01\n                              :ARG1 p)))))",
      "# ::snt  However , Ciftci was left blushing as rivals earned impressive victory . \n(c / contrast-01\n      :ARG2 (l / leave-13\n            :ARG0 (e / earn-01\n                  :ARG0 (r / rival)\n                  :ARG1 (w / win-01\n                        :ARG0 r\n                        :ARG0-of (ii / impress-01)))\n            :ARG1 (b / blush-01\n                  :ARG1 (p / person\n                        :name (n / name\n                              :op1 \"Ciftci\")))))",
      "# ::snt  Win gave hosts Dundee their first derby win in more than a decade . \n(g / give-01\n      :ARG0 (w / win-01)\n      :ARG1 (w2 / win-01\n            :ARG0 (t / team\n                  :name (n / name\n                        :op1 \"Dundee\")\n                  :ARG0-of (h / host-01))\n            :mod (d / derby)\n            :ord (o / ordinal-entity\n                  :value 1\n                  :range (m / more-than\n                        :op1 (t2 / temporal-quantity\n                              :quant 1\n                              :unit (d2 / decade)))))\n      :ARG2 t)",
      "# ::snt  Goals from Greg Stewart , Jake McPake and Paul Heffernen secured win . \n(s / secure-02\n      :ARG0 (g / goal\n            :source (a / and\n                  :op1 (p / person\n                        :name (n / name\n                              :op1 \"Greg\"\n                              :op2 \"Stewart\"))\n                  :op2 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Jake\"\n                              :op2 \"McPake\"))\n                  :op3 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Paul\"\n                              :op2 \"Heffernen\"))))\n      :ARG1 (w / win-01))"
    ],
    "tree": [
      "(c / celebrate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nadir\"\n                     :op2 \"Ciftci\")))",
      "(c / celebrate-01\n   :manner (b / blow-01\n              :ARG0 (p / person :name (n / name :op1 \"Nadir\" :op2 \"Ciftci\"))\n              :ARG1 (k / kiss-01\n                       :ARG0 p\n                       :ARG1 (p2 / person\n                                 :name (n2 / name\n                                           :op1 \"Scott\"\n                                           :op2 \"Bain\")\n                                 :ARG0-of (g / goalkeeper-01)\n                                 :ARG0-of (r / rival-01\n                                             :ARG1 p)))))",
      "(p / person\n   :name (n / name\n            :op1 \"Nadir\"\n            :op2 \"Ciftci\"))",
      "(b / blow-01\n   :ARG0 (p / person :name (n / name :op1 \"Nadir\" :op2 \"Ciftci\"))\n   :ARG1 (k / kiss-01\n            :ARG0 p\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Scott\"\n                                :op2 \"Bain\")\n                      :ARG0-of (g / goalkeeper-01)\n                      :ARG0-of (r / rival-01\n                                  :ARG1 p))))",
      "(c / celebrate-01\n   :ARG0 (p / person :name (n / name :op1 \"Nadir\" :op2 \"Ciftci\")))",
      "(b / blow-01\n   :ARG0 (p / person :name (n / name :op1 \"Nadir\" :op2 \"Ciftci\"))\n   :ARG1 (k / kiss-01))",
      "(k / kiss-01\n   :ARG0 (p / person :name (n / name :op1 \"Nadir\" :op2 \"Ciftci\"))\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Scott\" :op2 \"Bain\"))))",
      "(g / goalkeeper-01)",
      "(r / rival-01\n   :ARG1 (p / person :name (n / name :op1 \"Nadir\" :op2 \"Ciftci\")))",
      "(c / celebrate-01\n   :ARG0 (p / person :name (n / name :op1 \"Nadir\" :op2 \"Ciftci\")))",
      "(b / blow-01\n   :ARG0 (p / person :name (n / name :op1 \"Nadir\" :op2 \"Ciftci\")))",
      "(b / blow-01\n   :ARG1 (k / kiss-01))",
      "(k / kiss-01\n   :ARG0 (p / person :name (n / name :op1 \"Nadir\" :op2 \"Ciftci\")))",
      "(k / kiss-01\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Scott\" :op2 \"Bain\"))))",
      "(r / rival-01\n   :ARG1 (p / person :name (n / name :op1 \"Nadir\" :op2 \"Ciftci\")))",
      "(c / celebrate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nadir\"\n                     :op2 \"Ciftci\"))\n   :manner (b / blow-01\n              :ARG0 p\n              :ARG1 (k / kiss-01\n                       :ARG0 p\n                       :ARG1 (p2 / person\n                                 :name (n2 / name\n                                           :op1 \"Scott\"\n                                           :op2 \"Bain\")\n                                 :ARG0 (g / goalkeeper-01)\n                                 :ARG0 (r / rival-01\n                                          :ARG1 p)))))",
      "(c / celebrate-01\n   :manner (b / blow-01))",
      "(c / contrast-01\n   :ARG2 (l / leave-13\n            :ARG0 (e / earn-01\n                     :ARG0 (r / rival)\n                     :ARG1 (w / win-01\n                              :ARG0 r\n                              :ARG0-of (ii / impress-01)))\n            :ARG1 (b / blush-01\n                     :ARG1 (p / person\n                              :name (n / name\n                                       :op1 \"Ciftci\")))))",
      "(l / leave-13\n   :ARG0 (e / earn-01\n            :ARG0 (r / rival)\n            :ARG1 (w / win-01\n                     :ARG0 r\n                     :ARG0-of (ii / impress-01)))\n   :ARG1 (b / blush-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Ciftci\"))))",
      "(c / contrast-01\n   :ARG2 (l / leave-13))",
      "(e / earn-01\n   :ARG0 (r / rival))",
      "(w / win-01\n   :ARG0 (r / rival))",
      "(ii / impress-01)",
      "(b / blush-01\n   :ARG1 (p / person :name (n / name :op1 \"Ciftci\")))",
      "(c / contrast-01\n   :ARG2 (l / leave-13))",
      "(e / earn-01\n   :ARG0 (r / rival))",
      "(w / win-01\n   :ARG0 (r / rival))",
      "(b / blush-01\n   :ARG1 (p / person :name (n / name :op1 \"Ciftci\")))",
      "(c / contrast-01\n   :ARG2 (l / leave-13\n            :ARG0 (e / earn-01\n                     :ARG0 (r / rival)\n                     :ARG1 (w / win-01\n                              :ARG0 r\n                              :ARG0 (ii / impress-01)))\n            :ARG1 (b / blush-01\n                     :ARG1 (p / person\n                              :name (n / name\n                                       :op1 \"Ciftci\")))))",
      "(c / contrast-01)",
      "(g / give-01\n   :ARG0 (w / win-01))",
      "(g / give-01\n   :ARG1 (w2 / win-01\n             :ARG0 (t / team\n                      :name (n / name\n                               :op1 \"Dundee\")\n                      :ARG0-of (h / host-01))\n             :mod (d / derby)\n             :ord (o / ordinal-entity\n                     :value 1\n                     :range (m / more-than\n                               :op1 (t2 / temporal-quantity\n                                        :quant 1\n                                        :unit (d2 / decade))))))",
      "(g / give-01\n   :ARG2 (t / team :name (n / name :op1 \"Dundee\"))))",
      "(w2 / win-01\n    :ARG0 (t / team\n             :name (n / name\n                      :op1 \"Dundee\")\n             :ARG0-of (h / host-01))\n    :mod (d / derby)\n    :ord (o / ordinal-entity\n            :value 1\n            :range (m / more-than\n                      :op1 (t2 / temporal-quantity\n                               :quant 1\n                               :unit (d2 / decade)))))",
      "(g / give-01\n   :ARG0 (w / win-01))",
      "(w / win-01)",
      "(w2 / win-01\n    :ARG0 (t / team :name (n / name :op1 \"Dundee\"))))",
      "(h / host-01)",
      "(g / give-01\n   :ARG0 (w / win-01))",
      "(w2 / win-01\n    :ARG0 (t / team :name (n / name :op1 \"Dundee\"))))",
      "(g / give-01\n   :ARG0 (w / win-01)\n   :ARG1 (w2 / win-01\n             :ARG0 (t / team\n                      :name (n / name\n                               :op1 \"Dundee\")\n                      :ARG0 (h / host-01))\n             :mod (d / derby)\n             :ord (o / ordinal-entity\n                     :value 1\n                     :range (m / more-than\n                               :op1 (t2 / temporal-quantity\n                                        :quant 1\n                                        :unit (d2 / decade)))))\n   :ARG2 t)",
      "(g / give-01)",
      "(s / secure-02\n   :ARG0 (g / goal\n            :source (a / and\n                       :op1 (p / person\n                               :name (n / name\n                                        :op1 \"Greg\"\n                                        :op2 \"Stewart\"))\n                       :op2 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Jake\"\n                                          :op2 \"McPake\"))\n                       :op3 (p3 / person\n                                :name (n3 / name\n                                          :op1 \"Paul\"\n                                          :op2 \"Heffernen\")))))",
      "(s / secure-02\n   :ARG1 (w / win-01))",
      "(g / goal\n   :source (a / and\n              :op1 (p / person\n                      :name (n / name\n                               :op1 \"Greg\"\n                               :op2 \"Stewart\"))\n              :op2 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Jake\"\n                                 :op2 \"McPake\"))\n              :op3 (p3 / person\n                       :name (n3 / name\n                                 :op1 \"Paul\"\n                                 :op2 \"Heffernen\"))))",
      "(s / secure-02\n   :ARG0 (g / goal))",
      "(w / win-01)",
      "(s / secure-02\n   :ARG0 (g / goal))",
      "(s / secure-02\n   :ARG0 (g / goal\n            :source (p / person\n                       :name (n / name\n                                :op1 \"Greg\"\n                                :op2 \"Stewart\"))))",
      "(s / secure-02\n   :ARG0 (g / goal\n            :source (p2 / person\n                        :name (n2 / name\n                                  :op1 \"Jake\"\n                                  :op2 \"McPake\"))))",
      "(s / secure-02\n   :ARG0 (g / goal\n            :source (p3 / person\n                        :name (n3 / name\n                                  :op1 \"Paul\"\n                                  :op2 \"Heffernen\")))\n   :ARG1 (w / win-01))",
      "(s / secure-02\n   :ARG0 (g / goal)\n   :ARG1 (w / win-01))",
      "(s / secure-02)"
    ],
    "smus": [
      "Nadir Ciftci was celebrated.",
      "Nadir ciftci was celebrated by blowing a kiss to rival goalkeeper Scott Bain.",
      "Nadir Ciftci",
      "Nadir ciftci was blowing a kiss from his rival goalkeeper, Scott Bain.",
      "Nadir Ciftci was celebrated.",
      "Nadir ciftci is blowing a kiss.",
      "Nadir ciftci kissed Scott Bain.",
      "Goalkeeper.",
      "Nadir Cifitci is rival.",
      "Nadir Ciftci was celebrated.",
      "Nadir ciftci is blowing.",
      "blowing a kiss",
      "Nadir ciftci gave a kiss.",
      "A kiss to Scott Bain.",
      "Nadir Cifitci is rival.",
      "Nadir ciftci was celebrated by blowing a kiss to rival goalkeeper Scott Bain.",
      "Blown up celebrations.",
      "But the fact that rivals earned an impressive victory has left Ciftci blushing.",
      "The fact that rivals earned an impressive victory has left Ciftci blushing.",
      "But left.",
      "The rivals earned.",
      "Rivals win.",
      "Impressive.",
      "Ciftci is blushing.",
      "But left.",
      "The rivals earned.",
      "Rivals win.",
      "Ciftci is blushing.",
      "But the fact that rivals earned an impressive victory has left Ciftci blushing.",
      "But...",
      "The win gave.",
      "The hosts, Dundee, gave the derby their first win in more than a decade.",
      "gave Dundee",
      "The hosts, Dundee, won the derby for the first time in more than a decade.",
      "The win gave.",
      "Win.",
      "Dundee won.",
      "hosts",
      "The win gave.",
      "Dundee won.",
      "The win gave Dundee their first derby win in more than a decade.",
      "given.",
      "The goals of Greg Stewart, Jake McCarthy and Paul Heffernen are secure.",
      "The victory is secure.",
      "Goals from Greg Stewart, Jake McPake and Paul Heffernen:",
      "The goals are secure.",
      "Win.",
      "The goals are secure.",
      "Greg Stewart's goals are secure.",
      "Jake McPake's goals are secure.",
      "Paul Heffernen's goals secured the victory.",
      "The goals are secure for the win.",
      "Secure."
    ]
  },
  {
    "instance_id": "realsumm-73",
    "summary": "<t> Mercedes - Benz Fashion Week Australia 2015 came to a close on Thursday night in Sydney . </t> <t> Stand - out shows included Maticevski , Romance Was Born , Tome , Steven Khalil and Johanna Johnson . </t> <t> Sheer and metallic fabrics and slouchy and voluminous silhouettes were recurring trends . </t>",
    "summary_trees": [
      "# ::snt  Mercedes - Benz Fashion Week Australia 2015 came to a close on Thursday night in Sydney . \n(c / close-01\n      :ARG1 (e / event\n            :name (n / name\n                  :op1 \"Mercedes-Benz\"\n                  :op2 \"Fashion\"\n                  :op3 \"Week\"\n                  :op4 \"Australia\")\n            :time (d / date-entity\n                  :year 2015\n                  :weekday (t / thursday)\n                  :dayperiod (n2 / night))\n            :location (c2 / city\n                  :name (n3 / name\n                        :op1 \"Sydney\"))))",
      "# ::snt  Stand - out shows included Maticevski , Romance Was Born , Tome , Steven Khalil and Johanna Johnson . \n(ii / include-91\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Maticevski\"))\n            :op2 (w / work-of-art\n                  :name (n2 / name\n                        :op1 \"Romance\"\n                        :op2 \"Was\"\n                        :op3 \"Born\"))\n            :op3 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Tome\"))\n            :op4 (p3 / person\n                  :name (n4 / name\n                        :op1 \"Steven\"\n                        :op2 \"Khalil\"))\n            :op5 (p4 / person\n                  :name (n5 / name\n                        :op1 \"Johanna\"\n                        :op2 \"Johnson\")))\n      :ARG2 (s / show-04\n            :ARG1-of (s2 / stand-out-06)))",
      "# ::snt  Sheer and metallic fabrics and slouchy and voluminous silhouettes were recurring trends . \n(t / trend\n      :ARG1-of (r / repeat-01)\n      :domain (a / and\n            :op1 (f / fabric\n                  :mod (s / sheer)\n                  :mod (m / metallic))\n            :op2 (s2 / silhouette\n                  :mod (s3 / slouchy)\n                  :mod (v / voluminous))))"
    ],
    "tree": [
      "(c / close-01\n   :ARG1 (e / event\n            :name (n / name\n                     :op1 \"Mercedes-Benz\"\n                     :op2 \"Fashion\"\n                     :op3 \"Week\"\n                     :op4 \"Australia\")\n            :time (d / date-entity\n                     :year 2015\n                     :weekday (t / thursday)\n                     :dayperiod (n2 / night))\n            :location (c2 / city\n                          :name (n3 / name\n                                    :op1 \"Sydney\"))))",
      "(e / event\n   :name (n / name\n            :op1 \"Mercedes-Benz\"\n            :op2 \"Fashion\"\n            :op3 \"Week\"\n            :op4 \"Australia\")\n   :time (d / date-entity\n            :year 2015\n            :weekday (t / thursday)\n            :dayperiod (n2 / night))\n   :location (c2 / city\n                 :name (n3 / name\n                           :op1 \"Sydney\")))",
      "(c / close-01\n   :ARG1 (e / event :name (n / name :op1 \"Mercedes-Benz\" :op2 \"Fashion\" :op3 \"Week\" :op4 \"Australia\"))))",
      "(c / close-01\n   :ARG1 (e / event :name (n / name :op1 \"Mercedes-Benz\" :op2 \"Fashion\" :op3 \"Week\" :op4 \"Australia\"))))",
      "(c / close-01\n   :ARG1 (e / event\n            :name (n / name\n                     :op1 \"Mercedes-Benz\"\n                     :op2 \"Fashion\"\n                     :op3 \"Week\"\n                     :op4 \"Australia\")))",
      "(c / close-01)",
      "(ii / include-91\n    :ARG1 (a / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Maticevski\"))\n             :op2 (w / work-of-art\n                     :name (n2 / name\n                               :op1 \"Romance\"\n                               :op2 \"Was\"\n                               :op3 \"Born\"))\n             :op3 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Tome\"))\n             :op4 (p3 / person\n                      :name (n4 / name\n                                :op1 \"Steven\"\n                                :op2 \"Khalil\"))\n             :op5 (p4 / person\n                      :name (n5 / name\n                                :op1 \"Johanna\"\n                                :op2 \"Johnson\"))))",
      "(ii / include-91\n    :ARG2 (s / show-04\n             :ARG1-of (s2 / stand-out-06)))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Maticevski\"))\n   :op2 (w / work-of-art\n           :name (n2 / name\n                     :op1 \"Romance\"\n                     :op2 \"Was\"\n                     :op3 \"Born\"))\n   :op3 (p2 / person\n            :name (n3 / name\n                      :op1 \"Tome\"))\n   :op4 (p3 / person\n            :name (n4 / name\n                      :op1 \"Steven\"\n                      :op2 \"Khalil\"))\n   :op5 (p4 / person\n            :name (n5 / name\n                      :op1 \"Johanna\"\n                      :op2 \"Johnson\")))",
      "(s / show-04\n   :ARG1-of (s2 / stand-out-06))",
      "(s / show-04)",
      "(s2 / stand-out-06)",
      "(ii / include-91\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Maticevski\"))\n    :ARG2 (s / show-04\n             :ARG1-of (s2 / stand-out-06)))",
      "(ii / include-91\n    :ARG1 (w / work-of-art\n             :name (n2 / name\n                       :op1 \"Romance\"\n                       :op2 \"Was\"\n                       :op3 \"Born\"))\n    :ARG2 (s / show-04\n             :ARG1-of (s2 / stand-out-06)))",
      "(ii / include-91\n    :ARG1 (p2 / person\n              :name (n3 / name\n                        :op1 \"Tome\"))\n    :ARG2 (s / show-04\n             :ARG1-of (s2 / stand-out-06)))",
      "(ii / include-91\n    :ARG1 (p3 / person\n              :name (n4 / name\n                        :op1 \"Steven\"\n                        :op2 \"Khalil\"))\n    :ARG2 (s / show-04\n             :ARG1-of (s2 / stand-out-06)))",
      "(ii / include-91\n    :ARG1 (p4 / person\n              :name (n5 / name\n                        :op1 \"Johanna\"\n                        :op2 \"Johnson\"))\n    :ARG2 (s / show-04\n             :ARG1-of (s2 / stand-out-06))\n    :ARG2 s)",
      "(ii / include-91\n    :ARG1 (a / and\n             :op1 (p / person\n                     :name (n / name\n                              :op1 \"Maticevski\"))\n             :op2 (w / work-of-art\n                     :name (n2 / name\n                               :op1 \"Romance\"\n                               :op2 \"Was\"\n                               :op3 \"Born\"))\n             :op3 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Tome\"))\n             :op4 (p3 / person\n                      :name (n4 / name\n                                :op1 \"Steven\"\n                                :op2 \"Khalil\"))\n             :op5 (p4 / person\n                      :name (n5 / name\n                                :op1 \"Johanna\"\n                                :op2 \"Johnson\")))\n    :ARG2 (s / show-04\n             :ARG1 (s2 / stand-out-06)))",
      "(ii / include-91)",
      "(t / trend\n   :ARG1-of (r / repeat-01))",
      "(t / trend\n   :domain (a / and\n              :op1 (f / fabric\n                      :mod (s / sheer)\n                      :mod (m / metallic))\n              :op2 (s2 / silhouette\n                       :mod (s3 / slouchy)\n                       :mod (v / voluminous))))",
      "(a / and\n   :op1 (f / fabric\n           :mod (s / sheer)\n           :mod (m / metallic))\n   :op2 (s2 / silhouette\n            :mod (s3 / slouchy)\n            :mod (v / voluminous)))",
      "(r / repeat-01)",
      "(t / trend\n   :ARG1-of (r / repeat-01)\n   :domain (f / fabric\n              :mod (s / sheer)\n              :mod (m / metallic)))",
      "(t / trend\n   :ARG1-of (r / repeat-01)\n   :domain (s2 / silhouette\n               :mod (s3 / slouchy)\n               :mod (v / voluminous)))",
      "(t / trend\n   :ARG1 (r / repeat-01)\n   :domain (a / and\n              :op1 (f / fabric\n                      :mod (s / sheer)\n                      :mod (m / metallic))\n              :op2 (s2 / silhouette\n                       :mod (s3 / slouchy)\n                       :mod (v / voluminous))))",
      "(t / trend\n   :domain (a / and\n              :op1 (f / fabric\n                      :mod (s / sheer)\n                      :mod (m / metallic))\n              :op2 (s2 / silhouette\n                       :mod (s3 / slouchy)\n                       :mod (v / voluminous))))"
    ],
    "smus": [
      "Mercedes-Benz Fashion Week Australia will close in Sydney on Thursday night, 2015",
      "Mercedes-Benz Fashion Week Australia 2015 Thursday night in Sydney",
      "Close of Mercedes-Benz Fashion Week Australia",
      "Close of Mercedes-Benz Fashion Week Australia",
      "Close of Mercedes-Benz Fashion Week Australia",
      "Close.",
      "Among them were Mariuszka, Romance Was Born, Tome, Steven Halil and Johanna Johnson.",
      "One of the standout shows was...",
      "Mariusevski, Romance Was Born, Tome, Steven Halil, and Johanna Johnson.",
      "Stand out shows.",
      "Shows",
      "Stand out.",
      "Among the standout shows was Matias Mikhailski.",
      "Romance Was Born was one of the standout shows.",
      "Tome was one of the stand out shows.",
      "Steven Khalil was one of the standout shows.",
      "The stand out shows included, er, Johanna Johnson.",
      "Shows that stood out included Mariuszki, Romance Was Born, Tome, Steven Halil and Johanna Johnson.",
      "Included.",
      "Repeated trends.",
      "Metallic sheer fabrics and voluminous slouchy silhouettes are trends.",
      "sheer metallic fabrics and voluminous slouchy silhouettes.",
      "Re:",
      "Metallic sheer fabrics are repeating trends.",
      "Voluminous slouchy silhouettes are repeat trends.",
      "Metallic sheer fabrics and voluminous slouchy silhouettes are trends of repetition.",
      "Metallic sheer fabrics and voluminous slouchy silhouettes are trends."
    ]
  },
  {
    "instance_id": "realsumm-74",
    "summary": "<t> Lindsay Sandiford fears she will be next to face the firing squad . </t> <t> Andrew Chan and Myuran Sukumaran killed after a final KFC bucket meal . </t> <t> The 58-year - old has been on death row in Bali since 2012 . </t> <t> She was convicted of attempting to smuggle \u00a3 1.6million of cocaine in 2012 . </t>",
    "summary_trees": [
      "# ::snt  Lindsay Sandiford fears she will be next to face the firing squad . \n(f / fear-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lindsay\"\n                  :op2 \"Sandiford\"))\n      :ARG1 (n2 / next\n            :domain p\n            :location-of (f2 / face-01\n                  :ARG0 p\n                  :ARG1 (s / squad\n                        :ARG0-of (f3 / fire-01)))))",
      "# ::snt  Andrew Chan and Myuran Sukumaran killed after a final KFC bucket meal . \n(k / kill-01\n      :ARG1 (a / and\n            :op1 (p / person\n                  :name (n / name\n                        :op1 \"Andrew\"\n                        :op2 \"Chan\"))\n            :op2 (p2 / person\n                  :name (n2 / name\n                        :op1 \"Myuran\"\n                        :op2 \"Sukumaran\")))\n      :time (a2 / after\n            :op1 (m / meal\n                  :mod (b / bucket)\n                  :mod (c / company\n                        :name (n3 / name\n                              :op1 \"KFC\"))\n                  :mod (f / final))))",
      "# ::snt  The 58-year - old has been on death row in Bali since 2012 . \n(b / be-located-at-91\n      :ARG1 (p / person\n            :age (t / temporal-quantity\n                  :quant 58\n                  :unit (y / year)))\n      :ARG2 (r / row\n            :mod (d / die-01))\n      :location (ii / island\n            :name (n / name\n                  :op1 \"Bali\"))\n      :time (s / since\n            :op1 (d2 / date-entity\n                  :year 2012)))",
      "# ::snt  She was convicted of attempting to smuggle \u00a3 1.6million of cocaine in 2012 . \n(c / convict-01\n      :ARG1 (s / she)\n      :ARG2 (a / attempt-01\n            :ARG0 s\n            :ARG1 (s2 / smuggle-01\n                  :ARG0 s\n                  :ARG1 (c2 / cocaine\n                        :quant (m / monetary-quantity\n                              :quant 1600000\n                              :unit (p / pound))))\n            :time (d / date-entity\n                  :year 2012)))"
    ],
    "tree": [
      "(f / fear-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lindsay\"\n                     :op2 \"Sandiford\")))",
      "(f / fear-01\n   :ARG1 (n2 / next\n             :domain (p / person :name (n / name :op1 \"Lindsay\" :op2 \"Sandiford\"))\n             :location-of (f2 / face-01\n                              :ARG0 p\n                              :ARG1 (s / squad\n                                       :ARG0-of (f3 / fire-01)))))",
      "(p / person\n   :name (n / name\n            :op1 \"Lindsay\"\n            :op2 \"Sandiford\"))",
      "(n2 / next\n    :domain (p / person :name (n / name :op1 \"Lindsay\" :op2 \"Sandiford\"))\n    :location-of (f2 / face-01\n                     :ARG0 p\n                     :ARG1 (s / squad\n                              :ARG0-of (f3 / fire-01))))",
      "(f / fear-01\n   :ARG0 (p / person :name (n / name :op1 \"Lindsay\" :op2 \"Sandiford\")))",
      "(f2 / face-01\n    :ARG0 (p / person :name (n / name :op1 \"Lindsay\" :op2 \"Sandiford\"))\n    :ARG1 (s / squad))",
      "(f3 / fire-01)",
      "(f / fear-01\n   :ARG0 (p / person :name (n / name :op1 \"Lindsay\" :op2 \"Sandiford\")))",
      "(f2 / face-01\n    :ARG0 (p / person :name (n / name :op1 \"Lindsay\" :op2 \"Sandiford\")))",
      "(f2 / face-01\n    :ARG1 (s / squad))",
      "(f / fear-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lindsay\"\n                     :op2 \"Sandiford\"))\n   :ARG1 (n2 / next\n             :domain p))",
      "(f / fear-01)",
      "(k / kill-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Andrew\"\n                             :op2 \"Chan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Myuran\"\n                               :op2 \"Sukumaran\"))))",
      "(k / kill-01\n   :time (a2 / after\n             :op1 (m / meal\n                     :mod (b / bucket)\n                     :mod (c / company\n                             :name (n3 / name\n                                       :op1 \"KFC\"))\n                     :mod (f / final))))",
      "(a / and\n   :op1 (p / person\n           :name (n / name\n                    :op1 \"Andrew\"\n                    :op2 \"Chan\"))\n   :op2 (p2 / person\n            :name (n2 / name\n                      :op1 \"Myuran\"\n                      :op2 \"Sukumaran\")))",
      "(a2 / after\n    :op1 (m / meal\n            :mod (b / bucket)\n            :mod (c / company\n                    :name (n3 / name\n                              :op1 \"KFC\"))\n            :mod (f / final)))",
      "(k / kill-01\n   :ARG1 (a / and))",
      "(k / kill-01\n   :ARG1 (a / and))",
      "(k / kill-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Andrew\"\n                     :op2 \"Chan\"))\n   :time (a2 / after\n             :op1 (m / meal\n                     :mod (b / bucket)\n                     :mod (c / company\n                             :name (n3 / name\n                                       :op1 \"KFC\"))\n                     :mod (f / final))))",
      "(k / kill-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Myuran\"\n                       :op2 \"Sukumaran\"))\n   :time (a2 / after\n             :op1 (m / meal\n                     :mod (b / bucket)\n                     :mod (c / company\n                             :name (n3 / name\n                                       :op1 \"KFC\"))\n                     :mod (f / final)))\n   :time a2)",
      "(k / kill-01\n   :ARG1 (a / and\n            :op1 (p / person\n                    :name (n / name\n                             :op1 \"Andrew\"\n                             :op2 \"Chan\"))\n            :op2 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Myuran\"\n                               :op2 \"Sukumaran\"))))",
      "(k / kill-01\n   :time (a2 / after\n             :op1 (m / meal\n                     :mod (b / bucket)\n                     :mod (c / company\n                             :name (n3 / name\n                                       :op1 \"KFC\"))\n                     :mod (f / final))))",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 58\n                    :unit (y / year))))",
      "(b / be-located-at-91\n   :ARG2 (r / row\n            :mod (d / die-01)))",
      "(b / be-located-at-91\n   :location (ii / island\n                 :name (n / name\n                          :op1 \"Bali\")))",
      "(b / be-located-at-91\n   :time (s / since\n            :op1 (d2 / date-entity\n                     :year 2012)))",
      "(p / person\n   :age (t / temporal-quantity\n           :quant 58\n           :unit (y / year)))",
      "(r / row\n   :mod (d / die-01))",
      "(ii / island\n    :name (n / name\n             :op1 \"Bali\"))",
      "(s / since\n   :op1 (d2 / date-entity\n            :year 2012))",
      "(d / die-01)",
      "(b / be-located-at-91\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 58\n                    :unit (y / year)))\n   :ARG2 (r / row\n            :mod (d / die-01)))",
      "(b / be-located-at-91\n   :location (ii / island\n                 :name (n / name\n                          :op1 \"Bali\"))\n   :time (s / since\n            :op1 (d2 / date-entity\n                     :year 2012)))",
      "(c / convict-01\n   :ARG1 (s / she))",
      "(c / convict-01\n   :ARG2 (a / attempt-01\n            :ARG0 (s / she)\n            :ARG1 (s2 / smuggle-01\n                      :ARG0 s\n                      :ARG1 (c2 / cocaine\n                                :quant (m / monetary-quantity\n                                          :quant 1600000\n                                          :unit (p / pound))))\n            :time (d / date-entity\n                     :year 2012)))",
      "(a / attempt-01\n   :ARG0 (s / she)\n   :ARG1 (s2 / smuggle-01\n             :ARG0 s\n             :ARG1 (c2 / cocaine\n                       :quant (m / monetary-quantity\n                                 :quant 1600000\n                                 :unit (p / pound))))\n   :time (d / date-entity\n            :year 2012))",
      "(c / convict-01\n   :ARG1 (s / she))",
      "(a / attempt-01\n   :ARG0 (s / she)\n   :ARG1 (s2 / smuggle-01))",
      "(s2 / smuggle-01\n    :ARG0 (s / she)\n    :ARG1 (c2 / cocaine))",
      "(c / convict-01\n   :ARG1 (s / she))",
      "(a / attempt-01\n   :ARG0 (s / she))",
      "(a / attempt-01\n   :ARG1 (s2 / smuggle-01))",
      "(s2 / smuggle-01\n    :ARG0 (s / she))",
      "(s2 / smuggle-01\n    :ARG1 (c2 / cocaine))",
      "(c / convict-01\n   :ARG1 (s / she)\n   :ARG2 (a / attempt-01\n            :ARG0 s\n            :ARG1 (s2 / smuggle-01\n                      :ARG0 s\n                      :ARG1 (c2 / cocaine\n                                :quant (m / monetary-quantity\n                                          :quant 1600000\n                                          :unit (p / pound))))))",
      "(c / convict-01)"
    ],
    "smus": [
      "Lindsay Sandiford fears.",
      "Lindsay Sandiford fears he will be the next to face a firing squad.",
      "Lindsay Sandiford",
      "Lindsay Sandiford is the next to face the firing squad.",
      "Lindsay Sandiford fears.",
      "Lindsay Sandiford will face the squad.",
      "Fire.",
      "Lindsay Sandiford fears.",
      "Lindsay Sandiford will face.",
      "Face the squad.",
      "Lindsay Sandiford fears for her next.",
      "Fears",
      "Andrew Chan and Myuran Susumaran killed.",
      "Killed after the final bucket meal at KFC.",
      "Andrew Chan and Myuran Susumaran.",
      "After the final bucket meal at KFC.",
      "Killed and killed.",
      "Killed and killed.",
      "Andrew Chan killed after the final bucket meal at KFC.",
      "Myuran Sukumaran killed at the time after the final bucket meal at KFC.",
      "Andrew Chan and Myuran Susumaran killed.",
      "Killed after the final bucket meal at KFC.",
      "58 year old",
      "There's a death row.",
      "Bali",
      "Since 2012",
      "58 year old",
      "Death row.",
      "Bali",
      "since 2012",
      "Death",
      "58 year old on death row",
      "Bali has been in since 2012.",
      "She was convicted.",
      "She was convicted of attempting to smuggle 160,000 pounds of cocaine in 2012.",
      "In 2012 she was attempting to smuggle 160,000 pounds of cocaine.",
      "She was convicted.",
      "She was attempting to smuggle.",
      "She did smuggle cocaine.",
      "She was convicted.",
      "She was attempting.",
      "Attempting to smuggle",
      "She did smuggle.",
      "Smuggle cocaine.",
      "She was convicted of attempting to smuggle 160,000 pounds of cocaine.",
      "Convicted."
    ]
  },
  {
    "instance_id": "realsumm-75",
    "summary": "<t> Abby Bishop took in her two - day - old niece Zala in August 2013 . </t> <t> Now Zala is 20 months old and she follows Bishop as she travels the world playing for professional basketball teams . </t> <t> Bishop said it was a big decision but she would n't change anything . </t> <t> Zala will go with her when she starts playing in the U.S. WNBA in May. </t>",
    "summary_trees": [
      "# ::snt  Abby Bishop took in her two - day - old niece Zala in August 2013 . \n(t / take-in-06\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Abby\"\n                  :op2 \"Bishop\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Zala\")\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 p\n                  :ARG2 (n3 / niece))\n            :age (t2 / temporal-quantity\n                  :quant 2\n                  :unit (d / day)))\n      :time (d2 / date-entity\n            :month 8\n            :year 2013))",
      "# ::snt  Now Zala is 20 months old and she follows Bishop as she travels the world playing for professional basketball teams . \n(a / and\n      :op1 (a2 / age-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Zala\"))\n            :ARG2 (t / temporal-quantity\n                  :quant 20\n                  :unit (m / month))\n            :time (n2 / now))\n      :op2 (f / follow-01\n            :ARG1 p\n            :ARG2 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Bishop\"))\n            :time (t2 / travel-01\n                  :ARG0 p\n                  :ARG1 (w / world)\n                  :manner (p3 / play-01\n                        :ARG0 p\n                        :ARG2 (t3 / team\n                              :mod (b / basketball)\n                              :mod (p4 / professional))))))",
      "# ::snt  Bishop said it was a big decision but she would n't change anything . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Bishop\"))\n      :ARG1 (c / contrast-01\n            :ARG1 (d / decide-01\n                  :ARG1 (ii / it)\n                  :mod (b / big))\n            :ARG2 (c2 / change-01\n                  :polarity -\n                  :ARG0 p\n                  :ARG1 (a / anything))))",
      "# ::snt  Zala will go with her when she starts playing in the U.S. WNBA in May. \n(g / go-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Zala\"))\n      :accompanier (s / she)\n      :time (s2 / start-01\n            :ARG0 s\n            :ARG1 (p2 / play-01\n                  :ARG0 s\n                  :ARG3 (l / league\n                        :name (n2 / name\n                              :op1 \"WNBA\")\n                        :mod (c / country\n                              :name (n3 / name\n                                    :op1 \"U.S.\"))))\n            :time (d / date-entity\n                  :month 5)))"
    ],
    "tree": [
      "(t / take-in-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abby\"\n                     :op2 \"Bishop\")))",
      "(t / take-in-06\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Zala\")\n             :ARG0-of (h / have-rel-role-91\n                         :ARG1 (p / person :name (n / name :op1 \"Abby\" :op2 \"Bishop\"))\n                         :ARG2 (n3 / niece))\n             :age (t2 / temporal-quantity\n                      :quant 2\n                      :unit (d / day))))",
      "(t / take-in-06\n   :time (d2 / date-entity\n             :month 8\n             :year 2013))",
      "(p / person\n   :name (n / name\n            :op1 \"Abby\"\n            :op2 \"Bishop\"))",
      "(p2 / person\n    :name (n2 / name\n              :op1 \"Zala\")\n    :ARG0-of (h / have-rel-role-91\n                :ARG1 (p / person :name (n / name :op1 \"Abby\" :op2 \"Bishop\"))\n                :ARG2 (n3 / niece))\n    :age (t2 / temporal-quantity\n             :quant 2\n             :unit (d / day)))",
      "(d2 / date-entity\n    :month 8\n    :year 2013)",
      "(t / take-in-06\n   :ARG0 (p / person :name (n / name :op1 \"Abby\" :op2 \"Bishop\")))",
      "(t / take-in-06\n   :ARG0 (p / person :name (n / name :op1 \"Abby\" :op2 \"Bishop\")))",
      "(t / take-in-06\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abby\"\n                     :op2 \"Bishop\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Zala\")\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 p\n                      :ARG2 (n3 / niece))\n             :age (t2 / temporal-quantity\n                      :quant 2\n                      :unit (d / day))))",
      "(t / take-in-06\n   :time (d2 / date-entity\n             :month 8\n             :year 2013))",
      "(a / and\n   :op1 (a2 / age-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Zala\"))\n            :ARG2 (t / temporal-quantity\n                     :quant 20\n                     :unit (m / month))\n            :time (n2 / now)))",
      "(a / and\n   :op2 (f / follow-01\n           :ARG1 (p / person :name (n / name :op1 \"Zala\"))\n           :ARG2 (p2 / person\n                     :name (n3 / name\n                               :op1 \"Bishop\"))\n           :time (t2 / travel-01\n                     :ARG0 p\n                     :ARG1 (w / world)\n                     :manner (p3 / play-01\n                                 :ARG0 p\n                                 :ARG2 (t3 / team\n                                           :mod (b / basketball)\n                                           :mod (p4 / professional))))))",
      "(a2 / age-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Zala\"))\n    :ARG2 (t / temporal-quantity\n             :quant 20\n             :unit (m / month))\n    :time (n2 / now))",
      "(f / follow-01\n   :ARG1 (p / person :name (n / name :op1 \"Zala\"))\n   :ARG2 (p2 / person\n             :name (n3 / name\n                       :op1 \"Bishop\"))\n   :time (t2 / travel-01\n             :ARG0 p\n             :ARG1 (w / world)\n             :manner (p3 / play-01\n                         :ARG0 p\n                         :ARG2 (t3 / team\n                                   :mod (b / basketball)\n                                   :mod (p4 / professional)))))",
      "(a2 / age-01\n    :ARG1 (p / person :name (n / name :op1 \"Zala\")))",
      "(f / follow-01\n   :ARG1 (p / person :name (n / name :op1 \"Zala\"))\n   :ARG2 (p2 / person :name (n3 / name :op1 \"Bishop\")))",
      "(t2 / travel-01\n    :ARG0 (p / person :name (n / name :op1 \"Zala\"))\n    :ARG1 (w / world))",
      "(p3 / play-01\n    :ARG0 (p / person :name (n / name :op1 \"Zala\"))\n    :ARG2 (t3 / team))",
      "(a2 / age-01\n    :ARG1 (p / person :name (n / name :op1 \"Zala\")))",
      "(f / follow-01\n   :ARG1 (p / person :name (n / name :op1 \"Zala\")))",
      "(f / follow-01\n   :ARG2 (p2 / person :name (n3 / name :op1 \"Bishop\")))",
      "(t2 / travel-01\n    :ARG0 (p / person :name (n / name :op1 \"Zala\")))",
      "(t2 / travel-01\n    :ARG1 (w / world))",
      "(p3 / play-01\n    :ARG0 (p / person :name (n / name :op1 \"Zala\")))",
      "(p3 / play-01\n    :ARG2 (t3 / team))",
      "(a2 / age-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Zala\"))\n    :ARG2 (t / temporal-quantity\n             :quant 20\n             :unit (m / month))\n    :time (n2 / now))",
      "(f / follow-01\n   :ARG1 (p / person :name (n / name :op1 \"Zala\"))\n   :ARG2 (p2 / person\n             :name (n3 / name\n                       :op1 \"Bishop\"))\n   :time (t2 / travel-01\n             :ARG0 p\n             :ARG1 (w / world)\n             :manner (p3 / play-01\n                         :ARG0 p\n                         :ARG2 (t3 / team\n                                   :mod (b / basketball)\n                                   :mod (p4 / professional)))))",
      "(a / and\n   :op1 (a2 / age-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Zala\"))\n            :ARG2 (t / temporal-quantity\n                     :quant 20\n                     :unit (m / month)))\n   :op2 (f / follow-01\n           :ARG1 p\n           :ARG2 (p2 / person\n                     :name (n3 / name\n                               :op1 \"Bishop\"))))",
      "(a / and\n   :op1 (a2 / age-01\n            :time (n2 / now))\n   :op2 (f / follow-01))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bishop\")))",
      "(s / say-01\n   :ARG1 (c / contrast-01\n            :ARG1 (d / decide-01\n                     :ARG1 (ii / it)\n                     :mod (b / big))\n            :ARG2 (c2 / change-01\n                      :polarity -\n                      :ARG0 (p / person :name (n / name :op1 \"Bishop\"))\n                      :ARG1 (a / anything))))",
      "(p / person\n   :name (n / name\n            :op1 \"Bishop\"))",
      "(c / contrast-01\n   :ARG1 (d / decide-01\n            :ARG1 (ii / it)\n            :mod (b / big))\n   :ARG2 (c2 / change-01\n             :polarity -\n             :ARG0 (p / person :name (n / name :op1 \"Bishop\"))\n             :ARG1 (a / anything)))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Bishop\")))",
      "(c / contrast-01\n   :ARG1 (d / decide-01))",
      "(d / decide-01\n   :ARG1 (ii / it))",
      "(c2 / change-01\n    :polarity -\n    :ARG0 (p / person :name (n / name :op1 \"Bishop\"))\n    :ARG1 (a / anything))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Bishop\")))",
      "(c / contrast-01\n   :ARG1 (d / decide-01))",
      "(d / decide-01\n   :ARG1 (ii / it))",
      "(c2 / change-01\n    :polarity -)",
      "(c2 / change-01\n    :ARG0 (p / person :name (n / name :op1 \"Bishop\")))",
      "(c2 / change-01\n    :ARG1 (a / anything))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bishop\"))\n   :ARG1 (c / contrast-01\n            :ARG1 (d / decide-01\n                     :ARG1 (ii / it)\n                     :mod (b / big))\n            :ARG2 (c2 / change-01\n                      :polarity -\n                      :ARG0 p\n                      :ARG1 (a / anything))))",
      "(s / say-01)",
      "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Zala\")))",
      "(g / go-02\n   :accompanier (s / she))",
      "(g / go-02\n   :time (s2 / start-01\n             :ARG0 (s / she)\n             :ARG1 (p2 / play-01\n                       :ARG0 s\n                       :ARG3 (l / league\n                                :name (n2 / name\n                                          :op1 \"WNBA\")\n                                :mod (c / country\n                                        :name (n3 / name\n                                                  :op1 \"U.S.\"))))\n             :time (d / date-entity\n                      :month 5)))",
      "(p / person\n   :name (n / name\n            :op1 \"Zala\"))",
      "(s2 / start-01\n    :ARG0 (s / she)\n    :ARG1 (p2 / play-01\n              :ARG0 s\n              :ARG3 (l / league\n                       :name (n2 / name\n                                 :op1 \"WNBA\")\n                       :mod (c / country\n                               :name (n3 / name\n                                         :op1 \"U.S.\"))))\n    :time (d / date-entity\n             :month 5))",
      "(g / go-02\n   :ARG0 (p / person :name (n / name :op1 \"Zala\")))",
      "(s2 / start-01\n    :ARG0 (s / she)\n    :ARG1 (p2 / play-01))",
      "(p2 / play-01\n    :ARG0 (s / she)\n    :ARG3 (l / league :name (n2 / name :op1 \"WNBA\"))))",
      "(g / go-02\n   :ARG0 (p / person :name (n / name :op1 \"Zala\")))",
      "(s2 / start-01\n    :ARG0 (s / she))",
      "(s2 / start-01\n    :ARG1 (p2 / play-01))",
      "(p2 / play-01\n    :ARG0 (s / she))",
      "(p2 / play-01\n    :ARG3 (l / league :name (n2 / name :op1 \"WNBA\"))))",
      "(g / go-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Zala\"))\n   :accompanier (s / she))",
      "(g / go-02\n   :accompanier (s / she)\n   :time (s2 / start-01\n             :time (d / date-entity\n                      :month 5)))"
    ],
    "smus": [
      "Abby Bishop took in.",
      "Abby Bishop's two-day-old niece, Zala, was taken in.",
      "Taken in August, 2002.",
      "Abby Bishop",
      "Abby Bishop's niece, Zala, is 2 days old.",
      "August 2",
      "Abby Bishop took in.",
      "Abby Bishop took in.",
      "Abby Bishop took in his two-day-old niece, Zala.",
      "Taken in August, 2002.",
      "and Sala is now 20 months old.",
      "And when he travels the world playing for professional basketball teams, Sala follows Bishop.",
      "Sala is now 20 months old.",
      "When he travels the world playing for professional basketball teams, Sala follows Bishop.",
      "Sala is a.",
      "Sala follows Bishop.",
      "Sala travels the world.",
      "Sala is playing for teams.",
      "Sala is a.",
      "a href=\"http://www.youtube.com/watch?v=Zala\">Zala Follows/a>",
      "Follows Bishop.",
      "Sala travels.",
      "travels the world.",
      "Sala is playing.",
      "Playing for teams.",
      "Sala is now 20 months old.",
      "When he travels the world playing for professional basketball teams, Sala follows Bishop.",
      "Sala is 20 months old and follows Bishop.",
      "It's age now and follows.",
      "Bishop said --",
      "It was a big decision, but Bishop didn't change anything, he said.",
      "Bishop",
      "It was a big decision, but Bishop didn't change anything.",
      "Bishop said --",
      "But the decision is...",
      "It was a decision.",
      "Bishop didn't change anything.",
      "Bishop said --",
      "But the decision is...",
      "It was a decision.",
      "It doesn't change.",
      "Bishop will change.",
      "Anything will change.",
      "It was a big decision, but he didn't change anything, Bishop said.",
      "said.",
      "Sala will go.",
      "Go with her.",
      "Go in May when she starts playing in the U.S. WNBA.",
      "Sala",
      "She starts playing in the U.S. WNBA in May.",
      "Sala will go.",
      "She starts playing.",
      "She's playing in the WNBA.",
      "Sala will go.",
      "She starts.",
      "Starts playing.",
      "She's playing.",
      "Playing in the NBA.",
      "Sala would go with her.",
      "She will go with her when May starts."
    ]
  },
  {
    "instance_id": "realsumm-76",
    "summary": "<t> ONE Pro Cycling preparing to take on Team Sky and Sir Bradley Wiggins . </t> <t> Tour de Yorkshire runs over three stages starting in Bridlington on May 1 . </t> <t> Prior 's team and Yorkshire race inspired by Tour de France Grand Depart . </t>",
    "summary_trees": [
      "# ::snt  ONE Pro Cycling preparing to take on Team Sky and Sir Bradley Wiggins . \n(p / prepare-02\n      :ARG0 (o / organization\n            :name (n / name\n                  :op1 \"One\"\n                  :op2 \"Pro\"\n                  :op3 \"Cycling\"))\n      :ARG1 (t / take-on-21\n            :ARG0 o\n            :ARG1 (a / and\n                  :op1 (t2 / team\n                        :name (n2 / name\n                              :op1 \"Team\"\n                              :op2 \"Sky\"))\n                  :op2 (p2 / person\n                        :name (n3 / name\n                              :op1 \"Sir\"\n                              :op2 \"Bradley\"\n                              :op3 \"Wiggins\")))))",
      "# ::snt  Tour de Yorkshire runs over three stages starting in Bridlington on May 1 . \n(r / run-over-04\n      :ARG1 (t / tour\n            :name (n / name\n                  :op1 \"Tour\"\n                  :op2 \"de\"\n                  :op3 \"Yorkshire\"))\n      :ARG2 (s / stage\n            :quant 3)\n      :ARG1-of (s2 / start-01\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Bridlington\"))\n            :time (d / date-entity\n                  :day 1\n                  :month 5)))",
      "# ::snt  Prior 's team and Yorkshire race inspired by Tour de France Grand Depart . \n(ii / inspire-01\n      :ARG0 (t / tour\n            :name (n / name\n                  :op1 \"Tour\"\n                  :op2 \"de\"\n                  :op3 \"France\"\n                  :op4 \"Grand\"\n                  :op5 \"Depart\"))\n      :ARG1 (a / and\n            :op1 (t2 / team\n                  :poss (p / person\n                        :name (n2 / name\n                              :op1 \"Prior\")))\n            :op2 (r / race-02\n                  :ARG0 p\n                  :location (c / county\n                        :name (n3 / name\n                              :op1 \"Yorkshire\")))))"
    ],
    "tree": [
      "(p / prepare-02\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"One\"\n                     :op2 \"Pro\"\n                     :op3 \"Cycling\")))",
      "(p / prepare-02\n   :ARG1 (t / take-on-21\n            :ARG0 (o / organization :name (n / name :op1 \"One\" :op2 \"Pro\" :op3 \"Cycling\"))\n            :ARG1 (a / and\n                     :op1 (t2 / team\n                              :name (n2 / name\n                                        :op1 \"Team\"\n                                        :op2 \"Sky\"))\n                     :op2 (p2 / person\n                              :name (n3 / name\n                                        :op1 \"Sir\"\n                                        :op2 \"Bradley\"\n                                        :op3 \"Wiggins\")))))",
      "(o / organization\n   :name (n / name\n            :op1 \"One\"\n            :op2 \"Pro\"\n            :op3 \"Cycling\"))",
      "(t / take-on-21\n   :ARG0 (o / organization :name (n / name :op1 \"One\" :op2 \"Pro\" :op3 \"Cycling\"))\n   :ARG1 (a / and\n            :op1 (t2 / team\n                     :name (n2 / name\n                               :op1 \"Team\"\n                               :op2 \"Sky\"))\n            :op2 (p2 / person\n                     :name (n3 / name\n                               :op1 \"Sir\"\n                               :op2 \"Bradley\"\n                               :op3 \"Wiggins\"))))",
      "(p / prepare-02\n   :ARG0 (o / organization :name (n / name :op1 \"One\" :op2 \"Pro\" :op3 \"Cycling\")))",
      "(p / prepare-02\n   :ARG0 (o / organization :name (n / name :op1 \"One\" :op2 \"Pro\" :op3 \"Cycling\")))",
      "(p / prepare-02\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"One\"\n                     :op2 \"Pro\"\n                     :op3 \"Cycling\"))\n   :ARG1 (t / take-on-21\n            :ARG0 o\n            :ARG1 (t2 / team\n                      :name (n2 / name\n                                :op1 \"Team\"\n                                :op2 \"Sky\"))))",
      "(p / prepare-02\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"One\"\n                     :op2 \"Pro\"\n                     :op3 \"Cycling\"))\n   :ARG1 (t / take-on-21\n            :ARG0 o\n            :ARG1 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Sir\"\n                                :op2 \"Bradley\"\n                                :op3 \"Wiggins\"))))",
      "(p / prepare-02\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"One\"\n                     :op2 \"Pro\"\n                     :op3 \"Cycling\"))\n   :ARG1 (t / take-on-21\n            :ARG0 o\n            :ARG1 (a / and\n                     :op1 (t2 / team\n                              :name (n2 / name\n                                        :op1 \"Team\"\n                                        :op2 \"Sky\"))\n                     :op2 (p2 / person\n                              :name (n3 / name\n                                        :op1 \"Sir\"\n                                        :op2 \"Bradley\"\n                                        :op3 \"Wiggins\")))))",
      "(p / prepare-02)",
      "(r / run-over-04\n   :ARG1 (t / tour\n            :name (n / name\n                     :op1 \"Tour\"\n                     :op2 \"de\"\n                     :op3 \"Yorkshire\")))",
      "(r / run-over-04\n   :ARG2 (s / stage\n            :quant 3))",
      "(r / run-over-04\n   :ARG1-of (s2 / start-01\n                :location (c / city\n                             :name (n2 / name\n                                       :op1 \"Bridlington\"))\n                :time (d / date-entity\n                         :day 1\n                         :month 5)))",
      "(t / tour\n   :name (n / name\n            :op1 \"Tour\"\n            :op2 \"de\"\n            :op3 \"Yorkshire\"))",
      "(s2 / start-01\n    :location (c / city\n                 :name (n2 / name\n                           :op1 \"Bridlington\"))\n    :time (d / date-entity\n             :day 1\n             :month 5))",
      "(r / run-over-04\n   :ARG1 (t / tour :name (n / name :op1 \"Tour\" :op2 \"de\" :op3 \"Yorkshire\")))",
      "(s2 / start-01\n    :location (c / city :name (n2 / name :op1 \"Bridlington\")))",
      "(r / run-over-04\n   :ARG1 (t / tour :name (n / name :op1 \"Tour\" :op2 \"de\" :op3 \"Yorkshire\")))",
      "(s2 / start-01\n    :location (c / city :name (n2 / name :op1 \"Bridlington\")))",
      "(r / run-over-04\n   :ARG1 (t / tour\n            :name (n / name\n                     :op1 \"Tour\"\n                     :op2 \"de\"\n                     :op3 \"Yorkshire\"))\n   :ARG2 (s / stage\n            :quant 3)\n   :ARG1 (s2 / start-01))",
      "(r / run-over-04)",
      "(ii / inspire-01\n    :ARG0 (t / tour\n             :name (n / name\n                      :op1 \"Tour\"\n                      :op2 \"de\"\n                      :op3 \"France\"\n                      :op4 \"Grand\"\n                      :op5 \"Depart\")))",
      "(ii / inspire-01\n    :ARG1 (a / and\n             :op1 (t2 / team\n                      :poss (p / person\n                               :name (n2 / name\n                                         :op1 \"Prior\")))\n             :op2 (r / race-02\n                     :ARG0 p\n                     :location (c / county\n                                  :name (n3 / name\n                                            :op1 \"Yorkshire\")))))",
      "(t / tour\n   :name (n / name\n            :op1 \"Tour\"\n            :op2 \"de\"\n            :op3 \"France\"\n            :op4 \"Grand\"\n            :op5 \"Depart\"))",
      "(a / and\n   :op1 (t2 / team\n            :poss (p / person\n                     :name (n2 / name\n                               :op1 \"Prior\")))\n   :op2 (r / race-02\n           :ARG0 p\n           :location (c / county\n                        :name (n3 / name\n                                  :op1 \"Yorkshire\"))))",
      "(ii / inspire-01\n    :ARG0 (t / tour :name (n / name :op1 \"Tour\" :op2 \"de\" :op3 \"France\" :op4 \"Grand\" :op5 \"Depart\")))",
      "(r / race-02\n   :ARG0 (p / person :name (n2 / name :op1 \"Prior\"))\n   :location (c / county :name (n3 / name :op1 \"Yorkshire\")))",
      "(ii / inspire-01\n    :ARG0 (t / tour :name (n / name :op1 \"Tour\" :op2 \"de\" :op3 \"France\" :op4 \"Grand\" :op5 \"Depart\")))",
      "(r / race-02\n   :ARG0 (p / person :name (n2 / name :op1 \"Prior\")))",
      "(r / race-02\n   :location (c / county :name (n3 / name :op1 \"Yorkshire\")))",
      "(ii / inspire-01\n    :ARG0 (t / tour\n             :name (n / name\n                      :op1 \"Tour\"\n                      :op2 \"de\"\n                      :op3 \"France\"\n                      :op4 \"Grand\"\n                      :op5 \"Depart\"))\n    :ARG1 (t2 / team\n              :poss (p / person\n                       :name (n2 / name\n                                 :op1 \"Prior\"))))",
      "(ii / inspire-01\n    :ARG0 (t / tour\n             :name (n / name\n                      :op1 \"Tour\"\n                      :op2 \"de\"\n                      :op3 \"France\"\n                      :op4 \"Grand\"\n                      :op5 \"Depart\"))\n    :ARG1 (r / race-02\n             :ARG0 (p / person :name (n2 / name :op1 \"Prior\"))\n             :location (c / county\n                          :name (n3 / name\n                                    :op1 \"Yorkshire\"))))",
      "(ii / inspire-01\n    :ARG0 (t / tour\n             :name (n / name\n                      :op1 \"Tour\"\n                      :op2 \"de\"\n                      :op3 \"France\"\n                      :op4 \"Grand\"\n                      :op5 \"Depart\"))\n    :ARG1 (a / and\n             :op1 (t2 / team\n                      :poss (p / person\n                               :name (n2 / name\n                                         :op1 \"Prior\")))\n             :op2 (r / race-02\n                     :ARG0 p)))",
      "(ii / inspire-01)"
    ],
    "smus": [
      "One Pro Cycling is preparing.",
      "One Pro Cycling is preparing to take on Team Sky and Sir Bradley Wiggins.",
      "One Pro Cycling.",
      "One Pro Cycling will take on Team Sky and Sir Bradley Wiggins.",
      "One Pro Cycling is preparing.",
      "One Pro Cycling is preparing.",
      "One Pro Cycling is preparing to take on Team Sky.",
      "One Pro Cycling is preparing to take on Sir Bradley Wiggins.",
      "One Pro Cycling is preparing to take on Team Sky and Sir Bradley Wiggins.",
      "Preparing.",
      "Tour de Yorkshire runs over.",
      "Three stages were run over.",
      "Starting in Burlington on May 1, the run over was",
      "Tour de Yorkshire",
      "Starting May 1st in Burlington.",
      "Tour de Yorkshire runs over.",
      "Starting in Burlington.",
      "Tour de Yorkshire runs over.",
      "Starting in Burlington.",
      "Tour de Yorkshire has run over three stages starting.",
      "Run over.",
      "Inspired by Tour de France Grand D\u00e9part.",
      "Prior's team and the Yorkshire race were inspired.",
      "Tour de France Grand D\u00e9part",
      "Prior's team and the race in Yorkshire.",
      "Inspired by Tour de France Grand D\u00e9part.",
      "Prior is in the race in Yorkshire.",
      "Inspired by Tour de France Grand D\u00e9part.",
      "Prior is in the race.",
      "The race is in Yorkshire.",
      "The Tour de France Grand D\u00e9part has inspired the team of Prior.",
      "The Tour de France Grand Depart has inspired the race for the Primar in Yorkshire.",
      "The Tour de France Grand D\u00e9part has inspired the team and race of Prior.",
      "Inspirational."
    ]
  },
  {
    "instance_id": "realsumm-77",
    "summary": "<t> Woman reported ' someone ' had been run over , but victim was a squirrel . </t> <t> Another man dialled 999 to say he dropped a burger which was ' bleeding ' East of England ambulance service warned hoax calls can cost lives . </t>",
    "summary_trees": [
      "# ::snt  Woman reported ' someone ' had been run over , but victim was a squirrel . \n(c / contrast-01\n      :ARG1 (r / report-01\n            :ARG0 (w / woman)\n            :ARG1 (r2 / run-over-12\n                  :ARG1 (s / someone)))\n      :ARG2 (s2 / squirrel\n            :domain (v / victim)))",
      "# ::snt  Another man dialled 999 to say he dropped a burger which was ' bleeding ' East of England ambulance service warned hoax calls can cost lives . \n(m / multi-sentence\n      :snt1 (d / dial-01\n            :ARG0 (m2 / man\n                  :mod (a / another))\n            :ARG1 (p / phone-number-entity\n                  :value 999)\n            :purpose (s / say-01\n                  :ARG0 m2\n                  :ARG1 (d2 / drop-01\n                        :ARG0 m2\n                        :ARG1 (b / burger\n                              :ARG1-of (b2 / bleed-01)))))\n      :snt2 (w / warn-01\n            :ARG0 (s2 / service\n                  :mod (a2 / ambulance)\n                  :mod (c / country-region\n                        :name (n / name\n                              :op1 \"East\"\n                              :op2 \"of\"\n                              :op3 \"England\")))\n            :ARG1 (p2 / possible-01\n                  :ARG1 (c2 / cost-01\n                        :ARG1 (c3 / call-02\n                              :mod (h / hoax-01))\n                        :ARG2 (l / live-01)))))"
    ],
    "tree": [
      "(c / contrast-01\n   :ARG1 (r / report-01\n            :ARG0 (w / woman)\n            :ARG1 (r2 / run-over-12\n                      :ARG1 (s / someone))))",
      "(c / contrast-01\n   :ARG2 (s2 / squirrel\n             :domain (v / victim)))",
      "(r / report-01\n   :ARG0 (w / woman)\n   :ARG1 (r2 / run-over-12\n             :ARG1 (s / someone)))",
      "(s2 / squirrel\n    :domain (v / victim))",
      "(c / contrast-01\n   :ARG1 (r / report-01))",
      "(r / report-01\n   :ARG0 (w / woman))",
      "(c / contrast-01\n   :ARG1 (r / report-01))",
      "(r / report-01\n   :ARG0 (w / woman))",
      "(c / contrast-01\n   :ARG1 (r / report-01\n            :ARG0 (w / woman)\n            :ARG1 (r2 / run-over-12\n                      :ARG1 (s / someone)))\n   :ARG2 (s2 / squirrel\n             :domain (v / victim)))",
      "(c / contrast-01)",
      "(m / multi-sentence\n   :snt1 (d / dial-01\n            :ARG0 (m2 / man\n                      :mod (a / another))\n            :ARG1 (p / phone-number-entity\n                     :value 999)\n            :purpose (s / say-01\n                        :ARG0 m2\n                        :ARG1 (d2 / drop-01\n                                  :ARG0 m2\n                                  :ARG1 (b / burger\n                                           :ARG1-of (b2 / bleed-01))))))",
      "(m / multi-sentence\n   :snt2 (w / warn-01\n            :ARG0 (s2 / service\n                      :mod (a2 / ambulance)\n                      :mod (c / country-region\n                              :name (n / name\n                                       :op1 \"East\"\n                                       :op2 \"of\"\n                                       :op3 \"England\")))\n            :ARG1 (p2 / possible-01\n                      :ARG1 (c2 / cost-01\n                                :ARG1 (c3 / call-02\n                                          :mod (h / hoax-01))\n                                :ARG2 (l / live-01)))))",
      "(d / dial-01\n   :ARG0 (m2 / man\n             :mod (a / another))\n   :ARG1 (p / phone-number-entity\n            :value 999)\n   :purpose (s / say-01\n               :ARG0 m2\n               :ARG1 (d2 / drop-01\n                         :ARG0 m2\n                         :ARG1 (b / burger\n                                  :ARG1-of (b2 / bleed-01)))))",
      "(w / warn-01\n   :ARG0 (s2 / service\n             :mod (a2 / ambulance)\n             :mod (c / country-region\n                     :name (n / name\n                              :op1 \"East\"\n                              :op2 \"of\"\n                              :op3 \"England\")))\n   :ARG1 (p2 / possible-01\n             :ARG1 (c2 / cost-01\n                       :ARG1 (c3 / call-02\n                                 :mod (h / hoax-01))\n                       :ARG2 (l / live-01))))",
      "(d / dial-01\n   :ARG0 (m2 / man))",
      "(s / say-01\n   :ARG0 (m2 / man)\n   :ARG1 (d2 / drop-01))",
      "(d2 / drop-01\n    :ARG0 (m2 / man)\n    :ARG1 (b / burger))",
      "(b2 / bleed-01)",
      "(w / warn-01\n   :ARG0 (s2 / service))",
      "(p2 / possible-01\n    :ARG1 (c2 / cost-01))",
      "(c2 / cost-01\n    :ARG1 (c3 / call-02))",
      "(c3 / call-02\n    :mod (h / hoax-01))",
      "(h / hoax-01)",
      "(l / live-01)",
      "(d / dial-01\n   :ARG0 (m2 / man))",
      "(s / say-01\n   :ARG0 (m2 / man))",
      "(s / say-01\n   :ARG1 (d2 / drop-01))",
      "(d2 / drop-01\n    :ARG0 (m2 / man))",
      "(d2 / drop-01\n    :ARG1 (b / burger))",
      "(w / warn-01\n   :ARG0 (s2 / service))",
      "(p2 / possible-01\n    :ARG1 (c2 / cost-01))",
      "(c2 / cost-01\n    :ARG1 (c3 / call-02))",
      "(c3 / call-02\n    :mod (h / hoax-01))",
      "(m / multi-sentence\n   :snt1 (d / dial-01\n            :ARG0 (m2 / man\n                      :mod (a / another))\n            :ARG1 (p / phone-number-entity\n                     :value 999))\n   :snt2 (w / warn-01\n            :ARG0 (s2 / service\n                      :mod (a2 / ambulance)\n                      :mod (c / country-region\n                              :name (n / name\n                                       :op1 \"East\"\n                                       :op2 \"of\"\n                                       :op3 \"England\")))\n            :ARG1 (p2 / possible-01\n                      :ARG1 (c2 / cost-01\n                                :ARG1 (c3 / call-02\n                                          :mod (h / hoax-01))\n                                :ARG2 (l / live-01)))))",
      "(m / multi-sentence\n   :snt1 (d / dial-01\n            :purpose (s / say-01))\n   :snt2 (w / warn-01))"
    ],
    "smus": [
      "But the woman reported someone being run over.",
      "But the victim is a squirrel.",
      "The woman reported someone being run over.",
      "The victim is a squirrel.",
      "But it was reported.",
      "The woman reported.",
      "But it was reported.",
      "The woman reported.",
      "The woman reported someone being run over but the victim was a squirrel.",
      "But...",
      "Another man dialled 999 to say he dropped a bleeding burger.",
      "The East of England ambulance service warned that hoax calls could cost lives.",
      "Another man dialled 999 to say he dropped a bleeding burger.",
      "The East of England ambulance service warned that hoax calls could cost lives.",
      "The man dialed.",
      "The man did say \"dropped.\"",
      "The man dropped the burger.",
      "Bleeding.",
      "The service warned --",
      "It could cost.",
      "Calls will cost.",
      "Hoax calls.",
      "Hoax.",
      "Lives.",
      "The man dialed.",
      "Say the man.",
      "Dropped.",
      "The man dropped.",
      "The burger was dropped.",
      "The service warned --",
      "It could cost.",
      "Calls will cost.",
      "Hoax calls.",
      "Another man dialled 999. The East of England ambulance service warned that hoax calls could cost lives.",
      "Dialed to say, warned."
    ]
  },
  {
    "instance_id": "realsumm-78",
    "summary": "<t> Ben Flower returned from his six - month ban on Thursday night . </t> <t> Wales forward made first appearance since he punched St Helens ' Lance Hohaia in the opening moments of last season 's Grand Final . </t> <t> 27-year - old received a brilliant reception during 's Wigan 's 30 - 20 victory against Warrington . </t>",
    "summary_trees": [
      "# ::snt  Ben Flower returned from his six - month ban on Thursday night . \n(r / return-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Ben\"\n                  :op2 \"Flower\"))\n      :ARG3 (b / ban-01\n            :ARG2 p\n            :duration (t / temporal-quantity\n                  :quant 6\n                  :unit (m / month)))\n      :time (d / date-entity\n            :weekday (t2 / thursday)\n            :dayperiod (n2 / night)))",
      "# ::snt  Wales forward made first appearance since he punched St Helens ' Lance Hohaia in the opening moments of last season 's Grand Final . \n(a / appear-01\n      :ARG1 (f / forward\n            :part-of (t / team\n                  :name (n / name\n                        :op1 \"Wales\")))\n      :ord (o / ordinal-entity\n            :value 1\n            :range (s / since\n                  :op1 (p / punch-01\n                        :ARG0 f\n                        :ARG1 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Lance\"\n                                    :op2 \"Hohaia\")\n                              :part-of (t2 / team\n                                    :name (n3 / name\n                                          :op1 \"St\"\n                                          :op2 \"Helens\")))\n                        :time (m / moment\n                              :ARG0-of (o2 / open-02\n                                    :ARG1 (g / game\n                                          :name (n4 / name\n                                                :op1 \"Grand\"\n                                                :op2 \"Final\")\n                                          :time (s2 / season\n                                                :mod (l / last)))))))))",
      "# ::snt  27-year - old received a brilliant reception during 's Wigan 's 30 - 20 victory against Warrington . \n(r / receive-01\n      :ARG0 (p / person\n            :age (t / temporal-quantity\n                  :quant 27\n                  :unit (y / year)))\n      :ARG1 (r2 / reception\n            :ARG1-of (b / brilliant-01))\n      :time (w / win-01\n            :ARG0 (t2 / team\n                  :name (n / name\n                        :op1 \"Wigan\"))\n            :ARG4 (t3 / team\n                  :name (n2 / name\n                        :op1 \"Warrington\"))\n            :manner (s / score-entity\n                  :op1 30\n                  :op2 20)))"
    ],
    "tree": [
      "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ben\"\n                     :op2 \"Flower\")))",
      "(r / return-01\n   :ARG3 (b / ban-01\n            :ARG2 (p / person :name (n / name :op1 \"Ben\" :op2 \"Flower\"))\n            :duration (t / temporal-quantity\n                         :quant 6\n                         :unit (m / month))))",
      "(r / return-01\n   :time (d / date-entity\n            :weekday (t2 / thursday)\n            :dayperiod (n2 / night)))",
      "(p / person\n   :name (n / name\n            :op1 \"Ben\"\n            :op2 \"Flower\"))",
      "(b / ban-01\n   :ARG2 (p / person :name (n / name :op1 \"Ben\" :op2 \"Flower\"))\n   :duration (t / temporal-quantity\n                :quant 6\n                :unit (m / month)))",
      "(d / date-entity\n   :weekday (t2 / thursday)\n   :dayperiod (n2 / night))",
      "(r / return-01\n   :ARG1 (p / person :name (n / name :op1 \"Ben\" :op2 \"Flower\")))",
      "(b / ban-01\n   :ARG2 (p / person :name (n / name :op1 \"Ben\" :op2 \"Flower\"))\n   :duration (t / temporal-quantity))",
      "(r / return-01\n   :ARG1 (p / person :name (n / name :op1 \"Ben\" :op2 \"Flower\")))",
      "(b / ban-01\n   :ARG2 (p / person :name (n / name :op1 \"Ben\" :op2 \"Flower\")))",
      "(b / ban-01\n   :duration (t / temporal-quantity))",
      "(r / return-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Ben\"\n                     :op2 \"Flower\"))\n   :ARG3 (b / ban-01\n            :ARG2 p\n            :duration (t / temporal-quantity\n                         :quant 6\n                         :unit (m / month))))",
      "(r / return-01\n   :time (d / date-entity\n            :weekday (t2 / thursday)\n            :dayperiod (n2 / night)))",
      "(a / appear-01\n   :ARG1 (f / forward\n            :part-of (t / team\n                        :name (n / name\n                                 :op1 \"Wales\"))))",
      "(a / appear-01\n   :ord (o / ordinal-entity\n           :value 1\n           :range (s / since\n                     :op1 (p / punch-01\n                             :ARG0 (f / forward)\n                             :ARG1 (p2 / person\n                                       :name (n2 / name\n                                                 :op1 \"Lance\"\n                                                 :op2 \"Hohaia\")\n                                       :part-of (t2 / team\n                                                    :name (n3 / name\n                                                              :op1 \"St\"\n                                                              :op2 \"Helens\")))\n                             :time (m / moment\n                                      :ARG0-of (o2 / open-02\n                                                   :ARG1 (g / game\n                                                            :name (n4 / name\n                                                                      :op1 \"Grand\"\n                                                                      :op2 \"Final\")\n                                                            :time (s2 / season\n                                                                      :mod (l / last)))))))))",
      "(f / forward\n   :part-of (t / team\n               :name (n / name\n                        :op1 \"Wales\")))",
      "(o / ordinal-entity\n   :value 1\n   :range (s / since\n             :op1 (p / punch-01\n                     :ARG0 (f / forward)\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Lance\"\n                                         :op2 \"Hohaia\")\n                               :part-of (t2 / team\n                                            :name (n3 / name\n                                                      :op1 \"St\"\n                                                      :op2 \"Helens\")))\n                     :time (m / moment\n                              :ARG0-of (o2 / open-02\n                                           :ARG1 (g / game\n                                                    :name (n4 / name\n                                                              :op1 \"Grand\"\n                                                              :op2 \"Final\")\n                                                    :time (s2 / season\n                                                              :mod (l / last))))))))",
      "(a / appear-01\n   :ARG1 (f / forward))",
      "(p / punch-01\n   :ARG0 (f / forward)\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Lance\" :op2 \"Hohaia\"))))",
      "(o2 / open-02\n    :ARG1 (g / game :name (n4 / name :op1 \"Grand\" :op2 \"Final\"))))",
      "(a / appear-01\n   :ARG1 (f / forward))",
      "(p / punch-01\n   :ARG0 (f / forward))",
      "(p / punch-01\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Lance\" :op2 \"Hohaia\"))))",
      "(o2 / open-02\n    :ARG1 (g / game :name (n4 / name :op1 \"Grand\" :op2 \"Final\"))))",
      "(a / appear-01\n   :ARG1 (f / forward\n            :part (t / team\n                     :name (n / name\n                              :op1 \"Wales\")))\n   :ord (o / ordinal-entity\n           :value 1\n           :range (s / since\n                     :op1 (p / punch-01\n                             :ARG0 f\n                             :ARG1 (p2 / person\n                                       :name (n2 / name\n                                                 :op1 \"Lance\"\n                                                 :op2 \"Hohaia\")\n                                       :part (t2 / team\n                                                 :name (n3 / name\n                                                           :op1 \"St\"\n                                                           :op2 \"Helens\")))))))",
      "(a / appear-01\n   :ord (o / ordinal-entity\n           :value 1\n           :range (s / since\n                     :op1 (p / punch-01))))",
      "(r / receive-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 27\n                    :unit (y / year))))",
      "(r / receive-01\n   :ARG1 (r2 / reception\n             :ARG1-of (b / brilliant-01)))",
      "(r / receive-01\n   :time (w / win-01\n            :ARG0 (t2 / team\n                      :name (n / name\n                               :op1 \"Wigan\"))\n            :ARG4 (t3 / team\n                      :name (n2 / name\n                                :op1 \"Warrington\"))\n            :manner (s / score-entity\n                       :op1 30\n                       :op2 20)))",
      "(p / person\n   :age (t / temporal-quantity\n           :quant 27\n           :unit (y / year)))",
      "(r2 / reception\n    :ARG1-of (b / brilliant-01))",
      "(w / win-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Wigan\"))\n   :ARG4 (t3 / team\n             :name (n2 / name\n                       :op1 \"Warrington\"))\n   :manner (s / score-entity\n              :op1 30\n              :op2 20))",
      "(r / receive-01\n   :ARG0 (p / person))",
      "(b / brilliant-01)",
      "(w / win-01\n   :ARG0 (t2 / team :name (n / name :op1 \"Wigan\")))",
      "(r / receive-01\n   :ARG0 (p / person))",
      "(w / win-01\n   :ARG0 (t2 / team :name (n / name :op1 \"Wigan\")))",
      "(r / receive-01\n   :ARG0 (p / person\n            :age (t / temporal-quantity\n                    :quant 27\n                    :unit (y / year)))\n   :ARG1 (r2 / reception\n             :ARG1 (b / brilliant-01)))",
      "(r / receive-01\n   :time (w / win-01\n            :manner (s / score-entity\n                       :op1 30\n                       :op2 20)))"
    ],
    "smus": [
      "Ben Flower returned.",
      "Ben Flower's 6 month ban returned.",
      "The ship returned Thursday night.",
      "Ben Flower",
      "Ben Flower has been banned for 6 months.",
      "Thursday night",
      "Ben Flower returned.",
      "Ben Flower has been banned for a period of time.",
      "Ben Flower returned.",
      "Ben Flower got a ban.",
      "A ban for a period of time.",
      "Ben Flower returned from a six-month ban.",
      "The ship returned Thursday night.",
      "Wales forward appearance",
      "The first appearance since St Helens forward Lance Hohaia punched in the opening moments of last season's Grand Final.",
      "Wales forward.",
      "First time since St Helens forward Lance Hohaia punched in the opening moments of last season's Grand Final.",
      "A forward appearance.",
      "Lance Hohaia was pounded forward.",
      "The Grand Final is open.",
      "A forward appearance.",
      "Pucked forward.",
      "Lance Hohaia was punched.",
      "The Grand Final is open.",
      "Wales' forward appearance is the first since punching St Helens' Lanance Hohaia.",
      "First appearance since the punch.",
      "The 27 year old received.",
      "Received a brilliant reception.",
      "Received when Warrington beat Waigan 30-20.",
      "27 year old",
      "Brilliant reception.",
      "Wigan beat Warrington 30-20",
      "People received.",
      "Brilliant.",
      "Wigan won",
      "People received.",
      "Wigan won",
      "The 27 year old received a brilliant reception.",
      "Received when the win was 30-20."
    ]
  },
  {
    "instance_id": "realsumm-79",
    "summary": "<t> Inspired by the aesthetic of the Belle Epoque era , the Jacques Garcia designed hotel is both opulent and edgy . </t> <t> A mix of Arabian and Napoleon III decor , the Pigalle haunt harkens back to the city 's pleasure houses of yesteryear . </t> <t> Also available for guest use : a charming conservatory , library bar and celestial spa available for private rental . </t>",
    "summary_trees": [
      "# ::snt  Inspired by the aesthetic of the Belle Epoque era , the Jacques Garcia designed hotel is both opulent and edgy . \n(a / and\n      :op1 (o / opulent\n            :domain (h / hotel\n                  :ARG1-of (d / design-01\n                        :ARG0 (p / person\n                              :name (n / name\n                                    :op1 \"Jacques\"\n                                    :op2 \"Garcia\")))))\n      :op2 (e / edgy\n            :domain h)\n      :ARG1-of (ii / inspire-01\n            :ARG0 (a2 / aesthetic\n                  :poss (e2 / era\n                        :name (n2 / name\n                              :op1 \"Belle\"\n                              :op2 \"Epoque\")))))",
      "# ::snt  A mix of Arabian and Napoleon III decor , the Pigalle haunt harkens back to the city 's pleasure houses of yesteryear . \n(h / harken-01\n      :ARG0 (h2 / haunt-01\n            :location (c / city-district\n                  :name (n / name\n                        :op1 \"Pigalle\"))\n            :ARG2-of (m / mix-01\n                  :ARG1 (d / decor\n                        :mod (w / world-region\n                              :name (n2 / name\n                                    :op1 \"Arabia\")))\n                  :ARG3 (d2 / decor\n                        :mod (p / person\n                              :name (n3 / name\n                                    :op1 \"Napoleon\"\n                                    :op2 \"III\")))))\n      :ARG1 (h3 / house\n            :mod (p2 / pleasure)\n            :poss c\n            :time (y / yesteryear))\n      :direction (b / back))",
      "# ::snt  Also available for guest use : a charming conservatory , library bar and celestial spa available for private rental . \n(a / available-02\n      :ARG2 (u / use-01\n            :ARG0 (g / guest)\n            :ARG1 (a2 / and\n                  :op1 (c / conservatory\n                        :ARG0-of (c2 / charm-01))\n                  :op2 (b / bar\n                        :mod (l / library))\n                  :op3 (s / spa\n                        :mod (c3 / celestial))\n                  :ARG2-of (a3 / available-02\n                        :ARG2 (r / rent-01\n                              :ARG1 a2\n                              :ARG1-of (p / private-03)))))\n      :mod (a4 / also))"
    ],
    "tree": [
      "(a / and\n   :op1 (o / opulent\n           :domain (h / hotel\n                      :ARG1-of (d / design-01\n                                  :ARG0 (p / person\n                                           :name (n / name\n                                                    :op1 \"Jacques\"\n                                                    :op2 \"Garcia\"))))))",
      "(a / and\n   :op2 (e / edgy\n           :domain (h / hotel)))",
      "(a / and\n   :ARG1-of (ii / inspire-01\n                :ARG0 (a2 / aesthetic\n                          :poss (e2 / era\n                                    :name (n2 / name\n                                              :op1 \"Belle\"\n                                              :op2 \"Epoque\")))))",
      "(o / opulent\n   :domain (h / hotel\n              :ARG1-of (d / design-01\n                          :ARG0 (p / person\n                                   :name (n / name\n                                            :op1 \"Jacques\"\n                                            :op2 \"Garcia\")))))",
      "(ii / inspire-01\n    :ARG0 (a2 / aesthetic\n              :poss (e2 / era\n                        :name (n2 / name\n                                  :op1 \"Belle\"\n                                  :op2 \"Epoque\"))))",
      "(d / design-01\n   :ARG0 (p / person :name (n / name :op1 \"Jacques\" :op2 \"Garcia\")))",
      "(ii / inspire-01\n    :ARG0 (a2 / aesthetic))",
      "(d / design-01\n   :ARG0 (p / person :name (n / name :op1 \"Jacques\" :op2 \"Garcia\")))",
      "(ii / inspire-01\n    :ARG0 (a2 / aesthetic))",
      "(o / opulent\n   :domain (h / hotel\n              :ARG1-of (d / design-01\n                          :ARG0 (p / person\n                                   :name (n / name\n                                            :op1 \"Jacques\"\n                                            :op2 \"Garcia\")))))",
      "(e / edgy\n   :domain (h / hotel)\n   :ARG1-of (ii / inspire-01\n                :ARG0 (a2 / aesthetic\n                          :poss (e2 / era\n                                    :name (n2 / name\n                                              :op1 \"Belle\"\n                                              :op2 \"Epoque\")))))",
      "(a / and\n   :op1 (o / opulent\n           :domain (h / hotel\n                      :ARG1 (d / design-01\n                               :ARG0 (p / person\n                                        :name (n / name\n                                                 :op1 \"Jacques\"\n                                                 :op2 \"Garcia\")))))\n   :op2 (e / edgy\n           :domain h)\n   :ARG1 (ii / inspire-01\n             :ARG0 (a2 / aesthetic\n                       :poss (e2 / era\n                                 :name (n2 / name\n                                           :op1 \"Belle\"\n                                           :op2 \"Epoque\")))))",
      "(a / and\n   :op1 (o / opulent\n           :domain (h / hotel))\n   :op2 (e / edgy\n           :domain h))",
      "(h / harken-01\n   :ARG0 (h2 / haunt-01\n             :location (c / city-district\n                          :name (n / name\n                                   :op1 \"Pigalle\"))\n             :ARG2-of (m / mix-01\n                         :ARG1 (d / decor\n                                  :mod (w / world-region\n                                          :name (n2 / name\n                                                    :op1 \"Arabia\")))\n                         :ARG3 (d2 / decor\n                                   :mod (p / person\n                                           :name (n3 / name\n                                                     :op1 \"Napoleon\"\n                                                     :op2 \"III\"))))))",
      "(h / harken-01\n   :ARG1 (h3 / house\n             :mod (p2 / pleasure)\n             :poss (c / city-district :name (n / name :op1 \"Pigalle\"))\n             :time (y / yesteryear)))",
      "(h / harken-01\n   :direction (b / back))",
      "(h2 / haunt-01\n    :location (c / city-district\n                 :name (n / name\n                          :op1 \"Pigalle\"))\n    :ARG2-of (m / mix-01\n                :ARG1 (d / decor\n                         :mod (w / world-region\n                                 :name (n2 / name\n                                           :op1 \"Arabia\")))\n                :ARG3 (d2 / decor\n                          :mod (p / person\n                                  :name (n3 / name\n                                            :op1 \"Napoleon\"\n                                            :op2 \"III\")))))",
      "(h3 / house\n    :mod (p2 / pleasure)\n    :poss (c / city-district :name (n / name :op1 \"Pigalle\"))\n    :time (y / yesteryear))",
      "(h / harken-01\n   :ARG0 (h2 / haunt-01))",
      "(h2 / haunt-01\n    :location (c / city-district :name (n / name :op1 \"Pigalle\")))",
      "(m / mix-01\n   :ARG1 (d / decor))",
      "(h / harken-01\n   :ARG0 (h2 / haunt-01))",
      "(h2 / haunt-01\n    :location (c / city-district :name (n / name :op1 \"Pigalle\")))",
      "(m / mix-01\n   :ARG1 (d / decor))",
      "(h / harken-01\n   :ARG0 (h2 / haunt-01\n             :ARG2 (m / mix-01\n                      :ARG1 (d / decor\n                               :mod (w / world-region\n                                       :name (n2 / name\n                                                 :op1 \"Arabia\")))\n                      :ARG3 (d2 / decor\n                                :mod (p / person\n                                        :name (n3 / name\n                                                  :op1 \"Napoleon\"\n                                                  :op2 \"III\")))))\n   :ARG1 (h3 / house\n             :mod (p2 / pleasure))\n   :direction (b / back))",
      "(h / harken-01\n   :direction (b / back))",
      "(a / available-02\n   :ARG2 (u / use-01\n            :ARG0 (g / guest)\n            :ARG1 (a2 / and\n                      :op1 (c / conservatory\n                              :ARG0-of (c2 / charm-01))\n                      :op2 (b / bar\n                              :mod (l / library))\n                      :op3 (s / spa\n                              :mod (c3 / celestial))\n                      :ARG2-of (a3 / available-02\n                                   :ARG2 (r / rent-01\n                                            :ARG1 a2\n                                            :ARG1-of (p / private-03))))))",
      "(a / available-02\n   :mod (a4 / also))",
      "(u / use-01\n   :ARG0 (g / guest)\n   :ARG1 (a2 / and\n             :op1 (c / conservatory\n                     :ARG0-of (c2 / charm-01))\n             :op2 (b / bar\n                     :mod (l / library))\n             :op3 (s / spa\n                     :mod (c3 / celestial))\n             :ARG2-of (a3 / available-02\n                          :ARG2 (r / rent-01\n                                   :ARG1 a2\n                                   :ARG1-of (p / private-03)))))",
      "(a / available-02\n   :ARG2 (u / use-01))",
      "(u / use-01\n   :ARG0 (g / guest))",
      "(c2 / charm-01)",
      "(a3 / available-02\n    :ARG2 (r / rent-01))",
      "(r / rent-01\n   :ARG1 (a2 / and))",
      "(p / private-03)",
      "(a / available-02\n   :ARG2 (u / use-01))",
      "(u / use-01\n   :ARG0 (g / guest))",
      "(a3 / available-02\n    :ARG2 (r / rent-01))",
      "(r / rent-01\n   :ARG1 (a2 / and))",
      "(a / available-02\n   :ARG2 (u / use-01\n            :ARG0 (g / guest)\n            :ARG1 (c / conservatory\n                     :ARG0-of (c2 / charm-01))))",
      "(a / available-02\n   :ARG2 (u / use-01\n            :ARG0 (g / guest)\n            :ARG1 (b / bar\n                     :mod (l / library))))",
      "(a / available-02\n   :ARG2 (u / use-01\n            :ARG0 (g / guest)\n            :ARG1 (s / spa\n                     :mod (c3 / celestial)\n                     :ARG2-of (a3 / available-02\n                                  :ARG2 (r / rent-01\n                                           :ARG1 s\n                                           :ARG1-of (p / private-03)))))\n   :mod (a4 / also))",
      "(a / available-02\n   :ARG2 (u / use-01\n            :ARG0 (g / guest)\n            :ARG1 (a2 / and\n                      :op1 (c / conservatory\n                              :ARG0 (c2 / charm-01))\n                      :op2 (b / bar\n                              :mod (l / library))\n                      :op3 (s / spa\n                              :mod (c3 / celestial))\n                      :ARG2 (a3 / available-02\n                                :ARG2 (r / rent-01\n                                         :ARG1 a2\n                                         :ARG1 (p / private-03)))))\n   :mod (a4 / also))",
      "(a / available-02\n   :mod (a4 / also))"
    ],
    "smus": [
      "And the hotel Jacques Garcia designed was opulent.",
      "And the hotel is edgy.",
      "and inspired by the aesthetic of the Belle Epoque era.",
      "The opulent hotel Jacques Garcia designed is.",
      "The aesthetic of the Belle Epoque era is inspired.",
      "Jacques Garcia designed.",
      "The aesthetic is inspired.",
      "Jacques Garcia designed.",
      "The aesthetic is inspired.",
      "The opulent hotel Jacques Garcia designed is.",
      "The hotel is edgy, inspired by the aesthetic of the Belle Epoque era.",
      "The hotel Jacques Garcia designed is opulent and edgy, inspired by the aesthetic of the Belle Epoque era.",
      "The hotel is opulent and edgy.",
      "The Pigalle haunt harkens to the mix of Arab and Napoleonic decor.",
      "Harkens back to the Pigalle pleasure houses of yesteryear.",
      "Harkens back.",
      "The Pigalle haunt is a mix of Arab and Napoleonic decor.",
      "Pigalle was once the pleasure houses of the past.",
      "Haunted harkens.",
      "Pigalle Haunted",
      "Mix of decor",
      "Haunted harkens.",
      "Pigalle Haunted",
      "Mix of decor",
      "Haunted by the mix of Arab and Napoleonic decor harkens back to pleasure houses.",
      "Harkens back.",
      "The charming conservatory, library bar and celestial spa are available for guest use and are available for private rent.",
      "Also available.",
      "The guest will use the charming conservatory, library bar and celestial spa available for private rent.",
      "available for use.",
      "Guest use:",
      "Charming.",
      "Rentals are available.",
      "The rent is for the rooms and the apartments.",
      "Private.",
      "available for use.",
      "Guest use:",
      "Rentals are available.",
      "The rent is for the rooms and the apartments.",
      "The charming conservatory is available for guest use.",
      "The Library bar is available for guest use.",
      "The celestial spa is also available for guest use and is available for private rental.",
      "The charming conservatory, library bar and celestial spa are also available for guest use and for private rent.",
      "Also available."
    ]
  },
  {
    "instance_id": "realsumm-80",
    "summary": "<t> Steven Finn was left out of the England squad for the West Indies tour . </t> <t> The Middlesex quick bowler has regained form after a tough 12 months . </t> <t> Finn said he 's back to bowling like he was as ' a carefree 21-year - old ' His last of 23 Test caps came for England back in 2013 . </t>",
    "summary_trees": [
      "# ::snt  Steven Finn was left out of the England squad for the West Indies tour . \n(l / leave-out-03\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Steven\"\n                  :op2 \"Finn\"))\n      :ARG2 (s / squad\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"England\"))\n            :subevent-of (t / tour-01\n                  :ARG0 c\n                  :ARG1 (c2 / country\n                        :name (n3 / name\n                              :op1 \"West\"\n                              :op2 \"Indies\")))))",
      "# ::snt  The Middlesex quick bowler has regained form after a tough 12 months . \n(r / regain-01\n      :ARG0 (b / bowler\n            :ARG1-of (q / quick-02)\n            :mod (t / team\n                  :name (n / name\n                        :op1 \"Middlesex\")))\n      :ARG1 (f / form)\n      :time (a / after\n            :op1 (t2 / temporal-quantity\n                  :quant 12\n                  :unit (m / month)\n                  :ARG1-of (t3 / tough-02))))",
      "# ::snt  Finn said he 's back to bowling like he was as ' a carefree 21-year - old ' His last of 23 Test caps came for England back in 2013 . \n(m / multi-sentence\n      :snt1 (s / say-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Finn\"))\n            :ARG1 (g / go-back-19\n                  :ARG1 p\n                  :ARG2 (b / bowl-01\n                        :ARG0 p\n                        :ARG1-of (r / resemble-01\n                              :ARG2 (b2 / bowl-01\n                                    :ARG0 p\n                                    :time (p2 / person\n                                          :age (t / temporal-quantity\n                                                :quant 21\n                                                :unit (y / year))\n                                          :ARG1-of (c / care-free-03)))))))\n      :snt2 (c2 / come-01\n            :ARG1 (c3 / cap\n                  :mod (l / last)\n                  :ARG1-of (ii / include-91\n                        :ARG2 (c4 / cap\n                              :quant 23\n                              :mod (t2 / test)))\n                  :poss (c5 / country\n                        :name (n2 / name\n                              :op1 \"England\")))\n            :time (d / date-entity\n                  :year 2013\n                  :mod (b3 / back))))"
    ],
    "tree": [
      "(l / leave-out-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Steven\"\n                     :op2 \"Finn\")))",
      "(l / leave-out-03\n   :ARG2 (s / squad\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"England\"))\n            :subevent-of (t / tour-01\n                            :ARG0 c\n                            :ARG1 (c2 / country\n                                      :name (n3 / name\n                                                :op1 \"West\"\n                                                :op2 \"Indies\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"Steven\"\n            :op2 \"Finn\"))",
      "(s / squad\n   :mod (c / country\n           :name (n2 / name\n                     :op1 \"England\"))\n   :subevent-of (t / tour-01\n                   :ARG0 c\n                   :ARG1 (c2 / country\n                             :name (n3 / name\n                                       :op1 \"West\"\n                                       :op2 \"Indies\"))))",
      "(l / leave-out-03\n   :ARG1 (p / person :name (n / name :op1 \"Steven\" :op2 \"Finn\")))",
      "(t / tour-01\n   :ARG0 (c / country :name (n2 / name :op1 \"England\"))\n   :ARG1 (c2 / country :name (n3 / name :op1 \"West\" :op2 \"Indies\")))",
      "(l / leave-out-03\n   :ARG1 (p / person :name (n / name :op1 \"Steven\" :op2 \"Finn\")))",
      "(t / tour-01\n   :ARG0 (c / country :name (n2 / name :op1 \"England\")))",
      "(t / tour-01\n   :ARG1 (c2 / country :name (n3 / name :op1 \"West\" :op2 \"Indies\")))",
      "(l / leave-out-03\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Steven\"\n                     :op2 \"Finn\"))\n   :ARG2 (s / squad\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"England\"))\n            :subevent (t / tour-01\n                         :ARG0 c\n                         :ARG1 (c2 / country\n                                   :name (n3 / name\n                                             :op1 \"West\"\n                                             :op2 \"Indies\")))))",
      "(l / leave-out-03)",
      "(r / regain-01\n   :ARG0 (b / bowler\n            :ARG1-of (q / quick-02)\n            :mod (t / team\n                    :name (n / name\n                             :op1 \"Middlesex\"))))",
      "(r / regain-01\n   :ARG1 (f / form))",
      "(r / regain-01\n   :time (a / after\n            :op1 (t2 / temporal-quantity\n                     :quant 12\n                     :unit (m / month)\n                     :ARG1-of (t3 / tough-02))))",
      "(b / bowler\n   :ARG1-of (q / quick-02)\n   :mod (t / team\n           :name (n / name\n                    :op1 \"Middlesex\")))",
      "(a / after\n   :op1 (t2 / temporal-quantity\n            :quant 12\n            :unit (m / month)\n            :ARG1-of (t3 / tough-02)))",
      "(r / regain-01\n   :ARG0 (b / bowler))",
      "(q / quick-02)",
      "(t3 / tough-02)",
      "(r / regain-01\n   :ARG0 (b / bowler))",
      "(r / regain-01\n   :ARG0 (b / bowler\n            :ARG1 (q / quick-02)\n            :mod (t / team\n                    :name (n / name\n                             :op1 \"Middlesex\")))\n   :ARG1 (f / form))",
      "(r / regain-01\n   :time (a / after\n            :op1 (t2 / temporal-quantity\n                     :quant 12\n                     :unit (m / month))))",
      "(m / multi-sentence\n   :snt1 (s / say-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Finn\"))\n            :ARG1 (g / go-back-19\n                     :ARG1 p\n                     :ARG2 (b / bowl-01\n                              :ARG0 p\n                              :ARG1-of (r / resemble-01\n                                          :ARG2 (b2 / bowl-01\n                                                    :ARG0 p\n                                                    :time (p2 / person\n                                                              :age (t / temporal-quantity\n                                                                      :quant 21\n                                                                      :unit (y / year))\n                                                              :ARG1-of (c / care-free-03))))))))",
      "(m / multi-sentence\n   :snt2 (c2 / come-01\n             :ARG1 (c3 / cap\n                       :mod (l / last)\n                       :ARG1-of (ii / include-91\n                                    :ARG2 (c4 / cap\n                                              :quant 23\n                                              :mod (t2 / test)))\n                       :poss (c5 / country\n                                 :name (n2 / name\n                                           :op1 \"England\")))\n             :time (d / date-entity\n                      :year 2013\n                      :mod (b3 / back))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Finn\"))\n   :ARG1 (g / go-back-19\n            :ARG1 p\n            :ARG2 (b / bowl-01\n                     :ARG0 p\n                     :ARG1-of (r / resemble-01\n                                 :ARG2 (b2 / bowl-01\n                                           :ARG0 p\n                                           :time (p2 / person\n                                                     :age (t / temporal-quantity\n                                                             :quant 21\n                                                             :unit (y / year))\n                                                     :ARG1-of (c / care-free-03)))))))",
      "(c2 / come-01\n    :ARG1 (c3 / cap\n              :mod (l / last)\n              :ARG1-of (ii / include-91\n                           :ARG2 (c4 / cap\n                                     :quant 23\n                                     :mod (t2 / test)))\n              :poss (c5 / country\n                        :name (n2 / name\n                                  :op1 \"England\")))\n    :time (d / date-entity\n             :year 2013\n             :mod (b3 / back)))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Finn\")))",
      "(b / bowl-01\n   :ARG0 (p / person :name (n / name :op1 \"Finn\")))",
      "(r / resemble-01\n   :ARG2 (b2 / bowl-01))",
      "(b2 / bowl-01\n    :ARG0 (p / person :name (n / name :op1 \"Finn\"))\n    :time (p2 / person))",
      "(c / care-free-03)",
      "(c2 / come-01\n    :ARG1 (c3 / cap))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Finn\")))",
      "(b / bowl-01\n   :ARG0 (p / person :name (n / name :op1 \"Finn\")))",
      "(r / resemble-01\n   :ARG2 (b2 / bowl-01))",
      "(b2 / bowl-01\n    :ARG0 (p / person :name (n / name :op1 \"Finn\")))",
      "(b2 / bowl-01\n    :time (p2 / person))",
      "(c2 / come-01\n    :ARG1 (c3 / cap))",
      "(m / multi-sentence\n   :snt1 (s / say-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Finn\"))\n            :ARG1 (g / go-back-19\n                     :ARG1 p\n                     :ARG2 (b / bowl-01\n                              :ARG0 p\n                              :ARG1 (r / resemble-01\n                                       :ARG2 (b2 / bowl-01\n                                                 :ARG0 p)))))\n   :snt2 (c2 / come-01\n             :ARG1 (c3 / cap\n                       :mod (l / last)\n                       :ARG1 (ii / include-91\n                                 :ARG2 (c4 / cap\n                                           :quant 23\n                                           :mod (t2 / test)))\n                       :poss (c5 / country\n                                 :name (n2 / name\n                                           :op1 \"England\")))))",
      "(m / multi-sentence\n   :snt1 (s / say-01)\n   :snt2 (c2 / come-01\n             :time (d / date-entity\n                      :year 2013\n                      :mod (b3 / back))))"
    ],
    "smus": [
      "Steven Finn was left out.",
      "England's squad for the West Indies tour was left out.",
      "Steven Finn",
      "England squad on tour of West Indies",
      "Steven Finn was left out.",
      "England on tour of West Indies",
      "Steven Finn was left out.",
      "England on tour",
      "Tour of the West Indies",
      "Steven Finn was left out of the England squad for the West Indies tour.",
      "Left out.",
      "Middlesex's quick bowler has regained",
      "Form has regained.",
      "Recovered after tough 12 months.",
      "Middlesex quick bowler",
      "After tough 12 months.",
      "The bowler has regained.",
      "Quick.",
      "Tough.",
      "The bowler has regained.",
      "Middlesex's quick bowler has regained form.",
      "Recovered after 12 months.",
      "\"I'm going back to bowling like a carefree 21 year old,\" Finn said.",
      "The last of England's 23 test caps came back in 2013...",
      "\"I went back to bowling like a carefree 21 year old,\" Finn said.",
      "The last of England's 23 test caps came back in 2013",
      "\"It's going to be a long time,\" Finn said.",
      "Finn is bowling.",
      "Like bowling.",
      "Finn was bowling when people were.",
      "Care free.",
      "The caps came.",
      "\"It's going to be a long time,\" Finn said.",
      "Finn is bowling.",
      "Like bowling.",
      "Finn is bowling.",
      "Bowling with people.",
      "The caps came.",
      "Finn said he would go back to bowling like he did. England's last cap came with 23 test caps.",
      "said.. came back in 2013."
    ]
  },
  {
    "instance_id": "realsumm-81",
    "summary": "<t> Paul Armstrong flew to Cyprus to celebrate new job as IT project manager . </t> <t> Was stopped at airport with stun gun , baton and knuckle duster in his bag . </t> <t> Pleaded guilty to possession of a firearm and lost his job before starting it . </t> <t> 26-year - old was sentenced to eight months in jail , suspended for two years . </t>",
    "summary_trees": [
      "# ::snt  Paul Armstrong flew to Cyprus to celebrate new job as IT project manager . \n(f / fly-01\n      :ARG1 (p / person\n            :name (n / name\n                  :op1 \"Paul\"\n                  :op2 \"Armstrong\"))\n      :destination (c / country\n            :name (n2 / name\n                  :op1 \"Cyprus\"))\n      :purpose (c2 / celebrate-01\n            :ARG0 p\n            :ARG1 (j / job\n                  :ARG1-of (n3 / new-01)\n                  :topic (p2 / person\n                        :ARG0-of (m / manage-01\n                              :ARG1 (p3 / project\n                                    :mod (t / technology\n                                          :mod (ii / information))))))))",
      "# ::snt  Was stopped at airport with stun gun , baton and knuckle duster in his bag . \n(s / stop-01\n      :ARG1 (h / he)\n      :location (a / airport)\n      :instrument (a2 / and\n            :op1 (g / gun\n                  :ARG2-of (s2 / stun-01))\n            :op2 (b / baton)\n            :op3 (d / duster\n                  :mod (k / knuckle))\n            :location (b2 / bag\n                  :poss h)))",
      "# ::snt  Pleaded guilty to possession of a firearm and lost his job before starting it . \n(a / and\n      :op1 (p / plead-02\n            :ARG1 (g / guilty-01\n                  :ARG1 (h / he)\n                  :ARG2 (p2 / possess-01\n                        :ARG0 h\n                        :ARG1 (f / firearm))))\n      :op2 (l / lose-02\n            :ARG0 h\n            :ARG1 (j / job\n                  :poss h)\n            :time (b / before\n                  :op1 (s / start-01\n                        :ARG0 h\n                        :ARG1 (ii / it)))))",
      "# ::snt  26-year - old was sentenced to eight months in jail , suspended for two years . \n(s / sentence-01\n      :ARG1 (p / person\n            :age (t / temporal-quantity\n                  :quant 26\n                  :unit (y / year)))\n      :ARG2 (a / and\n            :op1 (t2 / temporal-quantity\n                  :quant 8\n                  :unit (m / month)\n                  :location (j / jail))\n            :op2 (s2 / suspend-01\n                  :ARG1 t2\n                  :duration (t3 / temporal-quantity\n                        :quant 2\n                        :unit (y2 / year)))))"
    ],
    "tree": [
      "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paul\"\n                     :op2 \"Armstrong\")))",
      "(f / fly-01\n   :destination (c / country\n                   :name (n2 / name\n                             :op1 \"Cyprus\")))",
      "(f / fly-01\n   :purpose (c2 / celebrate-01\n                :ARG0 (p / person :name (n / name :op1 \"Paul\" :op2 \"Armstrong\"))\n                :ARG1 (j / job\n                         :ARG1-of (n3 / new-01)\n                         :topic (p2 / person\n                                    :ARG0-of (m / manage-01\n                                                :ARG1 (p3 / project\n                                                          :mod (t / technology\n                                                                  :mod (ii / information))))))))",
      "(p / person\n   :name (n / name\n            :op1 \"Paul\"\n            :op2 \"Armstrong\"))",
      "(c / country\n   :name (n2 / name\n             :op1 \"Cyprus\"))",
      "(c2 / celebrate-01\n    :ARG0 (p / person :name (n / name :op1 \"Paul\" :op2 \"Armstrong\"))\n    :ARG1 (j / job\n             :ARG1-of (n3 / new-01)\n             :topic (p2 / person\n                        :ARG0-of (m / manage-01\n                                    :ARG1 (p3 / project\n                                              :mod (t / technology\n                                                      :mod (ii / information)))))))",
      "(f / fly-01\n   :ARG1 (p / person :name (n / name :op1 \"Paul\" :op2 \"Armstrong\")))",
      "(c2 / celebrate-01\n    :ARG0 (p / person :name (n / name :op1 \"Paul\" :op2 \"Armstrong\"))\n    :ARG1 (j / job))",
      "(n3 / new-01)",
      "(m / manage-01\n   :ARG1 (p3 / project))",
      "(f / fly-01\n   :ARG1 (p / person :name (n / name :op1 \"Paul\" :op2 \"Armstrong\")))",
      "(c2 / celebrate-01\n    :ARG0 (p / person :name (n / name :op1 \"Paul\" :op2 \"Armstrong\")))",
      "(c2 / celebrate-01\n    :ARG1 (j / job))",
      "(m / manage-01\n   :ARG1 (p3 / project))",
      "(f / fly-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Paul\"\n                     :op2 \"Armstrong\"))\n   :destination (c / country\n                   :name (n2 / name\n                             :op1 \"Cyprus\")))",
      "(f / fly-01\n   :destination (c / country\n                   :name (n2 / name\n                             :op1 \"Cyprus\"))\n   :purpose (c2 / celebrate-01))",
      "(s / stop-01\n   :ARG1 (h / he))",
      "(s / stop-01\n   :location (a / airport))",
      "(s / stop-01\n   :instrument (a2 / and\n                   :op1 (g / gun\n                           :ARG2-of (s2 / stun-01))\n                   :op2 (b / baton)\n                   :op3 (d / duster\n                           :mod (k / knuckle))\n                   :location (b2 / bag\n                                 :poss (h / he))))",
      "(a2 / and\n    :op1 (g / gun\n            :ARG2-of (s2 / stun-01))\n    :op2 (b / baton)\n    :op3 (d / duster\n            :mod (k / knuckle))\n    :location (b2 / bag\n                  :poss (h / he)))",
      "(s / stop-01\n   :ARG1 (h / he))",
      "(s2 / stun-01)",
      "(s / stop-01\n   :ARG1 (h / he))",
      "(s / stop-01\n   :ARG1 (h / he)\n   :location (a / airport)\n   :instrument (g / gun\n                  :ARG2-of (s2 / stun-01)))",
      "(s / stop-01\n   :ARG1 (h / he)\n   :location (a / airport)\n   :instrument (b / baton))",
      "(s / stop-01\n   :ARG1 (h / he)\n   :location (a / airport)\n   :instrument (d / duster\n                  :mod (k / knuckle)\n                  :location (b2 / bag\n                                :poss h)))",
      "(s / stop-01\n   :ARG1 (h / he)\n   :instrument (a2 / and\n                   :op1 (g / gun\n                           :ARG2 (s2 / stun-01))\n                   :op2 (b / baton)\n                   :op3 (d / duster\n                           :mod (k / knuckle))))",
      "(s / stop-01\n   :location (a / airport)\n   :instrument (a2 / and\n                   :op1 (g / gun)\n                   :op2 (b / baton)\n                   :op3 (d / duster\n                           :mod (k / knuckle))\n                   :location (b2 / bag)))",
      "(a / and\n   :op1 (p / plead-02\n           :ARG1 (g / guilty-01\n                    :ARG1 (h / he)\n                    :ARG2 (p2 / possess-01\n                              :ARG0 h\n                              :ARG1 (f / firearm)))))",
      "(a / and\n   :op2 (l / lose-02\n           :ARG0 (h / he)\n           :ARG1 (j / job\n                    :poss h)\n           :time (b / before\n                    :op1 (s / start-01\n                            :ARG0 h\n                            :ARG1 (ii / it)))))",
      "(p / plead-02\n   :ARG1 (g / guilty-01\n            :ARG1 (h / he)\n            :ARG2 (p2 / possess-01\n                      :ARG0 h\n                      :ARG1 (f / firearm))))",
      "(l / lose-02\n   :ARG0 (h / he)\n   :ARG1 (j / job\n            :poss h)\n   :time (b / before\n            :op1 (s / start-01\n                    :ARG0 h\n                    :ARG1 (ii / it))))",
      "(p / plead-02\n   :ARG1 (g / guilty-01))",
      "(g / guilty-01\n   :ARG1 (h / he))",
      "(p2 / possess-01\n    :ARG0 (h / he)\n    :ARG1 (f / firearm))",
      "(l / lose-02\n   :ARG0 (h / he)\n   :ARG1 (j / job))",
      "(s / start-01\n   :ARG0 (h / he)\n   :ARG1 (ii / it))",
      "(p / plead-02\n   :ARG1 (g / guilty-01))",
      "(g / guilty-01\n   :ARG1 (h / he))",
      "(p2 / possess-01\n    :ARG0 (h / he))",
      "(p2 / possess-01\n    :ARG1 (f / firearm))",
      "(l / lose-02\n   :ARG0 (h / he))",
      "(l / lose-02\n   :ARG1 (j / job))",
      "(s / start-01\n   :ARG0 (h / he))",
      "(s / start-01\n   :ARG1 (ii / it))",
      "(p / plead-02\n   :ARG1 (g / guilty-01\n            :ARG1 (h / he)\n            :ARG2 (p2 / possess-01\n                      :ARG0 h\n                      :ARG1 (f / firearm))))",
      "(l / lose-02\n   :ARG0 (h / he)\n   :ARG1 (j / job\n            :poss h)\n   :time (b / before\n            :op1 (s / start-01\n                    :ARG0 h\n                    :ARG1 (ii / it))))",
      "(a / and\n   :op1 (p / plead-02\n           :ARG1 (g / guilty-01\n                    :ARG1 (h / he)\n                    :ARG2 (p2 / possess-01\n                              :ARG0 h\n                              :ARG1 (f / firearm))))\n   :op2 (l / lose-02\n           :ARG0 h\n           :ARG1 (j / job\n                    :poss h)))",
      "(a / and\n   :op1 (p / plead-02)\n   :op2 (l / lose-02))",
      "(s / sentence-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 26\n                    :unit (y / year))))",
      "(s / sentence-01\n   :ARG2 (a / and\n            :op1 (t2 / temporal-quantity\n                     :quant 8\n                     :unit (m / month)\n                     :location (j / jail))\n            :op2 (s2 / suspend-01\n                     :ARG1 t2\n                     :duration (t3 / temporal-quantity\n                                   :quant 2\n                                   :unit (y2 / year)))))",
      "(p / person\n   :age (t / temporal-quantity\n           :quant 26\n           :unit (y / year)))",
      "(a / and\n   :op1 (t2 / temporal-quantity\n            :quant 8\n            :unit (m / month)\n            :location (j / jail))\n   :op2 (s2 / suspend-01\n            :ARG1 t2\n            :duration (t3 / temporal-quantity\n                          :quant 2\n                          :unit (y2 / year))))",
      "(s / sentence-01\n   :ARG1 (p / person))",
      "(s2 / suspend-01\n    :ARG1 (t2 / temporal-quantity)\n    :duration (t3 / temporal-quantity))",
      "(s / sentence-01\n   :ARG1 (p / person))",
      "(s2 / suspend-01\n    :ARG1 (t2 / temporal-quantity))",
      "(s2 / suspend-01\n    :duration (t3 / temporal-quantity))",
      "(s / sentence-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 26\n                    :unit (y / year)))\n   :ARG2 (t2 / temporal-quantity\n             :quant 8\n             :unit (m / month)\n             :location (j / jail)))",
      "(s / sentence-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 26\n                    :unit (y / year)))\n   :ARG2 (s2 / suspend-01\n             :ARG1 (t2 / temporal-quantity)\n             :duration (t3 / temporal-quantity\n                           :quant 2\n                           :unit (y2 / year))))",
      "(s / sentence-01\n   :ARG1 (p / person\n            :age (t / temporal-quantity\n                    :quant 26\n                    :unit (y / year)))\n   :ARG2 (a / and\n            :op1 (t2 / temporal-quantity\n                     :quant 8\n                     :unit (m / month))\n            :op2 (s2 / suspend-01\n                     :ARG1 t2\n                     :duration (t3 / temporal-quantity\n                                   :quant 2\n                                   :unit (y2 / year)))))",
      "(s / sentence-01)"
    ],
    "smus": [
      "Paul Armstrong flew.",
      "Flights to Cyprus were.",
      "Paul Armstrong flew in to celebrate a new job as IT project manager.",
      "Paul Armstrong",
      "Cyprus (CY)",
      "Paul Armstrong will celebrate a new job as IT project manager.",
      "Paul Armstrong flew.",
      "Paul Armstrong to celebrate the job.",
      "New.",
      "Project management",
      "Paul Armstrong flew.",
      "Paul Armstrong will celebrate.",
      "Celebrate the job.",
      "Project management",
      "Paul Armstrong flew to Cyprus.",
      "Flights flew to Cyprus to celebrate.",
      "He was stopped.",
      "The airport was stopped.",
      "STUNNING GUN, BATON AND KNUTCH DSTER IN HIS BAG STARTED.",
      "In his bag were a stunner gun, a baton and a knuckle duster.",
      "He was stopped.",
      "Stunnin'.",
      "He was stopped.",
      "He was stopped at the airport with a stun gun.",
      "He was stopped at the airport with a baton.",
      "He was stopped at the airport with a knuckle duster in his bag.",
      "He was stopped with a stun gun, a baton and a knuckle duster.",
      "The airport was stopped with a gun, a baton and a knuckle duster in the bag.",
      "And he pleaded guilty to possession of a firearm.",
      "And before he was starting it he lost his job.",
      "He pleaded guilty to possession of a firearm.",
      "He lost his job before starting it.",
      "The plea was made guilty.",
      "He was guilty.",
      "He was in possession of a firearm.",
      "He lost the job.",
      "He's starting it.",
      "The plea was made guilty.",
      "He was guilty.",
      "He was in possession.",
      "Possession of a firearm.",
      "He lost.",
      "Job lost.",
      "He's starting.",
      "It's starting to happen.",
      "He pleaded guilty to possession of a firearm.",
      "He lost his job before starting it.",
      "He pleaded guilty to possession of a firearm and lost his job.",
      "Pledged and lost.",
      "Two years old was sentenced.",
      "sentenced to 8 months in jail and 2 years suspended.",
      "2 years old",
      "8 months in jail, suspended for 2 years.",
      "People were sentenced.",
      "The suspension of the amount was for a period of time.",
      "People were sentenced.",
      "The suspension was made.",
      "suspended for a period of time.",
      "Two years old was sentenced to eight months in jail.",
      "Two years old was sentenced to two years suspended suspension of the amount.",
      "Two years old were sentenced to eight months and suspended for two years.",
      "Sentenced."
    ]
  },
  {
    "instance_id": "realsumm-82",
    "summary": "<t> Australian fashion designer Alex Perry wo n't show at this year 's MBFWA . </t> <t> The designer is excited to kick back and enjoy the shows from front row . </t> <t> This will be the designer 's second MBFWA he has missed in two decades . </t> <t> Perry is now focusing on global expansion in Asia and Middle East . </t>",
    "summary_trees": [
      "# ::snt  Australian fashion designer Alex Perry wo n't show at this year 's MBFWA . \n(s / show-01\n      :polarity -\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Alex\"\n                  :op2 \"Perry\")\n            :ARG0-of (d / design-01\n                  :ARG1 (f / fashion))\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"Australia\")))\n      :time (e / event\n            :name (n3 / name\n                  :op1 \"MBFWA\")\n            :mod (y / year\n                  :mod (t / this))))",
      "# ::snt  The designer is excited to kick back and enjoy the shows from front row . \n(e / excite-01\n      :ARG0 (a / and\n            :op1 (k / kick-01\n                  :ARG0 (p / person\n                        :ARG0-of (d / design-01))\n                  :direction (b / back))\n            :op2 (e2 / enjoy-01\n                  :ARG0 p\n                  :ARG1 (s / show-04)\n                  :location (r / row\n                        :mod (f / front))))\n      :ARG1 p)",
      "# ::snt  This will be the designer 's second MBFWA he has missed in two decades . \n(m / miss-01\n      :ARG0 (p / person\n            :ARG0-of (d / design-01))\n      :ARG1 (m2 / magazine\n            :name (n / name\n                  :op1 \"MBFWA\"))\n      :ord (o / ordinal-entity\n            :value 2\n            :range (t / temporal-quantity\n                  :quant 2\n                  :unit (d2 / decade)))\n      :domain (t2 / this))",
      "# ::snt  Perry is now focusing on global expansion in Asia and Middle East . \n(f / focus-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Perry\"))\n      :ARG1 (e / expand-01\n            :ARG1 p\n            :ARG2 (g / globe)\n            :location (a / and\n                  :op1 (c / continent\n                        :name (n2 / name\n                              :op1 \"Asia\"))\n                  :op2 (w / world-region\n                        :name (n3 / name\n                              :op1 \"Middle\"\n                              :op2 \"East\"))))\n      :time (n4 / now))"
    ],
    "tree": [
      "(s / show-01\n   :polarity -)",
      "(s / show-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alex\"\n                     :op2 \"Perry\")\n            :ARG0-of (d / design-01\n                        :ARG1 (f / fashion))\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"Australia\"))))",
      "(s / show-01\n   :time (e / event\n            :name (n3 / name\n                      :op1 \"MBFWA\")\n            :mod (y / year\n                    :mod (t / this))))",
      "(p / person\n   :name (n / name\n            :op1 \"Alex\"\n            :op2 \"Perry\")\n   :ARG0-of (d / design-01\n               :ARG1 (f / fashion))\n   :mod (c / country\n           :name (n2 / name\n                     :op1 \"Australia\")))",
      "(e / event\n   :name (n3 / name\n             :op1 \"MBFWA\")\n   :mod (y / year\n           :mod (t / this)))",
      "(s / show-01\n   :polarity -\n   :ARG0 (p / person :name (n / name :op1 \"Alex\" :op2 \"Perry\"))))",
      "(d / design-01\n   :ARG1 (f / fashion))",
      "(s / show-01\n   :polarity -)",
      "(s / show-01\n   :ARG0 (p / person :name (n / name :op1 \"Alex\" :op2 \"Perry\"))))",
      "(d / design-01\n   :ARG1 (f / fashion))",
      "(s / show-01\n   :polarity -\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Alex\"\n                     :op2 \"Perry\")\n            :ARG0 (d / design-01\n                     :ARG1 (f / fashion))\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"Australia\"))))",
      "(s / show-01\n   :polarity -\n   :time (e / event\n            :name (n3 / name\n                      :op1 \"MBFWA\")\n            :mod (y / year\n                    :mod (t / this))))",
      "(e / excite-01\n   :ARG0 (a / and\n            :op1 (k / kick-01\n                    :ARG0 (p / person\n                             :ARG0-of (d / design-01))\n                    :direction (b / back))\n            :op2 (e2 / enjoy-01\n                     :ARG0 p\n                     :ARG1 (s / show-04)\n                     :location (r / row\n                                  :mod (f / front)))))",
      "(e / excite-01\n   :ARG1 (p / person))",
      "(a / and\n   :op1 (k / kick-01\n           :ARG0 (p / person\n                    :ARG0-of (d / design-01))\n           :direction (b / back))\n   :op2 (e2 / enjoy-01\n            :ARG0 p\n            :ARG1 (s / show-04)\n            :location (r / row\n                         :mod (f / front))))",
      "(e / excite-01\n   :ARG0 (a / and))",
      "(k / kick-01\n   :ARG0 (p / person))",
      "(d / design-01)",
      "(e2 / enjoy-01\n    :ARG0 (p / person)\n    :ARG1 (s / show-04))",
      "(s / show-04)",
      "(e / excite-01\n   :ARG0 (a / and))",
      "(k / kick-01\n   :ARG0 (p / person))",
      "(e2 / enjoy-01\n    :ARG0 (p / person))",
      "(e2 / enjoy-01\n    :ARG1 (s / show-04))",
      "(e / excite-01\n   :ARG0 (k / kick-01\n            :ARG0 (p / person\n                     :ARG0-of (d / design-01))\n            :direction (b / back)))",
      "(e / excite-01\n   :ARG0 (e2 / enjoy-01\n             :ARG0 (p / person)\n             :ARG1 (s / show-04)\n             :location (r / row\n                          :mod (f / front)))\n   :ARG1 p)",
      "(e / excite-01\n   :ARG0 (a / and\n            :op1 (k / kick-01\n                    :ARG0 (p / person\n                             :ARG0 (d / design-01))\n                    :direction (b / back))\n            :op2 (e2 / enjoy-01\n                     :ARG0 p\n                     :ARG1 (s / show-04)))\n   :ARG1 p)",
      "(e / excite-01)",
      "(m / miss-01\n   :ARG0 (p / person\n            :ARG0-of (d / design-01)))",
      "(m / miss-01\n   :ARG1 (m2 / magazine\n             :name (n / name\n                      :op1 \"MBFWA\")))",
      "(m / miss-01\n   :ord (o / ordinal-entity\n           :value 2\n           :range (t / temporal-quantity\n                     :quant 2\n                     :unit (d2 / decade))))",
      "(m / miss-01\n   :domain (t2 / this))",
      "(p / person\n   :ARG0-of (d / design-01))",
      "(m2 / magazine\n    :name (n / name\n             :op1 \"MBFWA\"))",
      "(o / ordinal-entity\n   :value 2\n   :range (t / temporal-quantity\n             :quant 2\n             :unit (d2 / decade)))",
      "(m / miss-01\n   :ARG0 (p / person))",
      "(d / design-01)",
      "(m / miss-01\n   :ARG0 (p / person))",
      "(m / miss-01\n   :ARG0 (p / person\n            :ARG0 (d / design-01))\n   :ARG1 (m2 / magazine\n             :name (n / name\n                      :op1 \"MBFWA\"))\n   :ord (o / ordinal-entity\n           :value 2\n           :range (t / temporal-quantity\n                     :quant 2\n                     :unit (d2 / decade)))\n   :domain (t2 / this))",
      "(m / miss-01\n   :ord (o / ordinal-entity\n           :value 2\n           :range (t / temporal-quantity\n                     :quant 2\n                     :unit (d2 / decade)))\n   :domain (t2 / this))",
      "(f / focus-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Perry\")))",
      "(f / focus-01\n   :ARG1 (e / expand-01\n            :ARG1 (p / person :name (n / name :op1 \"Perry\"))\n            :ARG2 (g / globe)\n            :location (a / and\n                         :op1 (c / continent\n                                 :name (n2 / name\n                                           :op1 \"Asia\"))\n                         :op2 (w / world-region\n                                 :name (n3 / name\n                                           :op1 \"Middle\"\n                                           :op2 \"East\")))))",
      "(f / focus-01\n   :time (n4 / now))",
      "(p / person\n   :name (n / name\n            :op1 \"Perry\"))",
      "(e / expand-01\n   :ARG1 (p / person :name (n / name :op1 \"Perry\"))\n   :ARG2 (g / globe)\n   :location (a / and\n                :op1 (c / continent\n                        :name (n2 / name\n                                  :op1 \"Asia\"))\n                :op2 (w / world-region\n                        :name (n3 / name\n                                  :op1 \"Middle\"\n                                  :op2 \"East\"))))",
      "(f / focus-01\n   :ARG0 (p / person :name (n / name :op1 \"Perry\")))",
      "(e / expand-01\n   :ARG1 (p / person :name (n / name :op1 \"Perry\"))\n   :ARG2 (g / globe))",
      "(f / focus-01\n   :ARG0 (p / person :name (n / name :op1 \"Perry\")))",
      "(e / expand-01\n   :ARG1 (p / person :name (n / name :op1 \"Perry\")))",
      "(e / expand-01\n   :ARG2 (g / globe))",
      "(f / focus-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Perry\"))\n   :ARG1 (e / expand-01\n            :ARG1 p\n            :ARG2 (g / globe)\n            :location (c / continent\n                         :name (n2 / name\n                                   :op1 \"Asia\"))))",
      "(f / focus-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Perry\"))\n   :ARG1 (e / expand-01\n            :ARG1 p\n            :ARG2 (g / globe)\n            :location (w / world-region\n                         :name (n3 / name\n                                   :op1 \"Middle\"\n                                   :op2 \"East\")))\n   :time (n4 / now))",
      "(f / focus-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Perry\"))\n   :ARG1 (e / expand-01\n            :ARG1 p\n            :ARG2 (g / globe)))",
      "(f / focus-01\n   :time (n4 / now))"
    ],
    "smus": [
      "Doesn't show.",
      "Australian fashion designer Alex Perry will show.",
      "Show this year at MBFWA",
      "Australian fashion designer Alex Perry",
      "This year's MBFWA",
      "Alex Perry didn't show.",
      "fashion design",
      "Doesn't show.",
      "Alex Perry will show.",
      "fashion design",
      "Australian fashion designer Alex Perry doesn't show.",
      "This year's MBFWA didn't show.",
      "Exciting to see the designer kick back and enjoy the shows in the front row.",
      "People are excited.",
      "The designer will kick back and enjoy the shows in the front row.",
      "The excitement and...",
      "Kick people.",
      "By design.",
      "People will enjoy the shows.",
      "Shows",
      "The excitement and...",
      "Kick people.",
      "Enjoy people.",
      "Enjoy the shows.",
      "Exciting to see the designer kick back.",
      "People are excited to enjoy shows in front row.",
      "The designer is excited to kick back and enjoy the shows.",
      "Exciting.",
      "The designer was missing.",
      "MBFWA is missing.",
      "Second time in two decades to be missed.",
      "This is missing.",
      "Designer.",
      "MBFWA",
      "second in two decades.",
      "People are missing.",
      "By design.",
      "People are missing.",
      "This is the second time in two decades that the designer has missed MBFWA.",
      "This is the second time in two decades that this has been missed.",
      "Perry is focusing.",
      "Focusing on Perry's global expansion in Asia and the Middle East.",
      "Now focusing.",
      "Perry",
      "Perry's global expansion is in Asia and the Middle East.",
      "Perry is focusing.",
      "Perry's expansion is global.",
      "Perry is focusing.",
      "Perry's expansion.",
      "Global expansion",
      "Perry is focusing on global expansion in Asia.",
      "Perry is now focusing on his global expansion in the Middle East.",
      "Perry is focusing on global expansion.",
      "Now focusing."
    ]
  },
  {
    "instance_id": "realsumm-83",
    "summary": "<t> An Indiana public school performance of American Pie ended in tragedy Wednesday when a riser buckled just as dozens danced on - stage . </t> <t> More than a dozen people were injured at the Westfield High performance and one student was taken to a hospital in critical condition . </t> <t> Students said there had been no issues when they previously practiced the song on the stage with the same number of people . </t>",
    "summary_trees": [
      "# ::snt  An Indiana public school performance of American Pie ended in tragedy Wednesday when a riser buckled just as dozens danced on - stage . \n(e / end-01\n      :ARG1 (p / perform-01\n            :ARG0 (s / school\n                  :location (s2 / state\n                        :name (n / name\n                              :op1 \"Indiana\"))\n                  :ARG1-of (p2 / public-02))\n            :ARG1 (m / music\n                  :name (n2 / name\n                        :op1 \"American\"\n                        :op2 \"Pie\")))\n      :ARG2 (t / tragedy)\n      :time (d / date-entity\n            :weekday (w / wednesday))\n      :time (b / buckle-01\n            :ARG1 (p3 / person\n                  :ARG0-of (r / rise-01))\n            :time (d2 / dance-01\n                  :ARG0 (p4 / person\n                        :quant (m2 / multiple\n                              :op1 12))\n                  :location (s3 / stage))))",
      "# ::snt  More than a dozen people were injured at the Westfield High performance and one student was taken to a hospital in critical condition . \n(a / and\n      :op1 (ii / injure-01\n            :ARG1 (p / person\n                  :quant (m / more-than\n                        :op1 12))\n            :time (p2 / perform-01\n                  :ARG0 (h / high-school\n                        :name (n / name\n                              :op1 \"Westfield\"\n                              :op2 \"High\"))))\n      :op2 (t / take-01\n            :ARG1 (p3 / person\n                  :quant 1\n                  :ARG0-of (s / study-01))\n            :ARG3 (h2 / hospital)\n            :manner (c / condition\n                  :ARG1-of (c2 / critical-03))))",
      "# ::snt  Students said there had been no issues when they previously practiced the song on the stage with the same number of people . \n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (s2 / study-01))\n      :ARG1 (ii / issue-02\n            :polarity -\n            :time (p2 / practice-01\n                  :ARG0 p\n                  :ARG1 (s3 / song)\n                  :location (s4 / stage)\n                  :accompanier (p3 / person\n                        :quant (n / number\n                              :ARG1-of (s5 / same-01)))\n                  :time (p4 / previous))))"
    ],
    "tree": [
      "(e / end-01\n   :ARG1 (p / perform-01\n            :ARG0 (s / school\n                     :location (s2 / state\n                                   :name (n / name\n                                            :op1 \"Indiana\"))\n                     :ARG1-of (p2 / public-02))\n            :ARG1 (m / music\n                     :name (n2 / name\n                               :op1 \"American\"\n                               :op2 \"Pie\"))))",
      "(e / end-01\n   :ARG2 (t / tragedy))",
      "(e / end-01\n   :time (d / date-entity\n            :weekday (w / wednesday)))",
      "(e / end-01\n   :time (b / buckle-01\n            :ARG1 (p3 / person\n                      :ARG0-of (r / rise-01))\n            :time (d2 / dance-01\n                      :ARG0 (p4 / person\n                                :quant (m2 / multiple\n                                           :op1 12))\n                      :location (s3 / stage))))",
      "(p / perform-01\n   :ARG0 (s / school\n            :location (s2 / state\n                          :name (n / name\n                                   :op1 \"Indiana\"))\n            :ARG1-of (p2 / public-02))\n   :ARG1 (m / music\n            :name (n2 / name\n                      :op1 \"American\"\n                      :op2 \"Pie\")))",
      "(d / date-entity\n   :weekday (w / wednesday))",
      "(b / buckle-01\n   :ARG1 (p3 / person\n             :ARG0-of (r / rise-01))\n   :time (d2 / dance-01\n             :ARG0 (p4 / person\n                       :quant (m2 / multiple\n                                  :op1 12))\n             :location (s3 / stage)))",
      "(e / end-01\n   :ARG1 (p / perform-01))",
      "(p / perform-01\n   :ARG0 (s / school))",
      "(p2 / public-02)",
      "(b / buckle-01\n   :ARG1 (p3 / person))",
      "(r / rise-01)",
      "(d2 / dance-01\n    :ARG0 (p4 / person))",
      "(e / end-01\n   :ARG1 (p / perform-01))",
      "(p / perform-01\n   :ARG0 (s / school))",
      "(b / buckle-01\n   :ARG1 (p3 / person))",
      "(d2 / dance-01\n    :ARG0 (p4 / person))",
      "(e / end-01\n   :ARG1 (p / perform-01\n            :ARG0 (s / school\n                     :ARG1 (p2 / public-02))\n            :ARG1 (m / music\n                     :name (n2 / name\n                               :op1 \"American\"\n                               :op2 \"Pie\")))\n   :ARG2 (t / tragedy))",
      "(e / end-01\n   :time (d / date-entity\n            :weekday (w / wednesday))\n   :time (b / buckle-01\n            :time (d2 / dance-01\n                      :location (s3 / stage))))",
      "(a / and\n   :op1 (ii / injure-01\n            :ARG1 (p / person\n                     :quant (m / more-than\n                               :op1 12))\n            :time (p2 / perform-01\n                      :ARG0 (h / high-school\n                               :name (n / name\n                                        :op1 \"Westfield\"\n                                        :op2 \"High\")))))",
      "(a / and\n   :op2 (t / take-01\n           :ARG1 (p3 / person\n                     :quant 1\n                     :ARG0-of (s / study-01))\n           :ARG3 (h2 / hospital)\n           :manner (c / condition\n                      :ARG1-of (c2 / critical-03))))",
      "(ii / injure-01\n    :ARG1 (p / person\n             :quant (m / more-than\n                       :op1 12))\n    :time (p2 / perform-01\n              :ARG0 (h / high-school\n                       :name (n / name\n                                :op1 \"Westfield\"\n                                :op2 \"High\"))))",
      "(t / take-01\n   :ARG1 (p3 / person\n             :quant 1\n             :ARG0-of (s / study-01))\n   :ARG3 (h2 / hospital)\n   :manner (c / condition\n              :ARG1-of (c2 / critical-03)))",
      "(ii / injure-01\n    :ARG1 (p / person))",
      "(p2 / perform-01\n    :ARG0 (h / high-school :name (n / name :op1 \"Westfield\" :op2 \"High\")))",
      "(t / take-01\n   :ARG1 (p3 / person))",
      "(s / study-01)",
      "(c2 / critical-03)",
      "(ii / injure-01\n    :ARG1 (p / person))",
      "(p2 / perform-01\n    :ARG0 (h / high-school :name (n / name :op1 \"Westfield\" :op2 \"High\")))",
      "(t / take-01\n   :ARG1 (p3 / person))",
      "(ii / injure-01\n    :ARG1 (p / person\n             :quant (m / more-than\n                       :op1 12))\n    :time (p2 / perform-01\n              :ARG0 (h / high-school\n                       :name (n / name\n                                :op1 \"Westfield\"\n                                :op2 \"High\"))))",
      "(t / take-01\n   :ARG1 (p3 / person\n             :quant 1\n             :ARG0-of (s / study-01))\n   :ARG3 (h2 / hospital)\n   :manner (c / condition\n              :ARG1-of (c2 / critical-03)))",
      "(a / and\n   :op1 (ii / injure-01\n            :ARG1 (p / person\n                     :quant (m / more-than\n                               :op1 12)))\n   :op2 (t / take-01\n           :ARG1 (p3 / person\n                     :quant 1\n                     :ARG0 (s / study-01))\n           :ARG3 (h2 / hospital)\n           :manner (c / condition\n                      :ARG1 (c2 / critical-03))))",
      "(a / and\n   :op1 (ii / injure-01\n            :time (p2 / perform-01))\n   :op2 (t / take-01\n           :manner (c / condition)))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0-of (s2 / study-01)))",
      "(s / say-01\n   :ARG1 (ii / issue-02\n             :polarity -\n             :time (p2 / practice-01\n                       :ARG0 (p / person)\n                       :ARG1 (s3 / song)\n                       :location (s4 / stage)\n                       :accompanier (p3 / person\n                                        :quant (n / number\n                                                  :ARG1-of (s5 / same-01)))\n                       :time (p4 / previous))))",
      "(p / person\n   :ARG0-of (s2 / study-01))",
      "(ii / issue-02\n    :polarity -\n    :time (p2 / practice-01\n              :ARG0 (p / person)\n              :ARG1 (s3 / song)\n              :location (s4 / stage)\n              :accompanier (p3 / person\n                               :quant (n / number\n                                         :ARG1-of (s5 / same-01)))\n              :time (p4 / previous)))",
      "(s / say-01\n   :ARG0 (p / person))",
      "(s2 / study-01)",
      "(ii / issue-02\n    :polarity -\n    :time (p2 / practice-01))",
      "(p2 / practice-01\n    :ARG0 (p / person)\n    :ARG1 (s3 / song))",
      "(s5 / same-01)",
      "(s / say-01\n   :ARG0 (p / person))",
      "(ii / issue-02\n    :polarity -)",
      "(ii / issue-02\n    :time (p2 / practice-01))",
      "(p2 / practice-01\n    :ARG0 (p / person))",
      "(p2 / practice-01\n    :ARG1 (s3 / song))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (s2 / study-01))\n   :ARG1 (ii / issue-02\n             :polarity -))",
      "(s / say-01)"
    ],
    "smus": [
      "A public school in Indiana ended its performance of American Pie.",
      "The tragedy ended.",
      "Ends Wednesday",
      "Ending when the rising people buckled as dozens danced on stage.",
      "A public school in Indiana performs American Pie.",
      "Wednesday",
      "The riser buckled as dozens danced on stage.",
      "The performance ended.",
      "School performance",
      "Public",
      "People blinked.",
      "RISE",
      "People danced.",
      "The performance ended.",
      "School performance",
      "People blinked.",
      "People danced.",
      "The public school performance of American Pie ended in tragedy.",
      "Wednesday ended when the stage swooped in.",
      "And more than one person was injured during Westfield High's performance.",
      "And one student was taken to hospital in critical condition.",
      "More than one person was injured during Westfield High's performance.",
      "One student was taken to a hospital in critical condition.",
      "People were injured.",
      "Westfield High School's performance",
      "People are taken.",
      "Study.",
      "Critical.",
      "People were injured.",
      "Westfield High School's performance",
      "People are taken.",
      "More than one person was injured during Westfield High's performance.",
      "One student was taken to a hospital in critical condition.",
      "More than one person was injured and one student was taken to hospital in critical condition.",
      "Injured during performance and taken in condition.",
      "Students said.",
      "\"There were no issues when people previously practiced a song on stage with the same number of people,\" said the singer.",
      "Students",
      "There were no issues when people had previously practiced a song on stage with the same number of people.",
      "People said --",
      "Studies.",
      "There are no issues in practice.",
      "People practice the song.",
      "Same.",
      "People said --",
      "No issues.",
      "Issues in practice.",
      "People practice.",
      "The song is a practice.",
      "No issues, said students.",
      "said."
    ]
  },
  {
    "instance_id": "realsumm-84",
    "summary": "<t> Manchester City have been linked with summer move for Raheem Sterling . </t> <t> Sterling has two years left on his contract and is stalling on a new deal . </t> <t> Brendan Rodgers says a move to City would not be step up for Sterling . </t> <t> Indicating it will take the Manchester club 20 years to eclipse Liverpool . </t>",
    "summary_trees": [
      "# ::snt  Manchester City have been linked with summer move for Raheem Sterling . \n(l / link-01\n      :ARG1 (m / move-03\n            :ARG0 (t / team\n                  :name (n / name\n                        :op1 \"Manchester\"\n                        :op2 \"City\"))\n            :ARG1 (p / person\n                  :name (n2 / name\n                        :op1 \"Raheem\"\n                        :op2 \"Sterling\"))\n            :time (d / date-entity\n                  :season (s / summer))))",
      "# ::snt  Sterling has two years left on his contract and is stalling on a new deal . \n(a / and\n      :op1 (l / leave-17\n            :ARG1 (c / contract\n                  :poss (p / person\n                        :name (n / name\n                              :op1 \"Sterling\")))\n            :ARG2 (t / temporal-quantity\n                  :quant 2\n                  :unit (y / year)))\n      :op2 (s / stall-01\n            :ARG1 p\n            :ARG2 (d / deal\n                  :ARG1-of (n2 / new-01))))",
      "# ::snt  Brendan Rodgers says a move to City would not be step up for Sterling . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Brendan\"\n                  :op2 \"Rodgers\"))\n      :ARG1 (s2 / step-01\n            :polarity -\n            :ARG4 (m / move-01\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Sterling\"))\n                  :ARG2 (c / city))\n            :direction (u / up)))",
      "# ::snt  Indicating it will take the Manchester club 20 years to eclipse Liverpool . \n(ii / indicate-01\n      :ARG1 (t / take-10\n            :ARG0 (e / eclipse-01\n                  :ARG0 (c / club\n                        :name (n / name\n                              :op1 \"Manchester\"))\n                  :ARG1 (t2 / team\n                        :name (n2 / name\n                              :op1 \"Liverpool\")))\n            :ARG1 (t3 / temporal-quantity\n                  :quant 20\n                  :unit (y / year))\n            :ARG2 c))"
    ],
    "tree": [
      "(l / link-01\n   :ARG1 (m / move-03\n            :ARG0 (t / team\n                     :name (n / name\n                              :op1 \"Manchester\"\n                              :op2 \"City\"))\n            :ARG1 (p / person\n                     :name (n2 / name\n                               :op1 \"Raheem\"\n                               :op2 \"Sterling\"))\n            :time (d / date-entity\n                     :season (s / summer))))",
      "(m / move-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Manchester\"\n                     :op2 \"City\"))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Raheem\"\n                      :op2 \"Sterling\"))\n   :time (d / date-entity\n            :season (s / summer)))",
      "(l / link-01\n   :ARG1 (m / move-03))",
      "(m / move-03\n   :ARG0 (t / team :name (n / name :op1 \"Manchester\" :op2 \"City\")))",
      "(l / link-01\n   :ARG1 (m / move-03))",
      "(m / move-03\n   :ARG0 (t / team :name (n / name :op1 \"Manchester\" :op2 \"City\")))",
      "(l / link-01\n   :ARG1 (m / move-03\n            :ARG0 (t / team\n                     :name (n / name\n                              :op1 \"Manchester\"\n                              :op2 \"City\"))\n            :ARG1 (p / person\n                     :name (n2 / name\n                               :op1 \"Raheem\"\n                               :op2 \"Sterling\"))))",
      "(l / link-01)",
      "(a / and\n   :op1 (l / leave-17\n           :ARG1 (c / contract\n                    :poss (p / person\n                             :name (n / name\n                                      :op1 \"Sterling\")))\n           :ARG2 (t / temporal-quantity\n                    :quant 2\n                    :unit (y / year))))",
      "(a / and\n   :op2 (s / stall-01\n           :ARG1 (p / person :name (n / name :op1 \"Sterling\"))\n           :ARG2 (d / deal\n                    :ARG1-of (n2 / new-01))))",
      "(l / leave-17\n   :ARG1 (c / contract\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Sterling\")))\n   :ARG2 (t / temporal-quantity\n            :quant 2\n            :unit (y / year)))",
      "(s / stall-01\n   :ARG1 (p / person :name (n / name :op1 \"Sterling\"))\n   :ARG2 (d / deal\n            :ARG1-of (n2 / new-01)))",
      "(s / stall-01\n   :ARG1 (p / person :name (n / name :op1 \"Sterling\"))\n   :ARG2 (d / deal))",
      "(n2 / new-01)",
      "(s / stall-01\n   :ARG1 (p / person :name (n / name :op1 \"Sterling\")))",
      "(s / stall-01\n   :ARG2 (d / deal))",
      "(l / leave-17\n   :ARG1 (c / contract\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Sterling\")))\n   :ARG2 (t / temporal-quantity\n            :quant 2\n            :unit (y / year)))",
      "(s / stall-01\n   :ARG1 (p / person :name (n / name :op1 \"Sterling\"))\n   :ARG2 (d / deal\n            :ARG1-of (n2 / new-01)))",
      "(a / and\n   :op1 (l / leave-17\n           :ARG1 (c / contract\n                    :poss (p / person\n                             :name (n / name\n                                      :op1 \"Sterling\")))\n           :ARG2 (t / temporal-quantity\n                    :quant 2\n                    :unit (y / year)))\n   :op2 (s / stall-01\n           :ARG1 p\n           :ARG2 (d / deal\n                    :ARG1 (n2 / new-01))))",
      "(a / and\n   :op1 (l / leave-17)\n   :op2 (s / stall-01))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Brendan\"\n                     :op2 \"Rodgers\")))",
      "(s / say-01\n   :ARG1 (s2 / step-01\n             :polarity -\n             :ARG4 (m / move-01\n                      :ARG0 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Sterling\"))\n                      :ARG2 (c / city))\n             :direction (u / up)))",
      "(p / person\n   :name (n / name\n            :op1 \"Brendan\"\n            :op2 \"Rodgers\"))",
      "(s2 / step-01\n    :polarity -\n    :ARG4 (m / move-01\n             :ARG0 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Sterling\"))\n             :ARG2 (c / city))\n    :direction (u / up))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Brendan\" :op2 \"Rodgers\")))",
      "(s2 / step-01\n    :polarity -\n    :ARG4 (m / move-01))",
      "(m / move-01\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Sterling\")))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Brendan\" :op2 \"Rodgers\")))",
      "(s2 / step-01\n    :polarity -)",
      "(s2 / step-01\n    :ARG4 (m / move-01))",
      "(m / move-01\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Sterling\")))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Brendan\"\n                     :op2 \"Rodgers\"))\n   :ARG1 (s2 / step-01\n             :polarity -\n             :ARG4 (m / move-01\n                      :ARG0 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Sterling\"))\n                      :ARG2 (c / city))\n             :direction (u / up)))",
      "(s / say-01)",
      "(ii / indicate-01\n    :ARG1 (t / take-10\n             :ARG0 (e / eclipse-01\n                      :ARG0 (c / club\n                               :name (n / name\n                                        :op1 \"Manchester\"))\n                      :ARG1 (t2 / team\n                                :name (n2 / name\n                                          :op1 \"Liverpool\")))\n             :ARG1 (t3 / temporal-quantity\n                       :quant 20\n                       :unit (y / year))\n             :ARG2 c))",
      "(t / take-10\n   :ARG0 (e / eclipse-01\n            :ARG0 (c / club\n                     :name (n / name\n                              :op1 \"Manchester\"))\n            :ARG1 (t2 / team\n                      :name (n2 / name\n                                :op1 \"Liverpool\")))\n   :ARG1 (t3 / temporal-quantity\n             :quant 20\n             :unit (y / year))\n   :ARG2 c)",
      "(ii / indicate-01\n    :ARG1 (t / take-10))",
      "(e / eclipse-01\n   :ARG0 (c / club :name (n / name :op1 \"Manchester\")))",
      "(ii / indicate-01\n    :ARG1 (t / take-10))",
      "(e / eclipse-01\n   :ARG0 (c / club :name (n / name :op1 \"Manchester\")))",
      "(ii / indicate-01\n    :ARG1 (t / take-10\n             :ARG0 (e / eclipse-01\n                      :ARG0 (c / club\n                               :name (n / name\n                                        :op1 \"Manchester\"))\n                      :ARG1 (t2 / team\n                                :name (n2 / name\n                                          :op1 \"Liverpool\")))\n             :ARG1 (t3 / temporal-quantity\n                       :quant 20\n                       :unit (y / year))\n             :ARG2 c))",
      "(ii / indicate-01)"
    ],
    "smus": [
      "The Manchester City move to Raheem Sterling in the summer was linked with the move.",
      "Manchester City made the move for Raheem Sterling in the summer.",
      "The move was linked.",
      "Manchester City move.",
      "The move was linked.",
      "Manchester City move.",
      "The Manchester City move to Raheem Sterling is linked with.",
      "Link.",
      "And Sternling's contract was left for 2 years.",
      "And Sterning is stalling the new deal.",
      "Sternling's contract was left for 2 years.",
      "Sterning is stalling the new deal.",
      "Sternling is stalling the deal.",
      "New.",
      "Sternling is stalling.",
      "The deal is stalling.",
      "Sternling's contract was left for 2 years.",
      "Sterning is stalling the new deal.",
      "Sternling's contract was left for two years and he was stalling on a new deal.",
      "Left and stalling.",
      "@Brendan Rodgers,",
      "\"Sterling's move up to the City is not a step up,\" says the statement.",
      "Brendan Rodgers",
      "Sternling's move to the city was not a step up.",
      "@Brendan Rodgers,",
      "Not a step towards moving.",
      "Sternling is moving.",
      "@Brendan Rodgers,",
      "Not a step.",
      "Step by step moving on.",
      "Sternling is moving.",
      "\"Sterling's move up to the City is not a step up,\" Brenda Rodgers says.",
      "Says.",
      "indicating that it will take Manchester 20 years to eclipse liverpool.",
      "It will take Manchester 20 years to eclipse Liverpool.",
      "indicating it will take.",
      "Manchester will eclipse.",
      "indicating it will take.",
      "Manchester will eclipse.",
      "indicating that it will take Manchester 20 years to eclipse liverpool.",
      "Indicating."
    ]
  },
  {
    "instance_id": "realsumm-85",
    "summary": "<t> Up to one in five Chinese eateries could be selling soup using illegal meat . </t> <t> Charity says it is often disguised on menu or only offered if requested . </t> <t> Loophole lets people bring 20 kg of meat into UK for personal consumption . </t>",
    "summary_trees": [
      "# ::snt  Up to one in five Chinese eateries could be selling soup using illegal meat . \n(p / possible-01\n      :ARG1 (s / sell-01\n            :ARG0 (r / restaurant\n                  :mod (c / country\n                        :name (n / name\n                              :op1 \"China\"))\n                  :ARG1-of (ii / include-91\n                        :ARG2 (p2 / person\n                              :ARG0-of (e / eat-01))\n                        :ARG3 (u / up-to\n                              :op1 \"1/5\")))\n            :ARG1 (s2 / soup\n                  :ARG1-of (u2 / use-01\n                        :ARG0 r\n                        :ARG2 (m / meat\n                              :ARG1-of (l / legal-02\n                                    :polarity -))))))",
      "# ::snt  Charity says it is often disguised on menu or only offered if requested . \n(s / say-01\n      :ARG0 (o / organization\n            :name (n / name\n                  :op1 \"Charity\"))\n      :ARG1 (o2 / or\n            :op1 (d / disguise-01\n                  :ARG1 (ii / it)\n                  :location (m / menu)\n                  :frequency (o3 / often))\n            :op2 (o4 / offer-01\n                  :ARG1 ii\n                  :mod (o5 / only)\n                  :condition (r / request-01\n                        :ARG1 ii))))",
      "# ::snt  Loophole lets people bring 20 kg of meat into UK for personal consumption . \n(l / let-01\n      :ARG0 (l2 / loophole)\n      :ARG1 (b / bring-01\n            :ARG0 (p / person)\n            :ARG1 (m / meat\n                  :quant (m2 / mass-quantity\n                        :quant 20\n                        :unit (k / kilogram)))\n            :ARG2 (c / country\n                  :name (n / name\n                        :op1 \"UK\"))\n            :purpose (c2 / consume-01\n                  :ARG0 p\n                  :ARG1 m\n                  :ARG1-of (p2 / personal-02))))"
    ],
    "tree": [
      "(p / possible-01\n   :ARG1 (s / sell-01\n            :ARG0 (r / restaurant\n                     :mod (c / country\n                             :name (n / name\n                                      :op1 \"China\"))\n                     :ARG1-of (ii / include-91\n                                  :ARG2 (p2 / person\n                                            :ARG0-of (e / eat-01))\n                                  :ARG3 (u / up-to\n                                           :op1 \"1/5\")))\n            :ARG1 (s2 / soup\n                      :ARG1-of (u2 / use-01\n                                   :ARG0 r\n                                   :ARG2 (m / meat\n                                            :ARG1-of (l / legal-02\n                                                        :polarity -))))))",
      "(s / sell-01\n   :ARG0 (r / restaurant\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"China\"))\n            :ARG1-of (ii / include-91\n                         :ARG2 (p2 / person\n                                   :ARG0-of (e / eat-01))\n                         :ARG3 (u / up-to\n                                  :op1 \"1/5\")))\n   :ARG1 (s2 / soup\n             :ARG1-of (u2 / use-01\n                          :ARG0 r\n                          :ARG2 (m / meat\n                                   :ARG1-of (l / legal-02\n                                               :polarity -)))))",
      "(p / possible-01\n   :ARG1 (s / sell-01))",
      "(s / sell-01\n   :ARG0 (r / restaurant))",
      "(e / eat-01)",
      "(u2 / use-01\n    :ARG0 (r / restaurant)\n    :ARG2 (m / meat))",
      "(l / legal-02\n   :polarity -)",
      "(p / possible-01\n   :ARG1 (s / sell-01))",
      "(s / sell-01\n   :ARG0 (r / restaurant))",
      "(u2 / use-01\n    :ARG0 (r / restaurant))",
      "(u2 / use-01\n    :ARG2 (m / meat))",
      "(l / legal-02\n   :polarity -)",
      "(p / possible-01\n   :ARG1 (s / sell-01\n            :ARG0 (r / restaurant\n                     :mod (c / country\n                             :name (n / name\n                                      :op1 \"China\"))\n                     :ARG1 (ii / include-91\n                               :ARG2 (p2 / person\n                                         :ARG0 (e / eat-01))\n                               :ARG3 (u / up-to\n                                        :op1 \"1/5\")))\n            :ARG1 (s2 / soup\n                      :ARG1 (u2 / use-01\n                                :ARG0 r\n                                :ARG2 (m / meat\n                                         :ARG1 (l / legal-02\n                                                  :polarity -))))))",
      "(p / possible-01)",
      "(s / say-01\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"Charity\")))",
      "(s / say-01\n   :ARG1 (o2 / or\n             :op1 (d / disguise-01\n                     :ARG1 (ii / it)\n                     :location (m / menu)\n                     :frequency (o3 / often))\n             :op2 (o4 / offer-01\n                      :ARG1 ii\n                      :mod (o5 / only)\n                      :condition (r / request-01\n                                    :ARG1 ii))))",
      "(o / organization\n   :name (n / name\n            :op1 \"Charity\"))",
      "(o2 / or\n    :op1 (d / disguise-01\n            :ARG1 (ii / it)\n            :location (m / menu)\n            :frequency (o3 / often))\n    :op2 (o4 / offer-01\n             :ARG1 ii\n             :mod (o5 / only)\n             :condition (r / request-01\n                           :ARG1 ii)))",
      "(s / say-01\n   :ARG0 (o / organization :name (n / name :op1 \"Charity\")))",
      "(d / disguise-01\n   :ARG1 (ii / it))",
      "(o4 / offer-01\n    :ARG1 (ii / it)\n    :mod (o5 / only))",
      "(r / request-01\n   :ARG1 (ii / it))",
      "(s / say-01\n   :ARG0 (o / organization :name (n / name :op1 \"Charity\")))",
      "(d / disguise-01\n   :ARG1 (ii / it))",
      "(o4 / offer-01\n    :ARG1 (ii / it))",
      "(o4 / offer-01\n    :mod (o5 / only))",
      "(r / request-01\n   :ARG1 (ii / it))",
      "(s / say-01\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"Charity\"))\n   :ARG1 (o2 / or\n             :op1 (d / disguise-01\n                     :ARG1 (ii / it)\n                     :frequency (o3 / often))\n             :op2 (o4 / offer-01\n                      :ARG1 ii\n                      :mod (o5 / only)\n                      :condition (r / request-01\n                                    :ARG1 ii))))",
      "(s / say-01)",
      "(l / let-01\n   :ARG0 (l2 / loophole))",
      "(l / let-01\n   :ARG1 (b / bring-01\n            :ARG0 (p / person)\n            :ARG1 (m / meat\n                     :quant (m2 / mass-quantity\n                                :quant 20\n                                :unit (k / kilogram)))\n            :ARG2 (c / country\n                     :name (n / name\n                              :op1 \"UK\"))\n            :purpose (c2 / consume-01\n                         :ARG0 p\n                         :ARG1 m\n                         :ARG1-of (p2 / personal-02))))",
      "(b / bring-01\n   :ARG0 (p / person)\n   :ARG1 (m / meat\n            :quant (m2 / mass-quantity\n                       :quant 20\n                       :unit (k / kilogram)))\n   :ARG2 (c / country\n            :name (n / name\n                     :op1 \"UK\"))\n   :purpose (c2 / consume-01\n                :ARG0 p\n                :ARG1 m\n                :ARG1-of (p2 / personal-02)))",
      "(l / let-01\n   :ARG0 (l2 / loophole))",
      "(b / bring-01\n   :ARG0 (p / person))",
      "(c2 / consume-01\n    :ARG0 (p / person)\n    :ARG1 (m / meat))",
      "(p2 / personal-02)",
      "(l / let-01\n   :ARG0 (l2 / loophole))",
      "(b / bring-01\n   :ARG0 (p / person))",
      "(c2 / consume-01\n    :ARG0 (p / person))",
      "(c2 / consume-01\n    :ARG1 (m / meat))",
      "(l / let-01\n   :ARG0 (l2 / loophole)\n   :ARG1 (b / bring-01\n            :ARG0 (p / person)\n            :ARG1 (m / meat\n                     :quant (m2 / mass-quantity\n                                :quant 20\n                                :unit (k / kilogram)))\n            :ARG2 (c / country\n                     :name (n / name\n                              :op1 \"UK\"))))",
      "(l / let-01)"
    ],
    "smus": [
      "Up to one fifth of the eaters in the Chinese restaurant could be selling soup using illegal meat.",
      "Up to one fifth of the eaters in the Chinese restaurant are selling soup using illegal meat.",
      "Selling is possible.",
      "The restaurant is selling.",
      "Eating.",
      "Restaurants using meat.",
      "Illegal.",
      "Selling is possible.",
      "The restaurant is selling.",
      "The restaurant is using.",
      "using meat.",
      "Illegal.",
      "Chinese restaurants can be selling soup using illegal meat to up to one fifth of the eaters.",
      "Maybe.",
      "\"Charit\" or \"...",
      "\"It is often disguised in the menu or offered only when requested,\" says says the man.",
      "Charitable or",
      "It is often disguised in the menu or offered only when requested.",
      "\"Charit\" or \"...",
      "It's disguised.",
      "It was only offered.",
      "It was requested.",
      "\"Charit\" or \"...",
      "It's disguised.",
      "It was offered.",
      "Only offered.",
      "It was requested.",
      "\"It is often disguised or offered only upon request,\" Charit or \"It is a request.\"",
      "says.",
      "The Loophole lets.",
      "lets people bring 20kg of meat to the UK for personal consumption.",
      "People will bring 20 kilograms of meat to the UK for personal consumption.",
      "The Loophole lets.",
      "Bring the people.",
      "The consumption of meat by the person.",
      "person.",
      "The Loophole lets.",
      "Bring the people.",
      "consumption by the person",
      "consumption of meat",
      "The Loophole lets people bring 20kg of meat to the UK.",
      "Let's..."
    ]
  },
  {
    "instance_id": "realsumm-86",
    "summary": "<t> Two types of cereal in an Easter egg with marshmallows and brownies . </t> <t> Served at Black Milk cafe in Manchester 's Northern Quarter . ' </t> <t> Easter is less about what is used to mean , ' cafe owner Olly Taylor said . </t>",
    "summary_trees": [
      "# ::snt  Two types of cereal in an Easter egg with marshmallows and brownies . \n(c / cereal\n      :mod (t / type\n            :quant 2)\n      :location (e / egg\n            :mod (f / festival\n                  :name (n / name\n                        :op1 \"Easter\")))\n      :accompanier (a / and\n            :op1 (m / marshmallow)\n            :op2 (b / brownie)))",
      "# ::snt  Served at Black Milk cafe in Manchester 's Northern Quarter . ' \n(s / serve-01\n      :location (c / cafe\n            :name (n / name\n                  :op1 \"Black\"\n                  :op2 \"Milk\")\n            :location (q / quarter\n                  :name (n2 / name\n                        :op1 \"Northern\"\n                        :op2 \"Quarter\")\n                  :part-of (c2 / city\n                        :name (n3 / name\n                              :op1 \"Manchester\")))))",
      "# ::snt  Easter is less about what is used to mean , ' cafe owner Olly Taylor said . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Olly\"\n                  :op2 \"Taylor\")\n            :ARG0-of (o / own-01\n                  :ARG1 (c / cafe)))\n      :ARG1 (c2 / concern-02\n            :ARG0 (f / festival\n                  :name (n2 / name\n                        :op1 \"Easter\"))\n            :ARG1 (t / thing\n                  :ARG2-of (m / mean-01\n                        :ARG1 f\n                        :time (u / use-03)))\n            :mod (l / less)))"
    ],
    "tree": [
      "(c / cereal\n   :mod (t / type\n           :quant 2))",
      "(c / cereal\n   :location (e / egg\n                :mod (f / festival\n                        :name (n / name\n                                 :op1 \"Easter\"))))",
      "(c / cereal\n   :accompanier (a / and\n                   :op1 (m / marshmallow)\n                   :op2 (b / brownie)))",
      "(e / egg\n   :mod (f / festival\n           :name (n / name\n                    :op1 \"Easter\")))",
      "(a / and\n   :op1 (m / marshmallow)\n   :op2 (b / brownie))",
      "(c / cereal\n   :mod (t / type\n           :quant 2)\n   :location (e / egg\n                :mod (f / festival\n                        :name (n / name\n                                 :op1 \"Easter\")))\n   :accompanier (m / marshmallow))",
      "(c / cereal\n   :mod (t / type\n           :quant 2)\n   :location (e / egg\n                :mod (f / festival\n                        :name (n / name\n                                 :op1 \"Easter\")))\n   :accompanier (b / brownie))",
      "(c / cereal\n   :mod (t / type\n           :quant 2)\n   :accompanier (a / and\n                   :op1 (m / marshmallow)\n                   :op2 (b / brownie)))",
      "(c / cereal\n   :mod (t / type\n           :quant 2)\n   :location (e / egg\n                :mod (f / festival\n                        :name (n / name\n                                 :op1 \"Easter\")))\n   :accompanier (a / and\n                   :op1 (m / marshmallow)\n                   :op2 (b / brownie)))",
      "(s / serve-01\n   :location (c / cafe\n                :name (n / name\n                         :op1 \"Black\"\n                         :op2 \"Milk\")\n                :location (q / quarter\n                             :name (n2 / name\n                                       :op1 \"Northern\"\n                                       :op2 \"Quarter\")\n                             :part-of (c2 / city\n                                          :name (n3 / name\n                                                    :op1 \"Manchester\")))))",
      "(c / cafe\n   :name (n / name\n            :op1 \"Black\"\n            :op2 \"Milk\")\n   :location (q / quarter\n                :name (n2 / name\n                          :op1 \"Northern\"\n                          :op2 \"Quarter\")\n                :part-of (c2 / city\n                             :name (n3 / name\n                                       :op1 \"Manchester\"))))",
      "(s / serve-01\n   :location (c / cafe :name (n / name :op1 \"Black\" :op2 \"Milk\"))))",
      "(s / serve-01\n   :location (c / cafe :name (n / name :op1 \"Black\" :op2 \"Milk\"))))",
      "(s / serve-01)",
      "(s / serve-01\n   :location (c / cafe\n                :name (n / name\n                         :op1 \"Black\"\n                         :op2 \"Milk\")\n                :location (q / quarter\n                             :name (n2 / name\n                                       :op1 \"Northern\"\n                                       :op2 \"Quarter\")\n                             :part (c2 / city\n                                       :name (n3 / name\n                                                 :op1 \"Manchester\")))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Olly\"\n                     :op2 \"Taylor\")\n            :ARG0-of (o / own-01\n                        :ARG1 (c / cafe))))",
      "(s / say-01\n   :ARG1 (c2 / concern-02\n             :ARG0 (f / festival\n                      :name (n2 / name\n                                :op1 \"Easter\"))\n             :ARG1 (t / thing\n                      :ARG2-of (m / mean-01\n                                  :ARG1 f\n                                  :time (u / use-03)))\n             :mod (l / less)))",
      "(p / person\n   :name (n / name\n            :op1 \"Olly\"\n            :op2 \"Taylor\")\n   :ARG0-of (o / own-01\n               :ARG1 (c / cafe)))",
      "(c2 / concern-02\n    :ARG0 (f / festival\n             :name (n2 / name\n                       :op1 \"Easter\"))\n    :ARG1 (t / thing\n             :ARG2-of (m / mean-01\n                         :ARG1 f\n                         :time (u / use-03)))\n    :mod (l / less))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Olly\" :op2 \"Taylor\"))))",
      "(o / own-01\n   :ARG1 (c / cafe))",
      "(c2 / concern-02\n    :ARG0 (f / festival :name (n2 / name :op1 \"Easter\")))",
      "(m / mean-01\n   :ARG1 (f / festival :name (n2 / name :op1 \"Easter\"))\n   :time (u / use-03))",
      "(u / use-03)",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Olly\" :op2 \"Taylor\"))))",
      "(o / own-01\n   :ARG1 (c / cafe))",
      "(c2 / concern-02\n    :ARG0 (f / festival :name (n2 / name :op1 \"Easter\")))",
      "(m / mean-01\n   :ARG1 (f / festival :name (n2 / name :op1 \"Easter\")))",
      "(m / mean-01\n   :time (u / use-03))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Olly\"\n                     :op2 \"Taylor\")\n            :ARG0 (o / own-01\n                     :ARG1 (c / cafe)))\n   :ARG1 (c2 / concern-02\n             :ARG0 (f / festival\n                      :name (n2 / name\n                                :op1 \"Easter\"))\n             :ARG1 (t / thing\n                      :ARG2 (m / mean-01\n                               :ARG1 f))\n             :mod (l / less)))",
      "(s / say-01)"
    ],
    "smus": [
      "Two types of cereal.",
      "cereal in an Easter egg",
      "cereal with marshmallows and brownies.",
      "Easter eggs",
      "Marshmallows and brownies.",
      "There are two types of cereal in an Easter egg with marshmallows.",
      "There are two types of cereal in an Easter egg with brownies.",
      "There are two types of cereal, with marshmallows and brownies.",
      "There are two types of cereal in an Easter egg with marshmallows and brownies.",
      "Serving at the Black Milk cafe in Manchester's Northern Quarter.",
      "The Black Milk cafe is in Manchester's Northern Quarter.",
      "served in the Black Milk cafe.",
      "served in the Black Milk cafe.",
      "served.",
      "Serving at the Black Milk cafe in Manchester's Northern Quarter.",
      "\"It's a cafe,\" said owner Ollie Taylor.",
      "\"Easter is less about what it used to mean,\" said the statement.",
      "Owner of the cafe, Ollie Taylor.",
      "There's less concern about what Easter used to mean.",
      "\"It's going to be a long time,\" said Ollie Taylor.",
      "The cafe is owned by the cafe.",
      "As for Easter.",
      "used to mean Easter.",
      "Used.",
      "\"It's going to be a long time,\" said Ollie Taylor.",
      "The cafe is owned by the cafe.",
      "As for Easter.",
      "Meaning Easter.",
      "Used to mean...",
      "\"Easter is less about what it does mean,\" said Ollie Taylor, the owner of the cafe.",
      "said."
    ]
  },
  {
    "instance_id": "realsumm-87",
    "summary": "<t> The European Union will accuse Google of illegally abusing its supremacy . </t> <t> It could fine Google more than \u00a3 4 billion - 10 per cent of its annual revenue . </t> <t> Brussels to say it uses search engine to divert traffic to its own services . </t> <t> Google boasts a 90 per cent share in Europe 's search engine market . </t>",
    "summary_trees": [
      "# ::snt  The European Union will accuse Google of illegally abusing its supremacy . \n(a / accuse-01\n      :ARG0 (o / organization\n            :name (n / name\n                  :op1 \"European\"\n                  :op2 \"Union\"))\n      :ARG1 (c / company\n            :name (n2 / name\n                  :op1 \"Google\"))\n      :ARG2 (a2 / abuse-02\n            :ARG0 c\n            :ARG1 (s / supremacy\n                  :poss c)\n            :manner (l / law\n                  :polarity -)))",
      "# ::snt  It could fine Google more than \u00a3 4 billion - 10 per cent of its annual revenue . \n(p / possible-01\n      :ARG1 (f / fine-01\n            :ARG0 (ii / it)\n            :ARG1 (m / more-than\n                  :op1 (m2 / monetary-quantity\n                        :quant 4000000000\n                        :unit (p2 / pound)\n                        :ARG1-of (m3 / mean-01\n                              :ARG2 (p3 / percentage-entity\n                                    :value 10\n                                    :ARG3-of (ii2 / include-91\n                                          :ARG2 (r / revenue\n                                                :poss (c / company\n                                                      :name (n / name\n                                                            :op1 \"Google\"))\n                                                :frequency (r2 / rate-entity-91\n                                                      :ARG3 (t / temporal-quantity\n                                                            :quant 1\n                                                            :unit (y / year)))))))))\n            :ARG2 c))",
      "# ::snt  Brussels to say it uses search engine to divert traffic to its own services . \n(s / say-01\n      :ARG0 (c / city\n            :name (n / name\n                  :op1 \"Brussels\"))\n      :ARG1 (u / use-01\n            :ARG0 c\n            :ARG1 (s2 / search-engine)\n            :ARG2 (d / divert-01\n                  :ARG0 c\n                  :ARG1 (t / traffic)\n                  :ARG3 (s3 / service\n                        :poss c))))",
      "# ::snt  Google boasts a 90 per cent share in Europe 's search engine market . \n(b / boast-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Google\"))\n      :ARG1 (s / share-01\n            :ARG1 (m / market\n                  :mod (s2 / search-engine)\n                  :location (c2 / continent\n                        :name (n2 / name\n                              :op1 \"Europe\")))\n            :ARG2 c\n            :quant (p / percentage-entity\n                  :value 90)))"
    ],
    "tree": [
      "(a / accuse-01\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"European\"\n                     :op2 \"Union\")))",
      "(a / accuse-01\n   :ARG1 (c / company\n            :name (n2 / name\n                      :op1 \"Google\")))",
      "(a / accuse-01\n   :ARG2 (a2 / abuse-02\n             :ARG0 (c / company :name (n2 / name :op1 \"Google\"))\n             :ARG1 (s / supremacy\n                      :poss c)\n             :manner (l / law\n                        :polarity -)))",
      "(o / organization\n   :name (n / name\n            :op1 \"European\"\n            :op2 \"Union\"))",
      "(c / company\n   :name (n2 / name\n             :op1 \"Google\"))",
      "(a2 / abuse-02\n    :ARG0 (c / company :name (n2 / name :op1 \"Google\"))\n    :ARG1 (s / supremacy\n             :poss c)\n    :manner (l / law\n               :polarity -))",
      "(a / accuse-01\n   :ARG0 (o / organization :name (n / name :op1 \"European\" :op2 \"Union\")))",
      "(a2 / abuse-02\n    :ARG0 (c / company :name (n2 / name :op1 \"Google\"))\n    :ARG1 (s / supremacy))",
      "(a / accuse-01\n   :ARG0 (o / organization :name (n / name :op1 \"European\" :op2 \"Union\")))",
      "(a2 / abuse-02\n    :ARG0 (c / company :name (n2 / name :op1 \"Google\")))",
      "(a2 / abuse-02\n    :ARG1 (s / supremacy))",
      "(a / accuse-01\n   :ARG0 (o / organization\n            :name (n / name\n                     :op1 \"European\"\n                     :op2 \"Union\"))\n   :ARG1 (c / company\n            :name (n2 / name\n                      :op1 \"Google\"))\n   :ARG2 (a2 / abuse-02\n             :ARG0 c\n             :ARG1 (s / supremacy\n                      :poss c)\n             :manner (l / law\n                        :polarity -)))",
      "(a / accuse-01)",
      "(p / possible-01\n   :ARG1 (f / fine-01\n            :ARG0 (ii / it)\n            :ARG1 (m / more-than\n                     :op1 (m2 / monetary-quantity\n                              :quant 4000000000\n                              :unit (p2 / pound)\n                              :ARG1-of (m3 / mean-01\n                                           :ARG2 (p3 / percentage-entity\n                                                     :value 10\n                                                     :ARG3-of (ii2 / include-91\n                                                                   :ARG2 (r / revenue\n                                                                            :poss (c / company\n                                                                                     :name (n / name\n                                                                                              :op1 \"Google\"))\n                                                                            :frequency (r2 / rate-entity-91\n                                                                                           :ARG3 (t / temporal-quantity\n                                                                                                    :quant 1\n                                                                                                    :unit (y / year)))))))))\n            :ARG2 c))",
      "(f / fine-01\n   :ARG0 (ii / it)\n   :ARG1 (m / more-than\n            :op1 (m2 / monetary-quantity\n                     :quant 4000000000\n                     :unit (p2 / pound)\n                     :ARG1-of (m3 / mean-01\n                                  :ARG2 (p3 / percentage-entity\n                                            :value 10\n                                            :ARG3-of (ii2 / include-91\n                                                          :ARG2 (r / revenue\n                                                                   :poss (c / company\n                                                                            :name (n / name\n                                                                                     :op1 \"Google\"))\n                                                                   :frequency (r2 / rate-entity-91\n                                                                                  :ARG3 (t / temporal-quantity\n                                                                                           :quant 1\n                                                                                           :unit (y / year)))))))))\n   :ARG2 c)",
      "(p / possible-01\n   :ARG1 (f / fine-01))",
      "(f / fine-01\n   :ARG0 (ii / it))",
      "(m3 / mean-01\n    :ARG2 (p3 / percentage-entity))",
      "(p / possible-01\n   :ARG1 (f / fine-01))",
      "(f / fine-01\n   :ARG0 (ii / it))",
      "(m3 / mean-01\n    :ARG2 (p3 / percentage-entity))",
      "(p / possible-01\n   :ARG1 (f / fine-01\n            :ARG0 (ii / it)\n            :ARG1 (m / more-than\n                     :op1 (m2 / monetary-quantity\n                              :quant 4000000000\n                              :unit (p2 / pound)\n                              :ARG1 (m3 / mean-01\n                                        :ARG2 (p3 / percentage-entity\n                                                  :value 10\n                                                  :ARG3 (ii2 / include-91\n                                                             :ARG2 (r / revenue\n                                                                      :poss (c / company\n                                                                               :name (n / name\n                                                                                        :op1 \"Google\"))\n                                                                      :frequency (r2 / rate-entity-91\n                                                                                     :ARG3 (t / temporal-quantity\n                                                                                              :quant 1\n                                                                                              :unit (y / year)))))))))\n            :ARG2 c))",
      "(p / possible-01)",
      "(s / say-01\n   :ARG0 (c / city\n            :name (n / name\n                     :op1 \"Brussels\")))",
      "(s / say-01\n   :ARG1 (u / use-01\n            :ARG0 (c / city :name (n / name :op1 \"Brussels\"))\n            :ARG1 (s2 / search-engine)\n            :ARG2 (d / divert-01\n                     :ARG0 c\n                     :ARG1 (t / traffic)\n                     :ARG3 (s3 / service\n                               :poss c))))",
      "(c / city\n   :name (n / name\n            :op1 \"Brussels\"))",
      "(u / use-01\n   :ARG0 (c / city :name (n / name :op1 \"Brussels\"))\n   :ARG1 (s2 / search-engine)\n   :ARG2 (d / divert-01\n            :ARG0 c\n            :ARG1 (t / traffic)\n            :ARG3 (s3 / service\n                      :poss c)))",
      "(s / say-01\n   :ARG0 (c / city :name (n / name :op1 \"Brussels\")))",
      "(u / use-01\n   :ARG0 (c / city :name (n / name :op1 \"Brussels\"))\n   :ARG1 (s2 / search-engine))",
      "(d / divert-01\n   :ARG0 (c / city :name (n / name :op1 \"Brussels\"))\n   :ARG1 (t / traffic))",
      "(s / say-01\n   :ARG0 (c / city :name (n / name :op1 \"Brussels\")))",
      "(u / use-01\n   :ARG0 (c / city :name (n / name :op1 \"Brussels\")))",
      "(u / use-01\n   :ARG1 (s2 / search-engine))",
      "(d / divert-01\n   :ARG0 (c / city :name (n / name :op1 \"Brussels\")))",
      "(d / divert-01\n   :ARG1 (t / traffic))",
      "(s / say-01\n   :ARG0 (c / city\n            :name (n / name\n                     :op1 \"Brussels\"))\n   :ARG1 (u / use-01\n            :ARG0 c\n            :ARG1 (s2 / search-engine)\n            :ARG2 (d / divert-01\n                     :ARG0 c\n                     :ARG1 (t / traffic)\n                     :ARG3 (s3 / service\n                               :poss c))))",
      "(s / say-01)",
      "(b / boast-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Google\")))",
      "(b / boast-01\n   :ARG1 (s / share-01\n            :ARG1 (m / market\n                     :mod (s2 / search-engine)\n                     :location (c2 / continent\n                                   :name (n2 / name\n                                             :op1 \"Europe\")))\n            :ARG2 (c / company :name (n / name :op1 \"Google\"))\n            :quant (p / percentage-entity\n                      :value 90)))",
      "(c / company\n   :name (n / name\n            :op1 \"Google\"))",
      "(s / share-01\n   :ARG1 (m / market\n            :mod (s2 / search-engine)\n            :location (c2 / continent\n                          :name (n2 / name\n                                    :op1 \"Europe\")))\n   :ARG2 (c / company :name (n / name :op1 \"Google\"))\n   :quant (p / percentage-entity\n             :value 90))",
      "(b / boast-01\n   :ARG0 (c / company :name (n / name :op1 \"Google\")))",
      "(s / share-01\n   :ARG1 (m / market))",
      "(b / boast-01\n   :ARG0 (c / company :name (n / name :op1 \"Google\")))",
      "(s / share-01\n   :ARG1 (m / market))",
      "(b / boast-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Google\"))\n   :ARG1 (s / share-01\n            :ARG1 (m / market\n                     :mod (s2 / search-engine))\n            :ARG2 c\n            :quant (p / percentage-entity\n                      :value 90)))",
      "(b / boast-01)"
    ],
    "smus": [
      "The European Union will accuse.",
      "accuse google.",
      "accuse Google of illegally abusing its supremacy.",
      "The European Union (EU)",
      "Google",
      "Google is illegally abusing its supremacy.",
      "The European Union will accuse.",
      "Google is abusing supremacy.",
      "The European Union will accuse.",
      "Google is abusing.",
      "Abusing supremacy.",
      "The European Union will accuse Google of illegally abusing its supremacy.",
      "Accumulate.",
      "It could fine Google more than PS4bn, or 10 percent of Google's annual revenue.",
      "It will fine Google more than PS4bn, or 10 percent of Google's annual revenue.",
      "Maybe fine.",
      "It's fine.",
      "%entry.",
      "Maybe fine.",
      "It's fine.",
      "%entry.",
      "It could fine Google more than PS4bn, or 10 percent of Google's annual revenue.",
      "Maybe.",
      "Brussels said --",
      "Brussels uses a search engine to divert traffic to its services, they said.",
      "Brussels",
      "Brussels uses a search engine to divert traffic to its services.",
      "Brussels said --",
      "Brussels uses a search engine.",
      "Brussels will divert traffic.",
      "Brussels said --",
      "Brussels uses...",
      "uses a search engine",
      "Brussels will divert.",
      "to divert traffic.",
      "Brussels says it uses a search engine to divert traffic to its services.",
      "Say.",
      "Google boasts.",
      "boasts a 90 percent share of Europe's search engine market with Google",
      "Google",
      "Google has a 90 percent share of the European search engine market.",
      "Google boasts.",
      "market share",
      "Google boasts.",
      "market share",
      "Google boasts a 90 percent share of the search engine market.",
      "boasts."
    ]
  },
  {
    "instance_id": "realsumm-88",
    "summary": "<t> Phil Smith , 25 , forgot his keys and scaled fence to try to get in his flat . </t> <t> But teaching assistant fell and hit his head while climbing through window . </t> <t> He fractured his skull and suffered a bleed on the brain and a blood clot . </t> <t> Parents paid tribute to ' lovely son ' who worked at special needs school . </t>",
    "summary_trees": [
      "# ::snt  Phil Smith , 25 , forgot his keys and scaled fence to try to get in his flat . \n(f / forget-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Phil\"\n                  :op2 \"Smith\")\n            :age (t / temporal-quantity\n                  :quant 25\n                  :unit (y / year)))\n      :ARG1 (a / and\n            :op1 (k / key\n                  :poss p)\n            :op2 (s / scale-01\n                  :ARG0 p\n                  :ARG1 (f2 / fence)\n                  :purpose (t2 / try-01\n                        :ARG0 p\n                        :ARG1 (g / get-05\n                              :ARG1 p\n                              :ARG2 (f3 / flat\n                                    :poss p))))))",
      "# ::snt  But teaching assistant fell and hit his head while climbing through window . \n(c / contrast-01\n      :ARG2 (a / and\n            :op1 (f / fall-01\n                  :ARG1 (p / person\n                        :ARG0-of (a2 / assist-01\n                              :ARG1 (t / teach-01))\n                        :part (h / head)))\n            :op2 (h2 / hit-01\n                  :ARG1 h)\n            :time (c2 / climb-01\n                  :ARG0 p\n                  :path (t2 / through\n                        :op1 (w / window)))))",
      "# ::snt  He fractured his skull and suffered a bleed on the brain and a blood clot . \n(a / and\n      :op1 (f / fracture-01\n            :ARG0 (h / he\n                  :part (s / skull))\n            :ARG1 s)\n      :op2 (s2 / suffer-01\n            :ARG0 h\n            :ARG1 (a2 / and\n                  :op1 (b / bleed-01\n                        :ARG1 (b2 / brain))\n                  :op2 (c / clot\n                        :mod (b3 / blood)))))",
      "# ::snt  Parents paid tribute to ' lovely son ' who worked at special needs school . \n(p / pay-01\n      :ARG0 (p2 / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (p3 / parent)))\n      :ARG1 (t / tribute)\n      :ARG2 (p4 / person\n            :ARG0-of (h2 / have-rel-role-91\n                  :ARG2 (s / son))\n            :mod (l / lovely)\n            :ARG0-of (w / work-01\n                  :ARG2 (s2 / school\n                        :ARG1-of (n / need-01\n                              :ARG1-of (s3 / special-02))))))"
    ],
    "tree": [
      "(f / forget-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Phil\"\n                     :op2 \"Smith\")\n            :age (t / temporal-quantity\n                    :quant 25\n                    :unit (y / year))))",
      "(f / forget-01\n   :ARG1 (a / and\n            :op1 (k / key\n                    :poss p)\n            :op2 (s / scale-01\n                    :ARG0 (p / person :name (n / name :op1 \"Phil\" :op2 \"Smith\")))\n                    :ARG1 (f2 / fence)\n                    :purpose (t2 / try-01\n                                 :ARG0 p\n                                 :ARG1 (g / get-05\n                                          :ARG1 p\n                                          :ARG2 (f3 / flat\n                                                    :poss p))))))",
      "(p / person\n   :name (n / name\n            :op1 \"Phil\"\n            :op2 \"Smith\")\n   :age (t / temporal-quantity\n           :quant 25\n           :unit (y / year)))",
      "(a / and\n   :op1 (k / key\n           :poss p)\n   :op2 (s / scale-01\n           :ARG0 (p / person :name (n / name :op1 \"Phil\" :op2 \"Smith\")))\n           :ARG1 (f2 / fence)\n           :purpose (t2 / try-01\n                        :ARG0 p\n                        :ARG1 (g / get-05\n                                 :ARG1 p\n                                 :ARG2 (f3 / flat\n                                           :poss p)))))",
      "(f / forget-01\n   :ARG0 (p / person :name (n / name :op1 \"Phil\" :op2 \"Smith\"))))",
      "(s / scale-01\n   :ARG0 (p / person :name (n / name :op1 \"Phil\" :op2 \"Smith\")))\n   :ARG1 (f2 / fence))",
      "(t2 / try-01\n    :ARG0 (p / person :name (n / name :op1 \"Phil\" :op2 \"Smith\")))\n    :ARG1 (g / get-05))",
      "(g / get-05\n   :ARG1 (p / person :name (n / name :op1 \"Phil\" :op2 \"Smith\")))\n   :ARG2 (f3 / flat))",
      "(f / forget-01\n   :ARG0 (p / person :name (n / name :op1 \"Phil\" :op2 \"Smith\"))))",
      "(s / scale-01\n   :ARG0 (p / person :name (n / name :op1 \"Phil\" :op2 \"Smith\"))))",
      "(s / scale-01\n   :ARG1 (f2 / fence))",
      "(t2 / try-01\n    :ARG0 (p / person :name (n / name :op1 \"Phil\" :op2 \"Smith\"))))",
      "(t2 / try-01\n    :ARG1 (g / get-05))",
      "(g / get-05\n   :ARG1 (p / person :name (n / name :op1 \"Phil\" :op2 \"Smith\"))))",
      "(g / get-05\n   :ARG2 (f3 / flat))",
      "(f / forget-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Phil\"\n                     :op2 \"Smith\")\n            :age (t / temporal-quantity\n                    :quant 25\n                    :unit (y / year)))\n   :ARG1 (k / key\n            :poss p))",
      "(f / forget-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Phil\"\n                     :op2 \"Smith\")\n            :age (t / temporal-quantity\n                    :quant 25\n                    :unit (y / year)))\n   :ARG1 (s / scale-01\n            :ARG0 p\n            :ARG1 (f2 / fence)\n            :purpose (t2 / try-01\n                         :ARG0 p\n                         :ARG1 (g / get-05\n                                  :ARG1 p\n                                  :ARG2 (f3 / flat\n                                            :poss p)))))",
      "(f / forget-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Phil\"\n                     :op2 \"Smith\")\n            :age (t / temporal-quantity\n                    :quant 25\n                    :unit (y / year)))\n   :ARG1 (a / and\n            :op1 (k / key\n                    :poss p)\n            :op2 (s / scale-01\n                    :ARG0 p\n                    :ARG1 (f2 / fence))))",
      "(f / forget-01)",
      "(c / contrast-01\n   :ARG2 (a / and\n            :op1 (f / fall-01\n                    :ARG1 (p / person\n                             :ARG0-of (a2 / assist-01\n                                          :ARG1 (t / teach-01))\n                             :part (h / head)))\n            :op2 (h2 / hit-01\n                     :ARG1 h)\n            :time (c2 / climb-01\n                      :ARG0 p\n                      :path (t2 / through\n                                :op1 (w / window)))))",
      "(a / and\n   :op1 (f / fall-01\n           :ARG1 (p / person\n                    :ARG0-of (a2 / assist-01\n                                 :ARG1 (t / teach-01))\n                    :part (h / head)))\n   :op2 (h2 / hit-01\n            :ARG1 h)\n   :time (c2 / climb-01\n             :ARG0 p\n             :path (t2 / through\n                       :op1 (w / window))))",
      "(c / contrast-01\n   :ARG2 (a / and))",
      "(f / fall-01\n   :ARG1 (p / person))",
      "(a2 / assist-01\n    :ARG1 (t / teach-01))",
      "(t / teach-01)",
      "(h2 / hit-01\n    :ARG1 (h / head))",
      "(c2 / climb-01\n    :ARG0 (p / person)\n    :path (t2 / through))",
      "(c / contrast-01\n   :ARG2 (a / and))",
      "(f / fall-01\n   :ARG1 (p / person))",
      "(a2 / assist-01\n    :ARG1 (t / teach-01))",
      "(h2 / hit-01\n    :ARG1 (h / head))",
      "(c2 / climb-01\n    :ARG0 (p / person))",
      "(c2 / climb-01\n    :path (t2 / through))",
      "(c / contrast-01\n   :ARG2 (f / fall-01\n            :ARG1 (p / person\n                     :ARG0-of (a2 / assist-01\n                                  :ARG1 (t / teach-01))\n                     :part (h / head))))",
      "(c / contrast-01\n   :ARG2 (h2 / hit-01\n             :ARG1 (h / head)\n             :time (c2 / climb-01\n                       :ARG0 (p / person)\n                       :path (t2 / through\n                                 :op1 (w / window)))))",
      "(c / contrast-01\n   :ARG2 (a / and\n            :op1 (f / fall-01\n                    :ARG1 (p / person\n                             :ARG0 (a2 / assist-01\n                                       :ARG1 (t / teach-01))\n                             :part (h / head)))\n            :op2 (h2 / hit-01\n                     :ARG1 h)))",
      "(c / contrast-01)",
      "(a / and\n   :op1 (f / fracture-01\n           :ARG0 (h / he\n                    :part (s / skull\n                             :ARG1-of f))))",
      "(a / and\n   :op2 (s2 / suffer-01\n            :ARG0 (h / he)\n            :ARG1 (a2 / and\n                      :op1 (b / bleed-01\n                              :ARG1 (b2 / brain))\n                      :op2 (c / clot\n                              :mod (b3 / blood)))))",
      "(f / fracture-01\n   :ARG0 (h / he\n            :part (s / skull\n                     :ARG1-of f)))",
      "(s2 / suffer-01\n    :ARG0 (h / he)\n    :ARG1 (a2 / and\n              :op1 (b / bleed-01\n                      :ARG1 (b2 / brain))\n              :op2 (c / clot\n                      :mod (b3 / blood))))",
      "(f / fracture-01\n   :ARG0 (h / he))",
      "(s2 / suffer-01\n    :ARG0 (h / he)\n    :ARG1 (a2 / and))",
      "(b / bleed-01\n   :ARG1 (b2 / brain))",
      "(f / fracture-01\n   :ARG0 (h / he))",
      "(s2 / suffer-01\n    :ARG0 (h / he))",
      "(s2 / suffer-01\n    :ARG1 (a2 / and))",
      "(b / bleed-01\n   :ARG1 (b2 / brain))",
      "(f / fracture-01\n   :ARG0 (h / he\n            :part (s / skull\n                     :ARG1-of f)))",
      "(s2 / suffer-01\n    :ARG0 (h / he)\n    :ARG1 (b / bleed-01\n             :ARG1 (b2 / brain)\n             :op2 (c / clot\n                     :mod (b3 / blood))))",
      "(a / and\n   :op1 (f / fracture-01\n           :ARG0 (h / he\n                    :part (s / skull\n                             :ARG1-of f)))\n   :op2 (s2 / suffer-01\n            :ARG0 h\n            :ARG1 (a2 / and\n                      :op1 (b / bleed-01\n                              :ARG1 (b2 / brain))\n                      :op2 (c / clot\n                              :mod (b3 / blood)))))",
      "(a / and\n   :op1 (f / fracture-01)\n   :op2 (s2 / suffer-01))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0-of (h / have-rel-role-91\n                         :ARG2 (p3 / parent))))",
      "(p / pay-01\n   :ARG1 (t / tribute))",
      "(p / pay-01\n   :ARG2 (p4 / person\n             :ARG0-of (h2 / have-rel-role-91\n                          :ARG2 (s / son))\n             :mod (l / lovely)\n             :ARG0-of (w / work-01\n                         :ARG2 (s2 / school\n                                   :ARG1-of (n / need-01\n                                               :ARG1-of (s3 / special-02))))))",
      "(p2 / person\n    :ARG0-of (h / have-rel-role-91\n                :ARG2 (p3 / parent)))",
      "(p4 / person\n    :ARG0-of (h2 / have-rel-role-91\n                 :ARG2 (s / son))\n    :mod (l / lovely)\n    :ARG0-of (w / work-01\n                :ARG2 (s2 / school\n                          :ARG1-of (n / need-01\n                                      :ARG1-of (s3 / special-02)))))",
      "(p / pay-01\n   :ARG0 (p2 / person))",
      "(w / work-01\n   :ARG2 (s2 / school))",
      "(n / need-01)",
      "(s3 / special-02)",
      "(p / pay-01\n   :ARG0 (p2 / person))",
      "(w / work-01\n   :ARG2 (s2 / school))",
      "(p / pay-01\n   :ARG0 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG2 (p3 / parent)))\n   :ARG1 (t / tribute)\n   :ARG2 (p4 / person\n             :ARG0 (h2 / have-rel-role-91\n                       :ARG2 (s / son))\n             :mod (l / lovely)\n             :ARG0 (w / work-01\n                      :ARG2 (s2 / school\n                                :ARG1 (n / need-01\n                                         :ARG1 (s3 / special-02))))))",
      "(p / pay-01)"
    ],
    "smus": [
      "Phil Smith, 25, forgot.",
      "forgot his keys and Phil Smith had scaled the fence to try and get flat.",
      "Phil Smith, 25,",
      "Phil Smith has his keys and has scaled the fence to try and get flat.",
      "Phil Smith forgot.",
      "Phil Smith has scaled the fence.",
      "Phil Smith will try to get.",
      "Phil Smith is going to get flat.",
      "Phil Smith forgot.",
      "Phil Smith scaled.",
      "The fence was scaled.",
      "Phil Smith will try.",
      "Try to get.",
      "Get Phil Smith.",
      "Get flat.",
      "Phil Smith, 25, forgot his keys.",
      "Phil Smith, 25, forgot to scale the fence to try to get flat.",
      "Phil Smith, 25, forgot his keys and how to scale the fence.",
      "Forgot.",
      "But the teaching assistant fell and hit while climbing through the window.",
      "Teaching assistant fell and hit while climbing through the window.",
      "But...",
      "People fell.",
      "Teaching assistance",
      "Teaching.",
      "The head hit.",
      "People climbing through.",
      "But...",
      "People fell.",
      "Teaching assistance",
      "The head hit.",
      "People are climbing.",
      "Climbing through.",
      "But the teaching assistant's head fell.",
      "But when people were climbing through the window, the head hit.",
      "But the teaching assistant fell and hit her.",
      "But...",
      "And he fractured his skull.",
      "And he suffered a brain bleed and a blood clot.",
      "He fractured his skull.",
      "He suffered a brain bleed and a blood clot.",
      "He fractured.",
      "He suffered and died.",
      "Brain bleed.",
      "He fractured.",
      "He suffered.",
      "The suffering suffered.",
      "Brain bleed.",
      "He fractured his skull.",
      "He suffered a brain bleed and a blood clot.",
      "He fractured his skull and suffered a brain bleed and a blood clot.",
      "Fractured and suffered.",
      "Parents paid.",
      "paid tribute",
      "The lovely son who worked in a school with special needs was paid.",
      "Parents",
      "Lovely son who worked in a school with special needs.",
      "The person paid.",
      "Worked in a school.",
      "Needs.",
      "Special",
      "The person paid.",
      "Worked in a school.",
      "Parents paid tribute to the lovely son who worked in a special needs school.",
      "paid."
    ]
  },
  {
    "instance_id": "realsumm-89",
    "summary": "<t> Emmanuel Adebayor 's current Tottenham contract runs out in 2016 . </t> <t> The striker is unwilling to take anything less than his current \u00a3 5.2million salary before accepting a move out of White Hart Lane . </t> <t> Togolese forward has made just nine league starts this season . </t>",
    "summary_trees": [
      "# ::snt  Emmanuel Adebayor 's current Tottenham contract runs out in 2016 . \n(r / run-out-05\n      :ARG1 (c / contract\n            :poss (p / person\n                  :name (n / name\n                        :op1 \"Emmanuel\"\n                        :op2 \"Adebayor\"))\n            :time (c2 / current)\n            :mod (t / team\n                  :name (n2 / name\n                        :op1 \"Tottenham\")))\n      :time (d / date-entity\n            :year 2016))",
      "# ::snt  The striker is unwilling to take anything less than his current \u00a3 5.2million salary before accepting a move out of White Hart Lane . \n(w / will-02\n      :polarity -\n      :ARG0 (p / person\n            :ARG0-of (s / strike-02))\n      :ARG1 (t / take-01\n            :ARG0 p\n            :ARG1 (a / anything\n                  :ARG1-of (h / have-quant-91\n                        :ARG3 (l / less)\n                        :ARG4 (s2 / salary\n                              :mod (m / monetary-quantity\n                                    :quant 5500000\n                                    :unit (p2 / pound))\n                              :poss p\n                              :time (c / current)))))\n      :time (b / before\n            :op1 (a2 / accept-01\n                  :ARG0 p\n                  :ARG1 (m2 / move-01\n                        :ARG0 p\n                        :ARG2 (r / road\n                              :name (n / name\n                                    :op1 \"White\"\n                                    :op2 \"Hart\"\n                                    :op3 \"Lane\"))))))",
      "# ::snt  Togolese forward has made just nine league starts this season . \n(s / start-01\n      :ARG0 (f / forward\n            :mod (c / country\n                  :name (n / name\n                        :op1 \"Togolese\")))\n      :mod (l / league)\n      :quant (j / just\n            :op1 9)\n      :time (s2 / season\n            :mod (t / this)))"
    ],
    "tree": [
      "(r / run-out-05\n   :ARG1 (c / contract\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Emmanuel\"\n                              :op2 \"Adebayor\"))\n            :time (c2 / current)\n            :mod (t / team\n                    :name (n2 / name\n                              :op1 \"Tottenham\"))))",
      "(r / run-out-05\n   :time (d / date-entity\n            :year 2016))",
      "(c / contract\n   :poss (p / person\n            :name (n / name\n                     :op1 \"Emmanuel\"\n                     :op2 \"Adebayor\"))\n   :time (c2 / current)\n   :mod (t / team\n           :name (n2 / name\n                     :op1 \"Tottenham\")))",
      "(r / run-out-05\n   :ARG1 (c / contract))",
      "(r / run-out-05\n   :ARG1 (c / contract))",
      "(r / run-out-05\n   :ARG1 (c / contract\n            :poss (p / person\n                     :name (n / name\n                              :op1 \"Emmanuel\"\n                              :op2 \"Adebayor\"))\n            :mod (t / team\n                    :name (n2 / name\n                              :op1 \"Tottenham\"))))",
      "(r / run-out-05\n   :time (d / date-entity\n            :year 2016))",
      "(w / will-02\n   :polarity -)",
      "(w / will-02\n   :ARG0 (p / person\n            :ARG0-of (s / strike-02)))",
      "(w / will-02\n   :ARG1 (t / take-01\n            :ARG0 (p / person)\n            :ARG1 (a / anything\n                     :ARG1-of (h / have-quant-91\n                                 :ARG3 (l / less)\n                                 :ARG4 (s2 / salary\n                                           :mod (m / monetary-quantity\n                                                   :quant 5500000\n                                                   :unit (p2 / pound))\n                                           :poss p\n                                           :time (c / current))))))",
      "(w / will-02\n   :time (b / before\n            :op1 (a2 / accept-01\n                     :ARG0 (p / person)\n                     :ARG1 (m2 / move-01\n                               :ARG0 p\n                               :ARG2 (r / road\n                                        :name (n / name\n                                                 :op1 \"White\"\n                                                 :op2 \"Hart\"\n                                                 :op3 \"Lane\"))))))",
      "(p / person\n   :ARG0-of (s / strike-02))",
      "(t / take-01\n   :ARG0 (p / person)\n   :ARG1 (a / anything\n            :ARG1-of (h / have-quant-91\n                        :ARG3 (l / less)\n                        :ARG4 (s2 / salary\n                                  :mod (m / monetary-quantity\n                                          :quant 5500000\n                                          :unit (p2 / pound))\n                                  :poss p\n                                  :time (c / current)))))",
      "(b / before\n   :op1 (a2 / accept-01\n            :ARG0 (p / person)\n            :ARG1 (m2 / move-01\n                      :ARG0 p\n                      :ARG2 (r / road\n                               :name (n / name\n                                        :op1 \"White\"\n                                        :op2 \"Hart\"\n                                        :op3 \"Lane\")))))",
      "(w / will-02\n   :polarity -\n   :ARG0 (p / person))",
      "(s / strike-02)",
      "(t / take-01\n   :ARG0 (p / person)\n   :ARG1 (a / anything))",
      "(a2 / accept-01\n    :ARG0 (p / person)\n    :ARG1 (m2 / move-01))",
      "(m2 / move-01\n    :ARG0 (p / person)\n    :ARG2 (r / road :name (n / name :op1 \"White\" :op2 \"Hart\" :op3 \"Lane\")))",
      "(w / will-02\n   :polarity -)",
      "(w / will-02\n   :ARG0 (p / person))",
      "(t / take-01\n   :ARG0 (p / person))",
      "(t / take-01\n   :ARG1 (a / anything))",
      "(a2 / accept-01\n    :ARG0 (p / person))",
      "(a2 / accept-01\n    :ARG1 (m2 / move-01))",
      "(m2 / move-01\n    :ARG0 (p / person))",
      "(m2 / move-01\n    :ARG2 (r / road :name (n / name :op1 \"White\" :op2 \"Hart\" :op3 \"Lane\")))",
      "(w / will-02\n   :polarity -\n   :ARG0 (p / person\n            :ARG0 (s / strike-02))\n   :ARG1 (t / take-01\n            :ARG0 p\n            :ARG1 (a / anything\n                     :ARG1 (h / have-quant-91\n                              :ARG3 (l / less)\n                              :ARG4 (s2 / salary\n                                        :mod (m / monetary-quantity\n                                                :quant 5500000\n                                                :unit (p2 / pound))\n                                        :poss p)))))",
      "(w / will-02\n   :polarity -\n   :time (b / before\n            :op1 (a2 / accept-01)))",
      "(s / start-01\n   :ARG0 (f / forward\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Togolese\"))))",
      "(s / start-01\n   :mod (l / league))",
      "(s / start-01\n   :quant (j / just\n             :op1 9))",
      "(s / start-01\n   :time (s2 / season\n             :mod (t / this)))",
      "(f / forward\n   :mod (c / country\n           :name (n / name\n                    :op1 \"Togolese\")))",
      "(s2 / season\n    :mod (t / this))",
      "(s / start-01\n   :ARG0 (f / forward))",
      "(s / start-01\n   :ARG0 (f / forward))",
      "(s / start-01\n   :ARG0 (f / forward\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Togolese\")))\n   :mod (l / league)\n   :quant (j / just\n             :op1 9))",
      "(s / start-01\n   :mod (l / league)\n   :quant (j / just\n             :op1 9)\n   :time (s2 / season\n             :mod (t / this)))"
    ],
    "smus": [
      "Emmanuel Adebayor's current Tottenham contract is running out.",
      "Run out in 2016.",
      "Emmanuel Adebayor's current contract is with Tottenham.",
      "The contract is running out.",
      "The contract is running out.",
      "Emmanuel Adebayor's Tottenham contract is running out.",
      "Run out in 2016.",
      "Unwilling.",
      "The strikers were willing.",
      "People are willing to take anything less than their current PS5.50m salary.",
      "Before people are accepting the move to White Hart Lane, they are willing to.",
      "Striker.",
      "People will take anything less than their current PS5.50k salary.",
      "Before accepting a move to White Hart Lane.",
      "People aren't willing.",
      "Strike.",
      "People will take anything.",
      "People are accepting the move.",
      "People are moving to White Hart Lane.",
      "Unwilling.",
      "People are willing.",
      "People will take.",
      "Take anything.",
      "People are accepting.",
      "Accepting the move.",
      "People are moving.",
      "The move to White Hart Lane.",
      "The strikers were unwilling to take anything less than their PS5.50m salary.",
      "Not willing before accepting.",
      "The Togolese forwards starts.",
      "League starts",
      "Just 9 starts.",
      "This season starts.",
      "Forward, the Togolese.",
      "This is the season.",
      "Forward starts.",
      "Forward starts.",
      "The Togolese forward starts just 9 league starts.",
      "Just 9 league starts this season."
    ]
  },
  {
    "instance_id": "realsumm-90",
    "summary": "<t> John Helm was commentating on the game the day the fire broke out . </t> <t> He gives his insight into what cause the blaze 30 years ago . ' </t> <t> From everything I have been told there is n\u2019t a jot of evidence to suggest the blaze was caused deliberately , ' says Helm . </t>",
    "summary_trees": [
      "# ::snt  John Helm was commentating on the game the day the fire broke out . \n(c / commentate-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"Helm\"))\n      :ARG3 (g / game)\n      :time (b / break-out-30\n            :ARG1 (f / fire)))",
      "# ::snt  He gives his insight into what cause the blaze 30 years ago . ' \n(g / give-01\n      :ARG0 (h / he)\n      :ARG1 (ii / insight\n            :poss h\n            :topic (t / thing\n                  :ARG0-of (c / cause-01\n                        :ARG1 (b / blaze-01\n                              :time (b2 / before\n                                    :op1 (n / now)\n                                    :quant (t2 / temporal-quantity\n                                          :quant 30\n                                          :unit (y / year))))))))",
      "# ::snt  From everything I have been told there is n\u2019t a jot of evidence to suggest the blaze was caused deliberately , ' says Helm . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Helm\"))\n      :ARG1 (e / evidence-01\n            :polarity -\n            :quant (j / jot)\n            :ARG0-of (s2 / suggest-01\n                  :ARG1 (c / cause-01\n                        :ARG1 (b / blaze-01)\n                        :manner (d / deliberate)))\n            :source (e2 / everything\n                  :ARG1-of (t / tell-01\n                        :ARG2 (ii / i)))))"
    ],
    "tree": [
      "(c / commentate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Helm\")))",
      "(c / commentate-01\n   :ARG3 (g / game))",
      "(c / commentate-01\n   :time (b / break-out-30\n            :ARG1 (f / fire)))",
      "(p / person\n   :name (n / name\n            :op1 \"John\"\n            :op2 \"Helm\"))",
      "(b / break-out-30\n   :ARG1 (f / fire))",
      "(c / commentate-01\n   :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Helm\")))",
      "(c / commentate-01\n   :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Helm\")))",
      "(c / commentate-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Helm\"))\n   :ARG3 (g / game))",
      "(c / commentate-01\n   :time (b / break-out-30))",
      "(g / give-01\n   :ARG0 (h / he))",
      "(g / give-01\n   :ARG1 (ii / insight\n             :poss (h / he)\n             :topic (t / thing\n                       :ARG0-of (c / cause-01\n                                   :ARG1 (b / blaze-01\n                                            :time (b2 / before\n                                                      :op1 (n / now)\n                                                      :quant (t2 / temporal-quantity\n                                                                 :quant 30\n                                                                 :unit (y / year))))))))",
      "(ii / insight\n    :poss (h / he)\n    :topic (t / thing\n              :ARG0-of (c / cause-01\n                          :ARG1 (b / blaze-01\n                                   :time (b2 / before\n                                             :op1 (n / now)\n                                             :quant (t2 / temporal-quantity\n                                                        :quant 30\n                                                        :unit (y / year)))))))",
      "(g / give-01\n   :ARG0 (h / he))",
      "(c / cause-01\n   :ARG1 (b / blaze-01))",
      "(b / blaze-01\n   :time (b2 / before))",
      "(g / give-01\n   :ARG0 (h / he))",
      "(c / cause-01\n   :ARG1 (b / blaze-01))",
      "(b / blaze-01\n   :time (b2 / before))",
      "(g / give-01\n   :ARG0 (h / he)\n   :ARG1 (ii / insight\n             :poss h\n             :topic (t / thing\n                       :ARG0 (c / cause-01\n                                :ARG1 (b / blaze-01)))))",
      "(g / give-01)",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Helm\")))",
      "(s / say-01\n   :ARG1 (e / evidence-01\n            :polarity -\n            :quant (j / jot)\n            :ARG0-of (s2 / suggest-01\n                         :ARG1 (c / cause-01\n                                  :ARG1 (b / blaze-01)\n                                  :manner (d / deliberate)))\n            :source (e2 / everything\n                        :ARG1-of (t / tell-01\n                                    :ARG2 (ii / i)))))",
      "(p / person\n   :name (n / name\n            :op1 \"Helm\"))",
      "(e / evidence-01\n   :polarity -\n   :quant (j / jot)\n   :ARG0-of (s2 / suggest-01\n                :ARG1 (c / cause-01\n                         :ARG1 (b / blaze-01)\n                         :manner (d / deliberate)))\n   :source (e2 / everything\n               :ARG1-of (t / tell-01\n                           :ARG2 (ii / i))))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Helm\")))",
      "(e / evidence-01\n   :polarity -\n   :quant (j / jot))",
      "(s2 / suggest-01\n    :ARG1 (c / cause-01))",
      "(c / cause-01\n   :ARG1 (b / blaze-01))",
      "(b / blaze-01)",
      "(t / tell-01\n   :ARG2 (ii / i))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Helm\")))",
      "(e / evidence-01\n   :polarity -)",
      "(e / evidence-01\n   :quant (j / jot))",
      "(s2 / suggest-01\n    :ARG1 (c / cause-01))",
      "(c / cause-01\n   :ARG1 (b / blaze-01))",
      "(t / tell-01\n   :ARG2 (ii / i))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Helm\"))\n   :ARG1 (e / evidence-01\n            :polarity -\n            :quant (j / jot)\n            :ARG0 (s2 / suggest-01\n                      :ARG1 (c / cause-01\n                               :ARG1 (b / blaze-01)\n                               :manner (d / deliberate)))))",
      "(s / say-01)"
    ],
    "smus": [
      "John Helm commentating:",
      "Commentating on the game.",
      "Commentating as the fire broke out.",
      "John Helm",
      "The fire broke out.",
      "John Helm commentating:",
      "John Helm commentating:",
      "John Helm commentating on the game.",
      "Commentating as the outbreak broke out.",
      "He gives.",
      "Gives his insight into why the blaze has been blazed 30 years ago.",
      "His insight into the cause of the blaze of the past 30 years:",
      "He gives.",
      "The cause of the blaze.",
      "There was a blaze before.",
      "He gives.",
      "The cause of the blaze.",
      "There was a blaze before.",
      "He gives his own insight as to the cause of the blaze.",
      "Gives.",
      "\"Helm says.",
      "\"From everything I've told, there's not a jot of evidence to suggest that the blaze was deliriously caused.\"",
      "Helm.",
      "Everything I've told, there's not a jot of evidence to suggest that the blaze was deliriously caused.",
      "\"Helm says.",
      "Not a jot of evi.",
      "So suggest that.",
      "caused a blaze.",
      "blaze",
      "I was told.",
      "\"Helm says.",
      "evi evi.",
      "evi jot",
      "So suggest that.",
      "caused a blaze.",
      "I was told.",
      "\"It's not a jot of evidence to suggest that the blaze was caused deliriously,\" says Helm.",
      "says."
    ]
  },
  {
    "instance_id": "realsumm-91",
    "summary": "<t> Rory McIlroy faced with Fifty Shades of Grey 's Jamie Dornan . </t> <t> McIlroy and Dornan took part in the first Circular Soccer Showdown of 2015 . </t> <t> McIlroy finished strongly to finish an impressive fourth at the Masters . </t> <t> READ : It wo n't be too long before McIlroy wins a Masters . </t>",
    "summary_trees": [
      "# ::snt  Rory McIlroy faced with Fifty Shades of Grey 's Jamie Dornan . \n(f / face-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Rory\"\n                  :op2 \"McIlroy\"))\n      :ARG1 (p2 / person\n            :name (n2 / name\n                  :op1 \"Jamie\"\n                  :op2 \"Dornan\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (b / book\n                        :name (n3 / name\n                              :op1 \"Fifty\"\n                              :op2 \" Shades\"\n                              :op3 \"of\"\n                              :op4 \"Grey\")))))",
      "# ::snt  McIlroy and Dornan took part in the first Circular Soccer Showdown of 2015 . \n(p / participate-01\n      :ARG0 (a / and\n            :op1 (p2 / person\n                  :name (n / name\n                        :op1 \"McIlroy\"))\n            :op2 (p3 / person\n                  :name (n2 / name\n                        :op1 \"Dornan\")))\n      :ARG1 (g / game\n            :name (n3 / name\n                  :op1 \"Circular\"\n                  :op2 \"Soccer\"\n                  :op3 \"Showdown\")\n            :ord (o / ordinal-entity\n                  :value 1)\n            :time (d / date-entity\n                  :year 2015)))",
      "# ::snt  McIlroy finished strongly to finish an impressive fourth at the Masters . \n(f / finish-07\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"McIlroy\"))\n      :ARG1-of (s / strong-02)\n      :purpose (f2 / finish-07\n            :ARG0 p\n            :ARG2 (f3 / fourth\n                  :ARG0-of (ii / impress-01))\n            :location (g / game\n                  :name (n2 / name\n                        :op1 \"Masters\"))))",
      "# ::snt  READ : It wo n't be too long before McIlroy wins a Masters . \n(r / read-01\n      :mode imperative\n      :ARG0 (y / you)\n      :ARG1 (b / before\n            :op1 (w / win-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"McIlroy\"))\n                  :ARG1 (g / game\n                        :name (n2 / name\n                              :op1 \"Masters\")))\n            :ARG1-of (l / long-03\n                  :polarity -\n                  :ARG2-of (h / have-degree-91\n                        :ARG1 b\n                        :ARG3 (t / too)))))"
    ],
    "tree": [
      "(f / face-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rory\"\n                     :op2 \"McIlroy\")))",
      "(f / face-01\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jamie\"\n                       :op2 \"Dornan\")\n             :ARG0-of (h / have-org-role-91\n                         :ARG1 (b / book\n                                  :name (n3 / name\n                                            :op1 \"Fifty\"\n                                            :op2 \" Shades\"\n                                            :op3 \"of\"\n                                            :op4 \"Grey\")))))",
      "(p / person\n   :name (n / name\n            :op1 \"Rory\"\n            :op2 \"McIlroy\"))",
      "(p2 / person\n    :name (n2 / name\n              :op1 \"Jamie\"\n              :op2 \"Dornan\")\n    :ARG0-of (h / have-org-role-91\n                :ARG1 (b / book\n                         :name (n3 / name\n                                   :op1 \"Fifty\"\n                                   :op2 \" Shades\"\n                                   :op3 \"of\"\n                                   :op4 \"Grey\"))))",
      "(f / face-01\n   :ARG0 (p / person :name (n / name :op1 \"Rory\" :op2 \"McIlroy\")))",
      "(f / face-01\n   :ARG0 (p / person :name (n / name :op1 \"Rory\" :op2 \"McIlroy\")))",
      "(f / face-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Rory\"\n                     :op2 \"McIlroy\"))\n   :ARG1 (p2 / person\n             :name (n2 / name\n                       :op1 \"Jamie\"\n                       :op2 \"Dornan\")\n             :ARG0 (h / have-org-role-91\n                      :ARG1 (b / book\n                               :name (n3 / name\n                                         :op1 \"Fifty\"\n                                         :op2 \" Shades\"\n                                         :op3 \"of\"\n                                         :op4 \"Grey\")))))",
      "(f / face-01)",
      "(p / participate-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"McIlroy\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Dornan\"))))",
      "(p / participate-01\n   :ARG1 (g / game\n            :name (n3 / name\n                      :op1 \"Circular\"\n                      :op2 \"Soccer\"\n                      :op3 \"Showdown\")\n            :ord (o / ordinal-entity\n                    :value 1)\n            :time (d / date-entity\n                     :year 2015)))",
      "(a / and\n   :op1 (p2 / person\n            :name (n / name\n                     :op1 \"McIlroy\"))\n   :op2 (p3 / person\n            :name (n2 / name\n                      :op1 \"Dornan\")))",
      "(g / game\n   :name (n3 / name\n             :op1 \"Circular\"\n             :op2 \"Soccer\"\n             :op3 \"Showdown\")\n   :ord (o / ordinal-entity\n           :value 1)\n   :time (d / date-entity\n            :year 2015))",
      "(p / participate-01\n   :ARG0 (a / and))",
      "(p / participate-01\n   :ARG0 (a / and))",
      "(p / participate-01\n   :ARG0 (p2 / person\n             :name (n / name\n                      :op1 \"McIlroy\"))\n   :ARG1 (g / game\n            :name (n3 / name\n                      :op1 \"Circular\"\n                      :op2 \"Soccer\"\n                      :op3 \"Showdown\")\n            :ord (o / ordinal-entity\n                    :value 1)\n            :time (d / date-entity\n                     :year 2015)))",
      "(p / participate-01\n   :ARG0 (p3 / person\n             :name (n2 / name\n                       :op1 \"Dornan\"))\n   :ARG1 (g / game\n            :name (n3 / name\n                      :op1 \"Circular\"\n                      :op2 \"Soccer\"\n                      :op3 \"Showdown\")\n            :ord (o / ordinal-entity\n                    :value 1)\n            :time (d / date-entity\n                     :year 2015))\n   :ARG1 g)",
      "(p / participate-01\n   :ARG0 (a / and\n            :op1 (p2 / person\n                     :name (n / name\n                              :op1 \"McIlroy\"))\n            :op2 (p3 / person\n                     :name (n2 / name\n                               :op1 \"Dornan\")))\n   :ARG1 (g / game\n            :name (n3 / name\n                      :op1 \"Circular\"\n                      :op2 \"Soccer\"\n                      :op3 \"Showdown\")\n            :ord (o / ordinal-entity\n                    :value 1)))",
      "(p / participate-01)",
      "(f / finish-07\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McIlroy\")))",
      "(f / finish-07\n   :ARG1-of (s / strong-02))",
      "(f / finish-07\n   :purpose (f2 / finish-07\n                :ARG0 (p / person :name (n / name :op1 \"McIlroy\"))\n                :ARG2 (f3 / fourth\n                          :ARG0-of (ii / impress-01))\n                :location (g / game\n                             :name (n2 / name\n                                       :op1 \"Masters\"))))",
      "(p / person\n   :name (n / name\n            :op1 \"McIlroy\"))",
      "(f2 / finish-07\n    :ARG0 (p / person :name (n / name :op1 \"McIlroy\"))\n    :ARG2 (f3 / fourth\n              :ARG0-of (ii / impress-01))\n    :location (g / game\n                 :name (n2 / name\n                           :op1 \"Masters\")))",
      "(f / finish-07\n   :ARG0 (p / person :name (n / name :op1 \"McIlroy\")))",
      "(s / strong-02)",
      "(f2 / finish-07\n    :ARG0 (p / person :name (n / name :op1 \"McIlroy\"))\n    :ARG2 (f3 / fourth))",
      "(ii / impress-01)",
      "(f / finish-07\n   :ARG0 (p / person :name (n / name :op1 \"McIlroy\")))",
      "(f2 / finish-07\n    :ARG0 (p / person :name (n / name :op1 \"McIlroy\")))",
      "(f2 / finish-07\n    :ARG2 (f3 / fourth))",
      "(f / finish-07\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"McIlroy\"))\n   :ARG1 (s / strong-02))",
      "(f / finish-07\n   :purpose (f2 / finish-07))",
      "(r / read-01\n   :mode imperative)",
      "(r / read-01\n   :ARG0 (y / you))",
      "(r / read-01\n   :ARG1 (b / before\n            :op1 (w / win-01\n                    :ARG0 (p / person\n                             :name (n / name\n                                      :op1 \"McIlroy\"))\n                    :ARG1 (g / game\n                             :name (n2 / name\n                                       :op1 \"Masters\")))\n            :ARG1-of (l / long-03\n                        :polarity -\n                        :ARG2-of (h / have-degree-91\n                                    :ARG1 b\n                                    :ARG3 (t / too)))))",
      "(b / before\n   :op1 (w / win-01\n           :ARG0 (p / person\n                    :name (n / name\n                             :op1 \"McIlroy\"))\n           :ARG1 (g / game\n                    :name (n2 / name\n                              :op1 \"Masters\")))\n   :ARG1-of (l / long-03\n               :polarity -\n               :ARG2-of (h / have-degree-91\n                           :ARG1 b\n                           :ARG3 (t / too))))",
      "(r / read-01\n   :mode imperative\n   :ARG0 (y / you))",
      "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"McIlroy\")))",
      "(l / long-03\n   :polarity -)",
      "(r / read-01\n   :mode imperative)",
      "(r / read-01\n   :ARG0 (y / you))",
      "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"McIlroy\")))",
      "(l / long-03\n   :polarity -)",
      "(r / read-01\n   :mode imperative\n   :ARG0 (y / you)\n   :ARG1 (b / before\n            :op1 (w / win-01\n                    :ARG0 (p / person\n                             :name (n / name\n                                      :op1 \"McIlroy\"))\n                    :ARG1 (g / game\n                             :name (n2 / name\n                                       :op1 \"Masters\")))\n            :ARG1 (l / long-03\n                     :polarity -\n                     :ARG2 (h / have-degree-91\n                              :ARG1 b\n                              :ARG3 (t / too)))))",
      "(r / read-01\n   :mode imperative)"
    ],
    "smus": [
      "Ryan McIlroy faced.",
      "Facing Jamie Dornan of fifty shades of grey,",
      "Ry McIlroy",
      "Jamie Dornan, fifty shades of grey",
      "Ryan McIlroy faced.",
      "Ryan McIlroy faced.",
      "-Rory McIlroy faced Jamie Dornan of fifty shades of grey.",
      "Faced.",
      "McIlroy and Dunnan were in attendance.",
      "Participation in the first Circular Soccer Showdown in 2015.",
      "McIlroy and Dornan.",
      "The Circular Soccer Showdown will be the first time in 2015.",
      "Participation by both parties.",
      "Participation by both parties.",
      "McIlroy will be part of the first Circular Soccer Showdown in 2015.",
      "Dornan will be a participant in the first Circular Soccer Showdown in 2015.",
      "McIlroy and Dunnan were in attendance for the first time at the Circular Soccer Showdown.",
      "Participation.",
      "McIlroy will finish.",
      "Finish strongly.",
      "Finish to finish in the Masters as an impressive fourth.",
      "McIlroy",
      "McIlroy will finish in an impressive fourth in the Masters.",
      "McIlroy will finish.",
      "Strongly.",
      "McIlroy will finish fourth.",
      "Impressive.",
      "McIlroy will finish.",
      "McIlroy will finish.",
      "Finish fourth.",
      "McIlroy will finish strong.",
      "Finish to finish.",
      "Read.",
      "You have read.",
      "Read not too long before McIlroy wins the Masters.",
      "Not too long before McIlroy wins the Masters.",
      "Read.",
      "McIlroy wins.",
      "Not long.",
      "Read.",
      "You have read.",
      "McIlroy wins.",
      "Not long.",
      "Read before McIlroy wins the Masters for not too long.",
      "Read."
    ]
  },
  {
    "instance_id": "realsumm-92",
    "summary": "<t> Chris Christie appeared on The Tonight Show and called out Jimmy Fallon for his weight jokes about the governor . </t> <t> Later in the program he hoarded a pint of ice cream Fallon brought out for the two to share . </t> <t> When asked if he would run for president , Christie said ; ' I \u2019ve got a day job which keeps me busy ' . </t>",
    "summary_trees": [
      "# ::snt  Chris Christie appeared on The Tonight Show and called out Jimmy Fallon for his weight jokes about the governor . \n(a / and\n      :op1 (a2 / appear-01\n            :ARG1 (p / person\n                  :name (n / name\n                        :op1 \"Chris\"\n                        :op2 \"Christie\"))\n            :location (b / broadcast-program\n                  :name (n2 / name\n                        :op1 \"The\"\n                        :op2 \"Tonight\"\n                        :op3 \"Show\")))\n      :op2 (c / call-out-15\n            :ARG0 p\n            :ARG1 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Jimmy\"\n                        :op2 \"Fallon\"))\n            :ARG2 (j / joke-01\n                  :ARG0 p2\n                  :ARG2 (w / weight)\n                  :topic (p3 / person\n                        :ARG0-of (h / have-org-role-91\n                              :ARG2 (g / governor))))))",
      "# ::snt  Later in the program he hoarded a pint of ice cream Fallon brought out for the two to share . \n(h / hoard-01\n      :ARG0 (h2 / he)\n      :ARG1 (ii / ice-cream\n            :quant (p / pint)\n            :ARG1-of (b / bring-01\n                  :ARG0 (p2 / person\n                        :name (n / name\n                              :op1 \"Fallon\"))\n                  :ARG2 (o / out)\n                  :purpose (s / share-01\n                        :ARG0 (t / two))))\n      :time (l / late\n            :op1 (p3 / program)\n            :degree (s2 / somewhat)))",
      "# ::snt  When asked if he would run for president , Christie said ; ' I \u2019ve got a day job which keeps me busy ' . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Christie\"))\n      :ARG1 (h / have-03\n            :ARG0 p\n            :ARG1 (j / job\n                  :mod (d / day)\n                  :ARG0-of (k / keep-02\n                        :ARG1 (b / busy-01\n                              :ARG1 p))))\n      :time (a / ask-01\n            :ARG1 (t / truth-value\n                  :polarity-of (r / run-02\n                        :ARG0 p\n                        :ARG1 (p2 / person\n                              :ARG0-of (h2 / have-org-role-91\n                                    :ARG2 (p3 / president)))))\n            :ARG2 p))"
    ],
    "tree": [
      "(a / and\n   :op1 (a2 / appear-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Chris\"\n                              :op2 \"Christie\"))\n            :location (b / broadcast-program\n                         :name (n2 / name\n                                   :op1 \"The\"\n                                   :op2 \"Tonight\"\n                                   :op3 \"Show\"))))",
      "(a / and\n   :op2 (c / call-out-15\n           :ARG0 (p / person :name (n / name :op1 \"Chris\" :op2 \"Christie\"))\n           :ARG1 (p2 / person\n                     :name (n3 / name\n                               :op1 \"Jimmy\"\n                               :op2 \"Fallon\"))\n           :ARG2 (j / joke-01\n                    :ARG0 p2\n                    :ARG2 (w / weight)\n                    :topic (p3 / person\n                               :ARG0-of (h / have-org-role-91\n                                           :ARG2 (g / governor))))))",
      "(a2 / appear-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Chris\"\n                      :op2 \"Christie\"))\n    :location (b / broadcast-program\n                 :name (n2 / name\n                           :op1 \"The\"\n                           :op2 \"Tonight\"\n                           :op3 \"Show\")))",
      "(c / call-out-15\n   :ARG0 (p / person :name (n / name :op1 \"Chris\" :op2 \"Christie\"))\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"Jimmy\"\n                       :op2 \"Fallon\"))\n   :ARG2 (j / joke-01\n            :ARG0 p2\n            :ARG2 (w / weight)\n            :topic (p3 / person\n                       :ARG0-of (h / have-org-role-91\n                                   :ARG2 (g / governor)))))",
      "(a2 / appear-01\n    :ARG1 (p / person :name (n / name :op1 \"Chris\" :op2 \"Christie\")))",
      "(j / joke-01\n   :ARG0 (p2 / person :name (n3 / name :op1 \"Jimmy\" :op2 \"Fallon\"))\n   :ARG2 (w / weight))",
      "(a2 / appear-01\n    :ARG1 (p / person :name (n / name :op1 \"Chris\" :op2 \"Christie\")))",
      "(j / joke-01\n   :ARG0 (p2 / person :name (n3 / name :op1 \"Jimmy\" :op2 \"Fallon\")))",
      "(j / joke-01\n   :ARG2 (w / weight))",
      "(a2 / appear-01\n    :ARG1 (p / person\n             :name (n / name\n                      :op1 \"Chris\"\n                      :op2 \"Christie\"))\n    :location (b / broadcast-program\n                 :name (n2 / name\n                           :op1 \"The\"\n                           :op2 \"Tonight\"\n                           :op3 \"Show\")))",
      "(c / call-out-15\n   :ARG0 (p / person :name (n / name :op1 \"Chris\" :op2 \"Christie\"))\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"Jimmy\"\n                       :op2 \"Fallon\"))\n   :ARG2 (j / joke-01\n            :ARG0 p2\n            :ARG2 (w / weight)\n            :topic (p3 / person\n                       :ARG0-of (h / have-org-role-91\n                                   :ARG2 (g / governor)))))",
      "(a / and\n   :op1 (a2 / appear-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Chris\"\n                              :op2 \"Christie\")))\n   :op2 (c / call-out-15\n           :ARG0 p\n           :ARG1 (p2 / person\n                     :name (n3 / name\n                               :op1 \"Jimmy\"\n                               :op2 \"Fallon\"))\n           :ARG2 (j / joke-01\n                    :ARG0 p2\n                    :ARG2 (w / weight)\n                    :topic (p3 / person\n                               :ARG0 (h / have-org-role-91\n                                        :ARG2 (g / governor))))))",
      "(a / and\n   :op1 (a2 / appear-01\n            :location (b / broadcast-program\n                         :name (n2 / name\n                                   :op1 \"The\"\n                                   :op2 \"Tonight\"\n                                   :op3 \"Show\")))\n   :op2 (c / call-out-15))",
      "(h / hoard-01\n   :ARG0 (h2 / he))",
      "(h / hoard-01\n   :ARG1 (ii / ice-cream\n             :quant (p / pint)\n             :ARG1-of (b / bring-01\n                         :ARG0 (p2 / person\n                                   :name (n / name\n                                            :op1 \"Fallon\"))\n                         :ARG2 (o / out)\n                         :purpose (s / share-01\n                                     :ARG0 (t / two)))))",
      "(h / hoard-01\n   :time (l / late\n            :op1 (p3 / program)\n            :degree (s2 / somewhat)))",
      "(ii / ice-cream\n    :quant (p / pint)\n    :ARG1-of (b / bring-01\n                :ARG0 (p2 / person\n                          :name (n / name\n                                   :op1 \"Fallon\"))\n                :ARG2 (o / out)\n                :purpose (s / share-01\n                            :ARG0 (t / two))))",
      "(l / late\n   :op1 (p3 / program)\n   :degree (s2 / somewhat))",
      "(h / hoard-01\n   :ARG0 (h2 / he))",
      "(b / bring-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Fallon\")))",
      "(s / share-01\n   :ARG0 (t / two))",
      "(h / hoard-01\n   :ARG0 (h2 / he))",
      "(b / bring-01\n   :ARG0 (p2 / person :name (n / name :op1 \"Fallon\")))",
      "(s / share-01\n   :ARG0 (t / two))",
      "(h / hoard-01\n   :ARG0 (h2 / he)\n   :ARG1 (ii / ice-cream\n             :quant (p / pint)\n             :ARG1 (b / bring-01\n                      :ARG0 (p2 / person\n                                :name (n / name\n                                         :op1 \"Fallon\"))\n                      :ARG2 (o / out))))",
      "(h / hoard-01\n   :time (l / late\n            :op1 (p3 / program)\n            :degree (s2 / somewhat)))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Christie\")))",
      "(s / say-01\n   :ARG1 (h / have-03\n            :ARG0 (p / person :name (n / name :op1 \"Christie\"))\n            :ARG1 (j / job\n                     :mod (d / day)\n                     :ARG0-of (k / keep-02\n                                 :ARG1 (b / busy-01\n                                          :ARG1 p)))))",
      "(s / say-01\n   :time (a / ask-01\n            :ARG1 (t / truth-value\n                     :polarity-of (r / run-02\n                                     :ARG0 (p / person :name (n / name :op1 \"Christie\"))\n                                     :ARG1 (p2 / person\n                                               :ARG0-of (h2 / have-org-role-91\n                                                            :ARG2 (p3 / president)))))\n            :ARG2 p))",
      "(p / person\n   :name (n / name\n            :op1 \"Christie\"))",
      "(h / have-03\n   :ARG0 (p / person :name (n / name :op1 \"Christie\"))\n   :ARG1 (j / job\n            :mod (d / day)\n            :ARG0-of (k / keep-02\n                        :ARG1 (b / busy-01\n                                 :ARG1 p))))",
      "(a / ask-01\n   :ARG1 (t / truth-value\n            :polarity-of (r / run-02\n                            :ARG0 (p / person :name (n / name :op1 \"Christie\"))\n                            :ARG1 (p2 / person\n                                      :ARG0-of (h2 / have-org-role-91\n                                                   :ARG2 (p3 / president)))))\n   :ARG2 p)",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Christie\")))",
      "(h / have-03\n   :ARG0 (p / person :name (n / name :op1 \"Christie\"))\n   :ARG1 (j / job))",
      "(k / keep-02\n   :ARG1 (b / busy-01))",
      "(b / busy-01\n   :ARG1 (p / person :name (n / name :op1 \"Christie\")))",
      "(a / ask-01\n   :ARG1 (t / truth-value))",
      "(r / run-02\n   :ARG0 (p / person :name (n / name :op1 \"Christie\"))\n   :ARG1 (p2 / person))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Christie\")))",
      "(h / have-03\n   :ARG0 (p / person :name (n / name :op1 \"Christie\")))",
      "(h / have-03\n   :ARG1 (j / job))",
      "(k / keep-02\n   :ARG1 (b / busy-01))",
      "(b / busy-01\n   :ARG1 (p / person :name (n / name :op1 \"Christie\")))",
      "(a / ask-01\n   :ARG1 (t / truth-value))",
      "(r / run-02\n   :ARG0 (p / person :name (n / name :op1 \"Christie\")))",
      "(r / run-02\n   :ARG1 (p2 / person))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Christie\"))\n   :ARG1 (h / have-03\n            :ARG0 p\n            :ARG1 (j / job\n                     :mod (d / day)\n                     :ARG0 (k / keep-02\n                              :ARG1 (b / busy-01\n                                       :ARG1 p)))))",
      "(s / say-01\n   :time (a / ask-01))"
    ],
    "smus": [
      "And Chris Christie appeared on \"The Tonight Show\".",
      "And Chris Christie called Jimmy Fallon out for his weighty jokes about the governor.",
      "Chris Christie appeared on The Tonight Show.",
      "Chris Christie called out Jimmy Fallon for his weight jokes about the governor.",
      "Chris Christie appeared.",
      "Jimmy Fallon jokes about weight.",
      "Chris Christie appeared.",
      "Jimmy Fallon jokes:",
      "Weight jokes.",
      "Chris Christie appeared on The Tonight Show.",
      "Chris Christie called out Jimmy Fallon for his weight jokes about the governor.",
      "Chris Christie appeared and called out Jimmy Fallon for his weighty jokes about the governor.",
      "appeared on The Tonight Show and was called out.",
      "He hoarded.",
      "A pint of ice-cream fellon brought out to share was hoarded.",
      "Hoarded somewhat late in the program.",
      "A pint of ice-cream that Fallon brought out to share.",
      "The program is somewhat late.",
      "He hoarded.",
      "Fallon brought.",
      "The two will share.",
      "He hoarded.",
      "Fallon brought.",
      "The two will share.",
      "He hoarded a pint of ice-cream that Fallon brought out.",
      "Hoarded somewhat late in the program.",
      "Christie said --",
      "Christie has a day job that keeps her busy, she said.",
      "When asked if Christie would run for president, he said,",
      "Christie",
      "Christie has a day job that keeps her busy.",
      "Christie will run for president?",
      "Christie said --",
      "Christie has a job.",
      "keeps busy.",
      "Christie is busy.",
      "asked the truth.",
      "Christie will run people.",
      "Christie said --",
      "Christie has.",
      "have a job.",
      "keeps busy.",
      "Christie is busy.",
      "asked the truth.",
      "Christie will run.",
      "Run people.",
      "Christie said she has a day job that keeps her busy.",
      "\"Asked,\" said one."
    ]
  },
  {
    "instance_id": "realsumm-93",
    "summary": "<t> Qantas ' on time rating slipped to 75th out of the 80 airlines using Heathrow . </t> <t> The airline could loose their eight landing strips at the popular airport . </t> <t> They are also facing a fine in excess of $ 38,000 for every flight that 's late . </t> <t> Qantas blamed air congestion at Heathrow and Dubai airports . </t>",
    "summary_trees": [
      "# ::snt  Qantas ' on time rating slipped to 75th out of the 80 airlines using Heathrow . \n(s / slip-01\n      :ARG1 (r / rate-01\n            :ARG1 (c / company\n                  :name (n / name\n                        :op1 \"Qantas\"))\n            :ARG3 (o / on-time))\n      :ARG4 (r2 / rank-01\n            :ARG2 75\n            :ARG1 c\n            :ARG5 (a / airline\n                  :quant 80\n                  :ARG0-of (u / use-01\n                        :ARG1 (a2 / airport\n                              :name (n2 / name\n                                    :op1 \"Heathrow\"))))))",
      "# ::snt  The airline could loose their eight landing strips at the popular airport . \n(p / possible-01\n      :ARG1 (l / loose-02\n            :ARG0 (a / airline)\n            :ARG1 (s / strip\n                  :quant 8\n                  :purpose (l2 / land-01)\n                  :poss a)\n            :location (a2 / airport\n                  :ARG1-of (p2 / popular-02))))",
      "# ::snt  They are also facing a fine in excess of $ 38,000 for every flight that 's late . \n(f / face-01\n      :ARG0 (t / they)\n      :ARG1 (f2 / fine-01\n            :ARG1 (ii / in-excess-of\n                  :op1 (m / monetary-quantity\n                        :quant 38000\n                        :unit (d / dollar)))\n            :ARG3 (f3 / fly-01\n                  :mod (e / every)\n                  :ARG1-of (l / late-02)))\n      :mod (a / also))",
      "# ::snt  Qantas blamed air congestion at Heathrow and Dubai airports . \n(b / blame-01\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Qantas\"))\n      :ARG1 (c2 / congest-01\n            :ARG1 (a / air)\n            :location (a2 / and\n                  :op1 (a3 / airport\n                        :name (n2 / name\n                              :op1 \"Heathrow\"))\n                  :op2 (a4 / airport\n                        :name (n3 / name\n                              :op1 \"Dubai\")))))"
    ],
    "tree": [
      "(s / slip-01\n   :ARG1 (r / rate-01\n            :ARG1 (c / company\n                     :name (n / name\n                              :op1 \"Qantas\"))\n            :ARG3 (o / on-time)))",
      "(s / slip-01\n   :ARG4 (r2 / rank-01\n             :ARG2 75\n             :ARG1 (c / company :name (n / name :op1 \"Qantas\"))\n             :ARG5 (a / airline\n                      :quant 80\n                      :ARG0-of (u / use-01\n                                  :ARG1 (a2 / airport\n                                            :name (n2 / name\n                                                      :op1 \"Heathrow\"))))))",
      "(r / rate-01\n   :ARG1 (c / company\n            :name (n / name\n                     :op1 \"Qantas\"))\n   :ARG3 (o / on-time))",
      "(r2 / rank-01\n    :ARG2 75\n    :ARG1 (c / company :name (n / name :op1 \"Qantas\"))\n    :ARG5 (a / airline\n             :quant 80\n             :ARG0-of (u / use-01\n                         :ARG1 (a2 / airport\n                                   :name (n2 / name\n                                             :op1 \"Heathrow\")))))",
      "(s / slip-01\n   :ARG1 (r / rate-01))",
      "(r / rate-01\n   :ARG1 (c / company :name (n / name :op1 \"Qantas\")))",
      "(r2 / rank-01\n    :ARG2 75\n    :ARG1 (c / company :name (n / name :op1 \"Qantas\"))\n    :ARG5 (a / airline))",
      "(u / use-01\n   :ARG1 (a2 / airport :name (n2 / name :op1 \"Heathrow\")))",
      "(s / slip-01\n   :ARG1 (r / rate-01))",
      "(r / rate-01\n   :ARG1 (c / company :name (n / name :op1 \"Qantas\")))",
      "(r2 / rank-01\n    :ARG2 75)",
      "(r2 / rank-01\n    :ARG1 (c / company :name (n / name :op1 \"Qantas\")))",
      "(r2 / rank-01\n    :ARG5 (a / airline))",
      "(u / use-01\n   :ARG1 (a2 / airport :name (n2 / name :op1 \"Heathrow\")))",
      "(s / slip-01\n   :ARG1 (r / rate-01\n            :ARG1 (c / company\n                     :name (n / name\n                              :op1 \"Qantas\"))\n            :ARG3 (o / on-time))\n   :ARG4 (r2 / rank-01\n             :ARG2 75\n             :ARG1 c\n             :ARG5 (a / airline\n                      :quant 80\n                      :ARG0 (u / use-01\n                               :ARG1 (a2 / airport\n                                         :name (n2 / name\n                                                   :op1 \"Heathrow\"))))))",
      "(s / slip-01)",
      "(p / possible-01\n   :ARG1 (l / loose-02\n            :ARG0 (a / airline)\n            :ARG1 (s / strip\n                     :quant 8\n                     :purpose (l2 / land-01)\n                     :poss a)\n            :location (a2 / airport\n                          :ARG1-of (p2 / popular-02))))",
      "(l / loose-02\n   :ARG0 (a / airline)\n   :ARG1 (s / strip\n            :quant 8\n            :purpose (l2 / land-01)\n            :poss a)\n   :location (a2 / airport\n                 :ARG1-of (p2 / popular-02)))",
      "(p / possible-01\n   :ARG1 (l / loose-02))",
      "(l / loose-02\n   :ARG0 (a / airline))",
      "(l2 / land-01)",
      "(p2 / popular-02)",
      "(p / possible-01\n   :ARG1 (l / loose-02))",
      "(l / loose-02\n   :ARG0 (a / airline))",
      "(p / possible-01\n   :ARG1 (l / loose-02\n            :ARG0 (a / airline)\n            :ARG1 (s / strip\n                     :quant 8\n                     :poss a)))",
      "(p / possible-01)",
      "(f / face-01\n   :ARG0 (t / they))",
      "(f / face-01\n   :ARG1 (f2 / fine-01\n             :ARG1 (ii / in-excess-of\n                       :op1 (m / monetary-quantity\n                               :quant 38000\n                               :unit (d / dollar)))\n             :ARG3 (f3 / fly-01\n                       :mod (e / every)\n                       :ARG1-of (l / late-02))))",
      "(f / face-01\n   :mod (a / also))",
      "(f2 / fine-01\n    :ARG1 (ii / in-excess-of\n              :op1 (m / monetary-quantity\n                      :quant 38000\n                      :unit (d / dollar)))\n    :ARG3 (f3 / fly-01\n              :mod (e / every)\n              :ARG1-of (l / late-02)))",
      "(f / face-01\n   :ARG0 (t / they))",
      "(f2 / fine-01\n    :ARG1 (ii / in-excess-of))",
      "(f3 / fly-01\n    :mod (e / every))",
      "(l / late-02)",
      "(f / face-01\n   :ARG0 (t / they))",
      "(f2 / fine-01\n    :ARG1 (ii / in-excess-of))",
      "(f3 / fly-01\n    :mod (e / every))",
      "(f / face-01\n   :ARG0 (t / they)\n   :ARG1 (f2 / fine-01\n             :ARG1 (ii / in-excess-of\n                       :op1 (m / monetary-quantity\n                               :quant 38000\n                               :unit (d / dollar)))\n             :ARG3 (f3 / fly-01\n                       :mod (e / every)\n                       :ARG1 (l / late-02)))\n   :mod (a / also))",
      "(f / face-01\n   :mod (a / also))",
      "(b / blame-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\")))",
      "(b / blame-01\n   :ARG1 (c2 / congest-01\n             :ARG1 (a / air)\n             :location (a2 / and\n                           :op1 (a3 / airport\n                                    :name (n2 / name\n                                              :op1 \"Heathrow\"))\n                           :op2 (a4 / airport\n                                    :name (n3 / name\n                                              :op1 \"Dubai\")))))",
      "(c / company\n   :name (n / name\n            :op1 \"Qantas\"))",
      "(c2 / congest-01\n    :ARG1 (a / air)\n    :location (a2 / and\n                  :op1 (a3 / airport\n                           :name (n2 / name\n                                     :op1 \"Heathrow\"))\n                  :op2 (a4 / airport\n                           :name (n3 / name\n                                     :op1 \"Dubai\"))))",
      "(b / blame-01\n   :ARG0 (c / company :name (n / name :op1 \"Qantas\")))",
      "(c2 / congest-01\n    :ARG1 (a / air))",
      "(b / blame-01\n   :ARG0 (c / company :name (n / name :op1 \"Qantas\")))",
      "(c2 / congest-01\n    :ARG1 (a / air))",
      "(b / blame-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\"))\n   :ARG1 (c2 / congest-01\n             :ARG1 (a / air)\n             :location (a3 / airport\n                           :name (n2 / name\n                                     :op1 \"Heathrow\"))))",
      "(b / blame-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\"))\n   :ARG1 (c2 / congest-01\n             :ARG1 (a / air)\n             :location (a4 / airport\n                           :name (n3 / name\n                                     :op1 \"Dubai\"))))",
      "(b / blame-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Qantas\"))\n   :ARG1 (c2 / congest-01\n             :ARG1 (a / air)))",
      "(b / blame-01)"
    ],
    "smus": [
      "Qantas's on-time rating slipped.",
      "Slipped to 75th among 80 airlines using Heathrow.",
      "Qantas is rated on time.",
      "Qantas ranks 75th among 80 airlines using Heathrow.",
      "Slipped ratings.",
      "Qantas Ratings",
      "Qantas ranks 75th among airlines.",
      "Using Heathrow.",
      "Slipped ratings.",
      "Qantas Ratings",
      "75",
      "Qantas ranks",
      "Ranging among airlines",
      "Using Heathrow.",
      "Qantas's on-time rating slipped to 75th out of 80 airlines using Heathrow.",
      "Slipped.",
      "The airline may loose eight of its landing strips at the popular airport.",
      "At a popular airport, the airline will loose eight of its landing strips.",
      "loose.",
      "The airline will loose.",
      "Landing.",
      "Popular.",
      "loose.",
      "The airline will loose.",
      "The airline can loose its 8 strips.",
      "Maybe.",
      "They are facing.",
      "Faced with a $38,000 in excess fine for every late flight.",
      "Also facing.",
      "Every late flight that is in excess of $38,000 is fined.",
      "They are facing.",
      "In excess is fine.",
      "Every flight.",
      "Late.",
      "They are facing.",
      "In excess is fine.",
      "Every flight.",
      "They are also facing a $38k fine for every late flight.",
      "Also facing.",
      "Qantas blamed.",
      "Blamed air congestion at Heathrow and Dubai.",
      "Qantas",
      "There was air congest at Heathrow and Dubai.",
      "Qantas blamed.",
      "Air congest.",
      "Qantas blamed.",
      "Air congest.",
      "Qantas blamed air congestion at Heathrow.",
      "Qantas blamed air congestion in Dubai.",
      "Qantas blamed air congestion.",
      "Blamed."
    ]
  },
  {
    "instance_id": "realsumm-94",
    "summary": "<t> Christopher Starrs was spared jail in an ' act of mercy ' by judge in January . </t> <t> But senior judge has now said his colleague took ' his eye off the ball ' . </t> <t> Nicholas Cooke QC said wheelchair - bound Starrs should have been jailed . </t> <t> But added Starrs should thank his lucky stars as sentence allowed to stand . </t>",
    "summary_trees": [
      "# ::snt  Christopher Starrs was spared jail in an ' act of mercy ' by judge in January . \n(s / spare-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG3 (j / judge-01)))\n      :ARG1 (p2 / person\n            :name (n / name\n                  :op1 \"Christopher\"\n                  :op2 \"Starrs\"))\n      :ARG2 (j2 / jail)\n      :manner (a / act-02\n            :ARG0 p\n            :ARG1 (m / mercy))\n      :time (d / date-entity\n            :month 1))",
      "# ::snt  But senior judge has now said his colleague took ' his eye off the ball ' . \n(c / contrast-01\n      :ARG2 (s / say-01\n            :ARG0 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG3 (j / judge-01)\n                        :mod (s2 / senior)))\n            :ARG1 (t / take-01\n                  :ARG0 (p2 / person\n                        :ARG0-of (h2 / have-rel-role-91\n                              :ARG1 p\n                              :ARG2 (c2 / colleague)))\n                  :ARG1 (e / eye\n                        :direction (o / off\n                              :op1 (b / ball))))\n            :time (n / now)))",
      "# ::snt  Nicholas Cooke QC said wheelchair - bound Starrs should have been jailed . \n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Nicholas\"\n                  :op2 \"Cooke\"\n                  :op3 \"Q QC\"))\n      :ARG1 (r / recommend-01\n            :ARG1 (j / jail-01\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Starrs\")\n                        :ARG1-of (b / bind-01\n                              :ARG2 (w / wheelchair))))))",
      "# ::snt  But added Starrs should thank his lucky stars as sentence allowed to stand . \n(c / contrast-01\n      :ARG2 (a / add-01\n            :ARG1 (r / recommend-01\n                  :ARG1 (t / thank-01\n                        :ARG0 (p / person\n                              :name (n / name\n                                    :op1 \"Starrs\"))\n                        :ARG1 (s / star\n                              :mod (l / lucky)\n                              :poss p)\n                        :time (a2 / allow-01\n                              :ARG1 (s2 / stand-04\n                                    :ARG1 (s3 / sentence-01)))))))"
    ],
    "tree": [
      "(s / spare-01\n   :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                        :ARG3 (j / judge-01))))",
      "(s / spare-01\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Christopher\"\n                      :op2 \"Starrs\")))",
      "(s / spare-01\n   :ARG2 (j2 / jail))",
      "(s / spare-01\n   :manner (a / act-02\n              :ARG0 (p / person)\n              :ARG1 (m / mercy)))",
      "(s / spare-01\n   :time (d / date-entity\n            :month 1))",
      "(p / person\n   :ARG0-of (h / have-org-role-91\n               :ARG3 (j / judge-01)))",
      "(p2 / person\n    :name (n / name\n             :op1 \"Christopher\"\n             :op2 \"Starrs\"))",
      "(a / act-02\n   :ARG0 (p / person)\n   :ARG1 (m / mercy))",
      "(s / spare-01\n   :ARG0 (p / person))",
      "(j / judge-01)",
      "(a / act-02\n   :ARG0 (p / person)\n   :ARG1 (m / mercy))",
      "(s / spare-01\n   :ARG0 (p / person))",
      "(a / act-02\n   :ARG0 (p / person))",
      "(a / act-02\n   :ARG1 (m / mercy))",
      "(s / spare-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG3 (j / judge-01)))\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Christopher\"\n                      :op2 \"Starrs\"))\n   :ARG2 (j2 / jail)\n   :manner (a / act-02\n              :ARG0 p\n              :ARG1 (m / mercy)))",
      "(s / spare-01\n   :manner (a / act-02)\n   :time (d / date-entity\n            :month 1))",
      "(c / contrast-01\n   :ARG2 (s / say-01\n            :ARG0 (p / person\n                     :ARG0-of (h / have-org-role-91\n                                 :ARG3 (j / judge-01)\n                                 :mod (s2 / senior)))\n            :ARG1 (t / take-01\n                     :ARG0 (p2 / person\n                               :ARG0-of (h2 / have-rel-role-91\n                                            :ARG1 p\n                                            :ARG2 (c2 / colleague)))\n                     :ARG1 (e / eye\n                              :direction (o / off\n                                            :op1 (b / ball))))\n            :time (n / now)))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                        :ARG3 (j / judge-01)\n                        :mod (s2 / senior)))\n   :ARG1 (t / take-01\n            :ARG0 (p2 / person\n                      :ARG0-of (h2 / have-rel-role-91\n                                   :ARG1 p\n                                   :ARG2 (c2 / colleague)))\n            :ARG1 (e / eye\n                     :direction (o / off\n                                   :op1 (b / ball))))\n   :time (n / now))",
      "(c / contrast-01\n   :ARG2 (s / say-01))",
      "(s / say-01\n   :ARG0 (p / person))",
      "(j / judge-01)",
      "(t / take-01\n   :ARG0 (p2 / person))",
      "(c / contrast-01\n   :ARG2 (s / say-01))",
      "(s / say-01\n   :ARG0 (p / person))",
      "(t / take-01\n   :ARG0 (p2 / person))",
      "(c / contrast-01\n   :ARG2 (s / say-01\n            :ARG0 (p / person\n                     :ARG0 (h / have-org-role-91\n                              :ARG3 (j / judge-01)\n                              :mod (s2 / senior)))\n            :ARG1 (t / take-01\n                     :ARG0 (p2 / person\n                               :ARG0 (h2 / have-rel-role-91\n                                         :ARG1 p\n                                         :ARG2 (c2 / colleague)))\n                     :ARG1 (e / eye\n                              :direction (o / off\n                                            :op1 (b / ball))))))",
      "(c / contrast-01)",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nicholas\"\n                     :op2 \"Cooke\"\n                     :op3 \"Q QC\")))",
      "(s / say-01\n   :ARG1 (r / recommend-01\n            :ARG1 (j / jail-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Starrs\")\n                               :ARG1-of (b / bind-01\n                                           :ARG2 (w / wheelchair))))))",
      "(p / person\n   :name (n / name\n            :op1 \"Nicholas\"\n            :op2 \"Cooke\"\n            :op3 \"Q QC\"))",
      "(r / recommend-01\n   :ARG1 (j / jail-01\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Starrs\")\n                      :ARG1-of (b / bind-01\n                                  :ARG2 (w / wheelchair)))))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Nicholas\" :op2 \"Cooke\" :op3 \"Q)))",
      "(r / recommend-01\n   :ARG1 (j / jail-01))",
      "(j / jail-01\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Starrs\"))))",
      "(b / bind-01\n   :ARG2 (w / wheelchair))",
      "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Nicholas\" :op2 \"Cooke\" :op3 \"Q)))",
      "(r / recommend-01\n   :ARG1 (j / jail-01))",
      "(j / jail-01\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Starrs\"))))",
      "(b / bind-01\n   :ARG2 (w / wheelchair))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Nicholas\"\n                     :op2 \"Cooke\"\n                     :op3 \"Q QC\"))\n   :ARG1 (r / recommend-01\n            :ARG1 (j / jail-01\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Starrs\")\n                               :ARG1 (b / bind-01\n                                        :ARG2 (w / wheelchair))))))",
      "(s / say-01)",
      "(c / contrast-01\n   :ARG2 (a / add-01\n            :ARG1 (r / recommend-01\n                     :ARG1 (t / thank-01\n                              :ARG0 (p / person\n                                       :name (n / name\n                                                :op1 \"Starrs\"))\n                              :ARG1 (s / star\n                                       :mod (l / lucky)\n                                       :poss p)\n                              :time (a2 / allow-01\n                                        :ARG1 (s2 / stand-04\n                                                  :ARG1 (s3 / sentence-01)))))))",
      "(a / add-01\n   :ARG1 (r / recommend-01\n            :ARG1 (t / thank-01\n                     :ARG0 (p / person\n                              :name (n / name\n                                       :op1 \"Starrs\"))\n                     :ARG1 (s / star\n                              :mod (l / lucky)\n                              :poss p)\n                     :time (a2 / allow-01\n                               :ARG1 (s2 / stand-04\n                                         :ARG1 (s3 / sentence-01))))))",
      "(c / contrast-01\n   :ARG2 (a / add-01))",
      "(a / add-01\n   :ARG1 (r / recommend-01))",
      "(r / recommend-01\n   :ARG1 (t / thank-01))",
      "(t / thank-01\n   :ARG0 (p / person :name (n / name :op1 \"Starrs\")))",
      "(a2 / allow-01\n    :ARG1 (s2 / stand-04))",
      "(s2 / stand-04\n    :ARG1 (s3 / sentence-01))",
      "(s3 / sentence-01)",
      "(c / contrast-01\n   :ARG2 (a / add-01))",
      "(a / add-01\n   :ARG1 (r / recommend-01))",
      "(r / recommend-01\n   :ARG1 (t / thank-01))",
      "(t / thank-01\n   :ARG0 (p / person :name (n / name :op1 \"Starrs\")))",
      "(a2 / allow-01\n    :ARG1 (s2 / stand-04))",
      "(s2 / stand-04\n    :ARG1 (s3 / sentence-01))",
      "(c / contrast-01\n   :ARG2 (a / add-01\n            :ARG1 (r / recommend-01\n                     :ARG1 (t / thank-01\n                              :ARG0 (p / person\n                                       :name (n / name\n                                                :op1 \"Starrs\"))\n                              :ARG1 (s / star\n                                       :mod (l / lucky)\n                                       :poss p)))))",
      "(c / contrast-01)"
    ],
    "smus": [
      "The Judge was spared.",
      "-Christopher Starrs is spared.",
      "'Spent in jail'",
      "The mercy act of the people is to be spared.",
      "Spared in January.",
      "Judge.",
      "Christopher Starrs",
      "The mercy act of the people.",
      "People are being spared.",
      "Judgement.",
      "The mercy act of the people.",
      "People are being spared.",
      "The act of the people.",
      "Mercy Act.",
      "The Judge has spared Christopher Starrs from jail in an act of mercy.",
      "In January, the action was spared.",
      "But now a senior judge has said his colleague took an eye off the ball.",
      "A senior judge has now said his colleague took an eye off the ball.",
      "But said.",
      "People have said --",
      "Judgment.",
      "People took.",
      "But said.",
      "People have said --",
      "People took.",
      "But a senior judge has said his colleague took an eye off the ball.",
      "But...",
      "\"It's going to be a long time,\" said Nicholas Cooke Q QC.",
      "Starrs, who was bound in a wheelchair, should have been jailed, the statement said.",
      "Nicholas Cooke Q QC",
      "Starrs, who was bound in a wheelchair, should have been jailed.",
      "\"Nicholas Cooke Q said --",
      "Should have been jailed.",
      "Starrs was jailed.",
      "wheelchair bound",
      "\"Nicholas Cooke Q said --",
      "Should have been jailed.",
      "Starrs was jailed.",
      "wheelchair bound",
      "Nicholas Cooke Q QC said Starrs should have been jailed for being bound by a wheelchair.",
      "said.",
      "But it was added that Starrs should thank his lucky stars when the sentence is allowed to stand.",
      "Starrs should thank his lucky stars when the sentence is allowed to stand, he was added.",
      "But added...",
      "Added:",
      "Thank you.",
      "Thank you Starrs.",
      "Stand allowed.",
      "stand trial",
      "sentence",
      "But added...",
      "Added:",
      "Thank you.",
      "Thank you Starrs.",
      "Stand allowed.",
      "stand trial",
      "But it was added that Starrs should thank his lucky stars.",
      "But..."
    ]
  },
  {
    "instance_id": "realsumm-95",
    "summary": "<t> Real Madrid thrashed Granada 9 - 1 in La Liga at the weekend . </t> <t> Cristiano Ronaldo scored five to take his league tally to 36 for the season . </t> <t> Real travel to Rayo Vallecano in a Madrid derby on Wednesday night . </t> <t> Juventus won 3 - 0 at Fiorentina to reach the Coppa Italia final on Tuesday . </t>",
    "summary_trees": [
      "# ::snt  Real Madrid thrashed Granada 9 - 1 in La Liga at the weekend . \n(t / thrash-01\n      :ARG0 (t2 / team\n            :name (n / name\n                  :op1 \"Real\"\n                  :op2 \"Madrid\"))\n      :ARG1 (t3 / team\n            :name (n2 / name\n                  :op1 \"Granada\"))\n      :time (w / weekend)\n      :quant (s / score-entity\n            :op1 9\n            :op2 1)\n      :location (l / league\n            :name (n3 / name\n                  :op1 \"La\"\n                  :op2 \"Liga\")))",
      "# ::snt  Cristiano Ronaldo scored five to take his league tally to 36 for the season . \n(s / score-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Cristiano\"\n                  :op2 \"Ronaldo\"))\n      :ARG1 5\n      :ARG0-of (t / take-01\n            :ARG1 (t2 / tally-01\n                  :ARG0 p\n                  :ARG1 (l / league))\n            :ARG3 s\n            :ARG2 36\n            :ARG1 p\n            :ARG3 l\n            :time (s2 / season)))",
      "# ::snt  Real travel to Rayo Vallecano in a Madrid derby on Wednesday night . \n(t / travel-01\n      :ARG0 (t2 / team\n            :name (n / name\n                  :op1 \"Real\"))\n      :ARG4 (t3 / team\n            :name (n2 / name\n                  :op1 \"Rayo\"\n                  :op2 \"Vallecano\"))\n      :subevent-of (d / derby\n            :mod (c / city\n                  :name (n3 / name\n                        :op1 \"Madrid\")))\n      :time (d2 / date-entity\n            :weekday (w / wednesday)\n            :dayperiod (n4 / night)))",
      "# ::snt  Juventus won 3 - 0 at Fiorentina to reach the Coppa Italia final on Tuesday . \n(w / win-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Juventus\"))\n      :ARG2 (t2 / team\n            :name (n2 / name\n                  :op1 \"Fiorentina\"))\n      :ARG4 (s / score-entity\n            :op1 3\n            :op2 0)\n      :purpose (r / reach-01\n            :ARG0 t\n            :ARG1 (f / final\n                  :subevent-of (g / game\n                        :name (n3 / name\n                              :op1 \"Coppa\"\n                              :op2 \"Italia\")))\n            :time (d / date-entity\n                  :weekday (t3 / tuesday))))"
    ],
    "tree": [
      "(t / thrash-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"\n                      :op2 \"Madrid\")))",
      "(t / thrash-01\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Granada\")))",
      "(t / thrash-01\n   :time (w / weekend))",
      "(t / thrash-01\n   :quant (s / score-entity\n             :op1 9\n             :op2 1))",
      "(t / thrash-01\n   :location (l / league\n                :name (n3 / name\n                          :op1 \"La\"\n                          :op2 \"Liga\")))",
      "(t2 / team\n    :name (n / name\n             :op1 \"Real\"\n             :op2 \"Madrid\"))",
      "(t3 / team\n    :name (n2 / name\n              :op1 \"Granada\"))",
      "(s / score-entity\n   :op1 9\n   :op2 1)",
      "(l / league\n   :name (n3 / name\n             :op1 \"La\"\n             :op2 \"Liga\"))",
      "(t / thrash-01\n   :ARG0 (t2 / team :name (n / name :op1 \"Real\" :op2 \"Madrid\")))",
      "(t / thrash-01\n   :ARG0 (t2 / team :name (n / name :op1 \"Real\" :op2 \"Madrid\")))",
      "(t / thrash-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"\n                      :op2 \"Madrid\"))\n   :ARG1 (t3 / team\n             :name (n2 / name\n                       :op1 \"Granada\"))\n   :quant (s / score-entity\n             :op1 9\n             :op2 1))",
      "(t / thrash-01\n   :time (w / weekend)\n   :quant (s / score-entity\n             :op1 9\n             :op2 1)\n   :location (l / league\n                :name (n3 / name\n                          :op1 \"La\"\n                          :op2 \"Liga\")))",
      "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cristiano\"\n                     :op2 \"Ronaldo\")))",
      "(s / score-01\n   :ARG1 5)",
      "(s / score-01\n   :ARG0-of (t / take-01\n               :ARG1 (t2 / tally-01\n                         :ARG0 (p / person :name (n / name :op1 \"Cristiano\" :op2 \"Ronaldo\"))\n                         :ARG1 (l / league))))",
      "(s / score-01\n   :ARG3-of (t :ARG2 36\n               :ARG1 p\n               :ARG3 l\n               :time (s2 / season)))",
      "(p / person\n   :name (n / name\n            :op1 \"Cristiano\"\n            :op2 \"Ronaldo\"))",
      "(t / take-01\n   :ARG1 (t2 / tally-01\n             :ARG0 (p / person :name (n / name :op1 \"Cristiano\" :op2 \"Ronaldo\"))\n             :ARG1 (l / league)))",
      "(t :ARG2 36\n   :ARG1 (p / person :name (n / name :op1 \"Cristiano\" :op2 \"Ronaldo\"))\n   :ARG3 (l / league)\n   :time (s2 / season))",
      "(s / score-01\n   :ARG0 (p / person :name (n / name :op1 \"Cristiano\" :op2 \"Ronaldo\")))",
      "(t / take-01\n   :ARG1 (t2 / tally-01))",
      "(t2 / tally-01\n    :ARG0 (p / person :name (n / name :op1 \"Cristiano\" :op2 \"Ronaldo\"))\n    :ARG1 (l / league))",
      "(s / score-01\n   :ARG0 (p / person :name (n / name :op1 \"Cristiano\" :op2 \"Ronaldo\")))",
      "(t / take-01\n   :ARG1 (t2 / tally-01))",
      "(t2 / tally-01\n    :ARG0 (p / person :name (n / name :op1 \"Cristiano\" :op2 \"Ronaldo\")))",
      "(t2 / tally-01\n    :ARG1 (l / league))",
      "(s / score-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Cristiano\"\n                     :op2 \"Ronaldo\"))\n   :ARG1 5\n   :ARG0 (t / take-01\n            :ARG1 (t2 / tally-01\n                      :ARG0 p\n                      :ARG1 (l / league))\n            :ARG3 s\n            :ARG2 36\n            :ARG1 p\n            :ARG3 l))",
      "(s / score-01)",
      "(t / travel-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\")))",
      "(t / travel-01\n   :ARG4 (t3 / team\n             :name (n2 / name\n                       :op1 \"Rayo\"\n                       :op2 \"Vallecano\")))",
      "(t / travel-01\n   :subevent-of (d / derby\n                   :mod (c / city\n                           :name (n3 / name\n                                     :op1 \"Madrid\"))))",
      "(t / travel-01\n   :time (d2 / date-entity\n             :weekday (w / wednesday)\n             :dayperiod (n4 / night)))",
      "(t2 / team\n    :name (n / name\n             :op1 \"Real\"))",
      "(t3 / team\n    :name (n2 / name\n              :op1 \"Rayo\"\n              :op2 \"Vallecano\"))",
      "(d / derby\n   :mod (c / city\n           :name (n3 / name\n                     :op1 \"Madrid\")))",
      "(d2 / date-entity\n    :weekday (w / wednesday)\n    :dayperiod (n4 / night))",
      "(t / travel-01\n   :ARG0 (t2 / team :name (n / name :op1 \"Real\")))",
      "(t / travel-01\n   :ARG0 (t2 / team :name (n / name :op1 \"Real\")))",
      "(t / travel-01\n   :ARG0 (t2 / team\n             :name (n / name\n                      :op1 \"Real\"))\n   :ARG4 (t3 / team\n             :name (n2 / name\n                       :op1 \"Rayo\"\n                       :op2 \"Vallecano\"))\n   :subevent (d / derby\n                :mod (c / city\n                        :name (n3 / name\n                                  :op1 \"Madrid\"))))",
      "(t / travel-01\n   :subevent (d / derby\n                :mod (c / city\n                        :name (n3 / name\n                                  :op1 \"Madrid\")))\n   :time (d2 / date-entity\n             :weekday (w / wednesday)\n             :dayperiod (n4 / night)))",
      "(w / win-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Juventus\")))",
      "(w / win-01\n   :ARG2 (t2 / team\n             :name (n2 / name\n                       :op1 \"Fiorentina\")))",
      "(w / win-01\n   :ARG4 (s / score-entity\n            :op1 3\n            :op2 0))",
      "(w / win-01\n   :purpose (r / reach-01\n               :ARG0 (t / team :name (n / name :op1 \"Juventus\"))\n               :ARG1 (f / final\n                        :subevent-of (g / game\n                                        :name (n3 / name\n                                                  :op1 \"Coppa\"\n                                                  :op2 \"Italia\")))\n               :time (d / date-entity\n                        :weekday (t3 / tuesday))))",
      "(t / team\n   :name (n / name\n            :op1 \"Juventus\"))",
      "(t2 / team\n    :name (n2 / name\n              :op1 \"Fiorentina\"))",
      "(s / score-entity\n   :op1 3\n   :op2 0)",
      "(r / reach-01\n   :ARG0 (t / team :name (n / name :op1 \"Juventus\"))\n   :ARG1 (f / final\n            :subevent-of (g / game\n                            :name (n3 / name\n                                      :op1 \"Coppa\"\n                                      :op2 \"Italia\")))\n   :time (d / date-entity\n            :weekday (t3 / tuesday)))",
      "(w / win-01\n   :ARG0 (t / team :name (n / name :op1 \"Juventus\")))",
      "(r / reach-01\n   :ARG0 (t / team :name (n / name :op1 \"Juventus\"))\n   :ARG1 (f / final))",
      "(w / win-01\n   :ARG0 (t / team :name (n / name :op1 \"Juventus\")))",
      "(r / reach-01\n   :ARG0 (t / team :name (n / name :op1 \"Juventus\")))",
      "(r / reach-01\n   :ARG1 (f / final))",
      "(w / win-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Juventus\"))\n   :ARG2 (t2 / team\n             :name (n2 / name\n                       :op1 \"Fiorentina\"))\n   :ARG4 (s / score-entity\n            :op1 3\n            :op2 0))",
      "(w / win-01\n   :purpose (r / reach-01))"
    ],
    "smus": [
      "Real Madrid thrashed",
      "Granada thrashed",
      "Thrashing at the weekend.",
      "Thrashing 9-1.",
      "Thrashing in La Liga.",
      "Real Madrid",
      "Granada",
      "9-1",
      "La Liga",
      "Real Madrid thrashed",
      "Real Madrid thrashed",
      "Real Madrid thrashed Granada 9-1.",
      "La Liga thrashed by 9-1 at the weekend.",
      "Cristiano Ronaldo scored.",
      "5",
      "The scores took Cristiano Ronaldo's league tally to a tally.",
      "The season-high scored 36 points.",
      "Cristina Ronaldo",
      "Take Cristiano Ronaldo's league tally.",
      "Cristiano Ronaldo is 36 in the league this season.",
      "Cristiano Ronaldo scored.",
      "Take the tally.",
      "Cristiano Ronaldo has a league tally.",
      "Cristiano Ronaldo scored.",
      "Take the tally.",
      "Cristina Ronaldo's tally:",
      "League tally.",
      "Cristiano Ronaldo scored five to take his league tally to 36.",
      "Scored.",
      "Real travels",
      "Travel to Rayo Vallecano",
      "Travel to the Madrid derby",
      "Travel Wednesday night.",
      "Real.",
      "Rayo Vallecano",
      "Madrid derby",
      "Wednesday night",
      "Real travels",
      "Real travels",
      "Real will travel to Rayo Vallecano in the Madrid derby.",
      "Madrid derby travels Wednesday night.",
      "Juventus won 1-0.",
      "-Fiorentina won",
      "3-1",
      "Juventus won 1-0 to reach the Coppa Italia final on Tuesday.",
      "Juventus",
      "Fiorentina",
      "3 - 0",
      "Juventus reached the final of the Coppa Italia game on Tuesday.",
      "Juventus won 1-0.",
      "Juventus reach the final.",
      "Juventus won 1-0.",
      "Juventus reach the quarter-finals.",
      "The final is reached.",
      "Juventus won 3-1 against Fiorentina.",
      "Reach zero, won."
    ]
  },
  {
    "instance_id": "realsumm-96",
    "summary": "<t> Kevin Pietersen was sacked by England 14 months ago after Ashes defeat . </t> <t> Batsman scored 170 on his county cricket return for Surrey last week . </t> <t> Pietersen wants to make a sensational return to the England side this year . </t> <t> But Andrew Flintoff thinks time is running out for him to resurrect career . </t>",
    "summary_trees": [
      "# ::snt  Kevin Pietersen was sacked by England 14 months ago after Ashes defeat . \n(s / sack-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"England\"))\n      :ARG1 (p / person\n            :name (n2 / name\n                  :op1 \"Kevin\"\n                  :op2 \"Pietersen\"))\n      :time (b / before\n            :op1 (n3 / now)\n            :quant (t2 / temporal-quantity\n                  :quant 14\n                  :unit (m / month)))\n      :time (a / after\n            :op1 (d / defeat-01\n                  :ARG0 t\n                  :ARG2 (g / game\n                        :name (n4 / name\n                              :op1 \"Ashes\")))))",
      "# ::snt  Batsman scored 170 on his county cricket return for Surrey last week . \n(s / score-01\n      :ARG0 (b / batsman)\n      :ARG1 170\n      :time (w / week\n            :mod (l / last))\n      :time (r / return-01\n            :ARG1 b\n            :ARG4 (c / county\n                  :name (n / name\n                        :op1 \"Surrey\"))\n            :mod (c2 / cricket)))",
      "# ::snt  Pietersen wants to make a sensational return to the England side this year . \n(w / want-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Pietersen\"))\n      :ARG1 (r / return-01\n            :ARG1 p\n            :ARG4 (s / side\n                  :mod (c / country\n                        :name (n2 / name\n                              :op1 \"England\")))\n            :mod (s2 / sensational)\n            :time (y / year\n                  :mod (t / this))))",
      "# ::snt  But Andrew Flintoff thinks time is running out for him to resurrect career . \n(c / contrast-01\n      :ARG2 (t / think-01\n            :ARG0 (p / person\n                  :name (n / name\n                        :op1 \"Andrew\"\n                        :op2 \"Flintoff\"))\n            :ARG1 (r / run-out-05\n                  :ARG1 (t2 / time)\n                  :ARG2 (r2 / resurrect-01\n                        :ARG0 p\n                        :ARG1 (c2 / career\n                              :poss p)))))"
    ],
    "tree": [
      "(s / sack-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"England\")))",
      "(s / sack-01\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Kevin\"\n                      :op2 \"Pietersen\")))",
      "(s / sack-01\n   :time (b / before\n            :op1 (n3 / now)\n            :quant (t2 / temporal-quantity\n                       :quant 14\n                       :unit (m / month))))",
      "(s / sack-01\n   :time (a / after\n            :op1 (d / defeat-01\n                    :ARG0 (t / team :name (n / name :op1 \"England\"))\n                    :ARG2 (g / game\n                             :name (n4 / name\n                                       :op1 \"Ashes\")))))",
      "(t / team\n   :name (n / name\n            :op1 \"England\"))",
      "(p / person\n   :name (n2 / name\n             :op1 \"Kevin\"\n             :op2 \"Pietersen\"))",
      "(b / before\n   :op1 (n3 / now)\n   :quant (t2 / temporal-quantity\n              :quant 14\n              :unit (m / month)))",
      "(a / after\n   :op1 (d / defeat-01\n           :ARG0 (t / team :name (n / name :op1 \"England\"))\n           :ARG2 (g / game\n                    :name (n4 / name\n                              :op1 \"Ashes\"))))",
      "(s / sack-01\n   :ARG0 (t / team :name (n / name :op1 \"England\")))",
      "(d / defeat-01\n   :ARG0 (t / team :name (n / name :op1 \"England\"))\n   :ARG2 (g / game :name (n4 / name :op1 \"Ashes\")))",
      "(s / sack-01\n   :ARG0 (t / team :name (n / name :op1 \"England\")))",
      "(d / defeat-01\n   :ARG0 (t / team :name (n / name :op1 \"England\")))",
      "(d / defeat-01\n   :ARG2 (g / game :name (n4 / name :op1 \"Ashes\")))",
      "(s / sack-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"England\"))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Kevin\"\n                      :op2 \"Pietersen\")))",
      "(s / sack-01\n   :time (b / before\n            :op1 (n3 / now)\n            :quant (t2 / temporal-quantity\n                       :quant 14\n                       :unit (m / month)))\n   :time (a / after\n            :op1 (d / defeat-01)))",
      "(s / score-01\n   :ARG0 (b / batsman))",
      "(s / score-01\n   :ARG1 170)",
      "(s / score-01\n   :time (w / week\n            :mod (l / last)))",
      "(s / score-01\n   :time (r / return-01\n            :ARG1 (b / batsman)\n            :ARG4 (c / county\n                     :name (n / name\n                              :op1 \"Surrey\"))\n            :mod (c2 / cricket)))",
      "(w / week\n   :mod (l / last))",
      "(r / return-01\n   :ARG1 (b / batsman)\n   :ARG4 (c / county\n            :name (n / name\n                     :op1 \"Surrey\"))\n   :mod (c2 / cricket))",
      "(s / score-01\n   :ARG0 (b / batsman))",
      "(r / return-01\n   :ARG1 (b / batsman)\n   :ARG4 (c / county :name (n / name :op1 \"Surrey\")))",
      "(s / score-01\n   :ARG0 (b / batsman))",
      "(r / return-01\n   :ARG1 (b / batsman))",
      "(r / return-01\n   :ARG4 (c / county :name (n / name :op1 \"Surrey\")))",
      "(s / score-01\n   :ARG0 (b / batsman)\n   :ARG1 170)",
      "(s / score-01\n   :time (w / week\n            :mod (l / last))\n   :time (r / return-01))",
      "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Pietersen\")))",
      "(w / want-01\n   :ARG1 (r / return-01\n            :ARG1 (p / person :name (n / name :op1 \"Pietersen\"))\n            :ARG4 (s / side\n                     :mod (c / country\n                             :name (n2 / name\n                                       :op1 \"England\")))\n            :mod (s2 / sensational)\n            :time (y / year\n                     :mod (t / this))))",
      "(p / person\n   :name (n / name\n            :op1 \"Pietersen\"))",
      "(r / return-01\n   :ARG1 (p / person :name (n / name :op1 \"Pietersen\"))\n   :ARG4 (s / side\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"England\")))\n   :mod (s2 / sensational)\n   :time (y / year\n            :mod (t / this)))",
      "(w / want-01\n   :ARG0 (p / person :name (n / name :op1 \"Pietersen\")))",
      "(r / return-01\n   :ARG1 (p / person :name (n / name :op1 \"Pietersen\"))\n   :ARG4 (s / side))",
      "(w / want-01\n   :ARG0 (p / person :name (n / name :op1 \"Pietersen\")))",
      "(r / return-01\n   :ARG1 (p / person :name (n / name :op1 \"Pietersen\")))",
      "(r / return-01\n   :ARG4 (s / side))",
      "(w / want-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Pietersen\"))\n   :ARG1 (r / return-01\n            :ARG1 p\n            :ARG4 (s / side\n                     :mod (c / country\n                             :name (n2 / name\n                                       :op1 \"England\")))\n            :mod (s2 / sensational)))",
      "(w / want-01)",
      "(c / contrast-01\n   :ARG2 (t / think-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Andrew\"\n                              :op2 \"Flintoff\"))\n            :ARG1 (r / run-out-05\n                     :ARG1 (t2 / time)\n                     :ARG2 (r2 / resurrect-01\n                               :ARG0 p\n                               :ARG1 (c2 / career\n                                         :poss p)))))",
      "(t / think-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andrew\"\n                     :op2 \"Flintoff\"))\n   :ARG1 (r / run-out-05\n            :ARG1 (t2 / time)\n            :ARG2 (r2 / resurrect-01\n                      :ARG0 p\n                      :ARG1 (c2 / career\n                                :poss p))))",
      "(c / contrast-01\n   :ARG2 (t / think-01))",
      "(t / think-01\n   :ARG0 (p / person :name (n / name :op1 \"Andrew\" :op2 \"Flintoff\")))",
      "(r / run-out-05\n   :ARG1 (t2 / time))",
      "(r2 / resurrect-01\n    :ARG0 (p / person :name (n / name :op1 \"Andrew\" :op2 \"Flintoff\"))\n    :ARG1 (c2 / career))",
      "(c / contrast-01\n   :ARG2 (t / think-01))",
      "(t / think-01\n   :ARG0 (p / person :name (n / name :op1 \"Andrew\" :op2 \"Flintoff\")))",
      "(r / run-out-05\n   :ARG1 (t2 / time))",
      "(r2 / resurrect-01\n    :ARG0 (p / person :name (n / name :op1 \"Andrew\" :op2 \"Flintoff\")))",
      "(r2 / resurrect-01\n    :ARG1 (c2 / career))",
      "(c / contrast-01\n   :ARG2 (t / think-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Andrew\"\n                              :op2 \"Flintoff\"))\n            :ARG1 (r / run-out-05\n                     :ARG1 (t2 / time)\n                     :ARG2 (r2 / resurrect-01\n                               :ARG0 p\n                               :ARG1 (c2 / career\n                                         :poss p)))))",
      "(c / contrast-01)"
    ],
    "smus": [
      "England sacked",
      "Kevin Pietersen was sacked.",
      "Sacked 14 months ago.",
      "Sacked after England defeat the Ashes",
      "England",
      "Kevin Pietersen",
      "14 months ago",
      "After England defeat the Ashes",
      "England sacked",
      "England defeat the Ashes 1-0",
      "England sacked",
      "England defeat them",
      "defeat the Ashes",
      "England have sacked Kevin Pietersen.",
      "Sacked 14 months ago after defeat.",
      "The batsman scored.",
      "170",
      "Scored last week.",
      "Scored on the batsman's cricket return to Surrey.",
      "Last week.",
      "The batsman will return to Surrey in cricket.",
      "The batsman scored.",
      "Batsman returns to Surrey.",
      "The batsman scored.",
      "The batsman returned.",
      "Return to Surrey",
      "The batsman scored 170 runs.",
      "Last week, scored on return.",
      "Pietersen wants.",
      "Wants Pietersen to make a sensational return to the English side this year.",
      "Pietersen",
      "Pietersen's return to the English side this year was sensational.",
      "Pietersen wants.",
      "Pietersen's return to the side",
      "Pietersen wants.",
      "Pietersen's return:",
      "Return to side",
      "Pietersen wants a sensational return to the English side.",
      "Wants.",
      "But Andrew Flintoff thinks time is running out to resurrect his career.",
      "Andrew Flintoff thinks time is running out to resurrect his career.",
      "But thinks.",
      "Andrew Flintoff thinks.",
      "Time is running out.",
      "Andrew Flintoff will resurrect his career.",
      "But thinks.",
      "Andrew Flintoff thinks.",
      "Time is running out.",
      "Andrew Flintoff will resurrect.",
      "Resurrect a career.",
      "But Andrew Flintoff thinks time is running out to resurrect his career.",
      "But..."
    ]
  },
  {
    "instance_id": "realsumm-97",
    "summary": "<t> If Carl Froch does n't fight in 2015 I 'm not sure he 'll be back at all . </t> <t> A blockbuster with James DeGale is most likely after Julio Cesar Chavez Jnr defeat - but Anthony Dirrell has made contact . </t> <t> Scott Quigg - Carl Frampton summer fight is dead in the water . </t>",
    "summary_trees": [
      "# ::snt  If Carl Froch does n't fight in 2015 I 'm not sure he 'll be back at all . \n(h / have-condition-91\n      :ARG1 (s / sure-02\n            :polarity -\n            :ARG0 (ii / i)\n            :ARG1 (r / return-01\n                  :ARG1 (p / person\n                        :name (n / name\n                              :op1 \"Carl\"\n                              :op2 \"Froch\"))\n                  :mod (a / at-all)))\n      :ARG2 (f / fight-01\n            :polarity -\n            :ARG0 p\n            :time (d / date-entity\n                  :year 2015)))",
      "# ::snt  A blockbuster with James DeGale is most likely after Julio Cesar Chavez Jnr defeat - but Anthony Dirrell has made contact . \n(l / likely-01\n      :ARG1 (b / blockbuster\n            :mod (p / person\n                  :name (n / name\n                        :op1 \"James\"\n                        :op2 \"DeGale\")))\n      :time (a / after\n            :op1 (d / defeat-01\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Julio\"\n                              :op2 \"Cesar\"\n                              :op3 \"Chavez\"\n                              :op4 \"Jr\"))))\n      :concession (c / contact-01\n            :ARG0 (p3 / person\n                  :name (n3 / name\n                        :op1 \"Anthony\"\n                        :op2 \"Dirrell\")))\n      :ARG2-of (h / have-degree-91\n            :ARG1 b\n            :ARG3 (m / most)))",
      "# ::snt  Scott Quigg - Carl Frampton summer fight is dead in the water . \n(s / say-01\n      :ARG0 (ii / i)\n      :ARG1 (d / die-01\n            :ARG1 (f / fight-01\n                  :ARG0 (p / person\n                        :name (n / name\n                              :op1 \"Scott\"\n                              :op2 \"Quigg\"))\n                  :ARG1 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Carl\"\n                              :op2 \"Frampton\"))\n                  :time (d2 / date-entity\n                        :season (s2 / summer)))\n            :location (w / water))\n      :ARG2 p)"
    ],
    "tree": [
      "(h / have-condition-91\n   :ARG1 (s / sure-02\n            :polarity -\n            :ARG0 (ii / i)\n            :ARG1 (r / return-01\n                     :ARG1 (p / person\n                              :name (n / name\n                                       :op1 \"Carl\"\n                                       :op2 \"Froch\"))\n                     :mod (a / at-all))))",
      "(h / have-condition-91\n   :ARG2 (f / fight-01\n            :polarity -\n            :ARG0 (p / person :name (n / name :op1 \"Carl\" :op2 \"Froch\"))\n            :time (d / date-entity\n                     :year 2015)))",
      "(s / sure-02\n   :polarity -\n   :ARG0 (ii / i)\n   :ARG1 (r / return-01\n            :ARG1 (p / person\n                     :name (n / name\n                              :op1 \"Carl\"\n                              :op2 \"Froch\"))\n            :mod (a / at-all)))",
      "(f / fight-01\n   :polarity -\n   :ARG0 (p / person :name (n / name :op1 \"Carl\" :op2 \"Froch\"))\n   :time (d / date-entity\n            :year 2015))",
      "(s / sure-02\n   :polarity -\n   :ARG0 (ii / i))",
      "(r / return-01\n   :ARG1 (p / person :name (n / name :op1 \"Carl\" :op2 \"Froch\")))",
      "(f / fight-01\n   :polarity -\n   :ARG0 (p / person :name (n / name :op1 \"Carl\" :op2 \"Froch\"))\n   :time (d / date-entity))",
      "(s / sure-02\n   :polarity -)",
      "(s / sure-02\n   :ARG0 (ii / i))",
      "(r / return-01\n   :ARG1 (p / person :name (n / name :op1 \"Carl\" :op2 \"Froch\")))",
      "(f / fight-01\n   :polarity -)",
      "(f / fight-01\n   :ARG0 (p / person :name (n / name :op1 \"Carl\" :op2 \"Froch\")))",
      "(f / fight-01\n   :time (d / date-entity))",
      "(h / have-condition-91\n   :ARG1 (s / sure-02\n            :polarity -\n            :ARG0 (ii / i)\n            :ARG1 (r / return-01\n                     :ARG1 (p / person\n                              :name (n / name\n                                       :op1 \"Carl\"\n                                       :op2 \"Froch\"))\n                     :mod (a / at-all)))\n   :ARG2 (f / fight-01\n            :polarity -\n            :ARG0 p))",
      "(h / have-condition-91)",
      "(l / likely-01\n   :ARG1 (b / blockbuster\n            :mod (p / person\n                    :name (n / name\n                             :op1 \"James\"\n                             :op2 \"DeGale\"))))",
      "(l / likely-01\n   :time (a / after\n            :op1 (d / defeat-01\n                    :ARG1 (p2 / person\n                              :name (n2 / name\n                                        :op1 \"Julio\"\n                                        :op2 \"Cesar\"\n                                        :op3 \"Chavez\"\n                                        :op4 \"Jr\")))))",
      "(l / likely-01\n   :concession (c / contact-01\n                  :ARG0 (p3 / person\n                            :name (n3 / name\n                                      :op1 \"Anthony\"\n                                      :op2 \"Dirrell\"))))",
      "(l / likely-01\n   :ARG2-of (h / have-degree-91\n               :ARG1 (b / blockbuster)\n               :ARG3 (m / most)))",
      "(b / blockbuster\n   :mod (p / person\n           :name (n / name\n                    :op1 \"James\"\n                    :op2 \"DeGale\")))",
      "(a / after\n   :op1 (d / defeat-01\n           :ARG1 (p2 / person\n                     :name (n2 / name\n                               :op1 \"Julio\"\n                               :op2 \"Cesar\"\n                               :op3 \"Chavez\"\n                               :op4 \"Jr\"))))",
      "(c / contact-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Anthony\"\n                       :op2 \"Dirrell\")))",
      "(h / have-degree-91\n   :ARG1 (b / blockbuster)\n   :ARG3 (m / most))",
      "(l / likely-01\n   :ARG1 (b / blockbuster))",
      "(d / defeat-01\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Julio\" :op2 \"Cesar\" :op3 \"Chavez\" :op4 \"Jr\")))",
      "(c / contact-01\n   :ARG0 (p3 / person :name (n3 / name :op1 \"Anthony\" :op2 \"Dirrell\")))",
      "(l / likely-01\n   :ARG1 (b / blockbuster))",
      "(d / defeat-01\n   :ARG1 (p2 / person :name (n2 / name :op1 \"Julio\" :op2 \"Cesar\" :op3 \"Chavez\" :op4 \"Jr\")))",
      "(c / contact-01\n   :ARG0 (p3 / person :name (n3 / name :op1 \"Anthony\" :op2 \"Dirrell\")))",
      "(l / likely-01\n   :ARG1 (b / blockbuster\n            :mod (p / person\n                    :name (n / name\n                             :op1 \"James\"\n                             :op2 \"DeGale\")))\n   :concession (c / contact-01\n                  :ARG0 (p3 / person\n                            :name (n3 / name\n                                      :op1 \"Anthony\"\n                                      :op2 \"Dirrell\")))\n   :ARG2 (h / have-degree-91\n            :ARG1 b\n            :ARG3 (m / most)))",
      "(l / likely-01\n   :time (a / after\n            :op1 (d / defeat-01))\n   :concession (c / contact-01))",
      "(s / say-01\n   :ARG0 (ii / i))",
      "(s / say-01\n   :ARG1 (d / die-01\n            :ARG1 (f / fight-01\n                     :ARG0 (p / person\n                              :name (n / name\n                                       :op1 \"Scott\"\n                                       :op2 \"Quigg\"))\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Carl\"\n                                         :op2 \"Frampton\"))\n                     :time (d2 / date-entity\n                               :season (s2 / summer)))\n            :location (w / water)))",
      "(s / say-01\n   :ARG2 (p / person :name (n / name :op1 \"Scott\" :op2 \"Quigg\")))",
      "(d / die-01\n   :ARG1 (f / fight-01\n            :ARG0 (p / person\n                     :name (n / name\n                              :op1 \"Scott\"\n                              :op2 \"Quigg\"))\n            :ARG1 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Carl\"\n                                :op2 \"Frampton\"))\n            :time (d2 / date-entity\n                      :season (s2 / summer)))\n   :location (w / water))",
      "(s / say-01\n   :ARG0 (ii / i))",
      "(d / die-01\n   :ARG1 (f / fight-01))",
      "(f / fight-01\n   :ARG0 (p / person :name (n / name :op1 \"Scott\" :op2 \"Quigg\")))",
      "(s / say-01\n   :ARG0 (ii / i))",
      "(d / die-01\n   :ARG1 (f / fight-01))",
      "(f / fight-01\n   :ARG0 (p / person :name (n / name :op1 \"Scott\" :op2 \"Quigg\")))",
      "(s / say-01\n   :ARG0 (ii / i)\n   :ARG1 (d / die-01\n            :ARG1 (f / fight-01\n                     :ARG0 (p / person\n                              :name (n / name\n                                       :op1 \"Scott\"\n                                       :op2 \"Quigg\"))\n                     :ARG1 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Carl\"\n                                         :op2 \"Frampton\"))))\n   :ARG2 p)",
      "(s / say-01)"
    ],
    "smus": [
      "I'm not sure about Carl Froch returning at all, but it's a condi,ti.",
      "Carl Froch is a fiftie in 2015, but he's not.",
      "I'm not sure Carl Froch will return at all.",
      "Carl Froch is not a fianc in 2015.",
      "I'm not sure.",
      "Carl Froch returned.",
      "Carl Froch is not fifti dati.",
      "Not sure.",
      "I'm sure.",
      "Carl Froch returned.",
      "Not fi.",
      "Carl Froch is fift.",
      "Fi Fi.",
      "I'm not sure Carl Froch will return at all, but he is not fifti.",
      "Have a condi.",
      "James DeGale's blockbuster is likely.",
      "likely after Julio Cesar Chavez Jr. defeats",
      "Probably, but Anthony Dirrell did make contact.",
      "The most likely blockbuster",
      "James DeGale blockbuster",
      "After defeating Julio Cesar Chavez Jr.",
      "Anthony Dirrell is in contact.",
      "The biggest blockbuster.",
      "A blockbuster is likely.",
      "defeat Julio Cesar Chavez Jr.",
      "Anthony Dirrell is in contact.",
      "A blockbuster is likely.",
      "defeat Julio Cesar Chavez Jr.",
      "Anthony Dirrell is in contact.",
      "James DeGale's blockbuster is most likely, despite Anthony Dirrell's contact.",
      "Despite contact, it is likely to happen after defeat.",
      "I said.",
      "Scott Quigg's fight with Carl Frampton in summer has died on the water.",
      "@Scott Quigg,",
      "Scott Quigg's fight with Carl Frampton in the summer died on the water.",
      "I said.",
      "The fight was dead.",
      "Scott Quigg is in a fight.",
      "I said.",
      "The fight was dead.",
      "Scott Quigg is in a fight.",
      "Scott Quigg's fight with Carl Frampton is dead, you know.",
      "Says."
    ]
  },
  {
    "instance_id": "realsumm-98",
    "summary": "<t> Clip shows mysterious black cloud hanging over the village of Shortandy . </t> <t> The perfect hoop shape sat in the air not moving for more than 15 minutes . </t> <t> Eerie video has been viewed tens of thousands of times on Youtube . </t> <t> While some viewers are suggesting the cloud was an alien spacecraft , experts think it could have been caused by nearby factories . </t>",
    "summary_trees": [
      "# ::snt  Clip shows mysterious black cloud hanging over the village of Shortandy . \n(s / show-01\n      :ARG0 (c / clip)\n      :ARG1 (c2 / cloud\n            :mod (m / mysterious)\n            :ARG1-of (b / black-04)\n            :ARG1-of (h / hang-01\n                  :ARG2 (o / over\n                        :op1 (v / village\n                              :name (n / name\n                                    :op1 \"Shortandy\"))))))",
      "# ::snt  The perfect hoop shape sat in the air not moving for more than 15 minutes . \n(s / sit-01\n      :ARG1 (s2 / shape\n            :mod (h / hoop)\n            :ARG1-of (p / perfect-02))\n      :ARG2 (a / air)\n      :manner (m / move-01\n            :polarity -\n            :ARG1 s2\n            :duration (m2 / more-than\n                  :op1 (t / temporal-quantity\n                        :quant 15\n                        :unit (m3 / minute)))))",
      "# ::snt  Eerie video has been viewed tens of thousands of times on Youtube . \n(v / view-01\n      :ARG1 (v2 / video\n            :mod (e / eerie))\n      :frequency (m / multiple\n            :op1 10000)\n      :medium (p / publication\n            :name (n / name\n                  :op1 \"YouTube\")))",
      "# ::snt  While some viewers are suggesting the cloud was an alien spacecraft , experts think it could have been caused by nearby factories . \n(c / contrast-01\n      :ARG1 (s / suggest-01\n            :ARG0 (p / person\n                  :ARG0-of (v / view-01)\n                  :quant (s2 / some))\n            :ARG1 (s3 / spacecraft\n                  :mod (a / alien)\n                  :domain (c2 / cloud)))\n      :ARG2 (t / think-01\n            :ARG0 (p2 / person\n                  :ARG1-of (e / expert-01))\n            :ARG1 (p3 / possible-01\n                  :ARG1 (c3 / cause-01\n                        :ARG0 (f / factory\n                              :location (n / nearby))\n                        :ARG1 c2))))"
    ],
    "tree": [
      "(s / show-01\n   :ARG0 (c / clip))",
      "(s / show-01\n   :ARG1 (c2 / cloud\n             :mod (m / mysterious)\n             :ARG1-of (b / black-04)\n             :ARG1-of (h / hang-01\n                         :ARG2 (o / over\n                                  :op1 (v / village\n                                          :name (n / name\n                                                   :op1 \"Shortandy\"))))))",
      "(c2 / cloud\n    :mod (m / mysterious)\n    :ARG1-of (b / black-04)\n    :ARG1-of (h / hang-01\n                :ARG2 (o / over\n                         :op1 (v / village\n                                 :name (n / name\n                                          :op1 \"Shortandy\")))))",
      "(s / show-01\n   :ARG0 (c / clip))",
      "(b / black-04)",
      "(h / hang-01\n   :ARG2 (o / over))",
      "(s / show-01\n   :ARG0 (c / clip))",
      "(h / hang-01\n   :ARG2 (o / over))",
      "(s / show-01\n   :ARG0 (c / clip)\n   :ARG1 (c2 / cloud\n             :mod (m / mysterious)\n             :ARG1 (b / black-04)\n             :ARG1 (h / hang-01\n                      :ARG2 (o / over\n                               :op1 (v / village\n                                       :name (n / name\n                                                :op1 \"Shortandy\"))))))",
      "(s / show-01)",
      "(s / sit-01\n   :ARG1 (s2 / shape\n             :mod (h / hoop)\n             :ARG1-of (p / perfect-02)))",
      "(s / sit-01\n   :ARG2 (a / air))",
      "(s / sit-01\n   :manner (m / move-01\n              :polarity -\n              :ARG1 (s2 / shape)\n              :duration (m2 / more-than\n                            :op1 (t / temporal-quantity\n                                    :quant 15\n                                    :unit (m3 / minute)))))",
      "(s2 / shape\n    :mod (h / hoop)\n    :ARG1-of (p / perfect-02))",
      "(m / move-01\n   :polarity -\n   :ARG1 (s2 / shape)\n   :duration (m2 / more-than\n                 :op1 (t / temporal-quantity\n                         :quant 15\n                         :unit (m3 / minute))))",
      "(s / sit-01\n   :ARG1 (s2 / shape))",
      "(p / perfect-02)",
      "(m / move-01\n   :polarity -\n   :ARG1 (s2 / shape)\n   :duration (m2 / more-than))",
      "(s / sit-01\n   :ARG1 (s2 / shape))",
      "(m / move-01\n   :polarity -)",
      "(m / move-01\n   :ARG1 (s2 / shape))",
      "(m / move-01\n   :duration (m2 / more-than))",
      "(s / sit-01\n   :ARG1 (s2 / shape\n             :mod (h / hoop)\n             :ARG1 (p / perfect-02))\n   :ARG2 (a / air)\n   :manner (m / move-01\n              :polarity -\n              :ARG1 s2\n              :duration (m2 / more-than\n                            :op1 (t / temporal-quantity\n                                    :quant 15\n                                    :unit (m3 / minute)))))",
      "(s / sit-01\n   :manner (m / move-01\n              :polarity -))",
      "(v / view-01\n   :ARG1 (v2 / video\n             :mod (e / eerie)))",
      "(v / view-01\n   :frequency (m / multiple\n                 :op1 10000))",
      "(v / view-01\n   :medium (p / publication\n              :name (n / name\n                       :op1 \"YouTube\")))",
      "(v2 / video\n    :mod (e / eerie))",
      "(p / publication\n   :name (n / name\n            :op1 \"YouTube\"))",
      "(v / view-01\n   :ARG1 (v2 / video))",
      "(v / view-01\n   :ARG1 (v2 / video))",
      "(v / view-01\n   :ARG1 (v2 / video\n             :mod (e / eerie))\n   :frequency (m / multiple\n                 :op1 10000)\n   :medium (p / publication\n              :name (n / name\n                       :op1 \"YouTube\")))",
      "(v / view-01\n   :frequency (m / multiple\n                 :op1 10000)\n   :medium (p / publication\n              :name (n / name\n                       :op1 \"YouTube\")))",
      "(c / contrast-01\n   :ARG1 (s / suggest-01\n            :ARG0 (p / person\n                     :ARG0-of (v / view-01)\n                     :quant (s2 / some))\n            :ARG1 (s3 / spacecraft\n                      :mod (a / alien)\n                      :domain (c2 / cloud))))",
      "(c / contrast-01\n   :ARG2 (t / think-01\n            :ARG0 (p2 / person\n                      :ARG1-of (e / expert-01))\n            :ARG1 (p3 / possible-01\n                      :ARG1 (c3 / cause-01\n                                :ARG0 (f / factory\n                                         :location (n / nearby))\n                                :ARG1 (c2 / cloud)))))",
      "(s / suggest-01\n   :ARG0 (p / person\n            :ARG0-of (v / view-01)\n            :quant (s2 / some))\n   :ARG1 (s3 / spacecraft\n             :mod (a / alien)\n             :domain (c2 / cloud)))",
      "(t / think-01\n   :ARG0 (p2 / person\n             :ARG1-of (e / expert-01))\n   :ARG1 (p3 / possible-01\n             :ARG1 (c3 / cause-01\n                       :ARG0 (f / factory\n                                :location (n / nearby))\n                       :ARG1 (c2 / cloud))))",
      "(c / contrast-01\n   :ARG1 (s / suggest-01))",
      "(s / suggest-01\n   :ARG0 (p / person))",
      "(v / view-01)",
      "(t / think-01\n   :ARG0 (p2 / person))",
      "(e / expert-01)",
      "(p3 / possible-01\n    :ARG1 (c3 / cause-01))",
      "(c3 / cause-01\n    :ARG0 (f / factory))",
      "(c / contrast-01\n   :ARG1 (s / suggest-01))",
      "(s / suggest-01\n   :ARG0 (p / person))",
      "(t / think-01\n   :ARG0 (p2 / person))",
      "(p3 / possible-01\n    :ARG1 (c3 / cause-01))",
      "(c3 / cause-01\n    :ARG0 (f / factory))",
      "(c / contrast-01\n   :ARG1 (s / suggest-01\n            :ARG0 (p / person\n                     :ARG0 (v / view-01)\n                     :quant (s2 / some))\n            :ARG1 (s3 / spacecraft\n                      :mod (a / alien)\n                      :domain (c2 / cloud)))\n   :ARG2 (t / think-01\n            :ARG0 (p2 / person\n                      :ARG1 (e / expert-01))\n            :ARG1 (p3 / possible-01\n                      :ARG1 (c3 / cause-01\n                                :ARG0 (f / factory)\n                                :ARG1 c2))))",
      "(c / contrast-01)"
    ],
    "smus": [
      "The clip shows.",
      "Shows mysterious black cloud hanging over Shortandy village.",
      "A mysterious black cloud hung over Shortandy village.",
      "The clip shows.",
      "Black.",
      "Hanging over.",
      "The clip shows.",
      "Hanging over.",
      "The clip shows a mysterious black cloud hanging over Shortandy village.",
      "Shows.",
      "The hoop shape sat perfectly.",
      "Sitting in the air.",
      "Sitting without moving in shape for more than 15 minutes.",
      "Perfect hoop shape.",
      "The shape was not moving for more than 15 minutes.",
      "The shape sat.",
      "Perfect.",
      "Not moving in any more shape.",
      "The shape sat.",
      "Not moving.",
      "Moving in shape.",
      "Moving for more than a year.",
      "The perfect hoop shape sat in the air, not moving for more than 15 minutes.",
      "Sitting without moving.",
      "The eerie video was viewed.",
      "Viewed tens of thousands of times.",
      "View on YouTube",
      "Eerie video.",
      "YouTube",
      "The video was viewed.",
      "The video was viewed.",
      "a href=\"http://www.youtube.com/watch?v=EYEY\">Eerie Video - Views - Thousands on YouTube/a>",
      "viewed thousands of times on YouTube.",
      "Some viewers are suggesting the cloud is an alien spacecraft.",
      "But experts think nearby factories may have caused the cloud.",
      "Some viewers are suggesting the cloud is an alien spacecraft.",
      "Experts think nearby factories may have caused the cloud.",
      "Suggestions, but...",
      "People are suggesting...",
      "Views",
      "People think.",
      "Experts",
      "Maybe because.",
      "Factory caused.",
      "Suggestions, but...",
      "People are suggesting...",
      "People think.",
      "Maybe because.",
      "Factory caused.",
      "Some viewers are suggesting the cloud is an alien spacecraft, while experts think it may have been caused by factories.",
      "But..."
    ]
  },
  {
    "instance_id": "realsumm-99",
    "summary": "<t> Incredible images show handcuffed members from the notorious Barrio 18 gang being marched onto buses . </t> <t> In total 1,177 were transferred to a different jail where they will mix with their arch rivals - Mara Salvatrucha . </t> <t> The gang members will now no longer be classified by gang affiliation , but by how dangerous they are . </t>",
    "summary_trees": [
      "# ::snt  Incredible images show handcuffed members from the notorious Barrio 18 gang being marched onto buses . \n(s / show-01\n      :ARG0 (ii / image\n            :ARG0-of (a / awe-01))\n      :ARG1 (m / march-01\n            :ARG1 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (g / gang\n                              :name (n / name\n                                    :op1 \"Barrio\"\n                                    :op2 18)\n                              :ARG1-of (n2 / notorious-01))\n                        :ARG2 (m2 / member))\n                  :ARG1-of (h2 / handcuff-01))\n            :destination (b / bus)))",
      "# ::snt  In total 1,177 were transferred to a different jail where they will mix with their arch rivals - Mara Salvatrucha . \n(t / transfer-01\n      :ARG1 (p / person\n            :quant 1741\n            :ARG1-of (t2 / total-01))\n      :ARG2 (j / jail\n            :ARG1-of (d / differ-02)\n            :location-of (m / mix-01\n                  :ARG1 p\n                  :ARG2 (o / organization\n                        :name (n / name\n                              :op1 \"Mara\"\n                              :op2 \"Salvatrucha\")\n                        :ARG0-of (r / rival-01\n                              :ARG1 p\n                              :mod (a / arch))))))",
      "# ::snt  The gang members will now no longer be classified by gang affiliation , but by how dangerous they are . \n(c / contrast-01\n      :ARG1 (c2 / classify-01\n            :ARG1 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (g / gang)\n                        :ARG2 (m / member)))\n            :ARG2 (a / affiliate-01\n                  :ARG1 p\n                  :ARG2 (g2 / gang)))\n      :ARG2 (c3 / classify-01\n            :ARG1 p\n            :ARG2 (e / endanger-01\n                  :ARG0 p))\n      :time (n / now)\n      :time (n2 / no-longer))"
    ],
    "tree": [
      "(s / show-01\n   :ARG0 (ii / image\n             :ARG0-of (a / awe-01)))",
      "(s / show-01\n   :ARG1 (m / march-01\n            :ARG1 (p / person\n                     :ARG0-of (h / have-org-role-91\n                                 :ARG1 (g / gang\n                                          :name (n / name\n                                                   :op1 \"Barrio\"\n                                                   :op2 18)\n                                          :ARG1-of (n2 / notorious-01))\n                                 :ARG2 (m2 / member))\n                     :ARG1-of (h2 / handcuff-01))\n            :destination (b / bus)))",
      "(ii / image\n    :ARG0-of (a / awe-01))",
      "(m / march-01\n   :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (g / gang\n                                 :name (n / name\n                                          :op1 \"Barrio\"\n                                          :op2 18)\n                                 :ARG1-of (n2 / notorious-01))\n                        :ARG2 (m2 / member))\n            :ARG1-of (h2 / handcuff-01))\n   :destination (b / bus))",
      "(s / show-01\n   :ARG0 (ii / image))",
      "(a / awe-01)",
      "(m / march-01\n   :ARG1 (p / person))",
      "(n2 / notorious-01)",
      "(h2 / handcuff-01)",
      "(s / show-01\n   :ARG0 (ii / image))",
      "(m / march-01\n   :ARG1 (p / person))",
      "(s / show-01\n   :ARG0 (ii / image\n             :ARG0 (a / awe-01))\n   :ARG1 (m / march-01\n            :ARG1 (p / person\n                     :ARG0 (h / have-org-role-91\n                              :ARG1 (g / gang\n                                       :name (n / name\n                                                :op1 \"Barrio\"\n                                                :op2 18)\n                                       :ARG1 (n2 / notorious-01))\n                              :ARG2 (m2 / member))\n                     :ARG1 (h2 / handcuff-01))\n            :destination (b / bus)))",
      "(s / show-01)",
      "(t / transfer-01\n   :ARG1 (p / person\n            :quant 1741\n            :ARG1-of (t2 / total-01)))",
      "(t / transfer-01\n   :ARG2 (j / jail\n            :ARG1-of (d / differ-02)\n            :location-of (m / mix-01\n                            :ARG1 (p / person)\n                            :ARG2 (o / organization\n                                     :name (n / name\n                                              :op1 \"Mara\"\n                                              :op2 \"Salvatrucha\")\n                                     :ARG0-of (r / rival-01\n                                                 :ARG1 p\n                                                 :mod (a / arch))))))",
      "(p / person\n   :quant 1741\n   :ARG1-of (t2 / total-01))",
      "(j / jail\n   :ARG1-of (d / differ-02)\n   :location-of (m / mix-01\n                   :ARG1 (p / person)\n                   :ARG2 (o / organization\n                            :name (n / name\n                                     :op1 \"Mara\"\n                                     :op2 \"Salvatrucha\")\n                            :ARG0-of (r / rival-01\n                                        :ARG1 p\n                                        :mod (a / arch)))))",
      "(t / transfer-01\n   :ARG1 (p / person))",
      "(t2 / total-01)",
      "(d / differ-02)",
      "(m / mix-01\n   :ARG1 (p / person)\n   :ARG2 (o / organization :name (n / name :op1 \"Mara\" :op2 \"Salvatrucha\"))))",
      "(r / rival-01\n   :ARG1 (p / person)\n   :mod (a / arch))",
      "(t / transfer-01\n   :ARG1 (p / person))",
      "(m / mix-01\n   :ARG1 (p / person))",
      "(m / mix-01\n   :ARG2 (o / organization :name (n / name :op1 \"Mara\" :op2 \"Salvatrucha\"))))",
      "(r / rival-01\n   :ARG1 (p / person))",
      "(r / rival-01\n   :mod (a / arch))",
      "(t / transfer-01\n   :ARG1 (p / person\n            :quant 1741\n            :ARG1 (t2 / total-01))\n   :ARG2 (j / jail\n            :ARG1 (d / differ-02)))",
      "(t / transfer-01)",
      "(c / contrast-01\n   :ARG1 (c2 / classify-01\n             :ARG1 (p / person\n                      :ARG0-of (h / have-org-role-91\n                                  :ARG1 (g / gang)\n                                  :ARG2 (m / member)))\n             :ARG2 (a / affiliate-01\n                      :ARG1 p\n                      :ARG2 (g2 / gang))))",
      "(c / contrast-01\n   :ARG2 (c3 / classify-01\n             :ARG1 (p / person)\n             :ARG2 (e / endanger-01\n                      :ARG0 p)))",
      "(c / contrast-01\n   :time (n / now))",
      "(c / contrast-01\n   :time (n2 / no-longer))",
      "(c2 / classify-01\n    :ARG1 (p / person\n             :ARG0-of (h / have-org-role-91\n                         :ARG1 (g / gang)\n                         :ARG2 (m / member)))\n    :ARG2 (a / affiliate-01\n             :ARG1 p\n             :ARG2 (g2 / gang)))",
      "(c3 / classify-01\n    :ARG1 (p / person)\n    :ARG2 (e / endanger-01\n             :ARG0 p))",
      "(c / contrast-01\n   :ARG1 (c2 / classify-01))",
      "(c2 / classify-01\n    :ARG1 (p / person))",
      "(a / affiliate-01\n   :ARG1 (p / person)\n   :ARG2 (g2 / gang))",
      "(c3 / classify-01\n    :ARG1 (p / person)\n    :ARG2 (e / endanger-01))",
      "(e / endanger-01\n   :ARG0 (p / person))",
      "(c / contrast-01\n   :ARG1 (c2 / classify-01))",
      "(c2 / classify-01\n    :ARG1 (p / person))",
      "(a / affiliate-01\n   :ARG1 (p / person))",
      "(a / affiliate-01\n   :ARG2 (g2 / gang))",
      "(c3 / classify-01\n    :ARG1 (p / person))",
      "(c3 / classify-01\n    :ARG2 (e / endanger-01))",
      "(e / endanger-01\n   :ARG0 (p / person))",
      "(c / contrast-01\n   :ARG1 (c2 / classify-01\n             :ARG1 (p / person\n                      :ARG0 (h / have-org-role-91\n                               :ARG1 (g / gang)\n                               :ARG2 (m / member)))\n             :ARG2 (a / affiliate-01\n                      :ARG1 p\n                      :ARG2 (g2 / gang)))\n   :ARG2 (c3 / classify-01\n             :ARG1 p\n             :ARG2 (e / endanger-01\n                      :ARG0 p)))",
      "(c / contrast-01\n   :time (n / now)\n   :time (n2 / no-longer))"
    ],
    "smus": [
      "Amazing images show.",
      "The shows show handcuffed members of the notorious Barrio 18 gang marching to buses.",
      "Amazing images.",
      "Handcuffed members of the notorious gang Barrio 18 were marched to buses.",
      "The images show.",
      "Awful.",
      "People marched.",
      "Notorious.",
      "Handcuffs.",
      "The images show.",
      "People marched.",
      "Amazing images show members of the notorious Barrio 18 gang marching in handcuffs to buses.",
      "Show.",
      "Transferred a total of 1741 people.",
      "Transferred to a different jail where people mix with their arch rivals the Mara Salvatrucha.",
      "Total 1741 people",
      "There is a different jail where people mix with their arch rivals, the Mara Salvatrucha.",
      "Transferred.",
      "Total.",
      "Different.",
      "Mix people with Mara Salvatrucha.",
      "Arch rivalries between people.",
      "Transferred.",
      "Mix people.",
      "Mix with Mara Salvatrucha.",
      "People are rivals.",
      "arch rivals.",
      "Total: 1741 transferred to different jails",
      "Transferred.",
      "But gang members are classified as affiliated with the gang.",
      "But people are classified as \"dangerous\".",
      "But now...",
      "But no longer.",
      "Gang members are classified as having an affiliation with the gang.",
      "People are classified as \"dangerous\".",
      "But classified.",
      "People are classified.",
      "People are affiliates of a gang.",
      "People are classified as \"dangerous\".",
      "People are in danger.",
      "But classified.",
      "People are classified.",
      "People are affiliates.",
      "gang affiliation.",
      "People are classified.",
      "Classified as dangerous.",
      "People are in danger.",
      "Gang members are classified as affiliated with the gang but are classified as dangerous.",
      "But no longer."
    ]
  }
]