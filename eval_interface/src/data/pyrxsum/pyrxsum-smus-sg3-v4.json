[{"instance_id": "pyrxsum-0", "summary": "Netherlands midfielder Wesley Sneijder has joined French Ligue 1 side Nice on a free transfer.", "summary_trees": ["# ::snt Netherlands midfielder Wesley Sneijder has joined French Ligue 1 side\n(j / join-04\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Wesley\"\n                  :op2 \"Sneijder\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c / country\n                        :name (n2 / name\n                              :op1 \"Netherlands\"))\n                  :ARG3 (m / midfielder)))\n      :ARG1 (s / side\n            :part-of (l / league\n                  :name (n3 / name\n                        :op1 \"Ligue\"\n                        :op2 1)\n                  :mod (c2 / country\n                        :name (n4 / name\n                              :op1 \"France\")))))", "# ::snt Nice on a free transfer.\n(n / nice-01\n      :condition (t / transfer-01\n            :ARG1-of (f / free-04)))"], "tree": ["(j / join-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Wesley\"\n                     :op2 \"Sneijder\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (c / country\n                                 :name (n2 / name\n                                           :op1 \"Netherlands\"))\n                        :ARG3 (m / midfielder))))", "(j / join-04\n   :ARG1 (s / side\n            :part-of (l / league\n                        :name (n3 / name\n                                  :op1 \"Ligue\"\n                                  :op2 1)\n                        :mod (c2 / country\n                                 :name (n4 / name\n                                           :op1 \"France\")))))", "(p / person\n   :name (n / name\n            :op1 \"Wesley\"\n            :op2 \"Sneijder\")\n   :ARG0-of (h / have-org-role-91\n               :ARG1 (c / country\n                        :name (n2 / name\n                                  :op1 \"Netherlands\"))\n               :ARG3 (m / midfielder)))", "(s / side\n   :part-of (l / league\n               :name (n3 / name\n                         :op1 \"Ligue\"\n                         :op2 1)\n               :mod (c2 / country\n                        :name (n4 / name\n                                  :op1 \"France\"))))", "(j / join-04\n   :ARG0 (p / person :name (n / name :op1 \"Wesley\" :op2 \"Sneijder\"))))", "(j / join-04\n   :ARG0 (p / person :name (n / name :op1 \"Wesley\" :op2 \"Sneijder\"))))", "(j / join-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Wesley\"\n                     :op2 \"Sneijder\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (c / country\n                              :name (n2 / name\n                                        :op1 \"Netherlands\"))\n                     :ARG3 (m / midfielder)))\n   :ARG1 (s / side\n            :part (l / league\n                     :name (n3 / name\n                               :op1 \"Ligue\"\n                               :op2 1)\n                     :mod (c2 / country\n                              :name (n4 / name\n                                        :op1 \"France\")))))", "(j / join-04)", "(n / nice-01\n   :condition (t / transfer-01\n                 :ARG1-of (f / free-04)))", "(t / transfer-01\n   :ARG1-of (f / free-04))", "(n / nice-01\n   :condition (t / transfer-01))", "(t / transfer-01)", "(f / free-04)", "(n / nice-01\n   :condition (t / transfer-01))", "(n / nice-01\n   :condition (t / transfer-01\n                 :ARG1 (f / free-04)))", "(n / nice-01\n   :condition (t / transfer-01))"], "smus": ["Dutch midfielder Wesley sneijder has joined the Dutch.", "The French side is joined by the Ligue 1 side.", "Dutch midfielder Wesley sneijder", "The French side of the Ligue 1 (Ligue 1 )", "Wesley Sneijder has joined.", "Wesley Sneijder has joined.", "The Dutch midfielder Wesley sneijder has joined the French Ligue 1 side.", "Joined.", "Nice if it's a free transfer.", "Free transfer.", "Nice if it was a transfer.", "Transfer.", "Free.", "Nice if it was a transfer.", "Nice if there was a free transfer.", "Nice if it was a transfer."]}, {"instance_id": "pyrxsum-1", "summary": "A State Department official \"pressured\" the FBI to change the classification of a Hillary Clinton email in a \"quid pro quo\", according to FBI documents.", "summary_trees": ["# ::snt A State Department official \"pressured\" the FBI to change the classification of a Hillary Clinton email in a \"quid pro quo\", according to FBI documents.\n(s / say-01\n      :ARG0 (d / document\n            :source (g / government-organization\n                  :name (n / name\n                        :op1 \"FBI\")))\n      :ARG1 (p / pressure-01\n            :ARG0 (p2 / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (g2 / government-organization\n                              :name (n2 / name\n                                    :op1 \"State\"\n                                    :op2 \"Department\"))\n                        :ARG2 (o / official)))\n            :ARG1 g\n            :ARG2 (c / change-01\n                  :ARG0 g\n                  :ARG1 (c2 / classify-01\n                        :ARG1 (e / email-01\n                              :ARG0 (p3 / person\n                                    :name (n3 / name\n                                          :op1 \"Hillary\"\n                                          :op2 \"Clinton\"))))\n                  :manner (q / quid-pro-quo))))"], "tree": ["(s / say-01\n   :ARG0 (d / document\n            :source (g / government-organization\n                       :name (n / name\n                                :op1 \"FBI\"))))", "(s / say-01\n   :ARG1 (p / pressure-01\n            :ARG0 (p2 / person\n                      :ARG0-of (h / have-org-role-91\n                                  :ARG1 (g2 / government-organization\n                                            :name (n2 / name\n                                                      :op1 \"State\"\n                                                      :op2 \"Department\"))\n                                  :ARG2 (o / official)))\n            :ARG1 (g / government-organization :name (n / name :op1 \"FBI\"))\n            :ARG2 (c / change-01\n                     :ARG0 g\n                     :ARG1 (c2 / classify-01\n                               :ARG1 (e / email-01\n                                        :ARG0 (p3 / person\n                                                  :name (n3 / name\n                                                            :op1 \"Hillary\"\n                                                            :op2 \"Clinton\"))))\n                     :manner (q / quid-pro-quo))))", "(d / document\n   :source (g / government-organization\n              :name (n / name\n                       :op1 \"FBI\")))", "(p / pressure-01\n   :ARG0 (p2 / person\n             :ARG0-of (h / have-org-role-91\n                         :ARG1 (g2 / government-organization\n                                   :name (n2 / name\n                                             :op1 \"State\"\n                                             :op2 \"Department\"))\n                         :ARG2 (o / official)))\n   :ARG1 (g / government-organization :name (n / name :op1 \"FBI\"))\n   :ARG2 (c / change-01\n            :ARG0 g\n            :ARG1 (c2 / classify-01\n                      :ARG1 (e / email-01\n                               :ARG0 (p3 / person\n                                         :name (n3 / name\n                                                   :op1 \"Hillary\"\n                                                   :op2 \"Clinton\"))))\n            :manner (q / quid-pro-quo)))", "(s / say-01\n   :ARG0 (d / document))", "(p / pressure-01\n   :ARG0 (p2 / person))", "(c / change-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"FBI\"))\n   :ARG1 (c2 / classify-01))", "(c2 / classify-01\n    :ARG1 (e / email-01))", "(e / email-01\n   :ARG0 (p3 / person :name (n3 / name :op1 \"Hillary\" :op2 \"Clinton\")))", "(s / say-01\n   :ARG0 (d / document))", "(p / pressure-01\n   :ARG0 (p2 / person))", "(c / change-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"FBI\")))", "(c / change-01\n   :ARG1 (c2 / classify-01))", "(c2 / classify-01\n    :ARG1 (e / email-01))", "(e / email-01\n   :ARG0 (p3 / person :name (n3 / name :op1 \"Hillary\" :op2 \"Clinton\")))", "(s / say-01\n   :ARG0 (d / document)\n   :ARG1 (p / pressure-01\n            :ARG0 (p2 / person\n                      :ARG0 (h / have-org-role-91\n                               :ARG1 (g2 / government-organization\n                                         :name (n2 / name\n                                                   :op1 \"State\"\n                                                   :op2 \"Department\"))\n                               :ARG2 (o / official)))))", "(s / say-01)"], "smus": ["According to the FBI documents --", "A State Department official said the FBI pressured them to change Hillary Clinton's email classification quid pro quo.", "The FBI documents:", "A State Department official pressured the FBI to change Hillary Clinton's email classification quid pro quo.", "According to the documents --", "People pressured.", "The FBI will change classification.", "Email Classification", "Hillary Clinton e-mail:", "According to the documents --", "People pressured.", "The FBI will change.", "Change the classification.", "Email Classification", "Hillary Clinton e-mail:", "The documents say a State Department official pressured.", "Says."]}, {"instance_id": "pyrxsum-2", "summary": "American Jason Dufner will take a five-shot lead into the third round of the Memorial Tournament after carding an eagle on the 18th hole on Friday.", "summary_trees": ["# ::snt American Jason Dufner will take a five-shot lead into the third round of the Memorial Tournament after carding an eagle on the 18th hole on Friday.\n(t / take-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jason\"\n                  :op2 \"Dufner\")\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"America\")))\n      :ARG1 (l / lead-01\n            :ARG0 p\n            :ARG2 (s / shot\n                  :quant 5))\n      :ARG2 (r / round\n            :ord (o / ordinal-entity\n                  :value 3)\n            :subevent-of (g / game\n                  :name (n3 / name\n                        :op1 \"Memorial\"\n                        :op2 \"Tournament\")))\n      :time (a / after\n            :op1 (c2 / card-01\n                  :ARG0 p\n                  :ARG1 (e / eagle)\n                  :time (h / hole\n                        :ord (o2 / ordinal-entity\n                              :value 18))\n                  :time (d / date-entity\n                        :weekday (f / friday)))))"], "tree": ["(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jason\"\n                     :op2 \"Dufner\")\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"America\"))))", "(t / take-01\n   :ARG1 (l / lead-01\n            :ARG0 (p / person :name (n / name :op1 \"Jason\" :op2 \"Dufner\")))\n            :ARG2 (s / shot\n                     :quant 5)))", "(t / take-01\n   :ARG2 (r / round\n            :ord (o / ordinal-entity\n                    :value 3)\n            :subevent-of (g / game\n                            :name (n3 / name\n                                      :op1 \"Memorial\"\n                                      :op2 \"Tournament\"))))", "(t / take-01\n   :time (a / after\n            :op1 (c2 / card-01\n                     :ARG0 (p / person :name (n / name :op1 \"Jason\" :op2 \"Dufner\")))\n                     :ARG1 (e / eagle)\n                     :time (h / hole\n                              :ord (o2 / ordinal-entity\n                                       :value 18))\n                     :time (d / date-entity\n                              :weekday (f / friday)))))", "(p / person\n   :name (n / name\n            :op1 \"Jason\"\n            :op2 \"Dufner\")\n   :mod (c / country\n           :name (n2 / name\n                     :op1 \"America\")))", "(l / lead-01\n   :ARG0 (p / person :name (n / name :op1 \"Jason\" :op2 \"Dufner\")))\n   :ARG2 (s / shot\n            :quant 5))", "(r / round\n   :ord (o / ordinal-entity\n           :value 3)\n   :subevent-of (g / game\n                   :name (n3 / name\n                             :op1 \"Memorial\"\n                             :op2 \"Tournament\")))", "(a / after\n   :op1 (c2 / card-01\n            :ARG0 (p / person :name (n / name :op1 \"Jason\" :op2 \"Dufner\")))\n            :ARG1 (e / eagle)\n            :time (h / hole\n                     :ord (o2 / ordinal-entity\n                              :value 18))\n            :time (d / date-entity\n                     :weekday (f / friday))))", "(t / take-01\n   :ARG0 (p / person :name (n / name :op1 \"Jason\" :op2 \"Dufner\"))))", "(l / lead-01\n   :ARG0 (p / person :name (n / name :op1 \"Jason\" :op2 \"Dufner\")))\n   :ARG2 (s / shot))", "(c2 / card-01\n    :ARG0 (p / person :name (n / name :op1 \"Jason\" :op2 \"Dufner\")))\n    :ARG1 (e / eagle))", "(t / take-01\n   :ARG0 (p / person :name (n / name :op1 \"Jason\" :op2 \"Dufner\"))))", "(l / lead-01\n   :ARG0 (p / person :name (n / name :op1 \"Jason\" :op2 \"Dufner\"))))", "(l / lead-01\n   :ARG2 (s / shot))", "(c2 / card-01\n    :ARG0 (p / person :name (n / name :op1 \"Jason\" :op2 \"Dufner\"))))", "(c2 / card-01\n    :ARG1 (e / eagle))", "(t / take-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jason\"\n                     :op2 \"Dufner\")\n            :mod (c / country\n                    :name (n2 / name\n                              :op1 \"America\")))\n   :ARG1 (l / lead-01\n            :ARG0 p\n            :ARG2 (s / shot\n                     :quant 5))\n   :ARG2 (r / round\n            :ord (o / ordinal-entity\n                    :value 3)\n            :subevent (g / game\n                         :name (n3 / name\n                                   :op1 \"Memorial\"\n                                   :op2 \"Tournament\"))))", "(t / take-01\n   :time (a / after\n            :op1 (c2 / card-01)))"], "smus": ["Take American Jason Dufner.", "Jason Dufner will take the lead with 5 shots.", "Take the third round of the Memorial Tournament.", "Take after Jason Dufner carded an eagle in hole 18 on Friday.", "American Jason Dufner", "Jason Dufner is the lead shooter for five shots.", "The Memorial Tournament is the third round.", "After Jason Dufner was carding an eagle at the 18th hole on Friday.", "Jason Dufner will take.", "Jason Dufner was the lead in the shot.", "Jason Dufner is carding an eagle.", "Jason Dufner will take.", "Jason Dufner is the leader.", "shot lead", "Jason Dufner was carding.", "Carding an eagle.", "American Jason Dufner will take the lead with five shots in the third round of the Memorial Tournament.", "Take after carding."]}, {"instance_id": "pyrxsum-3", "summary": "A British man has been been questioned in Peru after posing naked at the Machu Picchu ruins, local police have said.", "summary_trees": ["# ::snt A British man has been been questioned in Peru after posing naked at the Machu Picchu ruins, local police have said.\n(s / say-01\n      :ARG0 (p / police\n            :ARG1-of (l / local-02))\n      :ARG1 (q / question-01\n            :ARG1 (m / man\n                  :mod (c / country\n                        :name (n / name\n                              :op1 \"Britain\")))\n            :location (c2 / country\n                  :name (n2 / name\n                        :op1 \"Peru\"))\n            :time (a / after\n                  :op1 (p2 / pose-01\n                        :ARG0 m\n                        :manner (n3 / naked)\n                        :location (r / ruin\n                              :name (n4 / name\n                                    :op1 \"Machu\"\n                                    :op2 \"Picchu\"))))))"], "tree": ["(s / say-01\n   :ARG0 (p / police\n            :ARG1-of (l / local-02)))", "(s / say-01\n   :ARG1 (q / question-01\n            :ARG1 (m / man\n                     :mod (c / country\n                             :name (n / name\n                                      :op1 \"Britain\")))\n            :location (c2 / country\n                          :name (n2 / name\n                                    :op1 \"Peru\"))\n            :time (a / after\n                     :op1 (p2 / pose-01\n                              :ARG0 m\n                              :manner (n3 / naked)\n                              :location (r / ruin\n                                           :name (n4 / name\n                                                     :op1 \"Machu\"\n                                                     :op2 \"Picchu\"))))))", "(p / police\n   :ARG1-of (l / local-02))", "(q / question-01\n   :ARG1 (m / man\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Britain\")))\n   :location (c2 / country\n                 :name (n2 / name\n                           :op1 \"Peru\"))\n   :time (a / after\n            :op1 (p2 / pose-01\n                     :ARG0 m\n                     :manner (n3 / naked)\n                     :location (r / ruin\n                                  :name (n4 / name\n                                            :op1 \"Machu\"\n                                            :op2 \"Picchu\")))))", "(s / say-01\n   :ARG0 (p / police))", "(l / local-02)", "(q / question-01\n   :ARG1 (m / man))", "(p2 / pose-01\n    :ARG0 (m / man)\n    :manner (n3 / naked))", "(s / say-01\n   :ARG0 (p / police))", "(q / question-01\n   :ARG1 (m / man))", "(p2 / pose-01\n    :ARG0 (m / man))", "(p2 / pose-01\n    :manner (n3 / naked))", "(s / say-01\n   :ARG0 (p / police\n            :ARG1 (l / local-02))\n   :ARG1 (q / question-01\n            :ARG1 (m / man\n                     :mod (c / country\n                             :name (n / name\n                                      :op1 \"Britain\")))))", "(s / say-01)"], "smus": ["Local police said --", "The British man was said to have been questioned in Peru after posing as a naked man in the Ruins of Machu Picchu.", "Local police", "The British man was questioned in Peru after posing as a naked man in the Machu Picchu ruin.", "Police said.", "Local.", "The man was questioned.", "A man posing naked.", "Police said.", "The man was questioned.", "The man was posing.", "Posing naked man.", "Local police said the British man was questioned.", "said."]}, {"instance_id": "pyrxsum-4", "summary": "Great Britain skeleton racer David Swift has retired from the sport.", "summary_trees": ["# ::snt Great Britain skeleton racer David Swift has retired from the sport.\n(r / retire-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"David\"\n                  :op2 \"Swift\")\n            :ARG0-of (r2 / race-02\n                  :ARG3 (s / skeleton))\n            :mod (t / team\n                  :name (n2 / name\n                        :op1 \"Great\"\n                        :op2 \"Britain\")))\n      :ARG1 (s2 / sport))"], "tree": ["(r / retire-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Swift\")\n            :ARG0-of (r2 / race-02\n                         :ARG3 (s / skeleton))\n            :mod (t / team\n                    :name (n2 / name\n                              :op1 \"Great\"\n                              :op2 \"Britain\"))))", "(r / retire-01\n   :ARG1 (s2 / sport))", "(p / person\n   :name (n / name\n            :op1 \"David\"\n            :op2 \"Swift\")\n   :ARG0-of (r2 / race-02\n                :ARG3 (s / skeleton))\n   :mod (t / team\n           :name (n2 / name\n                     :op1 \"Great\"\n                     :op2 \"Britain\")))", "(r / retire-01\n   :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Swift\"))))", "(r2 / race-02\n    :ARG3 (s / skeleton))", "(r / retire-01\n   :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Swift\"))))", "(r2 / race-02\n    :ARG3 (s / skeleton))", "(r / retire-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Swift\")\n            :ARG0 (r2 / race-02\n                      :ARG3 (s / skeleton))\n            :mod (t / team\n                    :name (n2 / name\n                              :op1 \"Great\"\n                              :op2 \"Britain\")))\n   :ARG1 (s2 / sport))", "(r / retire-01)"], "smus": ["Great British skeleton racer David Swift has retired.", "The sport is retired.", "skeleton racer David Swift, Great Britain", "David Swift retired.", "skeleton race.", "David Swift retired.", "skeleton race.", "Great Britain's David Swift retired from sport.", "Retired."]}, {"instance_id": "pyrxsum-5", "summary": "Michael Dunlop set the fastest times for the Ulster Grand Prix Superbike and Superstock classes in Thursday's delayed practice sessions at Dundrod.", "summary_trees": ["# ::snt Michael Dunlop set the fastest times for the Ulster Grand Prix Superbike and Superstock classes in Thursday's delayed practice sessions at Dundrod.\n(s / set-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Michael\"\n                  :op2 \"Dunlop\"))\n      :ARG1 (t / time\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (f / fast-02)\n                  :ARG3 (m / most)))\n      :beneficiary (a / and\n            :op1 (c / class\n                  :name (n2 / name\n                        :op1 \"Ulster\"\n                        :op2 \"Grand\"\n                        :op3 \"Prix\"\n                        :op4 \"Superbike\"))\n            :op2 (c2 / class\n                  :name (n3 / name\n                        :op1 \"Superstock\")))\n      :time (s2 / session\n            :mod (p2 / practice-01)\n            :ARG1-of (d / delay-01)\n            :location (c3 / city\n                  :name (n4 / name\n                        :op1 \"Dundrod\"))\n            :time (d2 / date-entity\n                  :weekday (t2 / thursday))))"], "tree": ["(s / set-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\"\n                     :op2 \"Dunlop\")))", "(s / set-02\n   :ARG1 (t / time\n            :ARG1-of (h / have-degree-91\n                        :ARG2 (f / fast-02)\n                        :ARG3 (m / most))))", "(s / set-02\n   :beneficiary (a / and\n                   :op1 (c / class\n                           :name (n2 / name\n                                     :op1 \"Ulster\"\n                                     :op2 \"Grand\"\n                                     :op3 \"Prix\"\n                                     :op4 \"Superbike\"))\n                   :op2 (c2 / class\n                            :name (n3 / name\n                                      :op1 \"Superstock\"))))", "(s / set-02\n   :time (s2 / session\n             :mod (p2 / practice-01)\n             :ARG1-of (d / delay-01)\n             :location (c3 / city\n                           :name (n4 / name\n                                     :op1 \"Dundrod\"))\n             :time (d2 / date-entity\n                       :weekday (t2 / thursday))))", "(p / person\n   :name (n / name\n            :op1 \"Michael\"\n            :op2 \"Dunlop\"))", "(t / time\n   :ARG1-of (h / have-degree-91\n               :ARG2 (f / fast-02)\n               :ARG3 (m / most)))", "(a / and\n   :op1 (c / class\n           :name (n2 / name\n                     :op1 \"Ulster\"\n                     :op2 \"Grand\"\n                     :op3 \"Prix\"\n                     :op4 \"Superbike\"))\n   :op2 (c2 / class\n            :name (n3 / name\n                      :op1 \"Superstock\")))", "(s2 / session\n    :mod (p2 / practice-01)\n    :ARG1-of (d / delay-01)\n    :location (c3 / city\n                  :name (n4 / name\n                            :op1 \"Dundrod\"))\n    :time (d2 / date-entity\n              :weekday (t2 / thursday)))", "(s / set-02\n   :ARG0 (p / person :name (n / name :op1 \"Michael\" :op2 \"Dunlop\")))", "(f / fast-02)", "(p2 / practice-01)", "(d / delay-01)", "(s / set-02\n   :ARG0 (p / person :name (n / name :op1 \"Michael\" :op2 \"Dunlop\")))", "(s / set-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\"\n                     :op2 \"Dunlop\"))\n   :ARG1 (t / time\n            :ARG1-of (h / have-degree-91\n                        :ARG2 (f / fast-02)\n                        :ARG3 (m / most)))\n   :beneficiary (c / class\n                   :name (n2 / name\n                             :op1 \"Ulster\"\n                             :op2 \"Grand\"\n                             :op3 \"Prix\"\n                             :op4 \"Superbike\"))\n   :time (s2 / session\n             :mod (p2 / practice-01)\n             :ARG1-of (d / delay-01)\n             :location (c3 / city\n                           :name (n4 / name\n                                     :op1 \"Dundrod\"))\n             :time (d2 / date-entity\n                       :weekday (t2 / thursday))))", "(s / set-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\"\n                     :op2 \"Dunlop\"))\n   :ARG1 (t / time\n            :ARG1-of (h / have-degree-91\n                        :ARG2 (f / fast-02)\n                        :ARG3 (m / most)))\n   :beneficiary (c2 / class\n                    :name (n3 / name\n                              :op1 \"Superstock\"))\n   :time (s2 / session\n             :mod (p2 / practice-01)\n             :ARG1-of (d / delay-01)\n             :location (c3 / city\n                           :name (n4 / name\n                                     :op1 \"Dundrod\"))\n             :time (d2 / date-entity\n                       :weekday (t2 / thursday)))\n   :time s2)", "(s / set-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Michael\"\n                     :op2 \"Dunlop\"))\n   :ARG1 (t / time\n            :ARG1 (h / have-degree-91\n                     :ARG2 (f / fast-02)\n                     :ARG3 (m / most)))\n   :beneficiary (a / and\n                   :op1 (c / class\n                           :name (n2 / name\n                                     :op1 \"Ulster\"\n                                     :op2 \"Grand\"\n                                     :op3 \"Prix\"\n                                     :op4 \"Superbike\"))\n                   :op2 (c2 / class\n                            :name (n3 / name\n                                      :op1 \"Superstock\"))))", "(s / set-02\n   :beneficiary (a / and\n                   :op1 (c / class\n                           :name (n2 / name\n                                     :op1 \"Ulster\"\n                                     :op2 \"Grand\"\n                                     :op3 \"Prix\"\n                                     :op4 \"Superbike\"))\n                   :op2 (c2 / class\n                            :name (n3 / name\n                                      :op1 \"Superstock\")))\n   :time (s2 / session\n             :mod (p2 / practice-01)\n             :location (c3 / city\n                           :name (n4 / name\n                                     :op1 \"Dundrod\"))\n             :time (d2 / date-entity\n                       :weekday (t2 / thursday))))"], "smus": ["Michael Dunlop set.", "Set the fastest times.", "Set for the Ulster Grand Prix Superbike and Superstock classes.", "Set for Thursday at delayed practice sessions in Dundrod.", "Michael Dunlop", "Fastest times.", "Ulster Grand Prix Superbike and Superstock classes.", "Delay-in practice sessions were held in Dundrod on Thursday.", "Michael Dunlop set.", "Fast.", "Practice.", "Delay-Morning", "Michael Dunlop set.", "Michael Dunlop set the fastest times for Ulster Grand Prix Superbike classes during delayed practice sessions in Dundrod on Thursday.", "Michael Dunlop set the fastest times for Superstock classes during the delayed practice sessions in Dundrod Thursday.", "Michael Dunlop set the fastest times for the Ulster Grand Prix Superbike and Superstock classes.", "Classes were set for Ulster Grand Prix Superbike and Superstock at practice sessions in Dundrod on Thursday."]}, {"instance_id": "pyrxsum-6", "summary": "Argentine club Newell's Old Boys have re-signed Sunderland striker Ignacio Scocco on a five-year contract.", "summary_trees": ["# ::snt Argentine club Newell's Old Boys have re-signed Sunderland striker Ignacio Scocco on a five-year contract.\n(s / sign-02\n      :ARG0 (c / club\n            :name (n / name\n                  :op1 \"Old\"\n                  :op2 \"Boys\")\n            :mod (c2 / country\n                  :name (n2 / name\n                        :op1 \"Argentina\"))\n            :poss (t / team\n                  :name (n3 / name\n                        :op1 \"Newell's\")))\n      :ARG1 (p / person\n            :name (n4 / name\n                  :op1 \"Ignacio\"\n                  :op2 \"Scocco\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (t2 / team\n                        :name (n5 / name\n                              :op1 \"Sunderland\"))\n                  :ARG3 (s2 / striker)))\n      :ARG3 (c3 / contract\n            :duration (t3 / temporal-quantity\n                  :quant 5\n                  :unit (y / year)))\n      :mod (a / again))"], "tree": ["(s / sign-02\n   :ARG0 (c / club\n            :name (n / name\n                     :op1 \"Old\"\n                     :op2 \"Boys\")\n            :mod (c2 / country\n                     :name (n2 / name\n                               :op1 \"Argentina\"))\n            :poss (t / team\n                     :name (n3 / name\n                               :op1 \"Newell's\"))))", "(s / sign-02\n   :ARG1 (p / person\n            :name (n4 / name\n                      :op1 \"Ignacio\"\n                      :op2 \"Scocco\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (t2 / team\n                                  :name (n5 / name\n                                            :op1 \"Sunderland\"))\n                        :ARG3 (s2 / striker))))", "(s / sign-02\n   :ARG3 (c3 / contract\n             :duration (t3 / temporal-quantity\n                           :quant 5\n                           :unit (y / year))))", "(s / sign-02\n   :mod (a / again))", "(c / club\n   :name (n / name\n            :op1 \"Old\"\n            :op2 \"Boys\")\n   :mod (c2 / country\n            :name (n2 / name\n                      :op1 \"Argentina\"))\n   :poss (t / team\n            :name (n3 / name\n                      :op1 \"Newell's\")))", "(p / person\n   :name (n4 / name\n             :op1 \"Ignacio\"\n             :op2 \"Scocco\")\n   :ARG0-of (h / have-org-role-91\n               :ARG1 (t2 / team\n                         :name (n5 / name\n                                   :op1 \"Sunderland\"))\n               :ARG3 (s2 / striker)))", "(c3 / contract\n    :duration (t3 / temporal-quantity\n                  :quant 5\n                  :unit (y / year)))", "(s / sign-02\n   :ARG0 (c / club :name (n / name :op1 \"Old\" :op2 \"Boys\"))))", "(s / sign-02\n   :ARG0 (c / club :name (n / name :op1 \"Old\" :op2 \"Boys\"))))", "(s / sign-02\n   :ARG0 (c / club\n            :name (n / name\n                     :op1 \"Old\"\n                     :op2 \"Boys\")\n            :mod (c2 / country\n                     :name (n2 / name\n                               :op1 \"Argentina\"))\n            :poss (t / team\n                     :name (n3 / name\n                               :op1 \"Newell's\")))\n   :ARG1 (p / person\n            :name (n4 / name\n                      :op1 \"Ignacio\"\n                      :op2 \"Scocco\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (t2 / team\n                               :name (n5 / name\n                                         :op1 \"Sunderland\"))\n                     :ARG3 (s2 / striker)))\n   :ARG3 (c3 / contract\n             :duration (t3 / temporal-quantity\n                           :quant 5\n                           :unit (y / year)))\n   :mod (a / again))", "(s / sign-02\n   :mod (a / again))"], "smus": ["Newell's Argentinian club the Old Boys have signed.", "The Swans striker, Ignacio Scocco, has been signed.", "The contract is 5 year.", "Again signed.", "Newell's Old Boys club is an Argentinian club.", "b>Ignacio Scocco/b> (Sunderland striker)", "The contract is 5 years.", "Old Boys have signed.", "Old Boys have signed.", "Newell's Argentinian club Old Boys have again signed Ignacio Scocco, a Spurs striker, on a five-year contract.", "Again signed."]}, {"instance_id": "pyrxsum-7", "summary": "West Ham say they are \"disappointed\" with a ruling that the terms of their rental of the Olympic Stadium from next season should be made public.", "summary_trees": ["# ::snt West Ham say they are \"disappointed\" with a ruling that the terms of their rental of the Olympic Stadium from next season should be made public.\n(s / say-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"West\"\n                  :op2 \"Ham\"))\n      :ARG1 (d / disappoint-01\n            :ARG0 (r / rule-01\n                  :ARG1 (r2 / recommend-01\n                        :ARG1 (p / public-02\n                              :ARG1 (t2 / term\n                                    :mod (r3 / rent-01\n                                          :ARG0 t\n                                          :ARG1 (s2 / stadium\n                                                :name (n2 / name\n                                                      :op1 \"Olympic\"\n                                                      :op2 \"Stadium\"))\n                                          :time (s3 / season\n                                                :mod (n3 / next)))))))\n            :ARG1 t))"], "tree": ["(s / say-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"West\"\n                     :op2 \"Ham\")))", "(s / say-01\n   :ARG1 (d / disappoint-01\n            :ARG0 (r / rule-01\n                     :ARG1 (r2 / recommend-01\n                               :ARG1 (p / public-02\n                                        :ARG1 (t2 / term\n                                                  :mod (r3 / rent-01\n                                                           :ARG0 (t / team :name (n / name :op1 \"West\" :op2 \"Ham\"))\n                                                           :ARG1 (s2 / stadium\n                                                                     :name (n2 / name\n                                                                               :op1 \"Olympic\"\n                                                                               :op2 \"Stadium\"))\n                                                           :time (s3 / season\n                                                                     :mod (n3 / next)))))))\n            :ARG1 t))", "(t / team\n   :name (n / name\n            :op1 \"West\"\n            :op2 \"Ham\"))", "(d / disappoint-01\n   :ARG0 (r / rule-01\n            :ARG1 (r2 / recommend-01\n                      :ARG1 (p / public-02\n                               :ARG1 (t2 / term\n                                         :mod (r3 / rent-01\n                                                  :ARG0 (t / team :name (n / name :op1 \"West\" :op2 \"Ham\"))\n                                                  :ARG1 (s2 / stadium\n                                                            :name (n2 / name\n                                                                      :op1 \"Olympic\"\n                                                                      :op2 \"Stadium\"))\n                                                  :time (s3 / season\n                                                            :mod (n3 / next)))))))\n   :ARG1 t)", "(s / say-01\n   :ARG0 (t / team :name (n / name :op1 \"West\" :op2 \"Ham\")))", "(d / disappoint-01\n   :ARG0 (r / rule-01))", "(r / rule-01\n   :ARG1 (r2 / recommend-01))", "(r2 / recommend-01\n    :ARG1 (p / public-02))", "(p / public-02\n   :ARG1 (t2 / term))", "(r3 / rent-01\n    :ARG0 (t / team :name (n / name :op1 \"West\" :op2 \"Ham\"))\n    :ARG1 (s2 / stadium :name (n2 / name :op1 \"Olympic\" :op2 \"Stadium\")))", "(s / say-01\n   :ARG0 (t / team :name (n / name :op1 \"West\" :op2 \"Ham\")))", "(d / disappoint-01\n   :ARG0 (r / rule-01))", "(r / rule-01\n   :ARG1 (r2 / recommend-01))", "(r2 / recommend-01\n    :ARG1 (p / public-02))", "(p / public-02\n   :ARG1 (t2 / term))", "(r3 / rent-01\n    :ARG0 (t / team :name (n / name :op1 \"West\" :op2 \"Ham\")))", "(r3 / rent-01\n    :ARG1 (s2 / stadium :name (n2 / name :op1 \"Olympic\" :op2 \"Stadium\")))", "(s / say-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"West\"\n                     :op2 \"Ham\"))\n   :ARG1 (d / disappoint-01\n            :ARG0 (r / rule-01\n                     :ARG1 (r2 / recommend-01\n                               :ARG1 (p / public-02\n                                        :ARG1 (t2 / term\n                                                  :mod (r3 / rent-01\n                                                           :ARG0 t\n                                                           :ARG1 (s2 / stadium\n                                                                     :name (n2 / name\n                                                                               :op1 \"Olympic\"\n                                                                               :op2 \"Stadium\")))))))\n            :ARG1 t))", "(s / say-01)"], "smus": ["West Ham say --", "The ruling that the terms of West Ham's Olympic stadium rental next season should be public are disappointing, they say.", "West Ham", "The ruling that the terms of West Ham's Olympic Stadium rental next season should be public was disappointing.", "West Ham say --", "The ruling was disappointing.", "Rule of recommendation:", "Public should be.", "The terms are public.", "West Ham rent the Olympic Stadium.", "West Ham say --", "The ruling was disappointing.", "Rule of recommendation:", "Public should be.", "The terms are public.", "West Ham is renting.", "Olympic Stadium is rented.", "West Ham say they are disappointed by the ruling that their terms of rental for the Olympic Stadium should be public.", "Say."]}, {"instance_id": "pyrxsum-8", "summary": "Ex-army chief Abdul Fattah al-Sisi has vowed to to tackle \"terrorism\" and bring security, after being sworn in as Egypt's new president.", "summary_trees": ["# ::snt Ex-army chief Abdul Fattah al-Sisi has vowed to to tackle \"terrorism\" and bring security, after being sworn in as Egypt's new president.\n(v / vow-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Abdul\"\n                  :op2 \"Fattah\"\n                  :op3 \"al-Sisi\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (a / army)\n                  :ARG2 (c / chief)\n                  :time (e / ex)))\n      :ARG1 (a2 / and\n            :op1 (t / tackle-01\n                  :ARG0 p\n                  :ARG1 (t2 / terrorism))\n            :op2 (b / bring-01\n                  :ARG0 p\n                  :ARG1 (s / security)))\n      :time (a3 / after\n            :op1 (s2 / swear-in-06\n                  :ARG1 p\n                  :ARG2 (p2 / person\n                        :ARG0-of (h2 / have-org-role-91\n                              :ARG1 (c2 / country\n                                    :name (n2 / name\n                                          :op1 \"Egypt\"))\n                              :ARG2 (p3 / president\n                                    :ARG1-of (n3 / new-01)))))))"], "tree": ["(v / vow-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abdul\"\n                     :op2 \"Fattah\"\n                     :op3 \"al-Sisi\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (a / army)\n                        :ARG2 (c / chief)\n                        :time (e / ex))))", "(v / vow-01\n   :ARG1 (a2 / and\n             :op1 (t / tackle-01\n                     :ARG0 (p / person :name (n / name :op1 \"Abdul\" :op2 \"Fattah\" :op3 \"al-Sisi\")))\n                     :ARG1 (t2 / terrorism))\n             :op2 (b / bring-01\n                     :ARG0 p\n                     :ARG1 (s / security))))", "(v / vow-01\n   :time (a3 / after\n             :op1 (s2 / swear-in-06\n                      :ARG1 (p / person :name (n / name :op1 \"Abdul\" :op2 \"Fattah\" :op3 \"al-Sisi\")))\n                      :ARG2 (p2 / person\n                                :ARG0-of (h2 / have-org-role-91\n                                             :ARG1 (c2 / country\n                                                       :name (n2 / name\n                                                                 :op1 \"Egypt\"))\n                                             :ARG2 (p3 / president\n                                                       :ARG1-of (n3 / new-01)))))))", "(p / person\n   :name (n / name\n            :op1 \"Abdul\"\n            :op2 \"Fattah\"\n            :op3 \"al-Sisi\")\n   :ARG0-of (h / have-org-role-91\n               :ARG1 (a / army)\n               :ARG2 (c / chief)\n               :time (e / ex)))", "(a2 / and\n    :op1 (t / tackle-01\n            :ARG0 (p / person :name (n / name :op1 \"Abdul\" :op2 \"Fattah\" :op3 \"al-Sisi\")))\n            :ARG1 (t2 / terrorism))\n    :op2 (b / bring-01\n            :ARG0 p\n            :ARG1 (s / security)))", "(a3 / after\n    :op1 (s2 / swear-in-06\n             :ARG1 (p / person :name (n / name :op1 \"Abdul\" :op2 \"Fattah\" :op3 \"al-Sisi\")))\n             :ARG2 (p2 / person\n                       :ARG0-of (h2 / have-org-role-91\n                                    :ARG1 (c2 / country\n                                              :name (n2 / name\n                                                        :op1 \"Egypt\"))\n                                    :ARG2 (p3 / president\n                                              :ARG1-of (n3 / new-01))))))", "(v / vow-01\n   :ARG0 (p / person :name (n / name :op1 \"Abdul\" :op2 \"Fattah\" :op3 \"al-Sisi\"))))", "(t / tackle-01\n   :ARG0 (p / person :name (n / name :op1 \"Abdul\" :op2 \"Fattah\" :op3 \"al-Sisi\")))\n   :ARG1 (t2 / terrorism))", "(b / bring-01\n   :ARG0 (p / person :name (n / name :op1 \"Abdul\" :op2 \"Fattah\" :op3 \"al-Sisi\")))\n   :ARG1 (s / security))", "(s2 / swear-in-06\n    :ARG1 (p / person :name (n / name :op1 \"Abdul\" :op2 \"Fattah\" :op3 \"al-Sisi\")))\n    :ARG2 (p2 / person))", "(n3 / new-01)", "(v / vow-01\n   :ARG0 (p / person :name (n / name :op1 \"Abdul\" :op2 \"Fattah\" :op3 \"al-Sisi\"))))", "(t / tackle-01\n   :ARG0 (p / person :name (n / name :op1 \"Abdul\" :op2 \"Fattah\" :op3 \"al-Sisi\"))))", "(t / tackle-01\n   :ARG1 (t2 / terrorism))", "(b / bring-01\n   :ARG0 (p / person :name (n / name :op1 \"Abdul\" :op2 \"Fattah\" :op3 \"al-Sisi\"))))", "(b / bring-01\n   :ARG1 (s / security))", "(s2 / swear-in-06\n    :ARG1 (p / person :name (n / name :op1 \"Abdul\" :op2 \"Fattah\" :op3 \"al-Sisi\"))))", "(s2 / swear-in-06\n    :ARG2 (p2 / person))", "(v / vow-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abdul\"\n                     :op2 \"Fattah\"\n                     :op3 \"al-Sisi\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (a / army)\n                        :ARG2 (c / chief)\n                        :time (e / ex)))\n   :ARG1 (t / tackle-01\n            :ARG0 p\n            :ARG1 (t2 / terrorism))\n   :time (a3 / after\n             :op1 (s2 / swear-in-06\n                      :ARG1 p\n                      :ARG2 (p2 / person\n                                :ARG0-of (h2 / have-org-role-91\n                                             :ARG1 (c2 / country\n                                                       :name (n2 / name\n                                                                 :op1 \"Egypt\"))\n                                             :ARG2 (p3 / president\n                                                       :ARG1-of (n3 / new-01)))))))", "(v / vow-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abdul\"\n                     :op2 \"Fattah\"\n                     :op3 \"al-Sisi\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (a / army)\n                        :ARG2 (c / chief)\n                        :time (e / ex)))\n   :ARG1 (b / bring-01\n            :ARG0 p\n            :ARG1 (s / security))\n   :time (a3 / after\n             :op1 (s2 / swear-in-06\n                      :ARG1 p\n                      :ARG2 (p2 / person\n                                :ARG0-of (h2 / have-org-role-91\n                                             :ARG1 (c2 / country\n                                                       :name (n2 / name\n                                                                 :op1 \"Egypt\"))\n                                             :ARG2 (p3 / president\n                                                       :ARG1-of (n3 / new-01))))))\n   :time a3)", "(v / vow-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Abdul\"\n                     :op2 \"Fattah\"\n                     :op3 \"al-Sisi\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (a / army)\n                     :ARG2 (c / chief)))\n   :ARG1 (a2 / and\n             :op1 (t / tackle-01\n                     :ARG0 p\n                     :ARG1 (t2 / terrorism))\n             :op2 (b / bring-01\n                     :ARG0 p\n                     :ARG1 (s / security))))", "(v / vow-01\n   :time (a3 / after\n             :op1 (s2 / swear-in-06)))"], "smus": ["Ex-Army chief Abdul Fattah al-Sisi vowed --", "Abdul Fattah al-Sisi vowed to tackle terrorism and bring security.", "After Abdul Fattah al-Sisi was sworn into office as the new president of Egypt, he vowed to vow to.", "Ex-Army Chief Abdul Fattah al-Sisi", "Abdul Fattah al-Sisi will tackle terrorism and bring security.", "After Abdul Fattah al-Sisi is sworn into office as the new president of Egypt.", "Abdul Fattah al-Sisi vowed --", "Abdul Fattah al-Sisi will tackle terrorism.", "Abdul Fattah al-Sisi will bring security.", "Abdul Fattah al-Sisi was sworn in to the people.", "New.", "Abdul Fattah al-Sisi vowed --", "Abdul Fattah al-Sisi will tackle.", "tackle terrorism", "Abdul Fattah al-Sisi will bring.", "Bring security.", "Abdul Fattah al-Sisi was sworn in.", "People were sworn in.", "Ex-Army chief Abdul Fattah al-Sisi vowed to tackle terrorism after being sworn in as the new president of Egypt.", "Ex-Army chief Abdul Fattah al-Sisi vowed to bring security after being sworn in as the new president of Egypt.", "Army Chief Abdul Fattah al-Sisi vowed to tackle terrorism and bring security.", "After being sworn in, the vows were made."]}, {"instance_id": "pyrxsum-9", "summary": "Twenty-times champion jump jockey Sir Anthony McCoy has described having a statue put up in his honour at Cheltenham as 'flattering.'", "summary_trees": ["# ::snt Twenty-times champion jump jockey Sir Anthony McCoy has described having a statue put up in his honour at Cheltenham as 'flattering.'\n(d / describe-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sir\"\n                  :op2 \"Anthony\"\n                  :op3 \"McCoy\")\n            :ARG0-of (r / ride-01\n                  :ARG1 (j / jump-03))\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (c / champion\n                        :frequency 20)))\n      :ARG1 (h2 / have-04\n            :ARG1 (p2 / put-up-13\n                  :ARG1 (s / statue\n                        :ARG2-of (h3 / honor-01\n                              :ARG1 p))\n                  :location (s2 / sports-facility\n                        :name (n2 / name\n                              :op1 \"Cheltenham\"))))\n      :ARG2 (f / flatter-01))"], "tree": ["(d / describe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Anthony\"\n                     :op3 \"McCoy\")\n            :ARG0-of (r / ride-01\n                        :ARG1 (j / jump-03))\n            :ARG0-of (h / have-org-role-91\n                        :ARG2 (c / champion\n                                 :frequency 20))))", "(d / describe-01\n   :ARG1 (h2 / have-04\n             :ARG1 (p2 / put-up-13\n                       :ARG1 (s / statue\n                                :ARG2-of (h3 / honor-01\n                                             :ARG1 (p / person :name (n / name :op1 \"Sir\" :op2 \"Anthony\" :op3 \"McCoy\")))))\n                       :location (s2 / sports-facility\n                                     :name (n2 / name\n                                               :op1 \"Cheltenham\")))))", "(d / describe-01\n   :ARG2 (f / flatter-01))", "(p / person\n   :name (n / name\n            :op1 \"Sir\"\n            :op2 \"Anthony\"\n            :op3 \"McCoy\")\n   :ARG0-of (r / ride-01\n               :ARG1 (j / jump-03))\n   :ARG0-of (h / have-org-role-91\n               :ARG2 (c / champion\n                        :frequency 20)))", "(h2 / have-04\n    :ARG1 (p2 / put-up-13\n              :ARG1 (s / statue\n                       :ARG2-of (h3 / honor-01\n                                    :ARG1 (p / person :name (n / name :op1 \"Sir\" :op2 \"Anthony\" :op3 \"McCoy\")))))\n              :location (s2 / sports-facility\n                            :name (n2 / name\n                                      :op1 \"Cheltenham\"))))", "(d / describe-01\n   :ARG0 (p / person :name (n / name :op1 \"Sir\" :op2 \"Anthony\" :op3 \"McCoy\"))))", "(r / ride-01\n   :ARG1 (j / jump-03))", "(j / jump-03)", "(h2 / have-04\n    :ARG1 (p2 / put-up-13))", "(h3 / honor-01\n    :ARG1 (p / person :name (n / name :op1 \"Sir\" :op2 \"Anthony\" :op3 \"McCoy\"))))", "(f / flatter-01)", "(d / describe-01\n   :ARG0 (p / person :name (n / name :op1 \"Sir\" :op2 \"Anthony\" :op3 \"McCoy\"))))", "(r / ride-01\n   :ARG1 (j / jump-03))", "(h2 / have-04\n    :ARG1 (p2 / put-up-13))", "(h3 / honor-01\n    :ARG1 (p / person :name (n / name :op1 \"Sir\" :op2 \"Anthony\" :op3 \"McCoy\"))))", "(d / describe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Anthony\"\n                     :op3 \"McCoy\")\n            :ARG0 (r / ride-01\n                     :ARG1 (j / jump-03))\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (c / champion\n                              :frequency 20)))\n   :ARG1 (h2 / have-04\n             :ARG1 (p2 / put-up-13\n                       :ARG1 (s / statue\n                                :ARG2 (h3 / honor-01\n                                          :ARG1 p))))\n   :ARG2 (f / flatter-01))", "(d / describe-01)"], "smus": ["Jumper 20-time champion Sir Anthony McCoy has described --", "It is described as having a statue in honour of Sir Anthony McCoy put up at Chelsea.", "Described as flattering.", "Sir Anthony McCoy is a 20-time champion in the jump.", "Having a statue in honour of Sir Anthony McCoy put up at Chelsea", "Sir Anthony McCoy has described --", "Jumping.", "Jump.", "having a put up.", "In honor of Sir Anthony McCoy.", "flattering.", "Sir Anthony McCoy has described --", "Jumping.", "having a put up.", "In honor of Sir Anthony McCoy.", "Jumper 20 times champion Sir Anthony McCoy has described having his honor statue put up as flattering.", "Described."]}, {"instance_id": "pyrxsum-10", "summary": "A cafe owner has defended a sign urging people to eat cake to avoid being kidnapped in the town where April Jones was abducted and murdered in 2012.", "summary_trees": ["# ::snt A cafe owner has defended a sign urging people to eat cake to avoid being kidnapped in the town where April Jones was abducted and murdered in 2012.\n(d / defend-01\n      :ARG0 (p / person\n            :ARG0-of (o / own-01\n                  :ARG1 (c / cafe)))\n      :ARG1 (s / sign\n            :ARG0-of (u / urge-01\n                  :ARG1 (p2 / person)\n                  :ARG2 (e / eat-01\n                        :ARG0 p2\n                        :ARG1 (c2 / cake)\n                        :purpose (a / avoid-01\n                              :ARG0 p2\n                              :ARG1 (k / kidnap-01\n                                    :ARG1 p2\n                                    :location (t / town\n                                          :location-of (a2 / and\n                                                :op1 (a3 / abduct-01\n                                                      :ARG1 (p3 / person\n                                                            :name (n / name\n                                                                  :op1 \"April\"\n                                                                  :op2 \"Jones\")))\n                                                :op2 (m / murder-01\n                                                      :ARG1 p3)\n                                                :time (d2 / date-entity\n                                                      :year 2012)))))))))"], "tree": ["(d / defend-01\n   :ARG0 (p / person\n            :ARG0-of (o / own-01\n                        :ARG1 (c / cafe))))", "(d / defend-01\n   :ARG1 (s / sign\n            :ARG0-of (u / urge-01\n                        :ARG1 (p2 / person)\n                        :ARG2 (e / eat-01\n                                 :ARG0 p2\n                                 :ARG1 (c2 / cake)\n                                 :purpose (a / avoid-01\n                                             :ARG0 p2\n                                             :ARG1 (k / kidnap-01\n                                                      :ARG1 p2\n                                                      :location (t / town\n                                                                   :location-of (a2 / and\n                                                                                    :op1 (a3 / abduct-01\n                                                                                             :ARG1 (p3 / person\n                                                                                                       :name (n / name\n                                                                                                                :op1 \"April\"\n                                                                                                                :op2 \"Jones\")))\n                                                                                    :op2 (m / murder-01\n                                                                                            :ARG1 p3)\n                                                                                    :time (d2 / date-entity\n                                                                                              :year 2012)))))))))", "(p / person\n   :ARG0-of (o / own-01\n               :ARG1 (c / cafe)))", "(s / sign\n   :ARG0-of (u / urge-01\n               :ARG1 (p2 / person)\n               :ARG2 (e / eat-01\n                        :ARG0 p2\n                        :ARG1 (c2 / cake)\n                        :purpose (a / avoid-01\n                                    :ARG0 p2\n                                    :ARG1 (k / kidnap-01\n                                             :ARG1 p2\n                                             :location (t / town\n                                                          :location-of (a2 / and\n                                                                           :op1 (a3 / abduct-01\n                                                                                    :ARG1 (p3 / person\n                                                                                              :name (n / name\n                                                                                                       :op1 \"April\"\n                                                                                                       :op2 \"Jones\")))\n                                                                           :op2 (m / murder-01\n                                                                                   :ARG1 p3)\n                                                                           :time (d2 / date-entity\n                                                                                     :year 2012))))))))", "(d / defend-01\n   :ARG0 (p / person))", "(o / own-01\n   :ARG1 (c / cafe))", "(u / urge-01\n   :ARG1 (p2 / person))", "(e / eat-01\n   :ARG0 (p2 / person)\n   :ARG1 (c2 / cake))", "(a / avoid-01\n   :ARG0 (p2 / person)\n   :ARG1 (k / kidnap-01))", "(k / kidnap-01\n   :ARG1 (p2 / person)\n   :location (t / town))", "(a3 / abduct-01\n    :ARG1 (p3 / person :name (n / name :op1 \"April\" :op2 \"Jones\")))", "(m / murder-01\n   :ARG1 (p3 / person :name (n / name :op1 \"April\" :op2 \"Jones\")))", "(d / defend-01\n   :ARG0 (p / person))", "(o / own-01\n   :ARG1 (c / cafe))", "(u / urge-01\n   :ARG1 (p2 / person))", "(e / eat-01\n   :ARG0 (p2 / person))", "(e / eat-01\n   :ARG1 (c2 / cake))", "(a / avoid-01\n   :ARG0 (p2 / person))", "(a / avoid-01\n   :ARG1 (k / kidnap-01))", "(k / kidnap-01\n   :ARG1 (p2 / person))", "(k / kidnap-01\n   :location (t / town))", "(a3 / abduct-01\n    :ARG1 (p3 / person :name (n / name :op1 \"April\" :op2 \"Jones\")))", "(m / murder-01\n   :ARG1 (p3 / person :name (n / name :op1 \"April\" :op2 \"Jones\")))", "(d / defend-01\n   :ARG0 (p / person\n            :ARG0-of (o / own-01\n                        :ARG1 (c / cafe)))\n   :ARG1 (s / sign\n            :ARG0-of (u / urge-01\n                        :ARG1 (p2 / person)\n                        :ARG2 (e / eat-01\n                                 :ARG0 p2\n                                 :ARG1 (c2 / cake)\n                                 :purpose (a / avoid-01\n                                             :ARG0 p2\n                                             :ARG1 (k / kidnap-01\n                                                      :ARG1 p2\n                                                      :location (t / town\n                                                                   :location-of (a3 / abduct-01\n                                                                                    :ARG1 (p3 / person\n                                                                                              :name (n / name\n                                                                                                       :op1 \"April\"\n                                                                                                       :op2 \"Jones\"))\n                                                                                    :time (d2 / date-entity\n                                                                                              :year 2012)))))))))", "(d / defend-01\n   :ARG0 (p / person\n            :ARG0-of (o / own-01\n                        :ARG1 (c / cafe)))\n   :ARG1 (s / sign\n            :ARG0-of (u / urge-01\n                        :ARG1 (p2 / person)\n                        :ARG2 (e / eat-01\n                                 :ARG0 p2\n                                 :ARG1 (c2 / cake)\n                                 :purpose (a / avoid-01\n                                             :ARG0 p2\n                                             :ARG1 (k / kidnap-01\n                                                      :ARG1 p2\n                                                      :location (t / town\n                                                                   :location-of (m / murder-01\n                                                                                   :ARG1 (p3 / person :name (n / name :op1 \"April\" :op2 \"Jones\"))\n                                                                                   :time (d2 / date-entity\n                                                                                             :year 2012)\n                                                                                   :time d2))))))))", "(d / defend-01\n   :ARG0 (p / person\n            :ARG0 (o / own-01\n                     :ARG1 (c / cafe)))\n   :ARG1 (s / sign\n            :ARG0 (u / urge-01\n                     :ARG1 (p2 / person)\n                     :ARG2 (e / eat-01\n                              :ARG0 p2\n                              :ARG1 (c2 / cake)))))", "(d / defend-01)"], "smus": ["The owner of the cafe has defended himself.", "A sign urging people to eat cake to avoid being kidnapped in the town where April Jones was abducted and murdered in 2012 was defended.", "Owner of the cafe.", "A sign urging people to eat cake to avoid being kidnapped in the town where April Jones was abducted and murdered in 2012.", "People have defended.", "The cafe is owned by the cafe.", "Urging people.", "People will eat the cake.", "People will avoid being kidnapped.", "People were kidnapped in town.", "April Jones was abducted.", "April Jones was murdered.", "People have defended.", "The cafe is owned by the cafe.", "Urging people.", "People will eat.", "Eat the cake.", "People will avoid.", "Avoid being kidnapped.", "People were kidnapped.", "Kidnapped in town", "April Jones was abducted.", "April Jones was murdered.", "The cafe owner defended a sign urging people to eat cake to avoid being kidnapped in the town where April Jones was abducted in 2012.", "The cafe owner defended a sign urging people to eat cake to avoid being kidnapped in the town where April Jones was murdered in 2012.", "The cafe owner has defended the sign urging people to eat the cake.", "Defended."]}, {"instance_id": "pyrxsum-11", "summary": "Three people have been killed and at least 62 others wounded in two explosions on passenger buses in the Kenyan capital Nairobi, officials say.", "summary_trees": ["# ::snt Three people have been killed and at least 62 others wounded in two explosions on passenger buses in the Kenyan capital Nairobi, officials say.\n(s / say-01\n      :ARG0 (o / official)\n      :ARG1 (a / and\n            :op1 (k / kill-01\n                  :ARG0 (e / explode-01\n                        :quant 2\n                        :ARG1 (b / bus\n                              :mod (p / passenger))\n                        :location (c / city\n                              :name (n / name\n                                    :op1 \"Nairobi\")\n                              :ARG0-of (h / have-org-role-91\n                                    :ARG1 (c2 / country\n                                          :name (n2 / name\n                                                :op1 \"Kenya\"))\n                                    :ARG2 (c3 / capital))))\n                  :ARG1 (p2 / person\n                        :quant 3))\n            :op2 (w / wound-01\n                  :ARG0 e\n                  :ARG1 (p3 / person\n                        :quant (a2 / at-least\n                              :op1 62)\n                        :mod (o2 / other)))))"], "tree": ["(s / say-01\n   :ARG0 (o / official))", "(s / say-01\n   :ARG1 (a / and\n            :op1 (k / kill-01\n                    :ARG0 (e / explode-01\n                             :quant 2\n                             :ARG1 (b / bus\n                                      :mod (p / passenger))\n                             :location (c / city\n                                          :name (n / name\n                                                   :op1 \"Nairobi\")\n                                          :ARG0-of (h / have-org-role-91\n                                                      :ARG1 (c2 / country\n                                                                :name (n2 / name\n                                                                          :op1 \"Kenya\"))\n                                                      :ARG2 (c3 / capital))))\n                    :ARG1 (p2 / person\n                              :quant 3))\n            :op2 (w / wound-01\n                    :ARG0 e\n                    :ARG1 (p3 / person\n                              :quant (a2 / at-least\n                                         :op1 62)\n                              :mod (o2 / other)))))", "(a / and\n   :op1 (k / kill-01\n           :ARG0 (e / explode-01\n                    :quant 2\n                    :ARG1 (b / bus\n                             :mod (p / passenger))\n                    :location (c / city\n                                 :name (n / name\n                                          :op1 \"Nairobi\")\n                                 :ARG0-of (h / have-org-role-91\n                                             :ARG1 (c2 / country\n                                                       :name (n2 / name\n                                                                 :op1 \"Kenya\"))\n                                             :ARG2 (c3 / capital))))\n           :ARG1 (p2 / person\n                     :quant 3))\n   :op2 (w / wound-01\n           :ARG0 e\n           :ARG1 (p3 / person\n                     :quant (a2 / at-least\n                                :op1 62)\n                     :mod (o2 / other))))", "(s / say-01\n   :ARG0 (o / official))", "(k / kill-01\n   :ARG0 (e / explode-01))", "(e / explode-01\n   :quant 2\n   :ARG1 (b / bus))", "(w / wound-01\n   :ARG0 (e / explode-01)\n   :ARG1 (p3 / person))", "(s / say-01\n   :ARG0 (o / official))", "(k / kill-01\n   :ARG0 (e / explode-01))", "(e / explode-01\n   :quant 2)", "(e / explode-01\n   :ARG1 (b / bus))", "(w / wound-01\n   :ARG0 (e / explode-01))", "(w / wound-01\n   :ARG1 (p3 / person))", "(s / say-01\n   :ARG0 (o / official)\n   :ARG1 (k / kill-01\n            :ARG0 (e / explode-01\n                     :quant 2\n                     :ARG1 (b / bus\n                              :mod (p / passenger))\n                     :location (c / city\n                                  :name (n / name\n                                           :op1 \"Nairobi\")\n                                  :ARG0-of (h / have-org-role-91\n                                              :ARG1 (c2 / country\n                                                        :name (n2 / name\n                                                                  :op1 \"Kenya\"))\n                                              :ARG2 (c3 / capital))))\n            :ARG1 (p2 / person\n                      :quant 3)))", "(s / say-01\n   :ARG0 (o / official)\n   :ARG1 (w / wound-01\n            :ARG0 (e / explode-01)\n            :ARG1 (p3 / person\n                      :quant (a2 / at-least\n                                 :op1 62)\n                      :mod (o2 / other))))", "(s / say-01\n   :ARG0 (o / official)\n   :ARG1 (a / and\n            :op1 (k / kill-01\n                    :ARG0 (e / explode-01\n                             :quant 2\n                             :ARG1 (b / bus\n                                      :mod (p / passenger)))\n                    :ARG1 (p2 / person\n                              :quant 3))\n            :op2 (w / wound-01\n                    :ARG0 e\n                    :ARG1 (p3 / person\n                              :quant (a2 / at-least\n                                         :op1 62)\n                              :mod (o2 / other)))))", "(s / say-01)"], "smus": ["Officials say --", "Two explosions in passenger buses in the Kenyan capital Nairobi have killed three and wounded at least 62 others, the report said.", "Two explosions in passenger buses in the Kenyan capital Nairobi have killed three and wounded at least 62 others.", "Officials say --", "Explosions have killed.", "Two explosions in the buses.", "Three people were wounded in the explosions.", "Officials say --", "Explosions have killed.", "Two explosions.", "Bus explosions", "Explosions wounds", "The three were wounded.", "Officials say two explosions in passenger buses in the Kenyan capital Nairobi have killed three.", "Officials say at least 62 others were wounded in the explosions.", "Officials say two explosions on passenger buses have killed three and wounded at least 62 others.", "Say."]}, {"instance_id": "pyrxsum-12", "summary": "Thirty homes had to be evacuated after a gas pipe was damaged in a fire that was started deliberately.", "summary_trees": ["# ::snt Thirty homes had to be evacuated after a gas pipe was damaged in a fire that was started deliberately.\n(o / obligate-01\n      :ARG2 (e / evacuate-01\n            :ARG1 (h / home\n                  :quant 30))\n      :time (a / after\n            :op1 (d / damage-01\n                  :ARG0 (f / fire\n                        :ARG1-of (s / start-01\n                              :manner (d2 / deliberate)))\n                  :ARG1 (p / pipe\n                        :mod (g / gas)))))"], "tree": ["(o / obligate-01\n   :ARG2 (e / evacuate-01\n            :ARG1 (h / home\n                     :quant 30)))", "(o / obligate-01\n   :time (a / after\n            :op1 (d / damage-01\n                    :ARG0 (f / fire\n                             :ARG1-of (s / start-01\n                                         :manner (d2 / deliberate)))\n                    :ARG1 (p / pipe\n                             :mod (g / gas)))))", "(e / evacuate-01\n   :ARG1 (h / home\n            :quant 30))", "(a / after\n   :op1 (d / damage-01\n           :ARG0 (f / fire\n                    :ARG1-of (s / start-01\n                                :manner (d2 / deliberate)))\n           :ARG1 (p / pipe\n                    :mod (g / gas))))", "(o / obligate-01\n   :ARG2 (e / evacuate-01))", "(e / evacuate-01\n   :ARG1 (h / home))", "(d / damage-01\n   :ARG0 (f / fire))", "(s / start-01\n   :manner (d2 / deliberate))", "(o / obligate-01\n   :ARG2 (e / evacuate-01))", "(e / evacuate-01\n   :ARG1 (h / home))", "(d / damage-01\n   :ARG0 (f / fire))", "(s / start-01\n   :manner (d2 / deliberate))", "(o / obligate-01\n   :ARG2 (e / evacuate-01\n            :ARG1 (h / home\n                     :quant 30)))", "(o / obligate-01\n   :time (a / after\n            :op1 (d / damage-01)))"], "smus": ["30 homes had to be evacuated.", "After the gas pipe was damaged by a deliberately started fire, it must have been after.", "30 homes were evacuated.", "After a deliberately started fire damaged the gas pipe.", "Evacuation was necessary.", "Homes were evacuated.", "The fire damaged.", "Deliberately started.", "Evacuation was necessary.", "Homes were evacuated.", "The fire damaged.", "Deliberately started.", "30 homes had to be evacuated.", "Must happen after the damage is done."]}, {"instance_id": "pyrxsum-13", "summary": "Friends of Keith Harris have joined his family at his funeral in Blackpool.", "summary_trees": ["# ::snt Friends of Keith Harris have joined his family at his funeral in Blackpool.\n(j / join-04\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Keith\"\n                              :op2 \"Harris\"))\n                  :ARG2 (f / friend)))\n      :ARG1 (f2 / family\n            :poss p2)\n      :location (f3 / funeral\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Blackpool\"))))"], "tree": ["(j / join-04\n   :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                        :ARG1 (p2 / person\n                                  :name (n / name\n                                           :op1 \"Keith\"\n                                           :op2 \"Harris\"))\n                        :ARG2 (f / friend))))", "(j / join-04\n   :ARG1 (f2 / family\n             :poss (p2 / person :name (n / name :op1 \"Keith\" :op2 \"Harris\"))))", "(j / join-04\n   :location (f3 / funeral\n                 :location (c / city\n                              :name (n2 / name\n                                        :op1 \"Blackpool\"))))", "(p / person\n   :ARG0-of (h / have-rel-role-91\n               :ARG1 (p2 / person\n                         :name (n / name\n                                  :op1 \"Keith\"\n                                  :op2 \"Harris\"))\n               :ARG2 (f / friend)))", "(f3 / funeral\n    :location (c / city\n                 :name (n2 / name\n                           :op1 \"Blackpool\")))", "(j / join-04\n   :ARG0 (p / person))", "(j / join-04\n   :ARG0 (p / person))", "(j / join-04\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Keith\"\n                                        :op2 \"Harris\"))\n                     :ARG2 (f / friend)))\n   :ARG1 (f2 / family\n             :poss p2))", "(j / join-04\n   :location (f3 / funeral\n                 :location (c / city\n                              :name (n2 / name\n                                        :op1 \"Blackpool\"))))"], "smus": ["Keith Harris' friends have joined him.", "Keith Harris' family has joined him.", "Joined at a funeral in Blackpool.", "Keith Harris friends", "A funeral took place in Blackpool.", "People have joined.", "People have joined.", "Keith Harris's friends have joined his family.", "Joined at a funeral in Blackpool."]}, {"instance_id": "pyrxsum-14", "summary": "Former Labour MP Bob Marshall-Andrews has defected to the Lib Dems after describing Jeremy Corbyn's party as a \"political basket case\".", "summary_trees": ["# ::snt Former Labour MP Bob Marshall-Andrews has defected to the Lib Dems after describing Jeremy Corbyn's party as a \"political basket case\".\n(d / defect-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Bob\"\n                  :op2 \"Marshall-Andrews\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (p2 / parliament)\n                  :ARG2 (m / member)\n                  :time (f / former))\n            :ARG0-of (h2 / have-org-role-91\n                  :ARG1 (p3 / political-party\n                        :name (n2 / name\n                              :op1 \"Labour\"))))\n      :ARG1 (p4 / political-party\n            :name (n3 / name\n                  :op1 \"Liberal\"\n                  :op2 \"Democrat\"))\n      :time (a / after\n            :op1 (d2 / describe-01\n                  :ARG0 p\n                  :ARG1 (p5 / party\n                        :poss (p6 / person\n                              :name (n4 / name\n                                    :op1 \"Jeremy\"\n                                    :op2 \"Corbyn\")))\n                  :ARG2 (c / case\n                        :mod (b / basket)\n                        :mod (p7 / politics)))))"], "tree": ["(d / defect-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"\n                     :op2 \"Marshall-Andrews\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (p2 / parliament)\n                        :ARG2 (m / member)\n                        :time (f / former))\n            :ARG0-of (h2 / have-org-role-91\n                         :ARG1 (p3 / political-party\n                                   :name (n2 / name\n                                             :op1 \"Labour\")))))", "(d / defect-01\n   :ARG1 (p4 / political-party\n             :name (n3 / name\n                       :op1 \"Liberal\"\n                       :op2 \"Democrat\")))", "(d / defect-01\n   :time (a / after\n            :op1 (d2 / describe-01\n                     :ARG0 (p / person :name (n / name :op1 \"Bob\" :op2 \"Marshall-Andrews\")))\n                     :ARG1 (p5 / party\n                               :poss (p6 / person\n                                         :name (n4 / name\n                                                   :op1 \"Jeremy\"\n                                                   :op2 \"Corbyn\")))\n                     :ARG2 (c / case\n                              :mod (b / basket)\n                              :mod (p7 / politics)))))", "(p / person\n   :name (n / name\n            :op1 \"Bob\"\n            :op2 \"Marshall-Andrews\")\n   :ARG0-of (h / have-org-role-91\n               :ARG1 (p2 / parliament)\n               :ARG2 (m / member)\n               :time (f / former))\n   :ARG0-of (h2 / have-org-role-91\n                :ARG1 (p3 / political-party\n                          :name (n2 / name\n                                    :op1 \"Labour\"))))", "(p4 / political-party\n    :name (n3 / name\n              :op1 \"Liberal\"\n              :op2 \"Democrat\"))", "(a / after\n   :op1 (d2 / describe-01\n            :ARG0 (p / person :name (n / name :op1 \"Bob\" :op2 \"Marshall-Andrews\")))\n            :ARG1 (p5 / party\n                      :poss (p6 / person\n                                :name (n4 / name\n                                          :op1 \"Jeremy\"\n                                          :op2 \"Corbyn\")))\n            :ARG2 (c / case\n                     :mod (b / basket)\n                     :mod (p7 / politics))))", "(d / defect-01\n   :ARG0 (p / person :name (n / name :op1 \"Bob\" :op2 \"Marshall-Andrews\"))))", "(d2 / describe-01\n    :ARG0 (p / person :name (n / name :op1 \"Bob\" :op2 \"Marshall-Andrews\")))\n    :ARG1 (p5 / party))", "(d / defect-01\n   :ARG0 (p / person :name (n / name :op1 \"Bob\" :op2 \"Marshall-Andrews\"))))", "(d2 / describe-01\n    :ARG0 (p / person :name (n / name :op1 \"Bob\" :op2 \"Marshall-Andrews\"))))", "(d2 / describe-01\n    :ARG1 (p5 / party))", "(d / defect-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"\n                     :op2 \"Marshall-Andrews\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (p2 / parliament)\n                     :ARG2 (m / member))\n            :ARG0 (h2 / have-org-role-91\n                      :ARG1 (p3 / political-party\n                                :name (n2 / name\n                                          :op1 \"Labour\"))))\n   :ARG1 (p4 / political-party\n             :name (n3 / name\n                       :op1 \"Liberal\"\n                       :op2 \"Democrat\")))", "(d / defect-01\n   :time (a / after\n            :op1 (d2 / describe-01)))"], "smus": ["Former Labour MP Bob Marshall-Andrews has defected.", "The Lib Dems have defected.", "Defections occurred after Bob Marshall-Andrews described Jeremy Corbyn's party as a basket case of politics.", "former MP and Labour MP Bob Marshall-Andrews", "Lib Dem.", "After Bob Marshall-Andrews describing Jeremy Corbyn's party as a \" basket case \" of politics.", "Bob Marshall-Andrews defected.", "Bob Marshall-Andrews is describing the party.", "Bob Marshall-Andrews defected.", "\"Bob Marshall-Andrews is describing...", "describing the party", "Labour MP Bob Marshall-Andrews has defected to the Liberal Democrats.", "Defective occurred after describing."]}, {"instance_id": "pyrxsum-15", "summary": "Castleford Tigers beat local rivals Wakefield Trinity to clinch the League Leaders' Shield.", "summary_trees": ["# ::snt Castleford Tigers beat local rivals Wakefield Trinity to clinch the League Leaders' Shield.\n(b / beat-03\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Castleford\"\n                  :op2 \"Tigers\"))\n      :ARG1 (t2 / team\n            :name (n2 / name\n                  :op1 \"Wakefield\"\n                  :op2 \"Trinity\")\n            :ARG0-of (r / rival-01\n                  :ARG1 t)\n            :ARG1-of (l / local-02))\n      :purpose (c / clinch-01\n            :ARG0 t\n            :ARG1 (s / shield\n                  :name (n3 / name\n                        :op1 \"League\"\n                        :op2 \"Leaders'\"\n                        :op3 \"Shield\"))))"], "tree": ["(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Castleford\"\n                     :op2 \"Tigers\")))", "(b / beat-03\n   :ARG1 (t2 / team\n             :name (n2 / name\n                       :op1 \"Wakefield\"\n                       :op2 \"Trinity\")\n             :ARG0-of (r / rival-01\n                         :ARG1 (t / team :name (n / name :op1 \"Castleford\" :op2 \"Tigers\")))\n             :ARG1-of (l / local-02)))", "(b / beat-03\n   :purpose (c / clinch-01\n               :ARG0 (t / team :name (n / name :op1 \"Castleford\" :op2 \"Tigers\"))\n               :ARG1 (s / shield\n                        :name (n3 / name\n                                  :op1 \"League\"\n                                  :op2 \"Leaders'\"\n                                  :op3 \"Shield\"))))", "(t / team\n   :name (n / name\n            :op1 \"Castleford\"\n            :op2 \"Tigers\"))", "(t2 / team\n    :name (n2 / name\n              :op1 \"Wakefield\"\n              :op2 \"Trinity\")\n    :ARG0-of (r / rival-01\n                :ARG1 (t / team :name (n / name :op1 \"Castleford\" :op2 \"Tigers\")))\n    :ARG1-of (l / local-02))", "(c / clinch-01\n   :ARG0 (t / team :name (n / name :op1 \"Castleford\" :op2 \"Tigers\"))\n   :ARG1 (s / shield\n            :name (n3 / name\n                      :op1 \"League\"\n                      :op2 \"Leaders'\"\n                      :op3 \"Shield\")))", "(b / beat-03\n   :ARG0 (t / team :name (n / name :op1 \"Castleford\" :op2 \"Tigers\")))", "(r / rival-01\n   :ARG1 (t / team :name (n / name :op1 \"Castleford\" :op2 \"Tigers\")))", "(l / local-02)", "(c / clinch-01\n   :ARG0 (t / team :name (n / name :op1 \"Castleford\" :op2 \"Tigers\"))\n   :ARG1 (s / shield :name (n3 / name :op1 \"League\" :op2 \"Leaders'\" :op3 \"Shield\")))", "(b / beat-03\n   :ARG0 (t / team :name (n / name :op1 \"Castleford\" :op2 \"Tigers\")))", "(r / rival-01\n   :ARG1 (t / team :name (n / name :op1 \"Castleford\" :op2 \"Tigers\")))", "(c / clinch-01\n   :ARG0 (t / team :name (n / name :op1 \"Castleford\" :op2 \"Tigers\")))", "(c / clinch-01\n   :ARG1 (s / shield :name (n3 / name :op1 \"League\" :op2 \"Leaders'\" :op3 \"Shield\")))", "(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Castleford\"\n                     :op2 \"Tigers\"))\n   :ARG1 (t2 / team\n             :name (n2 / name\n                       :op1 \"Wakefield\"\n                       :op2 \"Trinity\")\n             :ARG0 (r / rival-01\n                      :ARG1 t)\n             :ARG1 (l / local-02)))", "(b / beat-03\n   :purpose (c / clinch-01))"], "smus": ["The Castleford Tigers beat", "The local rivals, the Castleford Tigers, Wakefield Trinity, won", "The Tigers beat the Spurs 1-0 to clinch the League Leaders' shield.", "Castleford Tigers", "The local rivals are the Wakefield Trinity and the Castleford Tigers.", "Castleford Tigers to clinch League Leaders' shield", "The Castleford Tigers beat", "The Castleford Tigers are rivals.", "Local.", "Castleford Tigers to clinch League Leaders' shield", "The Castleford Tigers beat", "The Castleford Tigers are rivals.", "Castleford Tigers to clinch", "The League Leaders' shield will clinch.", "Castleford Tigers beat local rivals Wakefield Trinity 2-1", "Beat to clinch."]}, {"instance_id": "pyrxsum-16", "summary": "At least 23 people have been killed in the north-eastern Nigerian town of Monguno after a Boko Haram bomb confiscated by vigilantes exploded, an MP and army source have told the BBC.", "summary_trees": ["# ::snt At least 23 people have been killed in the north-eastern Nigerian town of Monguno after a Boko Haram bomb confiscated by vigilantes exploded, an MP and army source have told the BBC.\n(t / tell-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (p2 / parliament)\n                        :ARG2 (m / member)))\n            :op2 (s / source\n                  :mod (a2 / army)))\n      :ARG1 (k / kill-01\n            :ARG1 (p3 / person\n                  :quant (a3 / at-least\n                        :op1 23))\n            :location (t2 / town\n                  :name (n / name\n                        :op1 \"Monguno\")\n                  :location (n2 / northeast\n                        :part-of (c / country\n                              :name (n3 / name\n                                    :op1 \"Nigeria\"))))\n            :time (a4 / after\n                  :op1 (e / explode-01\n                        :ARG1 (b / bomb-01\n                              :ARG0 (c2 / criminal-organization\n                                    :name (n4 / name\n                                          :op1 \"Boko\"\n                                          :op2 \"Haram\"))\n                              :ARG1-of (c3 / confiscate-01\n                                    :ARG0 (v / vigilante))))))\n      :ARG2 (p4 / publication\n            :name (n5 / name\n                  :op1 \"BBC\")))"], "tree": ["(t / tell-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :ARG0-of (h / have-org-role-91\n                                :ARG1 (p2 / parliament)\n                                :ARG2 (m / member)))\n            :op2 (s / source\n                    :mod (a2 / army))))", "(t / tell-01\n   :ARG1 (k / kill-01\n            :ARG1 (p3 / person\n                      :quant (a3 / at-least\n                                 :op1 23))\n            :location (t2 / town\n                          :name (n / name\n                                   :op1 \"Monguno\")\n                          :location (n2 / northeast\n                                        :part-of (c / country\n                                                    :name (n3 / name\n                                                              :op1 \"Nigeria\"))))\n            :time (a4 / after\n                      :op1 (e / explode-01\n                              :ARG1 (b / bomb-01\n                                       :ARG0 (c2 / criminal-organization\n                                                 :name (n4 / name\n                                                           :op1 \"Boko\"\n                                                           :op2 \"Haram\"))\n                                       :ARG1-of (c3 / confiscate-01\n                                                    :ARG0 (v / vigilante)))))))", "(t / tell-01\n   :ARG2 (p4 / publication\n             :name (n5 / name\n                       :op1 \"BBC\")))", "(a / and\n   :op1 (p / person\n           :ARG0-of (h / have-org-role-91\n                       :ARG1 (p2 / parliament)\n                       :ARG2 (m / member)))\n   :op2 (s / source\n           :mod (a2 / army)))", "(k / kill-01\n   :ARG1 (p3 / person\n             :quant (a3 / at-least\n                        :op1 23))\n   :location (t2 / town\n                 :name (n / name\n                          :op1 \"Monguno\")\n                 :location (n2 / northeast\n                               :part-of (c / country\n                                           :name (n3 / name\n                                                     :op1 \"Nigeria\"))))\n   :time (a4 / after\n             :op1 (e / explode-01\n                     :ARG1 (b / bomb-01\n                              :ARG0 (c2 / criminal-organization\n                                        :name (n4 / name\n                                                  :op1 \"Boko\"\n                                                  :op2 \"Haram\"))\n                              :ARG1-of (c3 / confiscate-01\n                                           :ARG0 (v / vigilante))))))", "(p4 / publication\n    :name (n5 / name\n              :op1 \"BBC\"))", "(t / tell-01\n   :ARG0 (a / and))", "(k / kill-01\n   :ARG1 (p3 / person))", "(e / explode-01\n   :ARG1 (b / bomb-01))", "(b / bomb-01\n   :ARG0 (c2 / criminal-organization :name (n4 / name :op1 \"Boko\" :op2 \"Haram\")))", "(c3 / confiscate-01\n    :ARG0 (v / vigilante))", "(t / tell-01\n   :ARG0 (a / and))", "(k / kill-01\n   :ARG1 (p3 / person))", "(e / explode-01\n   :ARG1 (b / bomb-01))", "(b / bomb-01\n   :ARG0 (c2 / criminal-organization :name (n4 / name :op1 \"Boko\" :op2 \"Haram\")))", "(c3 / confiscate-01\n    :ARG0 (v / vigilante))", "(t / tell-01\n   :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (p2 / parliament)\n                        :ARG2 (m / member)))\n   :ARG1 (k / kill-01\n            :ARG1 (p3 / person\n                      :quant (a3 / at-least\n                                 :op1 23))\n            :location (t2 / town\n                          :name (n / name\n                                   :op1 \"Monguno\")\n                          :location (n2 / northeast\n                                        :part-of (c / country\n                                                    :name (n3 / name\n                                                              :op1 \"Nigeria\"))))\n            :time (a4 / after\n                      :op1 (e / explode-01\n                              :ARG1 (b / bomb-01\n                                       :ARG0 (c2 / criminal-organization\n                                                 :name (n4 / name\n                                                           :op1 \"Boko\"\n                                                           :op2 \"Haram\"))\n                                       :ARG1-of (c3 / confiscate-01\n                                                    :ARG0 (v / vigilante))))))\n   :ARG2 (p4 / publication\n             :name (n5 / name\n                       :op1 \"BBC\")))", "(t / tell-01\n   :ARG0 (s / source\n            :mod (a2 / army))\n   :ARG1 (k / kill-01\n            :ARG1 (p3 / person\n                      :quant (a3 / at-least\n                                 :op1 23))\n            :location (t2 / town\n                          :name (n / name\n                                   :op1 \"Monguno\")\n                          :location (n2 / northeast\n                                        :part-of (c / country\n                                                    :name (n3 / name\n                                                              :op1 \"Nigeria\"))))\n            :time (a4 / after\n                      :op1 (e / explode-01\n                              :ARG1 (b / bomb-01\n                                       :ARG0 (c2 / criminal-organization\n                                                 :name (n4 / name\n                                                           :op1 \"Boko\"\n                                                           :op2 \"Haram\"))\n                                       :ARG1-of (c3 / confiscate-01\n                                                    :ARG0 (v / vigilante))))))\n   :ARG1 k\n   :ARG2 (p4 / publication\n             :name (n5 / name\n                       :op1 \"BBC\")))", "(t / tell-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :ARG0 (h / have-org-role-91\n                             :ARG1 (p2 / parliament)\n                             :ARG2 (m / member)))\n            :op2 (s / source\n                    :mod (a2 / army)))\n   :ARG1 (k / kill-01\n            :ARG1 (p3 / person\n                      :quant (a3 / at-least\n                                 :op1 23)))\n   :ARG2 (p4 / publication\n             :name (n5 / name\n                       :op1 \"BBC\")))", "(t / tell-01)"], "smus": ["Parliament members and an army source have told the story.", "At least 23 people were killed in the northern Nigerian town of Monguno after a bomb belonging to Boko Haram that was confiscated by vigilantes exploded.", "The BBC were told.", "MPs and an army source.", "At least 23 people were killed in the town of Monguno in northeastern Nigeria after a bomb belonging to Boko Haram that was confiscated by vigilantes exploded.", "BBC", "They have told.", "People were killed.", "The bomb exploded.", "The bombing occurred by the Boko Haram group.", "Vigilantes have confiscated.", "They have told.", "People were killed.", "The bomb exploded.", "The bombing occurred by the Boko Haram group.", "Vigilantes have confiscated.", "Parliamentarians have told the BBC that at least 23 people were killed in the northern Nigerian town of Monguno after a bomb belonging to Boko Haram that was confiscated by vigilantes exploded.", "At least 23 people were killed in the northern Nigerian town of Monguno after a bomb belonging to Boko Haram that was confiscated by vigilantes exploded, an army source has told the BBC.", "MPs and an army source have told the BBC that at least 23 people have been killed.", "told."]}, {"instance_id": "pyrxsum-17", "summary": "The sports centre at Ravenscraig is a homage, a \"symphony in steel\", say the architects.", "summary_trees": ["# ::snt The sports centre at Ravenscraig is a homage, a \"symphony in steel\", say the architects.\n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (a / architect-01))\n      :ARG1 (a2 / and\n            :op1 (h / homage)\n            :op2 (s2 / symphony\n                  :location (s3 / steel))\n            :domain (c / center\n                  :mod (s4 / sport)\n                  :location (c2 / city\n                        :name (n / name\n                              :op1 \"Ravenscraig\")))))"], "tree": ["(s / say-01\n   :ARG0 (p / person\n            :ARG0-of (a / architect-01)))", "(s / say-01\n   :ARG1 (a2 / and\n             :op1 (h / homage)\n             :op2 (s2 / symphony\n                      :location (s3 / steel))\n             :domain (c / center\n                        :mod (s4 / sport)\n                        :location (c2 / city\n                                      :name (n / name\n                                               :op1 \"Ravenscraig\")))))", "(p / person\n   :ARG0-of (a / architect-01))", "(a2 / and\n    :op1 (h / homage)\n    :op2 (s2 / symphony\n             :location (s3 / steel))\n    :domain (c / center\n               :mod (s4 / sport)\n               :location (c2 / city\n                             :name (n / name\n                                      :op1 \"Ravenscraig\"))))", "(s / say-01\n   :ARG0 (p / person))", "(a / architect-01)", "(s / say-01\n   :ARG0 (p / person))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0-of (a / architect-01))\n   :ARG1 (h / homage))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0-of (a / architect-01))\n   :ARG1 (s2 / symphony\n             :location (s3 / steel)\n             :domain (c / center\n                        :mod (s4 / sport)\n                        :location (c2 / city\n                                      :name (n / name\n                                               :op1 \"Ravenscraig\")))))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (a / architect-01))\n   :ARG1 (a2 / and\n             :op1 (h / homage)\n             :op2 (s2 / symphony)\n             :domain (c / center\n                        :mod (s4 / sport))))", "(s / say-01)"], "smus": ["The architects say --", "Ravenscraig sports centre: homage, symphony in steel", "Architects", "Ravenscraig's sports centre is an homage to the steel symphony.", "People say...", "Architects", "People say...", "The architects say homage.", "The Ravenscraig sports centre is a symphony in steel, architects say.", "The sports center is a homage and a symphony, architects say.", "Say."]}, {"instance_id": "pyrxsum-18", "summary": "The winner of The Jump 2017 is Spencer Matthews.", "summary_trees": ["# ::snt The winner of The Jump 2017 is Spencer Matthews.\n(w / win-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Spencer\"\n                  :op2 \"Matthews\"))\n      :ARG1 (e / event\n            :name (n2 / name\n                  :op1 \"The\"\n                  :op2 \"Jump\")\n            :time (d / date-entity\n                  :year 2017)))"], "tree": ["(w / win-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Spencer\"\n                     :op2 \"Matthews\")))", "(w / win-01\n   :ARG1 (e / event\n            :name (n2 / name\n                      :op1 \"The\"\n                      :op2 \"Jump\")\n            :time (d / date-entity\n                     :year 2017)))", "(p / person\n   :name (n / name\n            :op1 \"Spencer\"\n            :op2 \"Matthews\"))", "(e / event\n   :name (n2 / name\n             :op1 \"The\"\n             :op2 \"Jump\")\n   :time (d / date-entity\n            :year 2017))", "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"Spencer\" :op2 \"Matthews\")))", "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"Spencer\" :op2 \"Matthews\")))", "(w / win-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Spencer\"\n                     :op2 \"Matthews\"))\n   :ARG1 (e / event\n            :name (n2 / name\n                      :op1 \"The\"\n                      :op2 \"Jump\")))", "(w / win-01)"], "smus": ["Spencer Matthews won.", "The Jump 2017 won", "Spencer Matthews", "The Jump 2017", "Spencer Matthews won.", "Spencer Matthews won.", "Spencer Matthews won The Jump.", "Win."]}, {"instance_id": "pyrxsum-19", "summary": "Fifa presidential candidate Gianni Infantino says he would press for the World Cup to be held in a whole region rather than one or two countries.", "summary_trees": ["# ::snt Fifa presidential candidate Gianni Infantino says he would press for the World Cup to be held in a whole region rather than one or two countries.\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Gianni\"\n                  :op2 \"Infantino\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (o / organization\n                        :name (n2 / name\n                              :op1 \"Fifa\"))\n                  :ARG2 (c / candidate\n                        :mod (p2 / president))))\n      :ARG1 (p3 / press-01\n            :ARG0 p\n            :ARG2 (h2 / hold-04\n                  :ARG1 (g / game\n                        :name (n3 / name\n                              :op1 \"World\"\n                              :op2 \"Cup\"))\n                  :location (r / region\n                        :mod (w / whole)\n                        :ARG1-of (ii / instead-of-91\n                              :ARG2 (h3 / hold-04\n                                    :ARG1 g\n                                    :location (c2 / country\n                                          :quant (o2 / or\n                                                :op1 1\n                                                :op2 2))))))))"], "tree": ["(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gianni\"\n                     :op2 \"Infantino\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (o / organization\n                                 :name (n2 / name\n                                           :op1 \"Fifa\"))\n                        :ARG2 (c / candidate\n                                 :mod (p2 / president)))))", "(s / say-01\n   :ARG1 (p3 / press-01\n             :ARG0 (p / person :name (n / name :op1 \"Gianni\" :op2 \"Infantino\")))\n             :ARG2 (h2 / hold-04\n                       :ARG1 (g / game\n                                :name (n3 / name\n                                          :op1 \"World\"\n                                          :op2 \"Cup\"))\n                       :location (r / region\n                                    :mod (w / whole)\n                                    :ARG1-of (ii / instead-of-91\n                                                 :ARG2 (h3 / hold-04\n                                                           :ARG1 g\n                                                           :location (c2 / country\n                                                                         :quant (o2 / or\n                                                                                    :op1 1\n                                                                                    :op2 2))))))))", "(p / person\n   :name (n / name\n            :op1 \"Gianni\"\n            :op2 \"Infantino\")\n   :ARG0-of (h / have-org-role-91\n               :ARG1 (o / organization\n                        :name (n2 / name\n                                  :op1 \"Fifa\"))\n               :ARG2 (c / candidate\n                        :mod (p2 / president))))", "(p3 / press-01\n    :ARG0 (p / person :name (n / name :op1 \"Gianni\" :op2 \"Infantino\")))\n    :ARG2 (h2 / hold-04\n              :ARG1 (g / game\n                       :name (n3 / name\n                                 :op1 \"World\"\n                                 :op2 \"Cup\"))\n              :location (r / region\n                           :mod (w / whole)\n                           :ARG1-of (ii / instead-of-91\n                                        :ARG2 (h3 / hold-04\n                                                  :ARG1 g\n                                                  :location (c2 / country\n                                                                :quant (o2 / or\n                                                                           :op1 1\n                                                                           :op2 2)))))))", "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Gianni\" :op2 \"Infantino\"))))", "(p3 / press-01\n    :ARG0 (p / person :name (n / name :op1 \"Gianni\" :op2 \"Infantino\")))\n    :ARG2 (h2 / hold-04))", "(h2 / hold-04\n    :ARG1 (g / game :name (n3 / name :op1 \"World\" :op2 \"Cup\")))", "(h3 / hold-04\n    :ARG1 (g / game :name (n3 / name :op1 \"World\" :op2 \"Cup\"))\n    :location (c2 / country))", "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Gianni\" :op2 \"Infantino\"))))", "(p3 / press-01\n    :ARG0 (p / person :name (n / name :op1 \"Gianni\" :op2 \"Infantino\"))))", "(p3 / press-01\n    :ARG2 (h2 / hold-04))", "(h2 / hold-04\n    :ARG1 (g / game :name (n3 / name :op1 \"World\" :op2 \"Cup\")))", "(h3 / hold-04\n    :ARG1 (g / game :name (n3 / name :op1 \"World\" :op2 \"Cup\")))", "(h3 / hold-04\n    :location (c2 / country))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gianni\"\n                     :op2 \"Infantino\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (o / organization\n                              :name (n2 / name\n                                        :op1 \"Fifa\"))\n                     :ARG2 (c / candidate\n                              :mod (p2 / president))))\n   :ARG1 (p3 / press-01\n             :ARG0 p\n             :ARG2 (h2 / hold-04\n                       :ARG1 (g / game\n                                :name (n3 / name\n                                          :op1 \"World\"\n                                          :op2 \"Cup\")))))", "(s / say-01)"], "smus": ["FIFA president-candidate Gianni Infantino says --", "Gianni Infantino says he will press for the Wor Cup to be held in the whole region rather than in one or two countries.", "Gianni Infantino is the president-candidate of FIFA.", "Gianni Infantino would press for the Wor Cup to be held in the whole region rather than in one or two countries.", "Gianni Infantino says --", "Gianni Infantino will press for the held.", "The Wor Cup was held.", "The Wor Cup will be held in countries.", "Gianni Infantino says --", "Gianni Infantino will press.", "Press for held.", "The Wor Cup was held.", "The Wor Cup is held.", "held in countries.", "FIFA president-candidate Gianni Infantino says he will press for the Wor Cup to be held.", "says."]}, {"instance_id": "pyrxsum-20", "summary": "Finance Secretary John Swinney has warned of \"tough choices\" facing Scotland as he prepares to set out his budget.", "summary_trees": ["# ::snt Finance Secretary John Swinney has warned of \"tough choices\" facing Scotland as he prepares to set out his budget.\n(w / warn-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"Swinney\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (s / secretary\n                        :topic (f / finance))))\n      :ARG1 (c / choose-01\n            :ARG0 (c2 / country\n                  :name (n2 / name\n                        :op1 \"Scotland\"))\n            :ARG1-of (t / tough-02)\n            :ARG1-of (f2 / face-01\n                  :ARG0 c2))\n      :time (p2 / prepare-02\n            :ARG0 p\n            :ARG1 (s2 / set-out-06\n                  :ARG0 p\n                  :ARG1 (b / budget\n                        :poss p))))"], "tree": ["(w / warn-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Swinney\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG2 (s / secretary\n                                 :topic (f / finance)))))", "(w / warn-01\n   :ARG1 (c / choose-01\n            :ARG0 (c2 / country\n                      :name (n2 / name\n                                :op1 \"Scotland\"))\n            :ARG1-of (t / tough-02)\n            :ARG1-of (f2 / face-01\n                         :ARG0 c2)))", "(w / warn-01\n   :time (p2 / prepare-02\n             :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\")))\n             :ARG1 (s2 / set-out-06\n                       :ARG0 p\n                       :ARG1 (b / budget\n                                :poss p))))", "(p / person\n   :name (n / name\n            :op1 \"John\"\n            :op2 \"Swinney\")\n   :ARG0-of (h / have-org-role-91\n               :ARG2 (s / secretary\n                        :topic (f / finance))))", "(c / choose-01\n   :ARG0 (c2 / country\n             :name (n2 / name\n                       :op1 \"Scotland\"))\n   :ARG1-of (t / tough-02)\n   :ARG1-of (f2 / face-01\n                :ARG0 c2))", "(p2 / prepare-02\n    :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\")))\n    :ARG1 (s2 / set-out-06\n              :ARG0 p\n              :ARG1 (b / budget\n                       :poss p)))", "(w / warn-01\n   :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\"))))", "(c / choose-01\n   :ARG0 (c2 / country :name (n2 / name :op1 \"Scotland\")))", "(t / tough-02)", "(f2 / face-01\n    :ARG0 (c2 / country :name (n2 / name :op1 \"Scotland\")))", "(p2 / prepare-02\n    :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\")))\n    :ARG1 (s2 / set-out-06))", "(s2 / set-out-06\n    :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\")))\n    :ARG1 (b / budget))", "(w / warn-01\n   :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\"))))", "(c / choose-01\n   :ARG0 (c2 / country :name (n2 / name :op1 \"Scotland\")))", "(f2 / face-01\n    :ARG0 (c2 / country :name (n2 / name :op1 \"Scotland\")))", "(p2 / prepare-02\n    :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\"))))", "(p2 / prepare-02\n    :ARG1 (s2 / set-out-06))", "(s2 / set-out-06\n    :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\"))))", "(s2 / set-out-06\n    :ARG1 (b / budget))", "(w / warn-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Swinney\")\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (s / secretary\n                              :topic (f / finance))))\n   :ARG1 (c / choose-01\n            :ARG0 (c2 / country\n                      :name (n2 / name\n                                :op1 \"Scotland\"))\n            :ARG1 (t / tough-02)\n            :ARG1 (f2 / face-01\n                      :ARG0 c2)))", "(w / warn-01\n   :time (p2 / prepare-02))"], "smus": ["Finance Secretary John Swinney has warned --", "Scotland is being warned of tough choices that it faces.", "As John Swinney prepares to set out his budget, he is warned.", "Finance Secretary John Swinney", "Scotland has had a tough choice to face.", "John Swinney prepares to set out his budget.", "John Swinney has warned --", "Scotland is a choice.", "Tough.", "Scotland is facing.", "John Swinney prepares for the set out.", "John Swinney set out the budget.", "John Swinney has warned --", "Scotland is a choice.", "Scotland is facing.", "John Swinney prepares.", "Set out prepares", "John Swinney set out.", "The budget is set out.", "Finance Secretary John Swinney has warned that Scotland has made a tough choice in facing the country.", "As preparations get underway, be warned."]}, {"instance_id": "pyrxsum-21", "summary": "The judge leading the inquiry into the Grenfell Tower fire has written to the prime minister with recommendations for its terms of reference.", "summary_trees": ["# ::snt The judge leading the inquiry into the Grenfell Tower fire has written to the prime minister with recommendations for its terms of reference.\n(w / write-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG3 (j / judge-01))\n            :ARG0-of (l / lead-02\n                  :ARG1 (ii / inquire-01\n                        :ARG2 (f / fire\n                              :location (b / building\n                                    :name (n / name\n                                          :op1 \"Grenfell\"\n                                          :op2 \"Tower\"))))))\n      :ARG1 (r / recommend-01\n            :ARG0 p\n            :ARG4 (t / term-01\n                  :ARG0 (ii2 / it)\n                  :ARG2-of (r2 / reference-04)))\n      :ARG2 (p2 / person\n            :ARG0-of (h2 / have-org-role-91\n                  :ARG2 (m / minister\n                        :mod (p3 / prime)))))"], "tree": ["(w / write-01\n   :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                        :ARG3 (j / judge-01))\n            :ARG0-of (l / lead-02\n                        :ARG1 (ii / inquire-01\n                                  :ARG2 (f / fire\n                                           :location (b / building\n                                                        :name (n / name\n                                                                 :op1 \"Grenfell\"\n                                                                 :op2 \"Tower\")))))))", "(w / write-01\n   :ARG1 (r / recommend-01\n            :ARG0 (p / person)\n            :ARG4 (t / term-01\n                     :ARG0 (ii2 / it)\n                     :ARG2-of (r2 / reference-04))))", "(w / write-01\n   :ARG2 (p2 / person\n             :ARG0-of (h2 / have-org-role-91\n                          :ARG2 (m / minister\n                                   :mod (p3 / prime)))))", "(p / person\n   :ARG0-of (h / have-org-role-91\n               :ARG3 (j / judge-01))\n   :ARG0-of (l / lead-02\n               :ARG1 (ii / inquire-01\n                         :ARG2 (f / fire\n                                  :location (b / building\n                                               :name (n / name\n                                                        :op1 \"Grenfell\"\n                                                        :op2 \"Tower\"))))))", "(r / recommend-01\n   :ARG0 (p / person)\n   :ARG4 (t / term-01\n            :ARG0 (ii2 / it)\n            :ARG2-of (r2 / reference-04)))", "(p2 / person\n    :ARG0-of (h2 / have-org-role-91\n                 :ARG2 (m / minister\n                          :mod (p3 / prime))))", "(w / write-01\n   :ARG0 (p / person))", "(j / judge-01)", "(l / lead-02\n   :ARG1 (ii / inquire-01))", "(ii / inquire-01\n    :ARG2 (f / fire))", "(r / recommend-01\n   :ARG0 (p / person)\n   :ARG4 (t / term-01))", "(t / term-01\n   :ARG0 (ii2 / it))", "(r2 / reference-04)", "(w / write-01\n   :ARG0 (p / person))", "(l / lead-02\n   :ARG1 (ii / inquire-01))", "(ii / inquire-01\n    :ARG2 (f / fire))", "(r / recommend-01\n   :ARG0 (p / person))", "(r / recommend-01\n   :ARG4 (t / term-01))", "(t / term-01\n   :ARG0 (ii2 / it))", "(w / write-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG3 (j / judge-01))\n            :ARG0 (l / lead-02\n                     :ARG1 (ii / inquire-01\n                               :ARG2 (f / fire))))\n   :ARG1 (r / recommend-01\n            :ARG0 p\n            :ARG4 (t / term-01\n                     :ARG0 (ii2 / it)\n                     :ARG2 (r2 / reference-04)))\n   :ARG2 (p2 / person\n             :ARG0 (h2 / have-org-role-91\n                       :ARG2 (m / minister\n                                :mod (p3 / prime)))))", "(w / write-01)"], "smus": ["A judge has written leading an inquiry into the fire at Glenfell Tower.", "It is written as a recommendation to people as a reference term.", "The prime minister is written in.", "A judge leads an inquiry into the fire at Glenfell Tower.", "People should use its terms of reference.", "Prime minister", "People have written:", "Judgment.", "leading to an inquiry.", "Fire inquiry.", "People should use terms.", "It's terms.", "Reference:", "People have written:", "leading to an inquiry.", "Fire inquiry.", "People should.", "Terms should be.", "It's terms.", "A judge leading the fire inquiry has written to the prime minister that it should have the terms of reference.", "Written."]}, {"instance_id": "pyrxsum-22", "summary": "Police in a small Alaska town mistakenly told a couple their son had been killed in a car crash, leading to an extraordinary reunion hours later.", "summary_trees": ["# ::snt Police in a small Alaska town mistakenly told a couple their son had been killed in a car crash, leading to an extraordinary reunion hours later.\n(l / lead-03\n      :ARG0 (t / tell-01\n            :ARG0 (p / police\n                  :location (t2 / town\n                        :mod (s / small)\n                        :location (s2 / state\n                              :name (n / name\n                                    :op1 \"Alaska\"))))\n            :ARG1 (k / kill-01\n                  :ARG1 (p2 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 (c / couple)\n                              :ARG2 (s3 / son)))\n                  :ARG1-of (c2 / cause-01\n                        :ARG0 (c3 / crash-01\n                              :ARG1 (c4 / car))))\n            :ARG2 c\n            :ARG1-of (m / mistake-01))\n      :ARG2 (r / reunite-01\n            :mod (e / extraordinary)\n            :time (a / after\n                  :quant (m2 / multiple\n                        :op1 (t3 / temporal-quantity\n                              :quant 1\n                              :unit (h2 / hour))))))"], "tree": ["(l / lead-03\n   :ARG0 (t / tell-01\n            :ARG0 (p / police\n                     :location (t2 / town\n                                   :mod (s / small)\n                                   :location (s2 / state\n                                                 :name (n / name\n                                                          :op1 \"Alaska\"))))\n            :ARG1 (k / kill-01\n                     :ARG1 (p2 / person\n                               :ARG0-of (h / have-rel-role-91\n                                           :ARG1 (c / couple)\n                                           :ARG2 (s3 / son)))\n                     :ARG1-of (c2 / cause-01\n                                  :ARG0 (c3 / crash-01\n                                            :ARG1 (c4 / car))))\n            :ARG2 c\n            :ARG1-of (m / mistake-01)))", "(l / lead-03\n   :ARG2 (r / reunite-01\n            :mod (e / extraordinary)\n            :time (a / after\n                     :quant (m2 / multiple\n                                :op1 (t3 / temporal-quantity\n                                         :quant 1\n                                         :unit (h2 / hour))))))", "(t / tell-01\n   :ARG0 (p / police\n            :location (t2 / town\n                          :mod (s / small)\n                          :location (s2 / state\n                                        :name (n / name\n                                                 :op1 \"Alaska\"))))\n   :ARG1 (k / kill-01\n            :ARG1 (p2 / person\n                      :ARG0-of (h / have-rel-role-91\n                                  :ARG1 (c / couple)\n                                  :ARG2 (s3 / son)))\n            :ARG1-of (c2 / cause-01\n                         :ARG0 (c3 / crash-01\n                                   :ARG1 (c4 / car))))\n   :ARG2 c\n   :ARG1-of (m / mistake-01))", "(r / reunite-01\n   :mod (e / extraordinary)\n   :time (a / after\n            :quant (m2 / multiple\n                       :op1 (t3 / temporal-quantity\n                                :quant 1\n                                :unit (h2 / hour)))))", "(l / lead-03\n   :ARG0 (t / tell-01))", "(t / tell-01\n   :ARG0 (p / police))", "(k / kill-01\n   :ARG1 (p2 / person))", "(c2 / cause-01\n    :ARG0 (c3 / crash-01))", "(c3 / crash-01\n    :ARG1 (c4 / car))", "(m / mistake-01)", "(r / reunite-01\n   :mod (e / extraordinary))", "(l / lead-03\n   :ARG0 (t / tell-01))", "(t / tell-01\n   :ARG0 (p / police))", "(k / kill-01\n   :ARG1 (p2 / person))", "(c2 / cause-01\n    :ARG0 (c3 / crash-01))", "(c3 / crash-01\n    :ARG1 (c4 / car))", "(r / reunite-01\n   :mod (e / extraordinary))", "(l / lead-03\n   :ARG0 (t / tell-01\n            :ARG0 (p / police)\n            :ARG1 (k / kill-01\n                     :ARG1 (p2 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 (c / couple)\n                                        :ARG2 (s3 / son)))\n                     :ARG1 (c2 / cause-01\n                               :ARG0 (c3 / crash-01\n                                         :ARG1 (c4 / car))))\n            :ARG2 c\n            :ARG1 (m / mistake-01))\n   :ARG2 (r / reunite-01\n            :mod (e / extraordinary)))", "(l / lead-03)"], "smus": ["Police in a small town in Alaska were telling the family that the couple's son had been killed in a car crash, which led them to be mistakenly told.", "leading to an extraordinary reunification hours later.", "A small town in Alaska police mistakenly told the family that the couple's son had been killed in a car crash.", "The extraordinary reunification took place hours later.", "The telling was leading.", "Police told --", "The person was killed.", "Cause of the crash.", "A car crash happened.", "Mistakenly.", "An extraordinary reunion.", "The telling was leading.", "Police told --", "The person was killed.", "Cause of the crash.", "A car crash happened.", "An extraordinary reunion.", "Police told the couple's son had been killed in a car crash, leading to an extraordinary reunification.", "Leading."]}, {"instance_id": "pyrxsum-23", "summary": "South Africa's prosecutors have sought permission to appeal against athlete Oscar Pistorius' \"shockingly light\" sentence, court papers show.", "summary_trees": ["# ::snt South Africa's prosecutors have sought permission to appeal against athlete Oscar Pistorius' \"shockingly light\" sentence, court papers show.\n(s / show-01\n      :ARG0 (p / paper\n            :mod (c / court))\n      :ARG1 (s2 / seek-01\n            :ARG0 (p2 / person\n                  :ARG0-of (p3 / prosecute-01)\n                  :mod (c2 / country\n                        :name (n / name\n                              :op1 \"South\"\n                              :op2 \"Africa\")))\n            :ARG1 (p4 / permit-01\n                  :ARG1 (a / appeal-01\n                        :ARG0 p2\n                        :ARG1 (s3 / sentence-01\n                              :ARG1 (p5 / person\n                                    :name (n2 / name\n                                          :op1 \"Oscar\"\n                                          :op2 \"Pistorius\")\n                                    :mod (a2 / athlete))\n                              :ARG1-of (l / light-06\n                                    :ARG0-of (s4 / shock-01)))))))"], "tree": ["(s / show-01\n   :ARG0 (p / paper\n            :mod (c / court)))", "(s / show-01\n   :ARG1 (s2 / seek-01\n             :ARG0 (p2 / person\n                       :ARG0-of (p3 / prosecute-01)\n                       :mod (c2 / country\n                                :name (n / name\n                                         :op1 \"South\"\n                                         :op2 \"Africa\")))\n             :ARG1 (p4 / permit-01\n                       :ARG1 (a / appeal-01\n                                :ARG0 p2\n                                :ARG1 (s3 / sentence-01\n                                          :ARG1 (p5 / person\n                                                    :name (n2 / name\n                                                              :op1 \"Oscar\"\n                                                              :op2 \"Pistorius\")\n                                                    :mod (a2 / athlete))\n                                          :ARG1-of (l / light-06\n                                                      :ARG0-of (s4 / shock-01)))))))", "(p / paper\n   :mod (c / court))", "(s2 / seek-01\n    :ARG0 (p2 / person\n              :ARG0-of (p3 / prosecute-01)\n              :mod (c2 / country\n                       :name (n / name\n                                :op1 \"South\"\n                                :op2 \"Africa\")))\n    :ARG1 (p4 / permit-01\n              :ARG1 (a / appeal-01\n                       :ARG0 p2\n                       :ARG1 (s3 / sentence-01\n                                 :ARG1 (p5 / person\n                                           :name (n2 / name\n                                                     :op1 \"Oscar\"\n                                                     :op2 \"Pistorius\")\n                                           :mod (a2 / athlete))\n                                 :ARG1-of (l / light-06\n                                             :ARG0-of (s4 / shock-01))))))", "(s / show-01\n   :ARG0 (p / paper))", "(s2 / seek-01\n    :ARG0 (p2 / person))", "(p3 / prosecute-01)", "(p4 / permit-01\n    :ARG1 (a / appeal-01))", "(a / appeal-01\n   :ARG0 (p2 / person)\n   :ARG1 (s3 / sentence-01))", "(s3 / sentence-01\n    :ARG1 (p5 / person :name (n2 / name :op1 \"Oscar\" :op2 \"Pistorius\"))))", "(l / light-06)", "(s4 / shock-01)", "(s / show-01\n   :ARG0 (p / paper))", "(s2 / seek-01\n    :ARG0 (p2 / person))", "(p4 / permit-01\n    :ARG1 (a / appeal-01))", "(a / appeal-01\n   :ARG0 (p2 / person))", "(a / appeal-01\n   :ARG1 (s3 / sentence-01))", "(s3 / sentence-01\n    :ARG1 (p5 / person :name (n2 / name :op1 \"Oscar\" :op2 \"Pistorius\"))))", "(s / show-01\n   :ARG0 (p / paper\n            :mod (c / court))\n   :ARG1 (s2 / seek-01\n             :ARG0 (p2 / person\n                       :ARG0 (p3 / prosecute-01)\n                       :mod (c2 / country\n                                :name (n / name\n                                         :op1 \"South\"\n                                         :op2 \"Africa\")))\n             :ARG1 (p4 / permit-01\n                       :ARG1 (a / appeal-01\n                                :ARG0 p2\n                                :ARG1 (s3 / sentence-01\n                                          :ARG1 (p5 / person\n                                                    :name (n2 / name\n                                                              :op1 \"Oscar\"\n                                                              :op2 \"Pistorius\")\n                                                    :mod (a2 / athlete))\n                                          :ARG1 (l / light-06\n                                                   :ARG0 (s4 / shock-01)))))))", "(s / show-01)"], "smus": ["Court papers show --", "South African prosecutors show they have sought permission to appeal a shockingly light sentence given to athlete Oscar Pistorius.", "Court papers:", "South African prosecutors have sought permission to appeal a shockingly light sentence given to athlete Oscar Pistorius.", "The papers show --", "People have sought.", "Prosecutors.", "Permission to appeal.", "People can appeal the sentence.", "Oscar Pistorius' sentence:", "Light.", "Shocking.", "The papers show --", "People have sought.", "Permission to appeal.", "People will appeal.", "Appeal the sentence.", "Oscar Pistorius' sentence:", "Court papers show South African prosecutors have sought permission to appeal Oscar Pistorius' shockingly light sentence.", "Show."]}, {"instance_id": "pyrxsum-24", "summary": "The UK's first maternity clinic for women who have been victims of rape and sexual assault has opened.", "summary_trees": ["# ::snt The UK's first maternity clinic for women who have been victims of rape and sexual assault has opened.\n(o / open-01\n      :ARG1 (c / clinic\n            :mod (m / maternity)\n            :ord (o2 / ordinal-entity\n                  :value 1)\n            :location (c2 / country\n                  :name (n / name\n                        :op1 \"UK\"))\n            :beneficiary (w / woman\n                  :ARG1-of (v / victimize-01\n                        :ARG0 (a / and\n                              :op1 (r / rape-01\n                                    :ARG1 w)\n                              :op2 (a2 / assault-01\n                                    :ARG1 w\n                                    :manner (s / sex)))))))"], "tree": ["(o / open-01\n   :ARG1 (c / clinic\n            :mod (m / maternity)\n            :ord (o2 / ordinal-entity\n                     :value 1)\n            :location (c2 / country\n                          :name (n / name\n                                   :op1 \"UK\"))\n            :beneficiary (w / woman\n                            :ARG1-of (v / victimize-01\n                                        :ARG0 (a / and\n                                                 :op1 (r / rape-01\n                                                         :ARG1 w)\n                                                 :op2 (a2 / assault-01\n                                                          :ARG1 w\n                                                          :manner (s / sex)))))))", "(c / clinic\n   :mod (m / maternity)\n   :ord (o2 / ordinal-entity\n            :value 1)\n   :location (c2 / country\n                 :name (n / name\n                          :op1 \"UK\"))\n   :beneficiary (w / woman\n                   :ARG1-of (v / victimize-01\n                               :ARG0 (a / and\n                                        :op1 (r / rape-01\n                                                :ARG1 w)\n                                        :op2 (a2 / assault-01\n                                                 :ARG1 w\n                                                 :manner (s / sex))))))", "(o / open-01\n   :ARG1 (c / clinic))", "(v / victimize-01\n   :ARG0 (a / and))", "(r / rape-01\n   :ARG1 (w / woman))", "(a2 / assault-01\n    :ARG1 (w / woman)\n    :manner (s / sex))", "(o / open-01\n   :ARG1 (c / clinic))", "(v / victimize-01\n   :ARG0 (a / and))", "(r / rape-01\n   :ARG1 (w / woman))", "(a2 / assault-01\n    :ARG1 (w / woman))", "(a2 / assault-01\n    :manner (s / sex))", "(o / open-01\n   :ARG1 (c / clinic\n            :mod (m / maternity)\n            :ord (o2 / ordinal-entity\n                     :value 1)\n            :location (c2 / country\n                          :name (n / name\n                                   :op1 \"UK\"))\n            :beneficiary (w / woman\n                            :ARG1-of (v / victimize-01\n                                        :ARG0 (r / rape-01\n                                                 :ARG1 w)))))", "(o / open-01\n   :ARG1 (c / clinic\n            :mod (m / maternity)\n            :ord (o2 / ordinal-entity\n                     :value 1)\n            :location (c2 / country\n                          :name (n / name\n                                   :op1 \"UK\"))\n            :beneficiary (w / woman\n                            :ARG1-of (v / victimize-01\n                                        :ARG0 (a2 / assault-01\n                                                  :ARG1 w\n                                                  :manner (s / sex))))))", "(o / open-01\n   :ARG1 (c / clinic\n            :mod (m / maternity)\n            :ord (o2 / ordinal-entity\n                     :value 1)\n            :beneficiary (w / woman\n                            :ARG1 (v / victimize-01\n                                     :ARG0 (a / and\n                                              :op1 (r / rape-01\n                                                      :ARG1 w)\n                                              :op2 (a2 / assault-01\n                                                       :ARG1 w\n                                                       :manner (s / sex)))))))", "(o / open-01)"], "smus": ["The first maternity clinic in the UK has opened for women who have been victims of rape and sexual assault.", "The UK's first maternity clinic for women who have been victims of rape and sexual assault.", "The clinic is open.", "Victims of the 'everyone'.", "Rape of women.", "Sexual assault on women.", "The clinic is open.", "Victims of the 'everyone'.", "Rape of women.", "The assault occurred to women.", "Sexual assault.", "The first maternity clinic in the UK has opened for women who have been rape victims.", "The first maternity clinic in the UK has opened for women who have been victims of sexual assault.", "The first maternity clinic for women victims of rape and sexual assault was opened.", "a href=\"http://www.cnn.com/news/articles/2011/02/opening-up-to-the-public-health/\">Open/a>"]}, {"instance_id": "pyrxsum-25", "summary": "The number of children referred to the NHS with gender identity issues has increased significantly in recent years, according to figures obtained by the BBC.", "summary_trees": ["# ::snt The number of children referred to the NHS with gender identity issues has increased significantly in recent years, according to figures obtained by the BBC.\n(s / say-01\n      :ARG0 (f / figure\n            :ARG1-of (o / obtain-01\n                  :ARG0 (p / publication\n                        :name (n / name\n                              :op1 \"BBC\"))))\n      :ARG1 (ii / increase-01\n            :ARG1 (n2 / number\n                  :quant-of (c / child\n                        :ARG1-of (r / refer-02\n                              :ARG2 (g / government-organization\n                                    :name (n3 / name\n                                          :op1 \"NHS\"))\n                              :ARG1-of (c2 / cause-01\n                                    :ARG0 (ii2 / issue-02\n                                          :ARG0 (ii3 / identity\n                                                :mod (g2 / gender))\n                                          :ARG1 c)))))\n            :ARG2 (s2 / significant-02)\n            :time (y / year\n                  :mod (r2 / recent))))"], "tree": ["(s / say-01\n   :ARG0 (f / figure\n            :ARG1-of (o / obtain-01\n                        :ARG0 (p / publication\n                                 :name (n / name\n                                          :op1 \"BBC\")))))", "(s / say-01\n   :ARG1 (ii / increase-01\n             :ARG1 (n2 / number\n                       :quant-of (c / child\n                                    :ARG1-of (r / refer-02\n                                                :ARG2 (g / government-organization\n                                                         :name (n3 / name\n                                                                   :op1 \"NHS\"))\n                                                :ARG1-of (c2 / cause-01\n                                                             :ARG0 (ii2 / issue-02\n                                                                        :ARG0 (ii3 / identity\n                                                                                   :mod (g2 / gender))\n                                                                        :ARG1 c)))))\n             :ARG2 (s2 / significant-02)\n             :time (y / year\n                      :mod (r2 / recent))))", "(f / figure\n   :ARG1-of (o / obtain-01\n               :ARG0 (p / publication\n                        :name (n / name\n                                 :op1 \"BBC\"))))", "(ii / increase-01\n    :ARG1 (n2 / number\n              :quant-of (c / child\n                           :ARG1-of (r / refer-02\n                                       :ARG2 (g / government-organization\n                                                :name (n3 / name\n                                                          :op1 \"NHS\"))\n                                       :ARG1-of (c2 / cause-01\n                                                    :ARG0 (ii2 / issue-02\n                                                               :ARG0 (ii3 / identity\n                                                                          :mod (g2 / gender))\n                                                               :ARG1 c)))))\n    :ARG2 (s2 / significant-02)\n    :time (y / year\n             :mod (r2 / recent)))", "(s / say-01\n   :ARG0 (f / figure))", "(o / obtain-01\n   :ARG0 (p / publication :name (n / name :op1 \"BBC\")))", "(ii / increase-01\n    :ARG1 (n2 / number))", "(r / refer-02\n   :ARG2 (g / government-organization :name (n3 / name :op1 \"NHS\")))", "(c2 / cause-01\n    :ARG0 (ii2 / issue-02))", "(ii2 / issue-02\n     :ARG0 (ii3 / identity))", "(s2 / significant-02)", "(s / say-01\n   :ARG0 (f / figure))", "(o / obtain-01\n   :ARG0 (p / publication :name (n / name :op1 \"BBC\")))", "(ii / increase-01\n    :ARG1 (n2 / number))", "(r / refer-02\n   :ARG2 (g / government-organization :name (n3 / name :op1 \"NHS\")))", "(c2 / cause-01\n    :ARG0 (ii2 / issue-02))", "(ii2 / issue-02\n     :ARG0 (ii3 / identity))", "(s / say-01\n   :ARG0 (f / figure\n            :ARG1 (o / obtain-01\n                     :ARG0 (p / publication\n                              :name (n / name\n                                       :op1 \"BBC\"))))\n   :ARG1 (ii / increase-01\n             :ARG1 (n2 / number\n                       :quant (c / child\n                                 :ARG1 (r / refer-02\n                                          :ARG2 (g / government-organization\n                                                   :name (n3 / name\n                                                             :op1 \"NHS\"))\n                                          :ARG1 (c2 / cause-01\n                                                    :ARG0 (ii2 / issue-02\n                                                               :ARG0 (ii3 / identity\n                                                                          :mod (g2 / gender))\n                                                               :ARG1 c)))))\n             :ARG2 (s2 / significant-02)))", "(s / say-01)"], "smus": ["According to figures obtained by the BBC,", "The number of children referred to the NHS for gender identity issues has increased significantly in recent years, the NHS said.", "Figures obtained by the BBC", "In recent years, the number of children referred to the NHS for gender identity issues has increased significantly.", "According to the figures...", "The BBC obtained.", "The number has increased.", "Referred to the NHS.", "Because of issues.", "Identity issues.", "Significantly.", "According to the figures...", "The BBC obtained.", "The number has increased.", "Referred to the NHS.", "Because of issues.", "Identity issues.", "According to figures obtained by the BBC, the number of children referred to the NHS as being referred to as being 'as a result of gender identity issues' has increased significantly.", "Says."]}, {"instance_id": "pyrxsum-26", "summary": "The mayor of an east London borough has been accused of \"corrupt and illegal practices\", at a special court hearing.", "summary_trees": ["# ::snt The mayor of an east London borough has been accused of \"corrupt and illegal practices\", at a special court hearing.\n(a / accuse-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (b / borough\n                        :location (e / east\n                              :part-of (c / city\n                                    :name (n / name\n                                          :op1 \"London\"))))\n                  :ARG2 (m / mayor)))\n      :ARG2 (p2 / practice-01\n            :ARG0 p\n            :ARG1-of (c2 / corrupt-01)\n            :ARG1-of (l / legal-02\n                  :polarity -))\n      :time (h2 / hearing-02\n            :ARG0 (c3 / court)\n            :ARG1 p\n            :ARG1-of (s / special-02)))"], "tree": ["(a / accuse-01\n   :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (b / borough\n                                 :location (e / east\n                                              :part-of (c / city\n                                                          :name (n / name\n                                                                   :op1 \"London\"))))\n                        :ARG2 (m / mayor))))", "(a / accuse-01\n   :ARG2 (p2 / practice-01\n             :ARG0 (p / person)\n             :ARG1-of (c2 / corrupt-01)\n             :ARG1-of (l / legal-02\n                         :polarity -)))", "(a / accuse-01\n   :time (h2 / hearing-02\n             :ARG0 (c3 / court)\n             :ARG1 (p / person)\n             :ARG1-of (s / special-02)))", "(p / person\n   :ARG0-of (h / have-org-role-91\n               :ARG1 (b / borough\n                        :location (e / east\n                                     :part-of (c / city\n                                                 :name (n / name\n                                                          :op1 \"London\"))))\n               :ARG2 (m / mayor)))", "(p2 / practice-01\n    :ARG0 (p / person)\n    :ARG1-of (c2 / corrupt-01)\n    :ARG1-of (l / legal-02\n                :polarity -))", "(h2 / hearing-02\n    :ARG0 (c3 / court)\n    :ARG1 (p / person)\n    :ARG1-of (s / special-02))", "(a / accuse-01\n   :ARG1 (p / person))", "(p2 / practice-01\n    :ARG0 (p / person))", "(c2 / corrupt-01)", "(l / legal-02\n   :polarity -)", "(h2 / hearing-02\n    :ARG0 (c3 / court))", "(s / special-02)", "(a / accuse-01\n   :ARG1 (p / person))", "(p2 / practice-01\n    :ARG0 (p / person))", "(l / legal-02\n   :polarity -)", "(h2 / hearing-02\n    :ARG0 (c3 / court))", "(a / accuse-01\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (b / borough)\n                     :ARG2 (m / mayor)))\n   :ARG2 (p2 / practice-01\n             :ARG0 p\n             :ARG1 (c2 / corrupt-01)\n             :ARG1 (l / legal-02\n                      :polarity -)))", "(a / accuse-01\n   :time (h2 / hearing-02))"], "smus": ["The mayor of the borough of East London is accused.", "accused of illegal and corrupt practices.", "Accused at a special court hearing.", "The mayor of the borough of East London.", "People have corrupt practices that are illegal.", "The court will give a special hearing to the people.", "The people were accused.", "People practice.", "Corruption.", "Illegal.", "The court will hear the case.", "Special.", "The people were accused.", "People practice.", "Illegal.", "The court will hear the case.", "The borough mayor has been accused of illegal and corrupt practices.", "The accusations were made at the hearing."]}, {"instance_id": "pyrxsum-27", "summary": "A 21-year-old man has appeared in court in County Clare charged over the fatal stabbing of Karl Haugh in Kilkee at the weekend.", "summary_trees": ["# ::snt A 21-year-old man has appeared in court in County Clare charged over the fatal stabbing of Karl Haugh in Kilkee at the weekend.\n(a / appear-01\n      :ARG1 (m / man\n            :age (t / temporal-quantity\n                  :quant 21\n                  :unit (y / year))\n            :ARG1-of (c / charge-05\n                  :ARG2 (s / stab-01\n                        :ARG1 (p / person\n                              :name (n / name\n                                    :op1 \"Karl\"\n                                    :op2 \"Haugh\"))\n                        :mod (f / fatal)\n                        :location (c2 / city\n                              :name (n2 / name\n                                    :op1 \"Kilkee\"))\n                        :time (w / weekend))))\n      :location (c3 / court\n            :location (c4 / county\n                  :name (n3 / name\n                        :op1 \"Clare\"))))"], "tree": ["(a / appear-01\n   :ARG1 (m / man\n            :age (t / temporal-quantity\n                    :quant 21\n                    :unit (y / year))\n            :ARG1-of (c / charge-05\n                        :ARG2 (s / stab-01\n                                 :ARG1 (p / person\n                                          :name (n / name\n                                                   :op1 \"Karl\"\n                                                   :op2 \"Haugh\"))\n                                 :mod (f / fatal)\n                                 :location (c2 / city\n                                               :name (n2 / name\n                                                         :op1 \"Kilkee\"))\n                                 :time (w / weekend)))))", "(a / appear-01\n   :location (c3 / court\n                 :location (c4 / county\n                               :name (n3 / name\n                                         :op1 \"Clare\"))))", "(m / man\n   :age (t / temporal-quantity\n           :quant 21\n           :unit (y / year))\n   :ARG1-of (c / charge-05\n               :ARG2 (s / stab-01\n                        :ARG1 (p / person\n                                 :name (n / name\n                                          :op1 \"Karl\"\n                                          :op2 \"Haugh\"))\n                        :mod (f / fatal)\n                        :location (c2 / city\n                                      :name (n2 / name\n                                                :op1 \"Kilkee\"))\n                        :time (w / weekend))))", "(c3 / court\n    :location (c4 / county\n                  :name (n3 / name\n                            :op1 \"Clare\")))", "(a / appear-01\n   :ARG1 (m / man))", "(c / charge-05\n   :ARG2 (s / stab-01))", "(s / stab-01\n   :ARG1 (p / person :name (n / name :op1 \"Karl\" :op2 \"Haugh\")))", "(a / appear-01\n   :ARG1 (m / man))", "(c / charge-05\n   :ARG2 (s / stab-01))", "(s / stab-01\n   :ARG1 (p / person :name (n / name :op1 \"Karl\" :op2 \"Haugh\")))", "(a / appear-01\n   :ARG1 (m / man\n            :age (t / temporal-quantity\n                    :quant 21\n                    :unit (y / year))\n            :ARG1 (c / charge-05\n                     :ARG2 (s / stab-01\n                              :ARG1 (p / person\n                                       :name (n / name\n                                                :op1 \"Karl\"\n                                                :op2 \"Haugh\"))\n                              :mod (f / fatal)))))", "(a / appear-01\n   :location (c3 / court\n                 :location (c4 / county\n                               :name (n3 / name\n                                         :op1 \"Clare\"))))"], "smus": ["A 21-year-old man was appeared charged with fatally stabbing Karl Haugh in Kilkee over the weekend.", "The case was heard in Clare County court.", "The 21-year-old man was charged with fatally stabbing Karl Haugh in Kilkee over the weekend.", "Court in Cleary County.", "The man appeared.", "The stabbing was charged.", "Karl Haugh got stabbed", "The man appeared.", "The stabbing was charged.", "Karl Haugh got stabbed", "A 21-year-old man has appeared on charges of fatally stabbing Karl Haugh.", "The case was heard in Clare County court."]}, {"instance_id": "pyrxsum-28", "summary": "Post Office workers will stage five days of strikes from Monday in a continuing dispute over jobs, pensions and branch closures, their union says.", "summary_trees": ["# ::snt Post Office workers will stage five days of strikes from Monday in a continuing dispute over jobs, pensions and branch closures, their union says.\n(s / say-01\n      :ARG0 (u / union\n            :poss (p / person\n                  :ARG0-of (w / work-01\n                        :ARG2 (g / government-organization\n                              :name (n / name\n                                    :op1 \"Post\"\n                                    :op2 \"Office\")))))\n      :ARG1 (s2 / strike-02\n            :ARG0 p\n            :time (f / from\n                  :op1 (d / date-entity\n                        :weekday (m / monday)))\n            :duration (t / temporal-quantity\n                  :quant 5\n                  :unit (d2 / day))\n            :ARG1-of (c / cause-01\n                  :ARG0 (d3 / dispute-01\n                        :ARG2 (a / and\n                              :op1 (j / job)\n                              :op2 (p2 / pension)\n                              :op3 (c2 / close-01\n                                    :ARG1 (b / branch)))\n                        :ARG1-of (c3 / continue-01)))))"], "tree": ["(s / say-01\n   :ARG0 (u / union\n            :poss (p / person\n                     :ARG0-of (w / work-01\n                                 :ARG2 (g / government-organization\n                                          :name (n / name\n                                                   :op1 \"Post\"\n                                                   :op2 \"Office\"))))))", "(s / say-01\n   :ARG1 (s2 / strike-02\n             :ARG0 (p / person)\n             :time (f / from\n                      :op1 (d / date-entity\n                              :weekday (m / monday)))\n             :duration (t / temporal-quantity\n                          :quant 5\n                          :unit (d2 / day))\n             :ARG1-of (c / cause-01\n                         :ARG0 (d3 / dispute-01\n                                   :ARG2 (a / and\n                                            :op1 (j / job)\n                                            :op2 (p2 / pension)\n                                            :op3 (c2 / close-01\n                                                     :ARG1 (b / branch)))\n                                   :ARG1-of (c3 / continue-01)))))", "(u / union\n   :poss (p / person\n            :ARG0-of (w / work-01\n                        :ARG2 (g / government-organization\n                                 :name (n / name\n                                          :op1 \"Post\"\n                                          :op2 \"Office\")))))", "(s2 / strike-02\n    :ARG0 (p / person)\n    :time (f / from\n             :op1 (d / date-entity\n                     :weekday (m / monday)))\n    :duration (t / temporal-quantity\n                 :quant 5\n                 :unit (d2 / day))\n    :ARG1-of (c / cause-01\n                :ARG0 (d3 / dispute-01\n                          :ARG2 (a / and\n                                   :op1 (j / job)\n                                   :op2 (p2 / pension)\n                                   :op3 (c2 / close-01\n                                            :ARG1 (b / branch)))\n                          :ARG1-of (c3 / continue-01))))", "(s / say-01\n   :ARG0 (u / union))", "(w / work-01\n   :ARG2 (g / government-organization :name (n / name :op1 \"Post\" :op2 \"Office\")))", "(s2 / strike-02\n    :ARG0 (p / person)\n    :time (f / from))", "(c / cause-01\n   :ARG0 (d3 / dispute-01))", "(d3 / dispute-01\n    :ARG2 (a / and))", "(c2 / close-01\n    :ARG1 (b / branch))", "(c3 / continue-01)", "(s / say-01\n   :ARG0 (u / union))", "(w / work-01\n   :ARG2 (g / government-organization :name (n / name :op1 \"Post\" :op2 \"Office\")))", "(s2 / strike-02\n    :ARG0 (p / person))", "(s2 / strike-02\n    :time (f / from))", "(c / cause-01\n   :ARG0 (d3 / dispute-01))", "(d3 / dispute-01\n    :ARG2 (a / and))", "(c2 / close-01\n    :ARG1 (b / branch))", "(s / say-01\n   :ARG0 (u / union\n            :poss (p / person\n                     :ARG0-of (w / work-01\n                                 :ARG2 (g / government-organization\n                                          :name (n / name\n                                                   :op1 \"Post\"\n                                                   :op2 \"Office\")))))\n   :ARG1 (s2 / strike-02\n             :ARG0 p\n             :time (f / from\n                      :op1 (d / date-entity\n                              :weekday (m / monday)))\n             :duration (t / temporal-quantity\n                          :quant 5\n                          :unit (d2 / day))\n             :ARG1-of (c / cause-01\n                         :ARG0 (d3 / dispute-01\n                                   :ARG2 (j / job)))))", "(s / say-01\n   :ARG0 (u / union\n            :poss (p / person\n                     :ARG0-of (w / work-01\n                                 :ARG2 (g / government-organization\n                                          :name (n / name\n                                                   :op1 \"Post\"\n                                                   :op2 \"Office\")))))\n   :ARG1 (s2 / strike-02\n             :ARG0 p\n             :time (f / from\n                      :op1 (d / date-entity\n                              :weekday (m / monday)))\n             :duration (t / temporal-quantity\n                          :quant 5\n                          :unit (d2 / day))\n             :ARG1-of (c / cause-01\n                         :ARG0 (d3 / dispute-01\n                                   :ARG2 (p2 / pension)))))", "(s / say-01\n   :ARG0 (u / union\n            :poss (p / person\n                     :ARG0-of (w / work-01\n                                 :ARG2 (g / government-organization\n                                          :name (n / name\n                                                   :op1 \"Post\"\n                                                   :op2 \"Office\")))))\n   :ARG1 (s2 / strike-02\n             :ARG0 p\n             :time (f / from\n                      :op1 (d / date-entity\n                              :weekday (m / monday)))\n             :duration (t / temporal-quantity\n                          :quant 5\n                          :unit (d2 / day))\n             :ARG1-of (c / cause-01\n                         :ARG0 (d3 / dispute-01\n                                   :ARG2 (c2 / close-01\n                                             :ARG1 (b / branch))\n                                   :ARG1-of (c3 / continue-01)))))", "(s / say-01\n   :ARG0 (u / union\n            :poss (p / person\n                     :ARG0 (w / work-01\n                              :ARG2 (g / government-organization\n                                       :name (n / name\n                                                :op1 \"Post\"\n                                                :op2 \"Office\")))))\n   :ARG1 (s2 / strike-02\n             :ARG0 p\n             :duration (t / temporal-quantity\n                          :quant 5\n                          :unit (d2 / day))\n             :ARG1 (c / cause-01\n                      :ARG0 (d3 / dispute-01\n                                :ARG2 (a / and\n                                         :op1 (j / job)\n                                         :op2 (p2 / pension)\n                                         :op3 (c2 / close-01\n                                                  :ARG1 (b / branch)))\n                                :ARG1 (c3 / continue-01)))))", "(s / say-01)"], "smus": ["The union of Post Office workers says --", "People are on strike for five days from Monday over continuing disputes over jobs, pensions and branch closures, the statement says.", "The union of Post Office workers.", "People are on strike for five days from Monday over continuing dispute over jobs, pensions and branch closures.", "The union says --", "Works for the Post Office.", "People strike from.", "The dispute is a cause for concern.", "There is a dispute over the facts and.", "Branch closes.", "continuing", "The union says --", "Works for the Post Office.", "People strike.", "Strikes from.", "The dispute is a cause for concern.", "There is a dispute over the facts and.", "Branch closes.", "The Post Office workers' union says they will be on strike for five days from Monday over a jobs dispute.", "The Post Office workers' union says they will be on strike for five days from Monday over a pensions dispute.", "The Post Office workers' union says they will be on strike for five days from Monday over a continuing dispute over branch closures.", "The Post Office workers' union says they have been on 5-day strikes over continuing disputes over jobs, pensions and branch closures.", "says."]}, {"instance_id": "pyrxsum-29", "summary": "Wales' youth workers will be regulated by the Education Workforce Council for the first time from 1 April.", "summary_trees": ["# ::snt Wales' youth workers will be regulated by the Education Workforce Council for the first time from 1 April.\n(r / regulate-01\n      :ARG0 (g / government-organization\n            :name (n / name\n                  :op1 \"Education\"\n                  :op2 \"Workforce\"\n                  :op3 \"Council\"))\n      :ARG1 (p / person\n            :ARG0-of (w / work-01\n                  :ARG2 (y / youth))\n            :location (c / country\n                  :name (n2 / name\n                        :op1 \"Wales\")))\n      :ord (o / ordinal-entity\n            :value 1)\n      :time (f / from\n            :op1 (d / date-entity\n                  :month 4\n                  :day 1)))"], "tree": ["(r / regulate-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Education\"\n                     :op2 \"Workforce\"\n                     :op3 \"Council\")))", "(r / regulate-01\n   :ARG1 (p / person\n            :ARG0-of (w / work-01\n                        :ARG2 (y / youth))\n            :location (c / country\n                         :name (n2 / name\n                                   :op1 \"Wales\"))))", "(r / regulate-01\n   :ord (o / ordinal-entity\n           :value 1))", "(r / regulate-01\n   :time (f / from\n            :op1 (d / date-entity\n                    :month 4\n                    :day 1)))", "(g / government-organization\n   :name (n / name\n            :op1 \"Education\"\n            :op2 \"Workforce\"\n            :op3 \"Council\"))", "(p / person\n   :ARG0-of (w / work-01\n               :ARG2 (y / youth))\n   :location (c / country\n                :name (n2 / name\n                          :op1 \"Wales\")))", "(f / from\n   :op1 (d / date-entity\n           :month 4\n           :day 1))", "(r / regulate-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"Education\" :op2 \"Workforce\" :op3 \"Council\")))", "(w / work-01\n   :ARG2 (y / youth))", "(r / regulate-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"Education\" :op2 \"Workforce\" :op3 \"Council\")))", "(w / work-01\n   :ARG2 (y / youth))", "(r / regulate-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Education\"\n                     :op2 \"Workforce\"\n                     :op3 \"Council\"))\n   :ARG1 (p / person\n            :ARG0 (w / work-01\n                     :ARG2 (y / youth)))\n   :ord (o / ordinal-entity\n           :value 1))", "(r / regulate-01\n   :ord (o / ordinal-entity\n           :value 1)\n   :time (f / from\n            :op1 (d / date-entity\n                    :month 4\n                    :day 1)))"], "smus": ["The Education Workforce Council is regulated.", "Youth workers in Wales are regulated.", "First Regulated.", "The regulation will be effective from April 1.", "The Education Workforce Council (EWC)", "Youth workers in Wales", "From April 1st", "The Education Workforce Council is regulated.", "Youth work", "The Education Workforce Council is regulated.", "Youth work", "Youth workers are the first to be regulated by the Education Workforce Council.", "The first regulation will take effect from April 1."]}, {"instance_id": "pyrxsum-30", "summary": "Liberal Democrat leader Tim Farron says he does not believe gay sex is a sin, following questions about his views on the subject.", "summary_trees": ["# ::snt Liberal Democrat leader Tim Farron says he does not believe gay sex is a sin, following questions about his views on the subject.\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tim\"\n                  :op2 \"Farron\")\n            :ARG0-of (l / lead-02\n                  :ARG1 (p2 / political-party\n                        :name (n2 / name\n                              :op1 \"Liberal\"\n                              :op2 \"Democrat\"))))\n      :ARG1 (b / believe-01\n            :polarity -\n            :ARG0 p\n            :ARG1 (s2 / sin-01\n                  :ARG0 (s3 / sex-01\n                        :ARG1 (g / gay-01))))\n      :ARG1-of (f / follow-01\n            :ARG2 (q / question-01\n                  :ARG1 (v / view-02\n                        :ARG0 p\n                        :ARG1 s2))))"], "tree": ["(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tim\"\n                     :op2 \"Farron\")\n            :ARG0-of (l / lead-02\n                        :ARG1 (p2 / political-party\n                                  :name (n2 / name\n                                            :op1 \"Liberal\"\n                                            :op2 \"Democrat\")))))", "(s / say-01\n   :ARG1 (b / believe-01\n            :polarity -\n            :ARG0 (p / person :name (n / name :op1 \"Tim\" :op2 \"Farron\")))\n            :ARG1 (s2 / sin-01\n                      :ARG0 (s3 / sex-01\n                                :ARG1 (g / gay-01)))))", "(s / say-01\n   :ARG1-of (f / follow-01\n               :ARG2 (q / question-01\n                        :ARG1 (v / view-02\n                                 :ARG0 (p / person :name (n / name :op1 \"Tim\" :op2 \"Farron\")))\n                                 :ARG1 (s2 / sin-01)))))", "(p / person\n   :name (n / name\n            :op1 \"Tim\"\n            :op2 \"Farron\")\n   :ARG0-of (l / lead-02\n               :ARG1 (p2 / political-party\n                         :name (n2 / name\n                                   :op1 \"Liberal\"\n                                   :op2 \"Democrat\"))))", "(b / believe-01\n   :polarity -\n   :ARG0 (p / person :name (n / name :op1 \"Tim\" :op2 \"Farron\")))\n   :ARG1 (s2 / sin-01\n             :ARG0 (s3 / sex-01\n                       :ARG1 (g / gay-01))))", "(f / follow-01\n   :ARG2 (q / question-01\n            :ARG1 (v / view-02\n                     :ARG0 (p / person :name (n / name :op1 \"Tim\" :op2 \"Farron\")))\n                     :ARG1 (s2 / sin-01))))", "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Tim\" :op2 \"Farron\"))))", "(l / lead-02\n   :ARG1 (p2 / political-party :name (n2 / name :op1 \"Liberal\" :op2 \"Democrat\")))", "(b / believe-01\n   :polarity -\n   :ARG0 (p / person :name (n / name :op1 \"Tim\" :op2 \"Farron\")))\n   :ARG1 (s2 / sin-01))", "(s2 / sin-01\n    :ARG0 (s3 / sex-01))", "(s3 / sex-01\n    :ARG1 (g / gay-01))", "(g / gay-01)", "(f / follow-01\n   :ARG2 (q / question-01))", "(q / question-01\n   :ARG1 (v / view-02))", "(v / view-02\n   :ARG0 (p / person :name (n / name :op1 \"Tim\" :op2 \"Farron\")))\n   :ARG1 (s2 / sin-01))", "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Tim\" :op2 \"Farron\"))))", "(l / lead-02\n   :ARG1 (p2 / political-party :name (n2 / name :op1 \"Liberal\" :op2 \"Democrat\")))", "(b / believe-01\n   :polarity -)", "(b / believe-01\n   :ARG0 (p / person :name (n / name :op1 \"Tim\" :op2 \"Farron\"))))", "(b / believe-01\n   :ARG1 (s2 / sin-01))", "(s2 / sin-01\n    :ARG0 (s3 / sex-01))", "(s3 / sex-01\n    :ARG1 (g / gay-01))", "(f / follow-01\n   :ARG2 (q / question-01))", "(q / question-01\n   :ARG1 (v / view-02))", "(v / view-02\n   :ARG0 (p / person :name (n / name :op1 \"Tim\" :op2 \"Farron\"))))", "(v / view-02\n   :ARG1 (s2 / sin-01))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tim\"\n                     :op2 \"Farron\")\n            :ARG0 (l / lead-02\n                     :ARG1 (p2 / political-party\n                               :name (n2 / name\n                                         :op1 \"Liberal\"\n                                         :op2 \"Democrat\"))))\n   :ARG1 (b / believe-01\n            :polarity -\n            :ARG0 p\n            :ARG1 (s2 / sin-01\n                      :ARG0 (s3 / sex-01\n                                :ARG1 (g / gay-01))))\n   :ARG1 (f / follow-01\n            :ARG2 (q / question-01\n                     :ARG1 (v / view-02\n                              :ARG0 p\n                              :ARG1 s2))))", "(s / say-01)"], "smus": ["Liberal Democrat leader Tim Farron says:", "Tim Farron says he does not believe that having sex with gays is a sin.", "Says, \"The following is a question of Tim Ferran's sinful view:", "-Tim Farron, Liberal Democrat leader", "Tim Farron does not believe gay sex is a sin.", "Following questioning Tim Ferran's sin view,", "@Tim Farron,", "The Liberal Democrats are the leader.", "Tim Farron does not believe in sin.", "Sex is a sin.", "Gay sex.", "Gay.", "Following question.", "Views are questioned.", "Tim Farron views sin.", "@Tim Farron,", "The Liberal Democrats are the leader.", "Not to believe.", "Tim Farron does believe.", "Believe in sin.", "Sex is a sin.", "Gay sex.", "Following question.", "Views are questioned.", "View by Tim Farron.", "In the view of sin.", "Tim Farron, the leader of the Liberal Democrats, says he does not believe gay sex is a sin and that his views on the matter are following question.", "Says."]}, {"instance_id": "pyrxsum-31", "summary": "Paint has been thrown over an Orange hall in north Belfast.", "summary_trees": ["# ::snt Paint has been thrown over an Orange hall in north Belfast.\n(t / throw-01\n      :ARG1 (p / paint)\n      :ARG2 (o / over\n            :op1 (h / hall\n                  :mod (o2 / organization\n                        :name (n / name\n                              :op1 \"Society\"\n                              :op2 \"of\"\n                              :op3 \"Orange\"))\n                  :location (n2 / north\n                        :part-of (c / city\n                              :name (n3 / name\n                                    :op1 \"Belfast\"))))))"], "tree": ["(t / throw-01\n   :ARG1 (p / paint))", "(t / throw-01\n   :ARG2 (o / over\n            :op1 (h / hall\n                    :mod (o2 / organization\n                             :name (n / name\n                                      :op1 \"Society\"\n                                      :op2 \"of\"\n                                      :op3 \"Orange\"))\n                    :location (n2 / north\n                                  :part-of (c / city\n                                              :name (n3 / name\n                                                        :op1 \"Belfast\"))))))", "(o / over\n   :op1 (h / hall\n           :mod (o2 / organization\n                    :name (n / name\n                             :op1 \"Society\"\n                             :op2 \"of\"\n                             :op3 \"Orange\"))\n           :location (n2 / north\n                         :part-of (c / city\n                                     :name (n3 / name\n                                               :op1 \"Belfast\")))))", "(t / throw-01\n   :ARG1 (p / paint))", "(t / throw-01\n   :ARG1 (p / paint))", "(t / throw-01\n   :ARG1 (p / paint)\n   :ARG2 (o / over\n            :op1 (h / hall\n                    :mod (o2 / organization\n                             :name (n / name\n                                      :op1 \"Society\"\n                                      :op2 \"of\"\n                                      :op3 \"Orange\")))))", "(t / throw-01)"], "smus": ["Paint thrown.", "Thrown over the Orange Society hall in northern Belfast.", "Over the Orange Society hall in northern Belfast.", "Paint thrown.", "Paint thrown.", "Paint was thrown over the Orange Hall.", "Thrown."]}, {"instance_id": "pyrxsum-32", "summary": "Liverpool boss Jurgen Klopp defended under-fire goalkeeper Simon Mignolet after his latest uncertain display in the draw with Arsenal at Anfield.", "summary_trees": ["# ::snt Liverpool boss Jurgen Klopp defended under-fire goalkeeper Simon Mignolet after his latest uncertain display in the draw with Arsenal at Anfield.\n(d / defend-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jurgen\"\n                  :op2 \"Klopp\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"Liverpool\"))\n                  :ARG2 (b / boss)))\n      :ARG1 (p2 / person\n            :name (n3 / name\n                  :op1 \"Simon\"\n                  :op2 \"Mignolet\")\n            :ARG0-of (h2 / have-org-role-91\n                  :ARG2 (g / goalkeeper))\n            :ARG1-of (f / fire-02\n                  :mod (u / under)))\n      :time (a / after\n            :op1 (d2 / display-01\n                  :ARG0 p2\n                  :ARG1-of (k / know-01\n                        :polarity -)\n                  :mod (l / last)\n                  :subevent-of (d3 / draw-01\n                        :ARG0 p2\n                        :ARG3 (t2 / team\n                              :name (n4 / name\n                                    :op1 \"Arsenal\"))\n                        :location (s / sports-facility\n                              :name (n5 / name\n                                    :op1 \"Anfield\"))))))"], "tree": ["(d / defend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (t / team\n                                 :name (n2 / name\n                                           :op1 \"Liverpool\"))\n                        :ARG2 (b / boss))))", "(d / defend-01\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"Simon\"\n                       :op2 \"Mignolet\")\n             :ARG0-of (h2 / have-org-role-91\n                          :ARG2 (g / goalkeeper))\n             :ARG1-of (f / fire-02\n                         :mod (u / under))))", "(d / defend-01\n   :time (a / after\n            :op1 (d2 / display-01\n                     :ARG0 (p2 / person :name (n3 / name :op1 \"Simon\" :op2 \"Mignolet\")))\n                     :ARG1-of (k / know-01\n                                 :polarity -)\n                     :mod (l / last)\n                     :subevent-of (d3 / draw-01\n                                      :ARG0 p2\n                                      :ARG3 (t2 / team\n                                                :name (n4 / name\n                                                          :op1 \"Arsenal\"))\n                                      :location (s / sports-facility\n                                                   :name (n5 / name\n                                                             :op1 \"Anfield\"))))))", "(p / person\n   :name (n / name\n            :op1 \"Jurgen\"\n            :op2 \"Klopp\")\n   :ARG0-of (h / have-org-role-91\n               :ARG1 (t / team\n                        :name (n2 / name\n                                  :op1 \"Liverpool\"))\n               :ARG2 (b / boss)))", "(p2 / person\n    :name (n3 / name\n              :op1 \"Simon\"\n              :op2 \"Mignolet\")\n    :ARG0-of (h2 / have-org-role-91\n                 :ARG2 (g / goalkeeper))\n    :ARG1-of (f / fire-02\n                :mod (u / under)))", "(a / after\n   :op1 (d2 / display-01\n            :ARG0 (p2 / person :name (n3 / name :op1 \"Simon\" :op2 \"Mignolet\")))\n            :ARG1-of (k / know-01\n                        :polarity -)\n            :mod (l / last)\n            :subevent-of (d3 / draw-01\n                             :ARG0 p2\n                             :ARG3 (t2 / team\n                                       :name (n4 / name\n                                                 :op1 \"Arsenal\"))\n                             :location (s / sports-facility\n                                          :name (n5 / name\n                                                    :op1 \"Anfield\")))))", "(d / defend-01\n   :ARG0 (p / person :name (n / name :op1 \"Jurgen\" :op2 \"Klopp\"))))", "(f / fire-02\n   :mod (u / under))", "(d2 / display-01\n    :ARG0 (p2 / person :name (n3 / name :op1 \"Simon\" :op2 \"Mignolet\"))))", "(k / know-01\n   :polarity -)", "(d3 / draw-01\n    :ARG0 (p2 / person :name (n3 / name :op1 \"Simon\" :op2 \"Mignolet\")))\n    :ARG3 (t2 / team :name (n4 / name :op1 \"Arsenal\")))", "(d / defend-01\n   :ARG0 (p / person :name (n / name :op1 \"Jurgen\" :op2 \"Klopp\"))))", "(f / fire-02\n   :mod (u / under))", "(d2 / display-01\n    :ARG0 (p2 / person :name (n3 / name :op1 \"Simon\" :op2 \"Mignolet\"))))", "(k / know-01\n   :polarity -)", "(d3 / draw-01\n    :ARG0 (p2 / person :name (n3 / name :op1 \"Simon\" :op2 \"Mignolet\"))))", "(d3 / draw-01\n    :ARG3 (t2 / team :name (n4 / name :op1 \"Arsenal\")))", "(d / defend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (t / team\n                              :name (n2 / name\n                                        :op1 \"Liverpool\"))\n                     :ARG2 (b / boss)))\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"Simon\"\n                       :op2 \"Mignolet\")\n             :ARG0 (h2 / have-org-role-91\n                       :ARG2 (g / goalkeeper))\n             :ARG1 (f / fire-02\n                      :mod (u / under))))", "(d / defend-01\n   :time (a / after\n            :op1 (d2 / display-01)))"], "smus": ["Liverpool boss Jurgen Klopp defended.", "Simon Merlot, the goalkeeper, who was under fire, was defended.", "The defence was defended after Simon Merlot's last known display in the draw with Arsenal at Anfield.", "Liverpool boss Jurgen Klopp", "Simon Merlot, goalkeeper, under fire.", "After Simon Merlot's last known display in the draw with Arsenal at Anfield, the unnamed", "Jurgen Klopp defended.", "Under fire.", "Simon Merlot on display.", "Unknow.", "Simon Merlot drew with Arsenal.", "Jurgen Klopp defended.", "Under fire.", "Simon Merlot on display.", "Unknow.", "Simon Merlot draws.", "Arsenal drew 2-2", "Jurgen Klopp defended Liverpool boss Simon Merlot as goalkeeper for the under fire.", "After the display, the defense defended itself."]}, {"instance_id": "pyrxsum-33", "summary": "Thousands of people have been leaving besieged, rebel-held eastern districts of the Syrian city of Aleppo following the resumption of evacuations agreed as part of a ceasefire deal last week.", "summary_trees": ["# ::snt Thousands of people have been leaving besieged, rebel-held eastern districts of the Syrian city of Aleppo following the resumption of evacuations agreed as part of a ceasefire deal last week.\n(l / leave-11\n      :ARG0 (p / person\n            :quant (m / multiple\n                  :op1 1000))\n      :ARG1 (d / district\n            :location (e / east)\n            :ARG1-of (b / besiege-01)\n            :ARG1-of (h / hold-01\n                  :ARG0 (p2 / person\n                        :ARG0-of (r / rebel-01)))\n            :part-of (c / city\n                  :name (n / name\n                        :op1 \"Aleppo\")\n                  :location (c2 / country\n                        :name (n2 / name\n                              :op1 \"Syria\"))))\n      :ARG1-of (f / follow-01\n            :ARG2 (r2 / resume-01\n                  :ARG1 (e2 / evacuate-01\n                        :ARG1-of (a / agree-01\n                              :part-of (d2 / deal-01\n                                    :ARG2 (c3 / cease-01\n                                          :ARG1 (f2 / fire-01))\n                                    :time (w / week\n                                          :mod (l2 / last))))))))"], "tree": ["(l / leave-11\n   :ARG0 (p / person\n            :quant (m / multiple\n                      :op1 1000)))", "(l / leave-11\n   :ARG1 (d / district\n            :location (e / east)\n            :ARG1-of (b / besiege-01)\n            :ARG1-of (h / hold-01\n                        :ARG0 (p2 / person\n                                  :ARG0-of (r / rebel-01)))\n            :part-of (c / city\n                        :name (n / name\n                                 :op1 \"Aleppo\")\n                        :location (c2 / country\n                                      :name (n2 / name\n                                                :op1 \"Syria\")))))", "(l / leave-11\n   :ARG1-of (f / follow-01\n               :ARG2 (r2 / resume-01\n                         :ARG1 (e2 / evacuate-01\n                                   :ARG1-of (a / agree-01\n                                               :part-of (d2 / deal-01\n                                                            :ARG2 (c3 / cease-01\n                                                                      :ARG1 (f2 / fire-01))\n                                                            :time (w / week\n                                                                     :mod (l2 / last))))))))", "(p / person\n   :quant (m / multiple\n             :op1 1000))", "(d / district\n   :location (e / east)\n   :ARG1-of (b / besiege-01)\n   :ARG1-of (h / hold-01\n               :ARG0 (p2 / person\n                         :ARG0-of (r / rebel-01)))\n   :part-of (c / city\n               :name (n / name\n                        :op1 \"Aleppo\")\n               :location (c2 / country\n                             :name (n2 / name\n                                       :op1 \"Syria\"))))", "(f / follow-01\n   :ARG2 (r2 / resume-01\n             :ARG1 (e2 / evacuate-01\n                       :ARG1-of (a / agree-01\n                                   :part-of (d2 / deal-01\n                                                :ARG2 (c3 / cease-01\n                                                          :ARG1 (f2 / fire-01))\n                                                :time (w / week\n                                                         :mod (l2 / last)))))))", "(b / besiege-01)", "(h / hold-01\n   :ARG0 (p2 / person))", "(r / rebel-01)", "(f / follow-01\n   :ARG2 (r2 / resume-01))", "(r2 / resume-01\n    :ARG1 (e2 / evacuate-01))", "(e2 / evacuate-01)", "(a / agree-01)", "(d2 / deal-01\n    :ARG2 (c3 / cease-01))", "(c3 / cease-01\n    :ARG1 (f2 / fire-01))", "(f2 / fire-01)", "(h / hold-01\n   :ARG0 (p2 / person))", "(f / follow-01\n   :ARG2 (r2 / resume-01))", "(r2 / resume-01\n    :ARG1 (e2 / evacuate-01))", "(d2 / deal-01\n    :ARG2 (c3 / cease-01))", "(c3 / cease-01\n    :ARG1 (f2 / fire-01))", "(l / leave-11\n   :ARG0 (p / person\n            :quant (m / multiple\n                      :op1 1000))\n   :ARG1 (d / district\n            :ARG1 (b / besiege-01)\n            :ARG1 (h / hold-01\n                     :ARG0 (p2 / person\n                               :ARG0 (r / rebel-01)))\n            :part (c / city\n                     :name (n / name\n                              :op1 \"Aleppo\")))\n   :ARG1 (f / follow-01\n            :ARG2 (r2 / resume-01\n                      :ARG1 (e2 / evacuate-01\n                                :ARG1 (a / agree-01\n                                         :part (d2 / deal-01\n                                                   :ARG2 (c3 / cease-01\n                                                             :ARG1 (f2 / fire-01))))))))", "(l / leave-11)"], "smus": ["Thousands of people are leaving.", "The besieged eastern districts held by the rebels are leaving the Syrian city of Aleppo.", "The evacuations were leaving following the resume of evacuations agreed as part of last week's cease-fire deal.", "Thousands.", "Besieged eastern districts held by rebels are part of Syrian city Aleppo.", "Following the resume of evacuations agreed as part of last week's cease-fire deal,", "Besieged.", "People are being held.", "Rebel.", "Following a resume.", "Evacuations resumed.", "Evacuations", "Agreed.", "cease and desist deal", "cease fire", "Fire.", "People are being held.", "Following a resume.", "Evacuations resumed.", "cease and desist deal", "cease fire", "Thousands of people are leaving besieged districts of Aleppo held by the rebels following the resume of evacuations agreed as part of a ceasefire deal.", "leaving."]}, {"instance_id": "pyrxsum-34", "summary": "Thousands of people have marched in opposition to plans to downgrade Stafford Hospital's services.", "summary_trees": ["# ::snt Thousands of people have marched in opposition to plans to downgrade Stafford Hospital's services.\n(m / march-01\n      :ARG0 (p / person\n            :quant (m2 / multiple\n                  :op1 1000))\n      :purpose (o / oppose-01\n            :ARG0 p\n            :ARG1 (p2 / plan-01\n                  :ARG1 (d / downgrade-02\n                        :ARG1 (s / service\n                              :poss (h / hospital\n                                    :name (n / name\n                                          :op1 \"Stafford\"\n                                          :op2 \"Hospital\")))))))"], "tree": ["(m / march-01\n   :ARG0 (p / person\n            :quant (m2 / multiple\n                       :op1 1000)))", "(m / march-01\n   :purpose (o / oppose-01\n               :ARG0 (p / person)\n               :ARG1 (p2 / plan-01\n                         :ARG1 (d / downgrade-02\n                                  :ARG1 (s / service\n                                           :poss (h / hospital\n                                                    :name (n / name\n                                                             :op1 \"Stafford\"\n                                                             :op2 \"Hospital\")))))))", "(p / person\n   :quant (m2 / multiple\n              :op1 1000))", "(o / oppose-01\n   :ARG0 (p / person)\n   :ARG1 (p2 / plan-01\n             :ARG1 (d / downgrade-02\n                      :ARG1 (s / service\n                               :poss (h / hospital\n                                        :name (n / name\n                                                 :op1 \"Stafford\"\n                                                 :op2 \"Hospital\"))))))", "(m / march-01\n   :ARG0 (p / person))", "(o / oppose-01\n   :ARG0 (p / person)\n   :ARG1 (p2 / plan-01))", "(p2 / plan-01\n    :ARG1 (d / downgrade-02))", "(d / downgrade-02\n   :ARG1 (s / service))", "(m / march-01\n   :ARG0 (p / person))", "(o / oppose-01\n   :ARG0 (p / person))", "(o / oppose-01\n   :ARG1 (p2 / plan-01))", "(p2 / plan-01\n    :ARG1 (d / downgrade-02))", "(d / downgrade-02\n   :ARG1 (s / service))", "(m / march-01\n   :ARG0 (p / person\n            :quant (m2 / multiple\n                       :op1 1000)))", "(m / march-01\n   :purpose (o / oppose-01))"], "smus": ["Thousands marched.", "People marched in opposition to plans to downgrade services at Stafford Hospital.", "Thousands.", "People are against plans to downgrade Stafford Hospital's services.", "People marched.", "People are against the plans.", "Plans to downgrade.", "downgrade services.", "People marched.", "People are in opposition.", "Anti-plans", "Plans to downgrade.", "downgrade services.", "Thousands marched.", "marched in opposition"]}, {"instance_id": "pyrxsum-35", "summary": "Filled with goodwill, unfathomable optimism and a slightly heavy heart, you embark on a health kick.", "summary_trees": ["# ::snt Filled with goodwill, unfathomable optimism and a slightly heavy heart, you embark on a health kick.\n(e / embark-01\n      :ARG0 (y / you\n            :ARG1-of (f / fill-01\n                  :ARG2 (a / and\n                        :op1 (g / goodwill)\n                        :op2 (o / optimism\n                              :ARG1-of (c / conceive-01\n                                    :polarity -))\n                        :op3 (h / heart\n                              :mod (h2 / heavy\n                                    :degree (s / slight))))))\n      :ARG1 (k / kick-01\n            :ARG0 y\n            :ARG1 (h3 / health)))"], "tree": ["(e / embark-01\n   :ARG0 (y / you\n            :ARG1-of (f / fill-01\n                        :ARG2 (a / and\n                                 :op1 (g / goodwill)\n                                 :op2 (o / optimism\n                                         :ARG1-of (c / conceive-01\n                                                     :polarity -))\n                                 :op3 (h / heart\n                                         :mod (h2 / heavy\n                                                  :degree (s / slight)))))))", "(e / embark-01\n   :ARG1 (k / kick-01\n            :ARG0 (y / you)\n            :ARG1 (h3 / health)))", "(y / you\n   :ARG1-of (f / fill-01\n               :ARG2 (a / and\n                        :op1 (g / goodwill)\n                        :op2 (o / optimism\n                                :ARG1-of (c / conceive-01\n                                            :polarity -))\n                        :op3 (h / heart\n                                :mod (h2 / heavy\n                                         :degree (s / slight))))))", "(k / kick-01\n   :ARG0 (y / you)\n   :ARG1 (h3 / health))", "(e / embark-01\n   :ARG0 (y / you))", "(f / fill-01\n   :ARG2 (a / and))", "(c / conceive-01\n   :polarity -)", "(k / kick-01\n   :ARG0 (y / you)\n   :ARG1 (h3 / health))", "(e / embark-01\n   :ARG0 (y / you))", "(f / fill-01\n   :ARG2 (a / and))", "(c / conceive-01\n   :polarity -)", "(k / kick-01\n   :ARG0 (y / you))", "(k / kick-01\n   :ARG1 (h3 / health))", "(e / embark-01\n   :ARG0 (y / you\n            :ARG1-of (f / fill-01\n                        :ARG2 (g / goodwill))))", "(e / embark-01\n   :ARG0 (y / you\n            :ARG1-of (f / fill-01\n                        :ARG2 (o / optimism\n                                 :ARG1-of (c / conceive-01\n                                             :polarity -)))))", "(e / embark-01\n   :ARG0 (y / you\n            :ARG1-of (f / fill-01\n                        :ARG2 (h / heart\n                                 :mod (h2 / heavy\n                                          :degree (s / slight)))))\n   :ARG1 (k / kick-01\n            :ARG0 y\n            :ARG1 (h3 / health)))", "(e / embark-01\n   :ARG0 (y / you\n            :ARG1 (f / fill-01\n                     :ARG2 (a / and\n                              :op1 (g / goodwill)\n                              :op2 (o / optimism\n                                      :ARG1 (c / conceive-01\n                                               :polarity -))\n                              :op3 (h / heart\n                                      :mod (h2 / heavy\n                                               :degree (s / slight))))))\n   :ARG1 (k / kick-01\n            :ARG0 y\n            :ARG1 (h3 / health)))", "(e / embark-01)"], "smus": ["You embark filled with goodwill, unconcerned optimism and a slightly heavy heart.", "You embark on a health kick.", "You are filled with goodwill, unconcerned optimism and a slightly heavy heart.", "You're kicking health.", "You embark.", "The 'empty' is full of it.", "Unconceptional.", "You're kicking health.", "You embark.", "The 'empty' is full of it.", "Unconceptional.", "You got a kick.", "Kicking health.", "You embark full of goodwill.", "You embark filled with unconcerned optimism.", "You embark on a health kick, slightly heavy-heartedly filled.", "You embark on a health kick filled with goodwill, conceiving optimism and a slightly heavy heart.", "embark."]}, {"instance_id": "pyrxsum-36", "summary": "Russia and Qatar may have had to pay bribes to secure their World Cups, Sepp Blatter's former special advisor has suggested.", "summary_trees": ["# ::snt Russia and Qatar may have had to pay bribes to secure their World Cups, Sepp Blatter's former special advisor has suggested.\n(s / suggest-01\n      :ARG0 (p / person\n            :ARG0-of (a / advise-01\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Sepp\"\n                              :op2 \"Blatter\"))\n                  :time (f / former)\n                  :ARG1-of (s2 / special-02)))\n      :ARG1 (p3 / possible-01\n            :ARG1 (o / obligate-01\n                  :ARG1 (a2 / and\n                        :op1 (c / country\n                              :name (n2 / name\n                                    :op1 \"Russia\"))\n                        :op2 (c2 / country\n                              :name (n3 / name\n                                    :op1 \"Qatar\")))\n                  :ARG2 (p4 / pay-01\n                        :ARG0 a2\n                        :ARG1 (b / bribe-01)\n                        :purpose (s3 / secure-02\n                              :ARG0 a2\n                              :ARG1 (g / game\n                                    :name (n4 / name\n                                          :op1 \"World\"\n                                          :op2 \"Cup\")\n                                    :poss a2))))))"], "tree": ["(s / suggest-01\n   :ARG0 (p / person\n            :ARG0-of (a / advise-01\n                        :ARG1 (p2 / person\n                                  :name (n / name\n                                           :op1 \"Sepp\"\n                                           :op2 \"Blatter\"))\n                        :time (f / former)\n                        :ARG1-of (s2 / special-02))))", "(s / suggest-01\n   :ARG1 (p3 / possible-01\n             :ARG1 (o / obligate-01\n                      :ARG1 (a2 / and\n                                :op1 (c / country\n                                        :name (n2 / name\n                                                  :op1 \"Russia\"))\n                                :op2 (c2 / country\n                                         :name (n3 / name\n                                                   :op1 \"Qatar\")))\n                      :ARG2 (p4 / pay-01\n                                :ARG0 a2\n                                :ARG1 (b / bribe-01)\n                                :purpose (s3 / secure-02\n                                             :ARG0 a2\n                                             :ARG1 (g / game\n                                                      :name (n4 / name\n                                                                :op1 \"World\"\n                                                                :op2 \"Cup\")\n                                                      :poss a2))))))", "(p / person\n   :ARG0-of (a / advise-01\n               :ARG1 (p2 / person\n                         :name (n / name\n                                  :op1 \"Sepp\"\n                                  :op2 \"Blatter\"))\n               :time (f / former)\n               :ARG1-of (s2 / special-02)))", "(p3 / possible-01\n    :ARG1 (o / obligate-01\n             :ARG1 (a2 / and\n                       :op1 (c / country\n                               :name (n2 / name\n                                         :op1 \"Russia\"))\n                       :op2 (c2 / country\n                                :name (n3 / name\n                                          :op1 \"Qatar\")))\n             :ARG2 (p4 / pay-01\n                       :ARG0 a2\n                       :ARG1 (b / bribe-01)\n                       :purpose (s3 / secure-02\n                                    :ARG0 a2\n                                    :ARG1 (g / game\n                                             :name (n4 / name\n                                                       :op1 \"World\"\n                                                       :op2 \"Cup\")\n                                             :poss a2)))))", "(s / suggest-01\n   :ARG0 (p / person))", "(a / advise-01\n   :ARG1 (p2 / person :name (n / name :op1 \"Sepp\" :op2 \"Blatter\")))", "(s2 / special-02)", "(p3 / possible-01\n    :ARG1 (o / obligate-01))", "(o / obligate-01\n   :ARG1 (a2 / and))", "(p4 / pay-01\n    :ARG0 (a2 / and)\n    :ARG1 (b / bribe-01))", "(b / bribe-01)", "(s3 / secure-02\n    :ARG0 (a2 / and)\n    :ARG1 (g / game :name (n4 / name :op1 \"World\" :op2 \"Cup\"))))", "(s / suggest-01\n   :ARG0 (p / person))", "(a / advise-01\n   :ARG1 (p2 / person :name (n / name :op1 \"Sepp\" :op2 \"Blatter\")))", "(p3 / possible-01\n    :ARG1 (o / obligate-01))", "(o / obligate-01\n   :ARG1 (a2 / and))", "(p4 / pay-01\n    :ARG0 (a2 / and))", "(p4 / pay-01\n    :ARG1 (b / bribe-01))", "(s3 / secure-02\n    :ARG0 (a2 / and))", "(s3 / secure-02\n    :ARG1 (g / game :name (n4 / name :op1 \"World\" :op2 \"Cup\"))))", "(s / suggest-01\n   :ARG0 (p / person\n            :ARG0-of (a / advise-01\n                        :ARG1 (p2 / person\n                                  :name (n / name\n                                           :op1 \"Sepp\"\n                                           :op2 \"Blatter\"))\n                        :time (f / former)\n                        :ARG1-of (s2 / special-02)))\n   :ARG1 (p3 / possible-01\n             :ARG1 (o / obligate-01\n                      :ARG1 (c / country\n                               :name (n2 / name\n                                         :op1 \"Russia\"))\n                      :ARG2 (p4 / pay-01\n                                :ARG0 c\n                                :ARG1 (b / bribe-01)\n                                :purpose (s3 / secure-02\n                                             :ARG0 c\n                                             :ARG1 (g / game\n                                                      :name (n4 / name\n                                                                :op1 \"World\"\n                                                                :op2 \"Cup\")\n                                                      :poss c))))))", "(s / suggest-01\n   :ARG0 (p / person\n            :ARG0-of (a / advise-01\n                        :ARG1 (p2 / person\n                                  :name (n / name\n                                           :op1 \"Sepp\"\n                                           :op2 \"Blatter\"))\n                        :time (f / former)\n                        :ARG1-of (s2 / special-02)))\n   :ARG1 (p3 / possible-01\n             :ARG1 (o / obligate-01\n                      :ARG1 (c2 / country\n                                :name (n3 / name\n                                          :op1 \"Qatar\"))\n                      :ARG2 (p4 / pay-01\n                                :ARG0 c2\n                                :ARG1 (b / bribe-01)\n                                :purpose (s3 / secure-02\n                                             :ARG0 c2\n                                             :ARG1 (g / game\n                                                      :name (n4 / name\n                                                                :op1 \"World\"\n                                                                :op2 \"Cup\")\n                                                      :poss c2)))\n                      :ARG2 p4)))", "(s / suggest-01\n   :ARG0 (p / person\n            :ARG0 (a / advise-01\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Sepp\"\n                                        :op2 \"Blatter\"))\n                     :ARG1 (s2 / special-02)))\n   :ARG1 (p3 / possible-01\n             :ARG1 (o / obligate-01\n                      :ARG1 (a2 / and\n                                :op1 (c / country\n                                        :name (n2 / name\n                                                  :op1 \"Russia\"))\n                                :op2 (c2 / country\n                                         :name (n3 / name\n                                                   :op1 \"Qatar\")))\n                      :ARG2 (p4 / pay-01\n                                :ARG0 a2\n                                :ARG1 (b / bribe-01)))))", "(s / suggest-01)"], "smus": ["suggested by a former special adviser to Sepp Blatt.", "It is suggested that Russia and Qatar may have to pay bribes to secure their World Cup.", "Special adviser to former Sepp Blatter", "Russia and Qatar may have to pay bribes to secure their World Cup.", "As people have suggested.", "advice to Sepp Blatter:", "Special", "Maybe it has to.", "And it must be.", "The bribes will be paid by the taxpayers.", "Bribes.", "The World Cup is secured by the World Cup.", "As people have suggested.", "advice to Sepp Blatter:", "Maybe it has to.", "And it must be.", "Then pay.", "pay bribes", "and secure.", "Secure the World Cup.", "A former special adviser to Sepp Blatch has suggested that Russia may have to pay bribes to secure its World Cup.", "A former special adviser to Sepp Blatter has suggested that Qatar may have to pay bribes to secure his World Cup.", "Special adviser Sepp Blatch suggested that Russia and Qatar may have to pay bribes.", "Suggestions:"]}, {"instance_id": "pyrxsum-37", "summary": "The High Court has begun hearing the legal challenge of a terminally ill UK man who wants the right to die.", "summary_trees": ["# ::snt The High Court has begun hearing the legal challenge of a terminally ill UK man who wants the right to die.\n(b / begin-01\n      :ARG0 (g / government-organization\n            :name (n / name\n                  :op1 \"High\"\n                  :op2 \"Court\"))\n      :ARG1 (h / hear-01\n            :ARG0 g\n            :ARG1 (c / challenge-01\n                  :ARG0 (m / man\n                        :ARG1-of (ii / ill-01\n                              :mod (t / terminal))\n                        :mod (c2 / country\n                              :name (n2 / name\n                                    :op1 \"UK\"))\n                        :ARG0-of (w / want-01\n                              :ARG1 (r / right-05\n                                    :ARG1 m\n                                    :ARG2 (d / die-01\n                                          :ARG1 m))))\n                  :ARG1-of (l / legal-02))))"], "tree": ["(b / begin-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"High\"\n                     :op2 \"Court\")))", "(b / begin-01\n   :ARG1 (h / hear-01\n            :ARG0 (g / government-organization :name (n / name :op1 \"High\" :op2 \"Court\"))\n            :ARG1 (c / challenge-01\n                     :ARG0 (m / man\n                              :ARG1-of (ii / ill-01\n                                           :mod (t / terminal))\n                              :mod (c2 / country\n                                       :name (n2 / name\n                                                 :op1 \"UK\"))\n                              :ARG0-of (w / want-01\n                                          :ARG1 (r / right-05\n                                                   :ARG1 m\n                                                   :ARG2 (d / die-01\n                                                            :ARG1 m))))\n                     :ARG1-of (l / legal-02))))", "(g / government-organization\n   :name (n / name\n            :op1 \"High\"\n            :op2 \"Court\"))", "(h / hear-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"High\" :op2 \"Court\"))\n   :ARG1 (c / challenge-01\n            :ARG0 (m / man\n                     :ARG1-of (ii / ill-01\n                                  :mod (t / terminal))\n                     :mod (c2 / country\n                              :name (n2 / name\n                                        :op1 \"UK\"))\n                     :ARG0-of (w / want-01\n                                 :ARG1 (r / right-05\n                                          :ARG1 m\n                                          :ARG2 (d / die-01\n                                                   :ARG1 m))))\n            :ARG1-of (l / legal-02)))", "(b / begin-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"High\" :op2 \"Court\")))", "(h / hear-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"High\" :op2 \"Court\"))\n   :ARG1 (c / challenge-01))", "(c / challenge-01\n   :ARG0 (m / man))", "(ii / ill-01\n    :mod (t / terminal))", "(w / want-01\n   :ARG1 (r / right-05))", "(r / right-05\n   :ARG1 (m / man)\n   :ARG2 (d / die-01))", "(d / die-01\n   :ARG1 (m / man))", "(l / legal-02)", "(b / begin-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"High\" :op2 \"Court\")))", "(h / hear-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"High\" :op2 \"Court\")))", "(h / hear-01\n   :ARG1 (c / challenge-01))", "(c / challenge-01\n   :ARG0 (m / man))", "(ii / ill-01\n    :mod (t / terminal))", "(w / want-01\n   :ARG1 (r / right-05))", "(r / right-05\n   :ARG1 (m / man))", "(r / right-05\n   :ARG2 (d / die-01))", "(d / die-01\n   :ARG1 (m / man))", "(b / begin-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"High\"\n                     :op2 \"Court\"))\n   :ARG1 (h / hear-01\n            :ARG0 g\n            :ARG1 (c / challenge-01\n                     :ARG0 (m / man\n                              :ARG1 (ii / ill-01\n                                        :mod (t / terminal))\n                              :mod (c2 / country\n                                       :name (n2 / name\n                                                 :op1 \"UK\"))\n                              :ARG0 (w / want-01\n                                       :ARG1 (r / right-05\n                                                :ARG1 m\n                                                :ARG2 (d / die-01\n                                                         :ARG1 m))))\n                     :ARG1 (l / legal-02))))", "(b / begin-01)"], "smus": ["The High Court has begun.", "The High Court has begun hearing a legal challenge from a terminally ill UK man who wants the right to die.", "The High Court.", "The High Court is hearing a legal challenge from a terminally ill UK man who wants the right to die.", "The High Court has begun.", "The High Court is hearing the challenge.", "The man is a challenger.", "terminally ill.", "wants the right.", "The man's right to die.", "The man will die.", "Legal.", "The High Court has begun.", "The High Court is hearing.", "Hearing the challenge.", "The man is a challenger.", "terminally ill.", "wants the right.", "The man's right.", "The right to die.", "The man will die.", "The High Court has begun hearing a legal challenge from a terminally ill UK man who wants the right to die.", "a href=\"http://www.huffingtonpost.com/2011/02/06/beginning/\">BeGINNING/a>"]}, {"instance_id": "pyrxsum-38", "summary": "An online appeal set up to help the family of a five-year-old girl who died when her head became stuck in a lift in Dorset has raised more than \u00a312,000.", "summary_trees": ["# ::snt An online appeal set up to help the family of a five-year-old girl who died when her head became stuck in a lift in Dorset has raised more than \u00a312,000.\n(r / raise-02\n      :ARG0 (a / appeal-02\n            :mod (o / online)\n            :ARG1-of (s / set-up-03\n                  :purpose (h / help-01\n                        :ARG0 a\n                        :ARG1 (f / family\n                              :poss (g / girl\n                                    :age (t / temporal-quantity\n                                          :quant 5\n                                          :unit (y / year))\n                                    :ARG1-of (d / die-01\n                                          :ARG1-of (c / cause-01\n                                                :ARG0 (b / become-01\n                                                      :ARG1 (h2 / head)\n                                                      :ARG2 (s2 / stick-01\n                                                            :ARG1 h2\n                                                            :ARG2 (l / lift)\n                                                            :location (c2 / county\n                                                                  :name (n / name\n                                                                        :op1 \"Dorset\"))))))\n                                    :part h2)))))\n      :ARG1 (m / more-than\n            :op1 (m2 / monetary-quantity\n                  :quant 12000\n                  :unit (p / pound))))"], "tree": ["(r / raise-02\n   :ARG0 (a / appeal-02\n            :mod (o / online)\n            :ARG1-of (s / set-up-03\n                        :purpose (h / help-01\n                                    :ARG0 a\n                                    :ARG1 (f / family\n                                             :poss (g / girl\n                                                      :age (t / temporal-quantity\n                                                              :quant 5\n                                                              :unit (y / year))\n                                                      :ARG1-of (d / die-01\n                                                                  :ARG1-of (c / cause-01\n                                                                              :ARG0 (b / become-01\n                                                                                       :ARG1 (h2 / head)\n                                                                                       :ARG2 (s2 / stick-01\n                                                                                                 :ARG1 h2\n                                                                                                 :ARG2 (l / lift)\n                                                                                                 :location (c2 / county\n                                                                                                               :name (n / name\n                                                                                                                        :op1 \"Dorset\"))))))\n                                                      :part h2))))))", "(r / raise-02\n   :ARG1 (m / more-than\n            :op1 (m2 / monetary-quantity\n                     :quant 12000\n                     :unit (p / pound))))", "(a / appeal-02\n   :mod (o / online)\n   :ARG1-of (s / set-up-03\n               :purpose (h / help-01\n                           :ARG0 a\n                           :ARG1 (f / family\n                                    :poss (g / girl\n                                             :age (t / temporal-quantity\n                                                     :quant 5\n                                                     :unit (y / year))\n                                             :ARG1-of (d / die-01\n                                                         :ARG1-of (c / cause-01\n                                                                     :ARG0 (b / become-01\n                                                                              :ARG1 (h2 / head)\n                                                                              :ARG2 (s2 / stick-01\n                                                                                        :ARG1 h2\n                                                                                        :ARG2 (l / lift)\n                                                                                        :location (c2 / county\n                                                                                                      :name (n / name\n                                                                                                               :op1 \"Dorset\"))))))\n                                             :part h2)))))", "(m / more-than\n   :op1 (m2 / monetary-quantity\n            :quant 12000\n            :unit (p / pound)))", "(r / raise-02\n   :ARG0 (a / appeal-02))", "(a / appeal-02\n   :mod (o / online))", "(s / set-up-03\n   :purpose (h / help-01))", "(h / help-01\n   :ARG0 (a / appeal-02)\n   :ARG1 (f / family))", "(d / die-01)", "(c / cause-01\n   :ARG0 (b / become-01))", "(b / become-01\n   :ARG1 (h2 / head))", "(s2 / stick-01\n    :ARG1 (h2 / head)\n    :ARG2 (l / lift))", "(r / raise-02\n   :ARG0 (a / appeal-02))", "(a / appeal-02\n   :mod (o / online))", "(s / set-up-03\n   :purpose (h / help-01))", "(h / help-01\n   :ARG0 (a / appeal-02))", "(h / help-01\n   :ARG1 (f / family))", "(c / cause-01\n   :ARG0 (b / become-01))", "(b / become-01\n   :ARG1 (h2 / head))", "(s2 / stick-01\n    :ARG1 (h2 / head))", "(s2 / stick-01\n    :ARG2 (l / lift))", "(r / raise-02\n   :ARG0 (a / appeal-02\n            :mod (o / online)\n            :ARG1 (s / set-up-03))\n   :ARG1 (m / more-than\n            :op1 (m2 / monetary-quantity\n                     :quant 12000\n                     :unit (p / pound))))", "(r / raise-02)"], "smus": ["An online appeal was raised to help the family of a five year old girl who died when her head became stuck on a lift in Dorset.", "More than PS12000 was raised.", "There is an online appeal set up to help the family of a five year old girl who died when her head became stuck on a lift in Dorset.", "more than PS12,000.", "The appeal was raised.", "Online appeal", "Set up to help.", "The appeal will help the family.", "Death.", "Because it became.", "The head became.", "The head stifled in a lift.", "The appeal was raised.", "Online appeal", "Set up to help.", "The appeal will help.", "Help the family.", "Because it became.", "The head became.", "Sticks to head", "Stick to the lift.", "An online appeal for the set up has raised more than PS12,000.", "Raised"]}, {"instance_id": "pyrxsum-39", "summary": "Game of Thrones star \"The Mountain\" has been beaten to Europe's Strongest Man title by a man from Swindon.", "summary_trees": ["# ::snt Game of Thrones star \"The Mountain\" has been beaten to Europe's Strongest Man title by a man from Swindon.\n(b / beat-03\n      :ARG0 (m / man\n            :source (c / city\n                  :name (n / name\n                        :op1 \"Swindon\")))\n      :ARG1 (p / person\n            :name (n2 / name\n                  :op1 \"The\"\n                  :op2 \"Mountain\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (b2 / broadcast-program\n                        :name (n3 / name\n                              :op1 \"Game\"\n                              :op2 \"of\"\n                              :op3 \"Thrones\"))))\n      :ARG2 (t / title-01\n            :ARG1 p\n            :ARG2 (s / strong-02\n                  :ARG2-of (h2 / have-degree-91\n                        :ARG1 m\n                        :ARG3 (m2 / most)\n                        :ARG5 (c2 / continent\n                              :name (n4 / name\n                                    :op1 \"Europe\"))))))"], "tree": ["(b / beat-03\n   :ARG0 (m / man\n            :source (c / city\n                       :name (n / name\n                                :op1 \"Swindon\"))))", "(b / beat-03\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"The\"\n                      :op2 \"Mountain\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (b2 / broadcast-program\n                                  :name (n3 / name\n                                            :op1 \"Game\"\n                                            :op2 \"of\"\n                                            :op3 \"Thrones\")))))", "(b / beat-03\n   :ARG2 (t / title-01\n            :ARG1 (p / person :name (n2 / name :op1 \"The\" :op2 \"Mountain\")))\n            :ARG2 (s / strong-02\n                     :ARG2-of (h2 / have-degree-91\n                                  :ARG1 (m / man)\n                                  :ARG3 (m2 / most)\n                                  :ARG5 (c2 / continent\n                                            :name (n4 / name\n                                                      :op1 \"Europe\"))))))", "(m / man\n   :source (c / city\n              :name (n / name\n                       :op1 \"Swindon\")))", "(p / person\n   :name (n2 / name\n             :op1 \"The\"\n             :op2 \"Mountain\")\n   :ARG0-of (h / have-org-role-91\n               :ARG1 (b2 / broadcast-program\n                         :name (n3 / name\n                                   :op1 \"Game\"\n                                   :op2 \"of\"\n                                   :op3 \"Thrones\"))))", "(t / title-01\n   :ARG1 (p / person :name (n2 / name :op1 \"The\" :op2 \"Mountain\")))\n   :ARG2 (s / strong-02\n            :ARG2-of (h2 / have-degree-91\n                         :ARG1 (m / man)\n                         :ARG3 (m2 / most)\n                         :ARG5 (c2 / continent\n                                   :name (n4 / name\n                                             :op1 \"Europe\")))))", "(b / beat-03\n   :ARG0 (m / man))", "(t / title-01\n   :ARG1 (p / person :name (n2 / name :op1 \"The\" :op2 \"Mountain\")))\n   :ARG2 (s / strong-02))", "(s / strong-02)", "(b / beat-03\n   :ARG0 (m / man))", "(t / title-01\n   :ARG1 (p / person :name (n2 / name :op1 \"The\" :op2 \"Mountain\"))))", "(t / title-01\n   :ARG2 (s / strong-02))", "(b / beat-03\n   :ARG0 (m / man)\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"The\"\n                      :op2 \"Mountain\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (b2 / broadcast-program\n                               :name (n3 / name\n                                         :op1 \"Game\"\n                                         :op2 \"of\"\n                                         :op3 \"Thrones\"))))\n   :ARG2 (t / title-01\n            :ARG1 p\n            :ARG2 (s / strong-02\n                     :ARG2 (h2 / have-degree-91\n                               :ARG1 m\n                               :ARG3 (m2 / most)\n                               :ARG5 (c2 / continent\n                                         :name (n4 / name\n                                                   :op1 \"Europe\"))))))", "(b / beat-03)"], "smus": ["The man from Swindon was beat.", "The Mountain of the Game of Thrones has been beaten.", "The Mountain was beaten in the title of the strongest man in Europe.", "Man from Swindon", "The Mountain on Game of Thrones", "The Mountain is the title of the strongest man in Europe.", "The man was beaten.", "The Mountain's title is Strong.", "Strong.", "The man was beaten.", "The Mountain - title", "Strong Title.", "The Mountain, the Game of Thrones man, has beaten the title of strongest man in Europe.", "Beaten."]}, {"instance_id": "pyrxsum-40", "summary": "Labour leadership contender Andy Burnham has told supporters he has an \"outside but realistic chance\" of winning the contest.", "summary_trees": ["# ::snt Labour leadership contender Andy Burnham has told supporters he has an \"outside but realistic chance\" of winning the contest.\n(t / tell-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Andy\"\n                  :op2 \"Burnham\")\n            :ARG0-of (c / contend-02\n                  :ARG1 (l / lead-02\n                        :ARG1 (p2 / political-party\n                              :name (n2 / name\n                                    :op1 \"Labour\")))))\n      :ARG1 (h / have-03\n            :ARG0 p\n            :ARG1 (c2 / chance-02\n                  :ARG0 p\n                  :ARG1 (w / win-01\n                        :ARG0 p\n                        :ARG2 (c3 / contest-02))\n                  :ARG2 (o / outside)\n                  :ARG1-of (c4 / contrast-01\n                        :ARG2 (r / realistic-03\n                              :ARG1 c2))))\n      :ARG2 (p3 / person\n            :ARG0-of (s / support-01)))"], "tree": ["(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andy\"\n                     :op2 \"Burnham\")\n            :ARG0-of (c / contend-02\n                        :ARG1 (l / lead-02\n                                 :ARG1 (p2 / political-party\n                                           :name (n2 / name\n                                                     :op1 \"Labour\"))))))", "(t / tell-01\n   :ARG1 (h / have-03\n            :ARG0 (p / person :name (n / name :op1 \"Andy\" :op2 \"Burnham\")))\n            :ARG1 (c2 / chance-02\n                      :ARG0 p\n                      :ARG1 (w / win-01\n                               :ARG0 p\n                               :ARG2 (c3 / contest-02))\n                      :ARG2 (o / outside)\n                      :ARG1-of (c4 / contrast-01\n                                   :ARG2 (r / realistic-03\n                                            :ARG1 c2)))))", "(t / tell-01\n   :ARG2 (p3 / person\n             :ARG0-of (s / support-01)))", "(p / person\n   :name (n / name\n            :op1 \"Andy\"\n            :op2 \"Burnham\")\n   :ARG0-of (c / contend-02\n               :ARG1 (l / lead-02\n                        :ARG1 (p2 / political-party\n                                  :name (n2 / name\n                                            :op1 \"Labour\")))))", "(h / have-03\n   :ARG0 (p / person :name (n / name :op1 \"Andy\" :op2 \"Burnham\")))\n   :ARG1 (c2 / chance-02\n             :ARG0 p\n             :ARG1 (w / win-01\n                      :ARG0 p\n                      :ARG2 (c3 / contest-02))\n             :ARG2 (o / outside)\n             :ARG1-of (c4 / contrast-01\n                          :ARG2 (r / realistic-03\n                                   :ARG1 c2))))", "(p3 / person\n    :ARG0-of (s / support-01))", "(t / tell-01\n   :ARG0 (p / person :name (n / name :op1 \"Andy\" :op2 \"Burnham\"))))", "(c / contend-02\n   :ARG1 (l / lead-02))", "(l / lead-02\n   :ARG1 (p2 / political-party :name (n2 / name :op1 \"Labour\")))", "(h / have-03\n   :ARG0 (p / person :name (n / name :op1 \"Andy\" :op2 \"Burnham\")))\n   :ARG1 (c2 / chance-02))", "(c2 / chance-02\n    :ARG0 (p / person :name (n / name :op1 \"Andy\" :op2 \"Burnham\")))\n    :ARG1 (w / win-01))", "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"Andy\" :op2 \"Burnham\")))\n   :ARG2 (c3 / contest-02))", "(c3 / contest-02)", "(c4 / contrast-01\n    :ARG2 (r / realistic-03))", "(r / realistic-03\n   :ARG1 (c2 / chance-02))", "(s / support-01)", "(t / tell-01\n   :ARG0 (p / person :name (n / name :op1 \"Andy\" :op2 \"Burnham\"))))", "(c / contend-02\n   :ARG1 (l / lead-02))", "(l / lead-02\n   :ARG1 (p2 / political-party :name (n2 / name :op1 \"Labour\")))", "(h / have-03\n   :ARG0 (p / person :name (n / name :op1 \"Andy\" :op2 \"Burnham\"))))", "(h / have-03\n   :ARG1 (c2 / chance-02))", "(c2 / chance-02\n    :ARG0 (p / person :name (n / name :op1 \"Andy\" :op2 \"Burnham\"))))", "(c2 / chance-02\n    :ARG1 (w / win-01))", "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"Andy\" :op2 \"Burnham\"))))", "(w / win-01\n   :ARG2 (c3 / contest-02))", "(c4 / contrast-01\n    :ARG2 (r / realistic-03))", "(r / realistic-03\n   :ARG1 (c2 / chance-02))", "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andy\"\n                     :op2 \"Burnham\")\n            :ARG0 (c / contend-02\n                     :ARG1 (l / lead-02\n                              :ARG1 (p2 / political-party\n                                        :name (n2 / name\n                                                  :op1 \"Labour\")))))\n   :ARG1 (h / have-03\n            :ARG0 p\n            :ARG1 (c2 / chance-02\n                      :ARG0 p\n                      :ARG1 (w / win-01\n                               :ARG0 p\n                               :ARG2 (c3 / contest-02))\n                      :ARG2 (o / outside)\n                      :ARG1 (c4 / contrast-01\n                                :ARG2 (r / realistic-03\n                                         :ARG1 c2))))\n   :ARG2 (p3 / person\n             :ARG0 (s / support-01)))", "(t / tell-01)"], "smus": ["Labour leader and contender Andy Burnham has told:", "Andy Burnham has been told he has an outside chance of winning the contest but that is unrealistic.", "Supporters were told.", "Andy Burnham is a contender for the Labour leadership.", "Andy Burnham has an outside chance of winning the contest but that is realistic.", "Supporters", "Andy Burnham has told:", "The leadership contention.", "Labour leadership", "Andy Burnham has a chance.", "Andy Burnham has a chance of winning.", "Andy Burnham won the contest.", "The contest.", "But realistic.", "Chance is real.", "Supports.", "Andy Burnham has told:", "The leadership contention.", "Labour leadership", "Andy Burnham has.", "has a chance.", "Andy Burnham has a chance.", "There is a chance of winning.", "Andy Burnham is winning.", "The contest is about winning.", "But realistic.", "Chance is real.", "Andy Burnham has told supporters that he has an outside chance of winning the contest but that it is realistic.", "told."]}, {"instance_id": "pyrxsum-41", "summary": "Belfast Giants have closed the gap on Elite League leaders Cardiff Devils to six points with this comfortable win over the Capitals at the SSE Arena.", "summary_trees": ["# ::snt Belfast Giants have closed the gap on Elite League leaders Cardiff Devils to six points with this comfortable win over the Capitals at the SSE Arena.\n(c / close-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Belfast\"\n                  :op2 \"Giants\"))\n      :ARG1 (g / gap)\n      :ARG4 (t2 / team\n            :name (n2 / name\n                  :op1 \"Cardiff\"\n                  :op2 \"Devils\")\n            :ARG0-of (l / lead-01\n                  :ARG1 (l2 / league\n                        :name (n3 / name\n                              :op1 \"Elite\"\n                              :op2 \"League\"))))\n      :extent (p / point\n            :quant 6)\n      :manner (w / win-01\n            :ARG0 t\n            :ARG4 (t3 / team\n                  :name (n4 / name\n                        :op1 \"Capitals\"))\n            :ARG0-of (c2 / comfortable-02)\n            :location (s / sports-facility\n                  :name (n5 / name\n                        :op1 \"SSE\"\n                        :op2 \"Arena\"))\n            :mod (t4 / this)))"], "tree": ["(c / close-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Belfast\"\n                     :op2 \"Giants\")))", "(c / close-01\n   :ARG1 (g / gap))", "(c / close-01\n   :ARG4 (t2 / team\n             :name (n2 / name\n                       :op1 \"Cardiff\"\n                       :op2 \"Devils\")\n             :ARG0-of (l / lead-01\n                         :ARG1 (l2 / league\n                                   :name (n3 / name\n                                             :op1 \"Elite\"\n                                             :op2 \"League\")))))", "(c / close-01\n   :extent (p / point\n              :quant 6))", "(c / close-01\n   :manner (w / win-01\n              :ARG0 (t / team :name (n / name :op1 \"Belfast\" :op2 \"Giants\"))\n              :ARG4 (t3 / team\n                        :name (n4 / name\n                                  :op1 \"Capitals\"))\n              :ARG0-of (c2 / comfortable-02)\n              :location (s / sports-facility\n                           :name (n5 / name\n                                     :op1 \"SSE\"\n                                     :op2 \"Arena\"))\n              :mod (t4 / this)))", "(t / team\n   :name (n / name\n            :op1 \"Belfast\"\n            :op2 \"Giants\"))", "(t2 / team\n    :name (n2 / name\n              :op1 \"Cardiff\"\n              :op2 \"Devils\")\n    :ARG0-of (l / lead-01\n                :ARG1 (l2 / league\n                          :name (n3 / name\n                                    :op1 \"Elite\"\n                                    :op2 \"League\"))))", "(w / win-01\n   :ARG0 (t / team :name (n / name :op1 \"Belfast\" :op2 \"Giants\"))\n   :ARG4 (t3 / team\n             :name (n4 / name\n                       :op1 \"Capitals\"))\n   :ARG0-of (c2 / comfortable-02)\n   :location (s / sports-facility\n                :name (n5 / name\n                          :op1 \"SSE\"\n                          :op2 \"Arena\"))\n   :mod (t4 / this))", "(c / close-01\n   :ARG0 (t / team :name (n / name :op1 \"Belfast\" :op2 \"Giants\")))", "(l / lead-01\n   :ARG1 (l2 / league :name (n3 / name :op1 \"Elite\" :op2 \"League\")))", "(w / win-01\n   :ARG0 (t / team :name (n / name :op1 \"Belfast\" :op2 \"Giants\"))\n   :ARG4 (t3 / team :name (n4 / name :op1 \"Capitals\")))", "(c2 / comfortable-02)", "(c / close-01\n   :ARG0 (t / team :name (n / name :op1 \"Belfast\" :op2 \"Giants\")))", "(l / lead-01\n   :ARG1 (l2 / league :name (n3 / name :op1 \"Elite\" :op2 \"League\")))", "(w / win-01\n   :ARG0 (t / team :name (n / name :op1 \"Belfast\" :op2 \"Giants\")))", "(w / win-01\n   :ARG4 (t3 / team :name (n4 / name :op1 \"Capitals\")))", "(c / close-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Belfast\"\n                     :op2 \"Giants\"))\n   :ARG1 (g / gap)\n   :ARG4 (t2 / team\n             :name (n2 / name\n                       :op1 \"Cardiff\"\n                       :op2 \"Devils\")\n             :ARG0 (l / lead-01\n                      :ARG1 (l2 / league\n                                :name (n3 / name\n                                          :op1 \"Elite\"\n                                          :op2 \"League\"))))\n   :extent (p / point\n              :quant 6)\n   :manner (w / win-01\n              :ARG0 t\n              :ARG4 (t3 / team\n                        :name (n4 / name\n                                  :op1 \"Capitals\"))\n              :ARG0 (c2 / comfortable-02)\n              :mod (t4 / this)))", "(c / close-01\n   :extent (p / point\n              :quant 6)\n   :manner (w / win-01))"], "smus": ["Belfast Giants have closed.", "The gap has closed.", "The Carliff Devils are closing in on the Premier League leaders.", "Closed by 6 points.", "The Belfast Giants - Capitals match was closed by this comfortable win in the SSE Arena.", "Belfast Giants", "The Carliff Devils are the league's elite league leaders.", "This was a comfortable win for the Belfast Giants over the Capitals at the SSE Arena.", "Belfast Giants have closed.", "League leads the Elite League.", "Belfast Giants - Capitals wins", "Comfortable.", "Belfast Giants have closed.", "League leads the Elite League.", "Belfast Giants win", "Capitals win", "With this comfortable win over the Capitals, the Bedford Giants have closed the gap to the EPL leaders Cardiff Devils by six points.", "Six points close with victory."]}, {"instance_id": "pyrxsum-42", "summary": "Hayley Turner, Britain's most successful female jockey, believes her career has helped inspire other women to progress in the sport.", "summary_trees": ["# ::snt Hayley Turner, Britain's most successful female jockey, believes her career has helped inspire other women to progress in the sport.\n(b / believe-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Hayley\"\n                  :op2 \"Turner\")\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (s / succeed-01\n                        :ARG0 p\n                        :ARG1 (j / jockey\n                              :mod (f / female)))\n                  :ARG3 (m / most)\n                  :ARG5 (c / country\n                        :name (n2 / name\n                              :op1 \"Britain\"))))\n      :ARG1 (h2 / help-01\n            :ARG0 (c2 / career\n                  :poss p)\n            :ARG1 (ii / inspire-01\n                  :ARG0 c2\n                  :ARG1 (w / woman\n                        :mod (o / other))\n                  :ARG2 (p2 / progress-01\n                        :ARG1 w\n                        :ARG4 (s2 / sport)))))"], "tree": ["(b / believe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hayley\"\n                     :op2 \"Turner\")\n            :ARG1-of (h / have-degree-91\n                        :ARG2 (s / succeed-01\n                                 :ARG0 p\n                                 :ARG1 (j / jockey\n                                          :mod (f / female)))\n                        :ARG3 (m / most)\n                        :ARG5 (c / country\n                                 :name (n2 / name\n                                           :op1 \"Britain\")))))", "(b / believe-01\n   :ARG1 (h2 / help-01\n             :ARG0 (c2 / career\n                       :poss (p / person :name (n / name :op1 \"Hayley\" :op2 \"Turner\"))))\n             :ARG1 (ii / inspire-01\n                       :ARG0 c2\n                       :ARG1 (w / woman\n                                :mod (o / other))\n                       :ARG2 (p2 / progress-01\n                                 :ARG1 w\n                                 :ARG4 (s2 / sport)))))", "(p / person\n   :name (n / name\n            :op1 \"Hayley\"\n            :op2 \"Turner\")\n   :ARG1-of (h / have-degree-91\n               :ARG2 (s / succeed-01\n                        :ARG0 p\n                        :ARG1 (j / jockey\n                                 :mod (f / female)))\n               :ARG3 (m / most)\n               :ARG5 (c / country\n                        :name (n2 / name\n                                  :op1 \"Britain\"))))", "(h2 / help-01\n    :ARG0 (c2 / career\n              :poss (p / person :name (n / name :op1 \"Hayley\" :op2 \"Turner\"))))\n    :ARG1 (ii / inspire-01\n              :ARG0 c2\n              :ARG1 (w / woman\n                       :mod (o / other))\n              :ARG2 (p2 / progress-01\n                        :ARG1 w\n                        :ARG4 (s2 / sport))))", "(b / believe-01\n   :ARG0 (p / person :name (n / name :op1 \"Hayley\" :op2 \"Turner\"))))", "(s / succeed-01\n   :ARG0 (p / person :name (n / name :op1 \"Hayley\" :op2 \"Turner\")))\n   :ARG1 (j / jockey))", "(h2 / help-01\n    :ARG0 (c2 / career))", "(ii / inspire-01\n    :ARG0 (c2 / career)\n    :ARG1 (w / woman))", "(p2 / progress-01\n    :ARG1 (w / woman)\n    :ARG4 (s2 / sport))", "(b / believe-01\n   :ARG0 (p / person :name (n / name :op1 \"Hayley\" :op2 \"Turner\"))))", "(s / succeed-01\n   :ARG0 (p / person :name (n / name :op1 \"Hayley\" :op2 \"Turner\"))))", "(s / succeed-01\n   :ARG1 (j / jockey))", "(h2 / help-01\n    :ARG0 (c2 / career))", "(ii / inspire-01\n    :ARG0 (c2 / career))", "(ii / inspire-01\n    :ARG1 (w / woman))", "(p2 / progress-01\n    :ARG1 (w / woman))", "(p2 / progress-01\n    :ARG4 (s2 / sport))", "(b / believe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hayley\"\n                     :op2 \"Turner\")\n            :ARG1 (h / have-degree-91\n                     :ARG2 (s / succeed-01\n                              :ARG0 p\n                              :ARG1 (j / jockey\n                                       :mod (f / female)))\n                     :ARG3 (m / most)\n                     :ARG5 (c / country\n                              :name (n2 / name\n                                        :op1 \"Britain\"))))\n   :ARG1 (h2 / help-01\n             :ARG0 (c2 / career\n                       :poss p)\n             :ARG1 (ii / inspire-01\n                       :ARG0 c2\n                       :ARG1 (w / woman\n                                :mod (o / other))\n                       :ARG2 (p2 / progress-01\n                                 :ARG1 w\n                                 :ARG4 (s2 / sport)))))", "(b / believe-01)"], "smus": ["Hayley Turner believes she is Britain's most successful female jockey.", "Hayley Turner believes her career has helped inspire other women to progress in sport.", "Hayley Turner is Britain's most successful female jockey.", "Hayley Turner's career has helped inspire other women to progress in sport.", "Hayley Turner believes --", "Hayley Turner was a successful jockey.", "Career has helped.", "Careers inspire women.", "Women will progress in sport.", "Hayley Turner believes --", "Hayley Turner was successful.", "The jockey was successful.", "Career has helped.", "Careers will inspire.", "Women inspire.", "Progress women.", "Progress in sport.", "Hayley Turner believes her career has helped other women inspire them to progress in sport and is the most successful female jockey in Britain.", "Believes."]}, {"instance_id": "pyrxsum-43", "summary": "An elderly woman has died in a house fire in Enniskillen.", "summary_trees": ["# ::snt An elderly woman has died in a house fire in Enniskillen.\n(d / die-01\n      :ARG1 (w / woman\n            :mod (e / elderly))\n      :ARG1-of (c / cause-01\n            :ARG0 (f / fire\n                  :location (h / house)\n                  :location (c2 / city\n                        :name (n / name\n                              :op1 \"Enniskillen\")))))"], "tree": ["(d / die-01\n   :ARG1 (w / woman\n            :mod (e / elderly)))", "(d / die-01\n   :ARG1-of (c / cause-01\n               :ARG0 (f / fire\n                        :location (h / house)\n                        :location (c2 / city\n                                      :name (n / name\n                                               :op1 \"Enniskillen\")))))", "(w / woman\n   :mod (e / elderly))", "(c / cause-01\n   :ARG0 (f / fire\n            :location (h / house)\n            :location (c2 / city\n                          :name (n / name\n                                   :op1 \"Enniskillen\"))))", "(d / die-01\n   :ARG1 (w / woman))", "(c / cause-01\n   :ARG0 (f / fire))", "(d / die-01\n   :ARG1 (w / woman))", "(c / cause-01\n   :ARG0 (f / fire))", "(d / die-01\n   :ARG1 (w / woman\n            :mod (e / elderly))\n   :ARG1 (c / cause-01\n            :ARG0 (f / fire)))", "(d / die-01)"], "smus": ["An elderly woman has died.", "A house fire in Enniskillen has killed", "An elderly woman.", "Caused by house fire in Enniskillen.", "The woman died.", "The fire caused.", "The woman died.", "The fire caused.", "An elderly woman died in the fire.", "Died."]}, {"instance_id": "pyrxsum-44", "summary": "Championship side Fulham have signed striker Gohi Cyriac on loan until the end of the season from Belgian Pro League side KV Oostende.", "summary_trees": ["# ::snt Championship side Fulham have signed striker Gohi Cyriac on loan until the end of the season from Belgian Pro League side KV Oostende.\n(s / sign-02\n      :ARG0 (s2 / side\n            :name (n / name\n                  :op1 \"Fulham\")\n            :mod (c / championship))\n      :ARG1 (p / person\n            :name (n2 / name\n                  :op1 \"Gohi\"\n                  :op2 \"Cyriac\")\n            :ARG0-of (s3 / strike-02))\n      :ARG3 (s4 / side\n            :name (n3 / name\n                  :op1 \"KV\"\n                  :op2 \"Oostende\")\n            :mod (l / league\n                  :name (n4 / name\n                        :op1 \"Pro\"\n                        :op2 \"League\")\n                  :mod (c2 / country\n                        :name (n5 / name\n                              :op1 \"Belgium\"))))\n      :manner (l2 / loan)\n      :time (u / until\n            :op1 (e / end-01\n                  :ARG1 (s5 / season))))"], "tree": ["(s / sign-02\n   :ARG0 (s2 / side\n             :name (n / name\n                      :op1 \"Fulham\")\n             :mod (c / championship)))", "(s / sign-02\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Gohi\"\n                      :op2 \"Cyriac\")\n            :ARG0-of (s3 / strike-02)))", "(s / sign-02\n   :ARG3 (s4 / side\n             :name (n3 / name\n                       :op1 \"KV\"\n                       :op2 \"Oostende\")\n             :mod (l / league\n                     :name (n4 / name\n                               :op1 \"Pro\"\n                               :op2 \"League\")\n                     :mod (c2 / country\n                              :name (n5 / name\n                                        :op1 \"Belgium\")))))", "(s / sign-02\n   :manner (l2 / loan))", "(s / sign-02\n   :time (u / until\n            :op1 (e / end-01\n                    :ARG1 (s5 / season))))", "(s2 / side\n    :name (n / name\n             :op1 \"Fulham\")\n    :mod (c / championship))", "(p / person\n   :name (n2 / name\n             :op1 \"Gohi\"\n             :op2 \"Cyriac\")\n   :ARG0-of (s3 / strike-02))", "(s4 / side\n    :name (n3 / name\n              :op1 \"KV\"\n              :op2 \"Oostende\")\n    :mod (l / league\n            :name (n4 / name\n                      :op1 \"Pro\"\n                      :op2 \"League\")\n            :mod (c2 / country\n                     :name (n5 / name\n                               :op1 \"Belgium\"))))", "(u / until\n   :op1 (e / end-01\n           :ARG1 (s5 / season)))", "(s / sign-02\n   :ARG0 (s2 / side :name (n / name :op1 \"Fulham\"))))", "(s3 / strike-02)", "(e / end-01\n   :ARG1 (s5 / season))", "(s / sign-02\n   :ARG0 (s2 / side :name (n / name :op1 \"Fulham\"))))", "(e / end-01\n   :ARG1 (s5 / season))", "(s / sign-02\n   :ARG0 (s2 / side\n             :name (n / name\n                      :op1 \"Fulham\")\n             :mod (c / championship))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Gohi\"\n                      :op2 \"Cyriac\")\n            :ARG0 (s3 / strike-02))\n   :ARG3 (s4 / side\n             :name (n3 / name\n                       :op1 \"KV\"\n                       :op2 \"Oostende\")\n             :mod (l / league\n                     :name (n4 / name\n                               :op1 \"Pro\"\n                               :op2 \"League\")\n                     :mod (c2 / country\n                              :name (n5 / name\n                                        :op1 \"Belgium\"))))\n   :manner (l2 / loan))", "(s / sign-02\n   :manner (l2 / loan)\n   :time (u / until\n            :op1 (e / end-01)))"], "smus": ["Fulham are the championship side to sign.", "Strike striker Gohi Cyriac was signed.", "KV Oostende is signed by the Belgian Pro League side.", "Signed on a loan.", "Signed until the end of the season.", "Fulham championship side", "Striker Gohi Cyriac", "KV Oostende is a Belgian Pro League side.", "Until the end of the season", "Fulham have signed.", "Strike.", "End of season", "Fulham have signed.", "End of season", "Fulham have signed striker Gohi Cyriac on loan from the Belgian Pro League side KV Oostende.", "The loan will be signed until the end."]}, {"instance_id": "pyrxsum-45", "summary": "Wales started their 2018 World Cup qualifying campaign in confident fashion as they convincingly beat Moldova.", "summary_trees": ["# ::snt Wales started their 2018 World Cup qualifying campaign in confident fashion as they convincingly beat Moldova.\n(s / start-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Wales\"))\n      :ARG1 (c / campaign-01\n            :ARG0 t\n            :ARG1 (q / qualify-02\n                  :ARG1 t\n                  :ARG2 (g / game\n                        :name (n2 / name\n                              :op1 \"World\"\n                              :op2 \"Cup\")\n                        :time (d / date-entity\n                              :year 2018))))\n      :manner (c2 / confident-01\n            :ARG1 t)\n      :time (b / beat-03\n            :ARG0 t\n            :ARG1 (t2 / team\n                  :name (n3 / name\n                        :op1 \"Moldova\"))\n            :ARG0-of (c3 / convince-01)))"], "tree": ["(s / start-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Wales\")))", "(s / start-01\n   :ARG1 (c / campaign-01\n            :ARG0 (t / team :name (n / name :op1 \"Wales\"))\n            :ARG1 (q / qualify-02\n                     :ARG1 t\n                     :ARG2 (g / game\n                              :name (n2 / name\n                                        :op1 \"World\"\n                                        :op2 \"Cup\")\n                              :time (d / date-entity\n                                       :year 2018)))))", "(s / start-01\n   :manner (c2 / confident-01\n               :ARG1 (t / team :name (n / name :op1 \"Wales\"))))", "(s / start-01\n   :time (b / beat-03\n            :ARG0 (t / team :name (n / name :op1 \"Wales\"))\n            :ARG1 (t2 / team\n                      :name (n3 / name\n                                :op1 \"Moldova\"))\n            :ARG0-of (c3 / convince-01)))", "(t / team\n   :name (n / name\n            :op1 \"Wales\"))", "(c / campaign-01\n   :ARG0 (t / team :name (n / name :op1 \"Wales\"))\n   :ARG1 (q / qualify-02\n            :ARG1 t\n            :ARG2 (g / game\n                     :name (n2 / name\n                               :op1 \"World\"\n                               :op2 \"Cup\")\n                     :time (d / date-entity\n                              :year 2018))))", "(b / beat-03\n   :ARG0 (t / team :name (n / name :op1 \"Wales\"))\n   :ARG1 (t2 / team\n             :name (n3 / name\n                       :op1 \"Moldova\"))\n   :ARG0-of (c3 / convince-01))", "(s / start-01\n   :ARG0 (t / team :name (n / name :op1 \"Wales\")))", "(c / campaign-01\n   :ARG0 (t / team :name (n / name :op1 \"Wales\"))\n   :ARG1 (q / qualify-02))", "(q / qualify-02\n   :ARG1 (t / team :name (n / name :op1 \"Wales\"))\n   :ARG2 (g / game :name (n2 / name :op1 \"World\" :op2 \"Cup\"))))", "(c2 / confident-01\n    :ARG1 (t / team :name (n / name :op1 \"Wales\")))", "(b / beat-03\n   :ARG0 (t / team :name (n / name :op1 \"Wales\"))\n   :ARG1 (t2 / team :name (n3 / name :op1 \"Moldova\")))", "(c3 / convince-01)", "(s / start-01\n   :ARG0 (t / team :name (n / name :op1 \"Wales\")))", "(c / campaign-01\n   :ARG0 (t / team :name (n / name :op1 \"Wales\")))", "(c / campaign-01\n   :ARG1 (q / qualify-02))", "(q / qualify-02\n   :ARG1 (t / team :name (n / name :op1 \"Wales\")))", "(q / qualify-02\n   :ARG2 (g / game :name (n2 / name :op1 \"World\" :op2 \"Cup\"))))", "(c2 / confident-01\n    :ARG1 (t / team :name (n / name :op1 \"Wales\")))", "(b / beat-03\n   :ARG0 (t / team :name (n / name :op1 \"Wales\")))", "(b / beat-03\n   :ARG1 (t2 / team :name (n3 / name :op1 \"Moldova\")))", "(s / start-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Wales\"))\n   :ARG1 (c / campaign-01\n            :ARG0 t\n            :ARG1 (q / qualify-02\n                     :ARG1 t\n                     :ARG2 (g / game\n                              :name (n2 / name\n                                        :op1 \"World\"\n                                        :op2 \"Cup\"))))\n   :manner (c2 / confident-01\n               :ARG1 t))", "(s / start-01\n   :manner (c2 / confident-01)\n   :time (b / beat-03))"], "smus": ["Wales started.", "Wales started a campaign to qualify for the 2018 World Cup.", "Wales started confident.", "It started when Wales surprisingly beat Moldova.", "Wales", "Wales are campaigning for qualification for the 2018 World Cup.", "Wales fought convincingly over Moldova.", "Wales started.", "Wales are in the qualification campaign.", "Wales qualify for the World Cup.", "Wales are confident.", "Wales beat Moldova 1-0.", "Convainct.", "Wales started.", "Wales campaign", "Qualification campaign", "Wales qualify.", "Qualifying for the World Cup", "Wales are confident.", "Wales beat Wales", "Moldova beaten", "Wales started their campaign confidently for qualification for the World Cup.", "When beat, the start was confident."]}, {"instance_id": "pyrxsum-46", "summary": "The BBC's director general has accused the Iranian authorities of intimidating those working for its Persian service.", "summary_trees": ["# ::snt The BBC's director general has accused the Iranian authorities of intimidating those working for its Persian service.\n(a / accuse-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (p2 / publication\n                        :name (n / name\n                              :op1 \"BBC\"))\n                  :ARG2 (d / director\n                        :mod (g / general))))\n      :ARG1 (a2 / authority\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"Iran\")))\n      :ARG2 (ii / intimidate-01\n            :ARG0 a2\n            :ARG1 (p3 / person\n                  :ARG0-of (w / work-01\n                        :ARG2 (s / service\n                              :mod (l / language\n                                    :name (n3 / name\n                                          :op1 \"Persian\"))\n                              :poss p2)))))"], "tree": ["(a / accuse-01\n   :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (p2 / publication\n                                  :name (n / name\n                                           :op1 \"BBC\"))\n                        :ARG2 (d / director\n                                 :mod (g / general)))))", "(a / accuse-01\n   :ARG1 (a2 / authority\n             :mod (c / country\n                     :name (n2 / name\n                               :op1 \"Iran\"))))", "(a / accuse-01\n   :ARG2 (ii / intimidate-01\n             :ARG0 (a2 / authority)\n             :ARG1 (p3 / person\n                       :ARG0-of (w / work-01\n                                   :ARG2 (s / service\n                                            :mod (l / language\n                                                    :name (n3 / name\n                                                              :op1 \"Persian\"))\n                                            :poss (p2 / publication :name (n / name :op1 \"BBC\")))))))", "(p / person\n   :ARG0-of (h / have-org-role-91\n               :ARG1 (p2 / publication\n                         :name (n / name\n                                  :op1 \"BBC\"))\n               :ARG2 (d / director\n                        :mod (g / general))))", "(a2 / authority\n    :mod (c / country\n            :name (n2 / name\n                      :op1 \"Iran\")))", "(ii / intimidate-01\n    :ARG0 (a2 / authority)\n    :ARG1 (p3 / person\n              :ARG0-of (w / work-01\n                          :ARG2 (s / service\n                                   :mod (l / language\n                                           :name (n3 / name\n                                                     :op1 \"Persian\"))\n                                   :poss (p2 / publication :name (n / name :op1 \"BBC\"))))))", "(a / accuse-01\n   :ARG0 (p / person))", "(ii / intimidate-01\n    :ARG0 (a2 / authority)\n    :ARG1 (p3 / person))", "(w / work-01\n   :ARG2 (s / service))", "(a / accuse-01\n   :ARG0 (p / person))", "(ii / intimidate-01\n    :ARG0 (a2 / authority))", "(ii / intimidate-01\n    :ARG1 (p3 / person))", "(w / work-01\n   :ARG2 (s / service))", "(a / accuse-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (p2 / publication\n                               :name (n / name\n                                        :op1 \"BBC\"))\n                     :ARG2 (d / director\n                              :mod (g / general))))\n   :ARG1 (a2 / authority\n             :mod (c / country\n                     :name (n2 / name\n                               :op1 \"Iran\")))\n   :ARG2 (ii / intimidate-01\n             :ARG0 a2\n             :ARG1 (p3 / person\n                       :ARG0 (w / work-01\n                                :ARG2 (s / service\n                                         :mod (l / language\n                                                 :name (n3 / name\n                                                           :op1 \"Persian\"))\n                                         :poss p2)))))", "(a / accuse-01)"], "smus": ["The BBC director general has accused.", "Iranian authorities are accused.", "Authorities were accused of intimidating people working in the BBC's Persian service.", "The BBC's director general.", "Iranian authorities", "Authorities are intimidating people working in the BBC's Persian service.", "The person was accused.", "Authorities are intimidating people.", "Working in the service.", "The person was accused.", "Authorities are intimidating.", "intimidating the people.", "Working in the service.", "The BBC director general has accused Iranian authorities of intimidating people working in his Persian service.", "accused."]}, {"instance_id": "pyrxsum-47", "summary": "A mother of six with an IQ of 70 should be sterilised for her own safety, the Court of Protection has ruled.", "summary_trees": ["# ::snt A mother of six with an IQ of 70 should be sterilised for her own safety, the Court of Protection has ruled.\n(r / rule-01\n      :ARG0 (g / government-organization\n            :name (n / name\n                  :op1 \"Court\"\n                  :op2 \"of\"\n                  :op3 \"Protection\"))\n      :ARG3 (r2 / recommend-01\n            :ARG1 (s / sterilize-01\n                  :ARG1 (p / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 (c / child\n                                    :quant 6)\n                              :ARG2 (m / mother))\n                        :ARG0-of (h2 / have-03\n                              :ARG1 (q / quotient\n                                    :quant 70\n                                    :degree-of (ii / intelligent-01))))\n                  :purpose (s2 / safe-01\n                        :ARG1 p))))"], "tree": ["(r / rule-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Court\"\n                     :op2 \"of\"\n                     :op3 \"Protection\")))", "(r / rule-01\n   :ARG3 (r2 / recommend-01\n             :ARG1 (s / sterilize-01\n                      :ARG1 (p / person\n                               :ARG0-of (h / have-rel-role-91\n                                           :ARG1 (c / child\n                                                    :quant 6)\n                                           :ARG2 (m / mother))\n                               :ARG0-of (h2 / have-03\n                                            :ARG1 (q / quotient\n                                                     :quant 70\n                                                     :degree-of (ii / intelligent-01))))\n                      :purpose (s2 / safe-01\n                                   :ARG1 p))))", "(g / government-organization\n   :name (n / name\n            :op1 \"Court\"\n            :op2 \"of\"\n            :op3 \"Protection\"))", "(r2 / recommend-01\n    :ARG1 (s / sterilize-01\n             :ARG1 (p / person\n                      :ARG0-of (h / have-rel-role-91\n                                  :ARG1 (c / child\n                                           :quant 6)\n                                  :ARG2 (m / mother))\n                      :ARG0-of (h2 / have-03\n                                   :ARG1 (q / quotient\n                                            :quant 70\n                                            :degree-of (ii / intelligent-01))))\n             :purpose (s2 / safe-01\n                          :ARG1 p)))", "(r / rule-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"Court\" :op2 \"of\" :op3 \"Protection\")))", "(r2 / recommend-01\n    :ARG1 (s / sterilize-01))", "(s / sterilize-01\n   :ARG1 (p / person))", "(h2 / have-03\n    :ARG1 (q / quotient))", "(ii / intelligent-01)", "(s2 / safe-01\n    :ARG1 (p / person))", "(r / rule-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"Court\" :op2 \"of\" :op3 \"Protection\")))", "(r2 / recommend-01\n    :ARG1 (s / sterilize-01))", "(s / sterilize-01\n   :ARG1 (p / person))", "(h2 / have-03\n    :ARG1 (q / quotient))", "(s2 / safe-01\n    :ARG1 (p / person))", "(r / rule-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Court\"\n                     :op2 \"of\"\n                     :op3 \"Protection\"))\n   :ARG3 (r2 / recommend-01\n             :ARG1 (s / sterilize-01\n                      :ARG1 (p / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 (c / child\n                                                 :quant 6)\n                                        :ARG2 (m / mother))\n                               :ARG0 (h2 / have-03\n                                         :ARG1 (q / quotient\n                                                  :quant 70\n                                                  :degree (ii / intelligent-01)))))))", "(r / rule-01)"], "smus": ["The Court of Protection has ruled that --", "It is ruled that a six-year-old mother with 70IQ should be sterilized for safety.", "The Court of Protection.", "The mother of six with 70IQ should be sterilized for safety.", "The Court of Protection has ruled that --", "sterilized.", "People are sterilized.", "quotients.", "Intelligent.", "People's safety", "The Court of Protection has ruled that --", "sterilized.", "People are sterilized.", "quotients.", "People's safety", "The Court of Protection has ruled that a mother with six children with 70 intelligences should be sterilized.", "Ruled."]}, {"instance_id": "pyrxsum-48", "summary": "China's biggest privately-held conglomerate Fosun has joined a bidding war for the Portuguese hospital operator Espirito Santo Saude (ESS).", "summary_trees": ["# ::snt China's biggest privately-held conglomerate Fosun has joined a bidding war for the Portuguese hospital operator Espirito Santo Saude (ESS).\n(j / join-01\n      :ARG0 (c / conglomerate\n            :name (n / name\n                  :op1 \"Fosun\")\n            :ARG1-of (o / own-01\n                  :ARG1-of (p / private-03))\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (b / big)\n                  :ARG3 (m / most)\n                  :ARG5 (c2 / country\n                        :name (n2 / name\n                              :op1 \"China\"))))\n      :ARG1 (w / war-01\n            :ARG2 (b2 / bid-01\n                  :ARG3 (c3 / company\n                        :name (n3 / name\n                              :op1 \"Espirito\"\n                              :op2 \"Santo\"\n                              :op3 \"Saude\")\n                        :ARG0-of (o2 / operate-01\n                              :ARG1 (h2 / hospital))\n                        :mod (c4 / country\n                              :name (n4 / name\n                                    :op1 \"Portugal\"))))))"], "tree": ["(j / join-01\n   :ARG0 (c / conglomerate\n            :name (n / name\n                     :op1 \"Fosun\")\n            :ARG1-of (o / own-01\n                        :ARG1-of (p / private-03))\n            :ARG1-of (h / have-degree-91\n                        :ARG2 (b / big)\n                        :ARG3 (m / most)\n                        :ARG5 (c2 / country\n                                  :name (n2 / name\n                                            :op1 \"China\")))))", "(j / join-01\n   :ARG1 (w / war-01\n            :ARG2 (b2 / bid-01\n                      :ARG3 (c3 / company\n                                :name (n3 / name\n                                          :op1 \"Espirito\"\n                                          :op2 \"Santo\"\n                                          :op3 \"Saude\")\n                                :ARG0-of (o2 / operate-01\n                                             :ARG1 (h2 / hospital))\n                                :mod (c4 / country\n                                         :name (n4 / name\n                                                   :op1 \"Portugal\"))))))", "(c / conglomerate\n   :name (n / name\n            :op1 \"Fosun\")\n   :ARG1-of (o / own-01\n               :ARG1-of (p / private-03))\n   :ARG1-of (h / have-degree-91\n               :ARG2 (b / big)\n               :ARG3 (m / most)\n               :ARG5 (c2 / country\n                         :name (n2 / name\n                                   :op1 \"China\"))))", "(w / war-01\n   :ARG2 (b2 / bid-01\n             :ARG3 (c3 / company\n                       :name (n3 / name\n                                 :op1 \"Espirito\"\n                                 :op2 \"Santo\"\n                                 :op3 \"Saude\")\n                       :ARG0-of (o2 / operate-01\n                                    :ARG1 (h2 / hospital))\n                       :mod (c4 / country\n                                :name (n4 / name\n                                          :op1 \"Portugal\")))))", "(j / join-01\n   :ARG0 c)", "(o / own-01)", "(p / private-03)", "(w / war-01\n   :ARG2 b2)", "(b2 / bid-01\n    :ARG3 c3)", "(o2 / operate-01\n    :ARG1 h2)", "(j / join-01\n   :ARG0 c)", "(w / war-01\n   :ARG2 b2)", "(b2 / bid-01\n    :ARG3 c3)", "(o2 / operate-01\n    :ARG1 h2)", "(j / join-01\n   :ARG0 (c / conglomerate\n            :name (n / name\n                     :op1 \"Fosun\")\n            :ARG1 (o / own-01\n                     :ARG1 (p / private-03))\n            :ARG1 (h / have-degree-91\n                     :ARG2 (b / big)\n                     :ARG3 (m / most)\n                     :ARG5 (c2 / country\n                               :name (n2 / name\n                                         :op1 \"China\"))))\n   :ARG1 (w / war-01\n            :ARG2 (b2 / bid-01\n                      :ARG3 (c3 / company\n                                :name (n3 / name\n                                          :op1 \"Espirito\"\n                                          :op2 \"Santo\"\n                                          :op3 \"Saude\")\n                                :ARG0 (o2 / operate-01\n                                          :ARG1 (h2 / hospital))\n                                :mod (c4 / country\n                                         :name (n4 / name\n                                                   :op1 \"Portugal\"))))))", "(j / join-01)"], "smus": ["The privately owned Sun conglomerate is joined by China's biggest private-owned conglomerate.", "The war has joined a bid war with the Portuguese hospital operator Espirito Santo Saude.", "The privately owned Sun conglomerate is China's biggest.", "The war was over a bid from the Portuguese hospital operator Espirito Santo Saude.", "They have joined.", "Own.", "Privately.", "It's war on the b****.", "Bid for the c3.", "The operation was done by the hp itself.", "They have joined.", "It's war on the b****.", "Bid for the c3.", "The operation was done by the hp itself.", "The private-owned Fosun conglomerate, China's biggest, has joined a war over a bid from the Portuguese hospital operator Espirito Santo Saude.", "Joined."]}, {"instance_id": "pyrxsum-49", "summary": "Bosses have been urged not to indulge in invasive surveillance by reading their employees' private messages.", "summary_trees": ["# ::snt Bosses have been urged not to indulge in invasive surveillance by reading their employees' private messages.\n(u / urge-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (b / boss)))\n      :ARG2 (ii / indulge-01\n            :polarity -\n            :ARG0 p\n            :ARG1 (s / surveil-01\n                  :ARG0 p\n                  :ARG0-of (ii2 / invade-01)\n                  :manner (r / read-01\n                        :ARG0 p\n                        :ARG1 (m / message-01\n                              :ARG0 (p2 / person\n                                    :ARG1-of (e / employ-01\n                                          :ARG0 p))\n                              :ARG1-of (p3 / private-02))))))"], "tree": ["(u / urge-01\n   :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                        :ARG2 (b / boss))))", "(u / urge-01\n   :ARG2 (ii / indulge-01\n             :polarity -\n             :ARG0 (p / person)\n             :ARG1 (s / surveil-01\n                      :ARG0 p\n                      :ARG0-of (ii2 / invade-01)\n                      :manner (r / read-01\n                                 :ARG0 p\n                                 :ARG1 (m / message-01\n                                          :ARG0 (p2 / person\n                                                    :ARG1-of (e / employ-01\n                                                                :ARG0 p))\n                                          :ARG1-of (p3 / private-02))))))", "(p / person\n   :ARG0-of (h / have-org-role-91\n               :ARG2 (b / boss)))", "(ii / indulge-01\n    :polarity -\n    :ARG0 (p / person)\n    :ARG1 (s / surveil-01\n             :ARG0 p\n             :ARG0-of (ii2 / invade-01)\n             :manner (r / read-01\n                        :ARG0 p\n                        :ARG1 (m / message-01\n                                 :ARG0 (p2 / person\n                                           :ARG1-of (e / employ-01\n                                                       :ARG0 p))\n                                 :ARG1-of (p3 / private-02)))))", "(u / urge-01\n   :ARG1 (p / person))", "(ii / indulge-01\n    :polarity -\n    :ARG0 (p / person)\n    :ARG1 (s / surveil-01))", "(s / surveil-01\n   :ARG0 (p / person))", "(ii2 / invade-01)", "(r / read-01\n   :ARG0 (p / person)\n   :ARG1 (m / message-01))", "(m / message-01\n   :ARG0 (p2 / person))", "(e / employ-01\n   :ARG0 (p / person))", "(p3 / private-02)", "(u / urge-01\n   :ARG1 (p / person))", "(ii / indulge-01\n    :polarity -)", "(ii / indulge-01\n    :ARG0 (p / person))", "(ii / indulge-01\n    :ARG1 (s / surveil-01))", "(s / surveil-01\n   :ARG0 (p / person))", "(r / read-01\n   :ARG0 (p / person))", "(r / read-01\n   :ARG1 (m / message-01))", "(m / message-01\n   :ARG0 (p2 / person))", "(e / employ-01\n   :ARG0 (p / person))", "(u / urge-01\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (b / boss)))\n   :ARG2 (ii / indulge-01\n             :polarity -\n             :ARG0 p\n             :ARG1 (s / surveil-01\n                      :ARG0 p\n                      :ARG0 (ii2 / invade-01)\n                      :manner (r / read-01\n                                 :ARG0 p\n                                 :ARG1 (m / message-01\n                                          :ARG0 (p2 / person\n                                                    :ARG1 (e / employ-01\n                                                             :ARG0 p))\n                                          :ARG1 (p3 / private-02))))))", "(u / urge-01)"], "smus": ["Bosses are urged to...", "People are urged not to indulge in invasion-surveillance by reading private employer messages.", "Bosses.", "People do not indulge in invasion surveillance by reading private employer messages.", "People are being urged.", "People do not indulge in surveillance.", "People are surveilling.", "Invade.", "People are reading the message.", "The message was from people.", "Employed.", "Privately.", "People are being urged.", "Not to indulge.", "People will indulge.", "Surveillance is indulgent.", "People are surveilling.", "People are reading.", "The message was read.", "The message was from people.", "Employed.", "Bosses are urged not to indulge in intrusion surveillance by reading private employer messages.", "Urgent."]}, {"instance_id": "pyrxsum-50", "summary": "Supermarket chain Morrisons has increased the cost of a jar of Marmite by 12.5%, say retail industry experts.", "summary_trees": ["# ::snt Supermarket chain Morrisons has increased the cost of a jar of Marmite by 12.5%, say retail industry experts.\n(s / say-01\n      :ARG0 (p / person\n            :ARG1-of (e / expert-01\n                  :ARG2 (ii / industry\n                        :mod (r / retail-01))))\n      :ARG1 (ii2 / increase-01\n            :ARG0 (c / chain\n                  :name (n / name\n                        :op1 \"Morrisons\")\n                  :mod (s2 / supermarket))\n            :ARG1 (c2 / cost-01\n                  :ARG1 (j / jar\n                        :consist-of (p2 / product\n                              :name (n2 / name\n                                    :op1 \"Mariane\"))))\n            :ARG2 (p3 / percentage-entity\n                  :value 12.5)))"], "tree": ["(s / say-01\n   :ARG0 (p / person\n            :ARG1-of (e / expert-01\n                        :ARG2 (ii / industry\n                                  :mod (r / retail-01)))))", "(s / say-01\n   :ARG1 (ii2 / increase-01\n              :ARG0 (c / chain\n                       :name (n / name\n                                :op1 \"Morrisons\")\n                       :mod (s2 / supermarket))\n              :ARG1 (c2 / cost-01\n                        :ARG1 (j / jar\n                                 :consist-of (p2 / product\n                                                 :name (n2 / name\n                                                           :op1 \"Mariane\"))))\n              :ARG2 (p3 / percentage-entity\n                        :value 12.5)))", "(p / person\n   :ARG1-of (e / expert-01\n               :ARG2 (ii / industry\n                         :mod (r / retail-01))))", "(ii2 / increase-01\n     :ARG0 (c / chain\n              :name (n / name\n                       :op1 \"Morrisons\")\n              :mod (s2 / supermarket))\n     :ARG1 (c2 / cost-01\n               :ARG1 (j / jar\n                        :consist-of (p2 / product\n                                        :name (n2 / name\n                                                  :op1 \"Mariane\"))))\n     :ARG2 (p3 / percentage-entity\n               :value 12.5))", "(s / say-01\n   :ARG0 (p / person))", "(e / expert-01\n   :ARG2 (ii / industry))", "(r / retail-01)", "(ii2 / increase-01\n     :ARG0 (c / chain :name (n / name :op1 \"Morrisons\"))))", "(c2 / cost-01\n    :ARG1 (j / jar))", "(s / say-01\n   :ARG0 (p / person))", "(e / expert-01\n   :ARG2 (ii / industry))", "(ii2 / increase-01\n     :ARG0 (c / chain :name (n / name :op1 \"Morrisons\"))))", "(c2 / cost-01\n    :ARG1 (j / jar))", "(s / say-01\n   :ARG0 (p / person\n            :ARG1 (e / expert-01\n                     :ARG2 (ii / industry\n                               :mod (r / retail-01))))\n   :ARG1 (ii2 / increase-01\n              :ARG0 (c / chain\n                       :name (n / name\n                                :op1 \"Morrisons\")\n                       :mod (s2 / supermarket))\n              :ARG1 (c2 / cost-01\n                        :ARG1 (j / jar\n                                 :consist-of (p2 / product\n                                                 :name (n2 / name\n                                                           :op1 \"Mariane\"))))\n              :ARG2 (p3 / percentage-entity\n                        :value 12.5)))", "(s / say-01)"], "smus": ["Retail industry experts say --", "The supermarket chain Morrisons have said that the cost per jar of Mariane has increased by 12.5%.", "Retail industry experts", "The supermarket chain Morrisons has increased the cost of a jar of Mariane by 12.5%.", "People say...", "Industry experts", "Retail.", "The Morrisons chain has increased.", "Cost of a jar", "People say...", "Industry experts", "The Morrisons chain has increased.", "Cost of a jar", "Retail industry experts say supermarket chain Morrisons has increased the cost per jar of Mariane by 12.5%.", "Say."]}, {"instance_id": "pyrxsum-51", "summary": "More should be done to help deaf people into work in Wales, a charity has said.", "summary_trees": ["# ::snt More should be done to help deaf people into work in Wales, a charity has said.\n(s / say-01\n      :ARG0 (c / charity)\n      :ARG1 (r / recommend-01\n            :ARG1 (d / do-02\n                  :ARG1 (m / more)\n                  :ARG2 (h / help-01\n                        :ARG1 (w / work-01\n                              :ARG0 (p / person\n                                    :ARG0-of (d2 / deaf-02))\n                              :location (c2 / country\n                                    :name (n / name\n                                          :op1 \"Wales\")))\n                        :ARG2 p))))"], "tree": ["(s / say-01\n   :ARG0 (c / charity))", "(s / say-01\n   :ARG1 (r / recommend-01\n            :ARG1 (d / do-02\n                     :ARG1 (m / more)\n                     :ARG2 (h / help-01\n                              :ARG1 (w / work-01\n                                       :ARG0 (p / person\n                                                :ARG0-of (d2 / deaf-02))\n                                       :location (c2 / country\n                                                     :name (n / name\n                                                              :op1 \"Wales\")))\n                              :ARG2 p))))", "(r / recommend-01\n   :ARG1 (d / do-02\n            :ARG1 (m / more)\n            :ARG2 (h / help-01\n                     :ARG1 (w / work-01\n                              :ARG0 (p / person\n                                       :ARG0-of (d2 / deaf-02))\n                              :location (c2 / country\n                                            :name (n / name\n                                                     :op1 \"Wales\")))\n                     :ARG2 p)))", "(s / say-01\n   :ARG0 (c / charity))", "(r / recommend-01\n   :ARG1 (d / do-02))", "(d / do-02\n   :ARG1 (m / more))", "(h / help-01\n   :ARG1 (w / work-01))", "(w / work-01\n   :ARG0 (p / person))", "(d2 / deaf-02)", "(s / say-01\n   :ARG0 (c / charity))", "(r / recommend-01\n   :ARG1 (d / do-02))", "(d / do-02\n   :ARG1 (m / more))", "(h / help-01\n   :ARG1 (w / work-01))", "(w / work-01\n   :ARG0 (p / person))", "(s / say-01\n   :ARG0 (c / charity)\n   :ARG1 (r / recommend-01\n            :ARG1 (d / do-02\n                     :ARG1 (m / more)\n                     :ARG2 (h / help-01\n                              :ARG1 (w / work-01\n                                       :ARG0 (p / person\n                                                :ARG0 (d2 / deaf-02)))\n                              :ARG2 p))))", "(s / say-01)"], "smus": ["Charity said.", "It is said that more should be done to help the deaf in Wales work.", "More should be done to help the deaf in Wales work.", "Charity said.", "Should have been done.", "More to be done.", "Help work.", "People work.", "Deaf.", "Charity said.", "Should have been done.", "More to be done.", "Help work.", "People work.", "The charity has said more should be done to help deaf people do their work.", "said."]}, {"instance_id": "pyrxsum-52", "summary": "Five teenagers have been sentenced after admitting their part in a \"riot\" which saw part of Newport city centre \"under siege\".", "summary_trees": ["# ::snt Five teenagers have been sentenced after admitting their part in a \"riot\" which saw part of Newport city centre \"under siege\".\n(s / sentence-01\n      :ARG1 (t / teenager\n            :quant 5)\n      :time (a / after\n            :op1 (a2 / admit-01\n                  :ARG0 t\n                  :ARG1 (p / part\n                        :part-of (r / riot-01\n                              :ARG0-of (s2 / see-01\n                                    :ARG1 (s3 / siege-01\n                                          :ARG1 (c / center\n                                                :part-of (c2 / city\n                                                      :name (n / name\n                                                            :op1 \"Newport\"))))))\n                        :poss t))))"], "tree": ["(s / sentence-01\n   :ARG1 (t / teenager\n            :quant 5))", "(s / sentence-01\n   :time (a / after\n            :op1 (a2 / admit-01\n                     :ARG0 (t / teenager)\n                     :ARG1 (p / part\n                              :part-of (r / riot-01\n                                          :ARG0-of (s2 / see-01\n                                                       :ARG1 (s3 / siege-01\n                                                                 :ARG1 (c / center\n                                                                          :part-of (c2 / city\n                                                                                       :name (n / name\n                                                                                                :op1 \"Newport\"))))))\n                              :poss t))))", "(a / after\n   :op1 (a2 / admit-01\n            :ARG0 (t / teenager)\n            :ARG1 (p / part\n                     :part-of (r / riot-01\n                                 :ARG0-of (s2 / see-01\n                                              :ARG1 (s3 / siege-01\n                                                        :ARG1 (c / center\n                                                                 :part-of (c2 / city\n                                                                              :name (n / name\n                                                                                       :op1 \"Newport\"))))))\n                     :poss t)))", "(s / sentence-01\n   :ARG1 (t / teenager))", "(a2 / admit-01\n    :ARG0 (t / teenager)\n    :ARG1 (p / part))", "(r / riot-01)", "(s2 / see-01\n    :ARG1 (s3 / siege-01))", "(s3 / siege-01\n    :ARG1 (c / center))", "(s / sentence-01\n   :ARG1 (t / teenager))", "(a2 / admit-01\n    :ARG0 (t / teenager))", "(a2 / admit-01\n    :ARG1 (p / part))", "(s2 / see-01\n    :ARG1 (s3 / siege-01))", "(s3 / siege-01\n    :ARG1 (c / center))", "(s / sentence-01\n   :ARG1 (t / teenager\n            :quant 5))", "(s / sentence-01\n   :time (a / after\n            :op1 (a2 / admit-01)))"], "smus": ["Five teenagers were sentenced.", "The sentence was given after teenagers admitted to part of their riot that saw the siege of the center of Newport.", "After admitting to part of their riot that saw the siege of the center of Newport, the teenagers are now on leave.", "The teenagers were sentenced.", "The teens are admitting the part.", "There was a riot.", "The siege saw.", "The center was under siege.", "The teenagers were sentenced.", "Teenagers admitting.", "admitting the part.", "The siege saw.", "The center was under siege.", "Five teenagers were sentenced.", "Sentenced after admitting."]}, {"instance_id": "pyrxsum-53", "summary": "Fetch, sit and roll over - all the kinds of normal things that you would say to your dog.", "summary_trees": ["# ::snt Fetch, sit and roll over - all the kinds of normal things that you would say to your dog.\n(a / and\n      :op1 (f / fetch-01\n            :mode imperative\n            :ARG0 (y / you)\n            :ARG2 (d / dog\n                  :poss y))\n      :op2 (s / sit-01\n            :mode imperative\n            :ARG1 y\n            :ARG2 d)\n      :op3 (r / roll-01\n            :mode imperative\n            :ARG0 y\n            :ARG2 (o / over))\n      :domain (t / thing\n            :ARG1-of (n / normal-02)\n            :mod (k / kind\n                  :mod (a2 / all))\n            :ARG1-of (s2 / say-01\n                  :ARG0 y\n                  :ARG2 d)))"], "tree": ["(a / and\n   :op1 (f / fetch-01\n           :mode imperative\n           :ARG0 (y / you)\n           :ARG2 (d / dog\n                    :poss y)))", "(a / and\n   :op2 (s / sit-01\n           :mode imperative\n           :ARG1 (y / you)\n           :ARG2 (d / dog)))", "(a / and\n   :op3 (r / roll-01\n           :mode imperative\n           :ARG0 (y / you)\n           :ARG2 (o / over)))", "(a / and\n   :domain (t / thing\n              :ARG1-of (n / normal-02)\n              :mod (k / kind\n                      :mod (a2 / all))\n              :ARG1-of (s2 / say-01\n                           :ARG0 (y / you)\n                           :ARG2 (d / dog))))", "(f / fetch-01\n   :mode imperative\n   :ARG0 (y / you)\n   :ARG2 (d / dog\n            :poss y))", "(s / sit-01\n   :mode imperative\n   :ARG1 (y / you)\n   :ARG2 (d / dog))", "(r / roll-01\n   :mode imperative\n   :ARG0 (y / you)\n   :ARG2 (o / over))", "(t / thing\n   :ARG1-of (n / normal-02)\n   :mod (k / kind\n           :mod (a2 / all))\n   :ARG1-of (s2 / say-01\n                :ARG0 (y / you)\n                :ARG2 (d / dog)))", "(f / fetch-01\n   :mode imperative\n   :ARG0 (y / you))", "(s / sit-01\n   :mode imperative\n   :ARG1 (y / you)\n   :ARG2 (d / dog))", "(r / roll-01\n   :mode imperative\n   :ARG0 (y / you)\n   :ARG2 (o / over))", "(n / normal-02)", "(s2 / say-01\n    :ARG0 (y / you)\n    :ARG2 (d / dog))", "(f / fetch-01\n   :mode imperative)", "(f / fetch-01\n   :ARG0 (y / you))", "(s / sit-01\n   :mode imperative)", "(s / sit-01\n   :ARG1 (y / you))", "(s / sit-01\n   :ARG2 (d / dog))", "(r / roll-01\n   :mode imperative)", "(r / roll-01\n   :ARG0 (y / you))", "(r / roll-01\n   :ARG2 (o / over))", "(s2 / say-01\n    :ARG0 (y / you))", "(s2 / say-01\n    :ARG2 (d / dog))", "(f / fetch-01\n   :mode imperative\n   :ARG0 (y / you)\n   :ARG2 (d / dog\n            :poss y))", "(s / sit-01\n   :mode imperative\n   :ARG1 (y / you)\n   :ARG2 (d / dog))", "(r / roll-01\n   :mode imperative\n   :ARG0 (y / you)\n   :ARG2 (o / over)\n   :domain (t / thing\n              :ARG1-of (n / normal-02)\n              :mod (k / kind\n                      :mod (a2 / all))\n              :ARG1-of (s2 / say-01\n                           :ARG0 y\n                           :ARG2 (d / dog))))", "(a / and\n   :op1 (f / fetch-01\n           :mode imperative\n           :ARG0 (y / you)\n           :ARG2 (d / dog\n                    :poss y))\n   :op2 (s / sit-01\n           :mode imperative\n           :ARG1 y\n           :ARG2 d)\n   :op3 (r / roll-01\n           :mode imperative\n           :ARG0 y\n           :ARG2 (o / over))\n   :domain (t / thing\n              :ARG1 (n / normal-02)\n              :mod (k / kind\n                      :mod (a2 / all))\n              :ARG1 (s2 / say-01\n                        :ARG0 y\n                        :ARG2 d)))", "(a / and\n   :op1 (f / fetch-01\n           :mode imperative)\n   :op2 (s / sit-01\n           :mode imperative)\n   :op3 (r / roll-01\n           :mode imperative)\n   :domain (t / thing\n              :mod (k / kind\n                      :mod (a2 / all))))"], "smus": ["and fetch your dog.", "and sit with the dog.", "and roll over.", "And all kinds of normal things you would say to a dog.", "Fetch your dog.", "Sit with the dog.", "Roll over.", "All kinds of normal things you would say to a dog.", "fetch.", "Sit with the dog.", "Roll over.", "Normal.", "You said dog.", "fetch", "fetch.", "Sit.", "Sit.", "Sit the dog.", "Roll.", "Roll.", "Roll over.", "You say.", "Say dog.", "Fetch your dog.", "Sit with the dog.", "All kinds of normal things you would say to a dog, roll over.", "All kinds of normal things to say to your dog are fetch your dog, sit on it and roll over.", "All kinds of things are fetch, sit, roll."]}, {"instance_id": "pyrxsum-54", "summary": "A grand jury has decided not to indict anyone in the case of Sandra Bland, who died in a Texas jail earlier this year.", "summary_trees": ["# ::snt A grand jury has decided not to indict anyone in the case of Sandra Bland, who died in a Texas jail earlier this year.\n(d / decide-01\n      :ARG0 (j / jury\n            :mod (g / grand))\n      :ARG1 (ii / indict-01\n            :polarity -\n            :ARG0 j\n            :ARG1 (a / anyone)\n            :topic (c / case-04\n                  :ARG1 (p / person\n                        :name (n / name\n                              :op1 \"Sandra\"\n                              :op2 \"Bland\")\n                        :ARG1-of (d2 / die-01\n                              :location (j2 / jail\n                                    :location (s / state\n                                          :name (n2 / name\n                                                :op1 \"Texas\")))\n                              :time (b / before)\n                              :time (y / year\n                                    :mod (t / this)))))))"], "tree": ["(d / decide-01\n   :ARG0 (j / jury\n            :mod (g / grand)))", "(d / decide-01\n   :ARG1 (ii / indict-01\n             :polarity -\n             :ARG0 (j / jury)\n             :ARG1 (a / anyone)\n             :topic (c / case-04\n                       :ARG1 (p / person\n                                :name (n / name\n                                         :op1 \"Sandra\"\n                                         :op2 \"Bland\")\n                                :ARG1-of (d2 / die-01\n                                             :location (j2 / jail\n                                                           :location (s / state\n                                                                        :name (n2 / name\n                                                                                  :op1 \"Texas\")))\n                                             :time (b / before)\n                                             :time (y / year\n                                                      :mod (t / this)))))))", "(j / jury\n   :mod (g / grand))", "(ii / indict-01\n    :polarity -\n    :ARG0 (j / jury)\n    :ARG1 (a / anyone)\n    :topic (c / case-04\n              :ARG1 (p / person\n                       :name (n / name\n                                :op1 \"Sandra\"\n                                :op2 \"Bland\")\n                       :ARG1-of (d2 / die-01\n                                    :location (j2 / jail\n                                                  :location (s / state\n                                                               :name (n2 / name\n                                                                         :op1 \"Texas\")))\n                                    :time (b / before)\n                                    :time (y / year\n                                             :mod (t / this))))))", "(d / decide-01\n   :ARG0 (j / jury))", "(ii / indict-01\n    :polarity -\n    :ARG0 (j / jury)\n    :ARG1 (a / anyone))", "(c / case-04\n   :ARG1 (p / person :name (n / name :op1 \"Sandra\" :op2 \"Bland\"))))", "(d2 / die-01\n    :location (j2 / jail))", "(d / decide-01\n   :ARG0 (j / jury))", "(ii / indict-01\n    :polarity -)", "(ii / indict-01\n    :ARG0 (j / jury))", "(ii / indict-01\n    :ARG1 (a / anyone))", "(c / case-04\n   :ARG1 (p / person :name (n / name :op1 \"Sandra\" :op2 \"Bland\"))))", "(d2 / die-01\n    :location (j2 / jail))", "(d / decide-01\n   :ARG0 (j / jury\n            :mod (g / grand))\n   :ARG1 (ii / indict-01\n             :polarity -\n             :ARG0 j\n             :ARG1 (a / anyone)\n             :topic (c / case-04\n                       :ARG1 (p / person\n                                :name (n / name\n                                         :op1 \"Sandra\"\n                                         :op2 \"Bland\")\n                                :ARG1 (d2 / die-01)))))", "(d / decide-01)"], "smus": ["The grand jury decided.", "The jury decision was not made in the case of Sandra Land, who died earlier this year in Texas jail.", "Grand jury.", "The jury did not indict anyone in the case of Sandra Land, who died earlier this year in Texas jail.", "The jury has ruled.", "The jury did not indict anyone.", "In the case of Sandra Land.", "Death in jail.", "The jury has ruled.", "Not to indict.", "The jury will indict.", "Indict anyone.", "In the case of Sandra Land.", "Death in jail.", "The grand jury has decided not to indict anyone in the case of Sandra Land, who died.", "Decided."]}, {"instance_id": "pyrxsum-55", "summary": "A man was limp \"like a teddy bear\" after he was restrained by bouncers on the ground outside an Aberdeen bar, a murder trial has heard.", "summary_trees": ["# ::snt A man was limp \"like a teddy bear\" after he was restrained by bouncers on the ground outside an Aberdeen bar, a murder trial has heard.\n(h / hear-01\n      :ARG0 (t / try-02\n            :ARG1 (m / murder-01))\n      :ARG1 (l / limp-01\n            :ARG1 (m2 / man)\n            :ARG1-of (r / resemble-01\n                  :ARG2 (b / bear\n                        :mod (t2 / teddy)))\n            :time (a / after\n                  :op1 (r2 / restrain-01\n                        :ARG0 (p / person\n                              :ARG0-of (h2 / have-org-role-91\n                                    :ARG2 (b2 / bouncer)))\n                        :ARG1 m2\n                        :location (g / ground\n                              :location (o / outside\n                                    :op1 (b3 / bar\n                                          :location (c / city\n                                                :name (n / name\n                                                      :op1 \"Aberdeen\")))))))))"], "tree": ["(h / hear-01\n   :ARG0 (t / try-02\n            :ARG1 (m / murder-01)))", "(h / hear-01\n   :ARG1 (l / limp-01\n            :ARG1 (m2 / man)\n            :ARG1-of (r / resemble-01\n                        :ARG2 (b / bear\n                                 :mod (t2 / teddy)))\n            :time (a / after\n                     :op1 (r2 / restrain-01\n                              :ARG0 (p / person\n                                       :ARG0-of (h2 / have-org-role-91\n                                                    :ARG2 (b2 / bouncer)))\n                              :ARG1 m2\n                              :location (g / ground\n                                           :location (o / outside\n                                                        :op1 (b3 / bar\n                                                                 :location (c / city\n                                                                              :name (n / name\n                                                                                       :op1 \"Aberdeen\")))))))))", "(t / try-02\n   :ARG1 (m / murder-01))", "(l / limp-01\n   :ARG1 (m2 / man)\n   :ARG1-of (r / resemble-01\n               :ARG2 (b / bear\n                        :mod (t2 / teddy)))\n   :time (a / after\n            :op1 (r2 / restrain-01\n                     :ARG0 (p / person\n                              :ARG0-of (h2 / have-org-role-91\n                                           :ARG2 (b2 / bouncer)))\n                     :ARG1 m2\n                     :location (g / ground\n                                  :location (o / outside\n                                               :op1 (b3 / bar\n                                                        :location (c / city\n                                                                     :name (n / name\n                                                                              :op1 \"Aberdeen\"))))))))", "(h / hear-01\n   :ARG0 (t / try-02))", "(t / try-02\n   :ARG1 (m / murder-01))", "(m / murder-01)", "(l / limp-01\n   :ARG1 (m2 / man))", "(r / resemble-01\n   :ARG2 (b / bear))", "(r2 / restrain-01\n    :ARG0 (p / person))", "(h / hear-01\n   :ARG0 (t / try-02))", "(t / try-02\n   :ARG1 (m / murder-01))", "(l / limp-01\n   :ARG1 (m2 / man))", "(r / resemble-01\n   :ARG2 (b / bear))", "(r2 / restrain-01\n    :ARG0 (p / person))", "(h / hear-01\n   :ARG0 (t / try-02\n            :ARG1 (m / murder-01))\n   :ARG1 (l / limp-01\n            :ARG1 (m2 / man)\n            :ARG1 (r / resemble-01\n                     :ARG2 (b / bear\n                              :mod (t2 / teddy)))))", "(h / hear-01)"], "smus": ["The murder trial has heard.", "The man was heard limping like a teddy bear after being restrained by bouncers on the ground outside an Aberdeen bar.", "The murder trial is over.", "The man was limping like a Teddy Bear after being restrained by bouncers on the ground outside an Aberdeen bar.", "The trial has heard.", "The murder trial is over.", "Murder.", "The man was limp.", "Like a bear.", "People are being restrained.", "The trial has heard.", "The murder trial is over.", "The man was limp.", "Like a bear.", "People are being restrained.", "The murder trial has heard the man limp like a Teddy Bear.", "Heard."]}, {"instance_id": "pyrxsum-56", "summary": "A bagpipe-playing busker has been convicted of duping people in Liverpool into thinking he was collecting for a Hillsborough charity.", "summary_trees": ["# ::snt A bagpipe-playing busker has been convicted of duping people in Liverpool into thinking he was collecting for a Hillsborough charity.\n(c / convict-01\n      :ARG1 (b / busker\n            :ARG0-of (p / play-11\n                  :ARG2 (b2 / bagpipe)))\n      :ARG2 (d / dupe-01\n            :ARG0 b\n            :ARG1 (p2 / person\n                  :location (c2 / city\n                        :name (n / name\n                              :op1 \"Liverpool\")))\n            :ARG2 (t / think-01\n                  :ARG0 p2\n                  :ARG1 (c3 / collect-01\n                        :ARG0 p2\n                        :ARG3 (c4 / charity\n                              :mod (e / event\n                                    :name (n2 / name\n                                          :op1 \"Hillsborough\")))))))"], "tree": ["(c / convict-01\n   :ARG1 (b / busker\n            :ARG0-of (p / play-11\n                        :ARG2 (b2 / bagpipe))))", "(c / convict-01\n   :ARG2 (d / dupe-01\n            :ARG0 (b / busker)\n            :ARG1 (p2 / person\n                      :location (c2 / city\n                                    :name (n / name\n                                             :op1 \"Liverpool\")))\n            :ARG2 (t / think-01\n                     :ARG0 p2\n                     :ARG1 (c3 / collect-01\n                               :ARG0 p2\n                               :ARG3 (c4 / charity\n                                         :mod (e / event\n                                                 :name (n2 / name\n                                                           :op1 \"Hillsborough\")))))))", "(b / busker\n   :ARG0-of (p / play-11\n               :ARG2 (b2 / bagpipe)))", "(d / dupe-01\n   :ARG0 (b / busker)\n   :ARG1 (p2 / person\n             :location (c2 / city\n                           :name (n / name\n                                    :op1 \"Liverpool\")))\n   :ARG2 (t / think-01\n            :ARG0 p2\n            :ARG1 (c3 / collect-01\n                      :ARG0 p2\n                      :ARG3 (c4 / charity\n                                :mod (e / event\n                                        :name (n2 / name\n                                                  :op1 \"Hillsborough\"))))))", "(c / convict-01\n   :ARG1 (b / busker))", "(d / dupe-01\n   :ARG0 (b / busker)\n   :ARG1 (p2 / person))", "(t / think-01\n   :ARG0 (p2 / person)\n   :ARG1 (c3 / collect-01))", "(c3 / collect-01\n    :ARG0 (p2 / person)\n    :ARG3 (c4 / charity))", "(c / convict-01\n   :ARG1 (b / busker))", "(d / dupe-01\n   :ARG0 (b / busker))", "(d / dupe-01\n   :ARG1 (p2 / person))", "(t / think-01\n   :ARG0 (p2 / person))", "(t / think-01\n   :ARG1 (c3 / collect-01))", "(c3 / collect-01\n    :ARG0 (p2 / person))", "(c3 / collect-01\n    :ARG3 (c4 / charity))", "(c / convict-01\n   :ARG1 (b / busker\n            :ARG0 (p / play-11\n                     :ARG2 (b2 / bagpipe)))\n   :ARG2 (d / dupe-01\n            :ARG0 b\n            :ARG1 (p2 / person)\n            :ARG2 (t / think-01\n                     :ARG0 p2\n                     :ARG1 (c3 / collect-01\n                               :ARG0 p2\n                               :ARG3 (c4 / charity\n                                         :mod (e / event\n                                                 :name (n2 / name\n                                                           :op1 \"Hillsborough\")))))))", "(c / convict-01)"], "smus": ["A busker playing the bagpipe was convicted.", "A busker was convicted of duping a Liverpool person into thinking they were collecting for a Hillsborough charity.", "a busker playing bagpipes", "A busker dupes a Liverpool person into thinking they are collecting for a Hillsborough charity.", "The busker was convicted.", "Busker dupes people.", "People are thinking about collecting.", "People collecting for charity.", "The busker was convicted.", "Busker dupe.", "Duping people.", "People are thinking.", "Thinking about collecting.", "People are collecting.", "collecting for charity", "A busker playing bagpipes was convicted of duping people into thinking they were collecting for a Hillsborough charity.", "Convicted."]}, {"instance_id": "pyrxsum-57", "summary": "New Morocco coach Herve Renard begins his quest for a record-equalling third Africa Cup of Nations as qualifying for the 2017 tournament resumes this week.", "summary_trees": ["# ::snt New Morocco coach Herve Renard begins his quest for a record-equalling third Africa Cup of Nations as qualifying for the 2017 tournament resumes this week.\n(b / begin-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Herve\"\n                  :op2 \"Renard\")\n            :ARG0-of (c / coach-01\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"Morocco\")))\n            :ARG1-of (n3 / new-02))\n      :ARG1 (q / quest-01\n            :ARG0 p\n            :ARG1 (q2 / qualify-02\n                  :ARG1 p\n                  :ARG2 (t2 / tournament\n                        :name (n4 / name\n                              :op1 \"Africa\"\n                              :op2 \"Cup\"\n                              :op3 \"of\"\n                              :op4 \"Nations\")\n                        :ord (o / ordinal-entity\n                              :value 3)\n                        :ARG0-of (e / equal-01\n                              :ARG1 (r / record)))))\n      :time (r2 / resume-01\n            :ARG1 q2\n            :time (w / week\n                  :mod (t3 / this))))"], "tree": ["(b / begin-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Herve\"\n                     :op2 \"Renard\")\n            :ARG0-of (c / coach-01\n                        :ARG1 (t / team\n                                 :name (n2 / name\n                                           :op1 \"Morocco\")))\n            :ARG1-of (n3 / new-02)))", "(b / begin-01\n   :ARG1 (q / quest-01\n            :ARG0 (p / person :name (n / name :op1 \"Herve\" :op2 \"Renard\")))\n            :ARG1 (q2 / qualify-02\n                      :ARG1 p\n                      :ARG2 (t2 / tournament\n                                :name (n4 / name\n                                          :op1 \"Africa\"\n                                          :op2 \"Cup\"\n                                          :op3 \"of\"\n                                          :op4 \"Nations\")\n                                :ord (o / ordinal-entity\n                                        :value 3)\n                                :ARG0-of (e / equal-01\n                                            :ARG1 (r / record))))))", "(b / begin-01\n   :time (r2 / resume-01\n             :ARG1 (q2 / qualify-02)\n             :time (w / week\n                      :mod (t3 / this))))", "(p / person\n   :name (n / name\n            :op1 \"Herve\"\n            :op2 \"Renard\")\n   :ARG0-of (c / coach-01\n               :ARG1 (t / team\n                        :name (n2 / name\n                                  :op1 \"Morocco\")))\n   :ARG1-of (n3 / new-02))", "(q / quest-01\n   :ARG0 (p / person :name (n / name :op1 \"Herve\" :op2 \"Renard\")))\n   :ARG1 (q2 / qualify-02\n             :ARG1 p\n             :ARG2 (t2 / tournament\n                       :name (n4 / name\n                                 :op1 \"Africa\"\n                                 :op2 \"Cup\"\n                                 :op3 \"of\"\n                                 :op4 \"Nations\")\n                       :ord (o / ordinal-entity\n                               :value 3)\n                       :ARG0-of (e / equal-01\n                                   :ARG1 (r / record)))))", "(r2 / resume-01\n    :ARG1 (q2 / qualify-02)\n    :time (w / week\n             :mod (t3 / this)))", "(b / begin-01\n   :ARG0 (p / person :name (n / name :op1 \"Herve\" :op2 \"Renard\"))))", "(c / coach-01\n   :ARG1 (t / team :name (n2 / name :op1 \"Morocco\")))", "(n3 / new-02)", "(q / quest-01\n   :ARG0 (p / person :name (n / name :op1 \"Herve\" :op2 \"Renard\")))\n   :ARG1 (q2 / qualify-02))", "(q2 / qualify-02\n    :ARG1 (p / person :name (n / name :op1 \"Herve\" :op2 \"Renard\")))\n    :ARG2 (t2 / tournament :name (n4 / name :op1 \"Africa\" :op2 \"Cup\" :op3 \"of\" :op4 \"Nations\"))))", "(e / equal-01\n   :ARG1 (r / record))", "(r2 / resume-01\n    :ARG1 (q2 / qualify-02)\n    :time (w / week))", "(b / begin-01\n   :ARG0 (p / person :name (n / name :op1 \"Herve\" :op2 \"Renard\"))))", "(c / coach-01\n   :ARG1 (t / team :name (n2 / name :op1 \"Morocco\")))", "(q / quest-01\n   :ARG0 (p / person :name (n / name :op1 \"Herve\" :op2 \"Renard\"))))", "(q / quest-01\n   :ARG1 (q2 / qualify-02))", "(q2 / qualify-02\n    :ARG1 (p / person :name (n / name :op1 \"Herve\" :op2 \"Renard\"))))", "(q2 / qualify-02\n    :ARG2 (t2 / tournament :name (n4 / name :op1 \"Africa\" :op2 \"Cup\" :op3 \"of\" :op4 \"Nations\"))))", "(e / equal-01\n   :ARG1 (r / record))", "(r2 / resume-01\n    :ARG1 (q2 / qualify-02))", "(r2 / resume-01\n    :time (w / week))", "(b / begin-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Herve\"\n                     :op2 \"Renard\")\n            :ARG0 (c / coach-01\n                     :ARG1 (t / team\n                              :name (n2 / name\n                                        :op1 \"Morocco\")))\n            :ARG1 (n3 / new-02))\n   :ARG1 (q / quest-01\n            :ARG0 p\n            :ARG1 (q2 / qualify-02\n                      :ARG1 p\n                      :ARG2 (t2 / tournament\n                                :name (n4 / name\n                                          :op1 \"Africa\"\n                                          :op2 \"Cup\"\n                                          :op3 \"of\"\n                                          :op4 \"Nations\")\n                                :ord (o / ordinal-entity\n                                        :value 3)\n                                :ARG0 (e / equal-01\n                                         :ARG1 (r / record))))))", "(b / begin-01\n   :time (r2 / resume-01))"], "smus": ["New Morocco coach Herve Renard begins.", "Herve Renard begins quest for qualification for the Africa Cup of Nations third round equaling record", "The qualifying resumes this week.", "New Morocco coach Herve Renard", "Herve Renard is on a quest for qualifying for the Africa Cup of Nations, the third tournament equaling a record.", "Qualifying resumes this week.", "a href=\"http://www.theworld.net/articles/herve-renard-beginners/\">Herve Renard Begins/a>", "Morocco coach", "New.", "Quest for Qualifying : Edgar Renard", "Herve Renard is qualifying for the Africa Cup of Nations.", "Equaling the record.", "Qualifying resumes this week.", "a href=\"http://www.theworld.net/articles/herve-renard-beginners/\">Herve Renard Begins/a>", "Morocco coach", "quest of Herve Renard", "Quest for Qualifying", "a href=\"http://www.theworld.net/news/herve-renard-qualified.html\">Herve Renard: Qualifying/a>", "Qualifying for the Africa Cup of Nations", "Equaling the record.", "Qualifying resumes", "Resumes next week.", "New Morocco coach Herve Renard begins quest for qualification for the Africa Cup of Nations third round with record equaling.", "a href=\"http://www.youtube.com/watch?v=gbbgbbgbbgbbgbbgbbgbbgbbgbbgbbgbbgbbgbbgbbgbbgbbgbbgbbgbbgbbgbbgbbgb"]}, {"instance_id": "pyrxsum-58", "summary": "Soul singer Ray BLK has topped the BBC's Sound Of 2017 list, which aims to predict the most exciting new music for the year ahead.", "summary_trees": ["# ::snt Soul singer Ray BLK has topped the BBC's Sound Of 2017 list, which aims to predict the most exciting new music for the year ahead.\n(t / top-01\n      :ARG1 (l / list\n            :name (n / name\n                  :op1 \"Sound\"\n                  :op2 \"Of\"\n                  :op3 \"2017\")\n            :poss (p / publication\n                  :name (n2 / name\n                        :op1 \"BBC\"))\n            :ARG0-of (a / aim-01\n                  :ARG1 (p2 / predict-01\n                        :ARG1 (m / music\n                              :ARG1-of (n3 / new-01)\n                              :ARG1-of (h / have-degree-91\n                                    :ARG2 (e / excite-01\n                                          :ARG0 m)\n                                    :ARG3 (m2 / most))\n                              :time (y / year\n                                    :mod (a2 / ahead))))))\n      :ARG2 (p3 / person\n            :name (n4 / name\n                  :op1 \"Ray\"\n                  :op2 \"BlK\")\n            :ARG0-of (s / sing-01\n                  :ARG1 (s2 / soul))))"], "tree": ["(t / top-01\n   :ARG1 (l / list\n            :name (n / name\n                     :op1 \"Sound\"\n                     :op2 \"Of\"\n                     :op3 \"2017\")\n            :poss (p / publication\n                     :name (n2 / name\n                               :op1 \"BBC\"))\n            :ARG0-of (a / aim-01\n                        :ARG1 (p2 / predict-01\n                                  :ARG1 (m / music\n                                           :ARG1-of (n3 / new-01)\n                                           :ARG1-of (h / have-degree-91\n                                                       :ARG2 (e / excite-01\n                                                                :ARG0 m)\n                                                       :ARG3 (m2 / most))\n                                           :time (y / year\n                                                    :mod (a2 / ahead)))))))", "(t / top-01\n   :ARG2 (p3 / person\n             :name (n4 / name\n                       :op1 \"Ray\"\n                       :op2 \"BlK\")\n             :ARG0-of (s / sing-01\n                         :ARG1 (s2 / soul))))", "(l / list\n   :name (n / name\n            :op1 \"Sound\"\n            :op2 \"Of\"\n            :op3 \"2017\")\n   :poss (p / publication\n            :name (n2 / name\n                      :op1 \"BBC\"))\n   :ARG0-of (a / aim-01\n               :ARG1 (p2 / predict-01\n                         :ARG1 (m / music\n                                  :ARG1-of (n3 / new-01)\n                                  :ARG1-of (h / have-degree-91\n                                              :ARG2 (e / excite-01\n                                                       :ARG0 m)\n                                              :ARG3 (m2 / most))\n                                  :time (y / year\n                                           :mod (a2 / ahead))))))", "(p3 / person\n    :name (n4 / name\n              :op1 \"Ray\"\n              :op2 \"BlK\")\n    :ARG0-of (s / sing-01\n                :ARG1 (s2 / soul)))", "(t / top-01\n   :ARG1 (l / list :name (n / name :op1 \"Sound\" :op2 \"Of\" :op3 \"2017\"))))", "(a / aim-01\n   :ARG1 (p2 / predict-01))", "(p2 / predict-01\n    :ARG1 (m / music))", "(n3 / new-01)", "(e / excite-01\n   :ARG0 (m / music))", "(s / sing-01\n   :ARG1 (s2 / soul))", "(t / top-01\n   :ARG1 (l / list :name (n / name :op1 \"Sound\" :op2 \"Of\" :op3 \"2017\"))))", "(a / aim-01\n   :ARG1 (p2 / predict-01))", "(p2 / predict-01\n    :ARG1 (m / music))", "(e / excite-01\n   :ARG0 (m / music))", "(s / sing-01\n   :ARG1 (s2 / soul))", "(t / top-01\n   :ARG1 (l / list\n            :name (n / name\n                     :op1 \"Sound\"\n                     :op2 \"Of\"\n                     :op3 \"2017\")\n            :poss (p / publication\n                     :name (n2 / name\n                               :op1 \"BBC\"))\n            :ARG0 (a / aim-01\n                     :ARG1 (p2 / predict-01\n                               :ARG1 (m / music\n                                        :ARG1 (n3 / new-01)\n                                        :ARG1 (h / have-degree-91\n                                                 :ARG2 (e / excite-01\n                                                          :ARG0 m)\n                                                 :ARG3 (m2 / most))))))\n   :ARG2 (p3 / person\n             :name (n4 / name\n                       :op1 \"Ray\"\n                       :op2 \"BlK\")\n             :ARG0 (s / sing-01\n                      :ARG1 (s2 / soul))))", "(t / top-01)"], "smus": ["The BBC's Sound of 2017 list aims to predict the new music that will be the most exciting ahead of year.", "Top of the list was soul singer Ray Blak.", "The BBC's Sound of 2017 list aims to predict the new music that will be the most exciting ahead year.", "Ray Blak, soul singer.", "Top of the list for Sound of 2017", "aims to predict.", "Predict the music.", "New.", "The music is exciting.", "Soul singing.", "Top of the list for Sound of 2017", "aims to predict.", "Predict the music.", "The music is exciting.", "Soul singing.", "Ray Blak, the soul singer, is top of the BBC's Sound of 2017 list, which aims to predict the most exciting new music.", "Top"]}, {"instance_id": "pyrxsum-59", "summary": "Hundreds of protesters in Kabul have accused Iran of stopping fuel tankers from crossing the border into Afghanistan.", "summary_trees": ["# ::snt Hundreds of protesters in Kabul have accused Iran of stopping fuel tankers from crossing the border into Afghanistan.\n(a / accuse-01\n      :ARG0 (p / person\n            :ARG0-of (p2 / protest-01)\n            :quant (m / multiple\n                  :op1 100)\n            :location (c / city\n                  :name (n / name\n                        :op1 \"Kabul\")))\n      :ARG1 (c2 / country\n            :name (n2 / name\n                  :op1 \"Iran\"))\n      :ARG2 (s / stop-03\n            :ARG0 c2\n            :ARG1 (t / tanker\n                  :mod (f / fuel))\n            :ARG2 (c3 / cross-02\n                  :ARG0 t\n                  :ARG1 (b / border-01\n                        :ARG2 (c4 / country\n                              :name (n3 / name\n                                    :op1 \"Afghanistan\"))))))"], "tree": ["(a / accuse-01\n   :ARG0 (p / person\n            :ARG0-of (p2 / protest-01)\n            :quant (m / multiple\n                      :op1 100)\n            :location (c / city\n                         :name (n / name\n                                  :op1 \"Kabul\"))))", "(a / accuse-01\n   :ARG1 (c2 / country\n             :name (n2 / name\n                       :op1 \"Iran\")))", "(a / accuse-01\n   :ARG2 (s / stop-03\n            :ARG0 (c2 / country :name (n2 / name :op1 \"Iran\"))\n            :ARG1 (t / tanker\n                     :mod (f / fuel))\n            :ARG2 (c3 / cross-02\n                      :ARG0 t\n                      :ARG1 (b / border-01\n                               :ARG2 (c4 / country\n                                         :name (n3 / name\n                                                   :op1 \"Afghanistan\"))))))", "(p / person\n   :ARG0-of (p2 / protest-01)\n   :quant (m / multiple\n             :op1 100)\n   :location (c / city\n                :name (n / name\n                         :op1 \"Kabul\")))", "(c2 / country\n    :name (n2 / name\n              :op1 \"Iran\"))", "(s / stop-03\n   :ARG0 (c2 / country :name (n2 / name :op1 \"Iran\"))\n   :ARG1 (t / tanker\n            :mod (f / fuel))\n   :ARG2 (c3 / cross-02\n             :ARG0 t\n             :ARG1 (b / border-01\n                      :ARG2 (c4 / country\n                                :name (n3 / name\n                                          :op1 \"Afghanistan\")))))", "(a / accuse-01\n   :ARG0 (p / person))", "(p2 / protest-01)", "(s / stop-03\n   :ARG0 (c2 / country :name (n2 / name :op1 \"Iran\"))\n   :ARG1 (t / tanker))", "(c3 / cross-02\n    :ARG0 (t / tanker)\n    :ARG1 (b / border-01))", "(b / border-01\n   :ARG2 (c4 / country :name (n3 / name :op1 \"Afghanistan\")))", "(a / accuse-01\n   :ARG0 (p / person))", "(s / stop-03\n   :ARG0 (c2 / country :name (n2 / name :op1 \"Iran\")))", "(s / stop-03\n   :ARG1 (t / tanker))", "(c3 / cross-02\n    :ARG0 (t / tanker))", "(c3 / cross-02\n    :ARG1 (b / border-01))", "(b / border-01\n   :ARG2 (c4 / country :name (n3 / name :op1 \"Afghanistan\")))", "(a / accuse-01\n   :ARG0 (p / person\n            :ARG0 (p2 / protest-01)\n            :quant (m / multiple\n                      :op1 100))\n   :ARG1 (c2 / country\n             :name (n2 / name\n                       :op1 \"Iran\"))\n   :ARG2 (s / stop-03\n            :ARG0 c2\n            :ARG1 (t / tanker\n                     :mod (f / fuel))\n            :ARG2 (c3 / cross-02\n                      :ARG0 t\n                      :ARG1 (b / border-01\n                               :ARG2 (c4 / country\n                                         :name (n3 / name\n                                                   :op1 \"Afghanistan\"))))))", "(a / accuse-01)"], "smus": ["Hundreds of protesters in Kabul have accused.", "Iran is accused.", "Iran is accused of stopping fuel tankers from crossing the border with Afghanistan.", "Hundreds of protesters in Kabul", "Iran (IR)", "Iran is stopping fuel tankers from crossing the border with Afghanistan.", "People are accused.", "Protests", "Iran is stopping tankers.", "Tankers crossing the border.", "border with Afghanistan", "People are accused.", "Iran is stopping.", "Stopping the tankers.", "The tanks were crossing.", "Crossing the border.", "border with Afghanistan", "Hundreds of protesters have accused Iran of stopping fuel tankers from crossing the border with Afghanistan.", "accused."]}, {"instance_id": "pyrxsum-60", "summary": "Some police forces are putting the public at risk by rationing their response as they struggle with cutbacks, the police standards watchdog has warned.", "summary_trees": ["# ::snt Some police forces are putting the public at risk by rationing their response as they struggle with cutbacks, the police standards watchdog has warned.\n(w / warn-01\n      :ARG0 (w2 / watchdog\n            :mod (p / police)\n            :mod (s / standard))\n      :ARG1 (e / endanger-01\n            :ARG0 (f / force\n                  :mod (p2 / police)\n                  :quant (s2 / some))\n            :ARG1 (p3 / public)\n            :manner (r / ration-01\n                  :ARG0 f\n                  :ARG1 (r2 / respond-01\n                        :ARG0 f)\n                  :time (s3 / struggle-02\n                        :ARG0 f\n                        :ARG1 (c / cut-back-05\n                              :ARG0 f)))))"], "tree": ["(w / warn-01\n   :ARG0 (w2 / watchdog\n             :mod (p / police)\n             :mod (s / standard)))", "(w / warn-01\n   :ARG1 (e / endanger-01\n            :ARG0 (f / force\n                     :mod (p2 / police)\n                     :quant (s2 / some))\n            :ARG1 (p3 / public)\n            :manner (r / ration-01\n                       :ARG0 f\n                       :ARG1 (r2 / respond-01\n                                 :ARG0 f)\n                       :time (s3 / struggle-02\n                                 :ARG0 f\n                                 :ARG1 (c / cut-back-05\n                                          :ARG0 f)))))", "(w2 / watchdog\n    :mod (p / police)\n    :mod (s / standard))", "(e / endanger-01\n   :ARG0 (f / force\n            :mod (p2 / police)\n            :quant (s2 / some))\n   :ARG1 (p3 / public)\n   :manner (r / ration-01\n              :ARG0 f\n              :ARG1 (r2 / respond-01\n                        :ARG0 f)\n              :time (s3 / struggle-02\n                        :ARG0 f\n                        :ARG1 (c / cut-back-05\n                                 :ARG0 f))))", "(w / warn-01\n   :ARG0 (w2 / watchdog))", "(e / endanger-01\n   :ARG0 (f / force))", "(r / ration-01\n   :ARG0 (f / force)\n   :ARG1 (r2 / respond-01))", "(r2 / respond-01\n    :ARG0 (f / force))", "(s3 / struggle-02\n    :ARG0 (f / force)\n    :ARG1 (c / cut-back-05))", "(c / cut-back-05\n   :ARG0 (f / force))", "(w / warn-01\n   :ARG0 (w2 / watchdog))", "(e / endanger-01\n   :ARG0 (f / force))", "(r / ration-01\n   :ARG0 (f / force))", "(r / ration-01\n   :ARG1 (r2 / respond-01))", "(r2 / respond-01\n    :ARG0 (f / force))", "(s3 / struggle-02\n    :ARG0 (f / force))", "(s3 / struggle-02\n    :ARG1 (c / cut-back-05))", "(c / cut-back-05\n   :ARG0 (f / force))", "(w / warn-01\n   :ARG0 (w2 / watchdog\n             :mod (p / police)\n             :mod (s / standard))\n   :ARG1 (e / endanger-01\n            :ARG0 (f / force\n                     :mod (p2 / police)\n                     :quant (s2 / some))\n            :ARG1 (p3 / public)\n            :manner (r / ration-01\n                       :ARG0 f\n                       :ARG1 (r2 / respond-01\n                                 :ARG0 f))))", "(w / warn-01)"], "smus": ["A standard police watchdog has warned --", "Some police forces have been warned that by rationing response as they struggle to cut back, they are putting the public in danger.", "a standard police watchdog.", "Some police forces endanger the public by rationing their response while they struggle to cut back.", "Watchdog warned:", "The forces are dangerous.", "Forces rationing the response.", "Forces response:", "Forces struggle to cut back.", "Forces cut back.", "Watchdog warned:", "The forces are dangerous.", "Forces rationing.", "Rationing the response.", "Forces response:", "Forces struggle.", "Cutbacks struggle.", "Forces cut back.", "Standard police watchdogs have warned that some police forces are putting the public in danger by rationing their response.", "Warning:"]}, {"instance_id": "pyrxsum-61", "summary": "Pace bowler Jake Ball has made a \"lively\" return following a winter playing for England Lions, says Nottinghamshire captain Chris Read.", "summary_trees": ["# ::snt Pace bowler Jake Ball has made a \"lively\" return following a winter playing for England Lions, says Nottinghamshire captain Chris Read.\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Chris\"\n                  :op2 \"Read\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"Nottinghamshire\"))\n                  :ARG2 (c / captain)))\n      :ARG1 (r / return-01\n            :ARG1 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Jake\"\n                        :op2 \"Ball\")\n                  :ARG0-of (b / bowl-01\n                        :manner (p3 / pace-01)))\n            :ARG1-of (l / lively-00)\n            :ARG1-of (f / follow-01\n                  :ARG2 (p4 / play-01\n                        :ARG0 p2\n                        :ARG3 (t2 / team\n                              :name (n4 / name\n                                    :op1 \"England\"\n                                    :op2 \"Lions\"))\n                        :time (d / date-entity\n                              :season (w / winter))))))"], "tree": ["(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chris\"\n                     :op2 \"Read\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (t / team\n                                 :name (n2 / name\n                                           :op1 \"Nottinghamshire\"))\n                        :ARG2 (c / captain))))", "(s / say-01\n   :ARG1 (r / return-01\n            :ARG1 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Jake\"\n                                :op2 \"Ball\")\n                      :ARG0-of (b / bowl-01\n                                  :manner (p3 / pace-01)))\n            :ARG1-of (l / lively-00)\n            :ARG1-of (f / follow-01\n                        :ARG2 (p4 / play-01\n                                  :ARG0 p2\n                                  :ARG3 (t2 / team\n                                            :name (n4 / name\n                                                      :op1 \"England\"\n                                                      :op2 \"Lions\"))\n                                  :time (d / date-entity\n                                           :season (w / winter))))))", "(p / person\n   :name (n / name\n            :op1 \"Chris\"\n            :op2 \"Read\")\n   :ARG0-of (h / have-org-role-91\n               :ARG1 (t / team\n                        :name (n2 / name\n                                  :op1 \"Nottinghamshire\"))\n               :ARG2 (c / captain)))", "(r / return-01\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"Jake\"\n                       :op2 \"Ball\")\n             :ARG0-of (b / bowl-01\n                         :manner (p3 / pace-01)))\n   :ARG1-of (l / lively-00)\n   :ARG1-of (f / follow-01\n               :ARG2 (p4 / play-01\n                         :ARG0 p2\n                         :ARG3 (t2 / team\n                                   :name (n4 / name\n                                             :op1 \"England\"\n                                             :op2 \"Lions\"))\n                         :time (d / date-entity\n                                  :season (w / winter)))))", "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Chris\" :op2 \"Read\"))))", "(r / return-01\n   :ARG1 (p2 / person :name (n3 / name :op1 \"Jake\" :op2 \"Ball\"))))", "(b / bowl-01\n   :manner (p3 / pace-01))", "(p3 / pace-01)", "(l / lively-00)", "(f / follow-01\n   :ARG2 (p4 / play-01))", "(p4 / play-01\n    :ARG0 (p2 / person :name (n3 / name :op1 \"Jake\" :op2 \"Ball\")))\n    :ARG3 (t2 / team :name (n4 / name :op1 \"England\" :op2 \"Lions\")))", "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Chris\" :op2 \"Read\"))))", "(r / return-01\n   :ARG1 (p2 / person :name (n3 / name :op1 \"Jake\" :op2 \"Ball\"))))", "(b / bowl-01\n   :manner (p3 / pace-01))", "(f / follow-01\n   :ARG2 (p4 / play-01))", "(p4 / play-01\n    :ARG0 (p2 / person :name (n3 / name :op1 \"Jake\" :op2 \"Ball\"))))", "(p4 / play-01\n    :ARG3 (t2 / team :name (n4 / name :op1 \"England\" :op2 \"Lions\")))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chris\"\n                     :op2 \"Read\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (t / team\n                              :name (n2 / name\n                                        :op1 \"Nottinghamshire\"))\n                     :ARG2 (c / captain)))\n   :ARG1 (r / return-01\n            :ARG1 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Jake\"\n                                :op2 \"Ball\")\n                      :ARG0 (b / bowl-01\n                               :manner (p3 / pace-01)))\n            :ARG1 (l / lively-00)\n            :ARG1 (f / follow-01\n                     :ARG2 (p4 / play-01\n                               :ARG0 p2\n                               :ARG3 (t2 / team\n                                         :name (n4 / name\n                                                   :op1 \"England\"\n                                                   :op2 \"Lions\"))))))", "(s / say-01)"], "smus": ["\"It's a good thing,\" says Nottinghamshire captain Chris Read.", "\"Jake Ball is a lively bowler in lively return following his winter play against the English Lions,\" says the pace bowler.", "Chris Read is the Nottinghamshire captain.", "A lively return to pace bowler Jake Ball following his winter play against the England Lions.", "Chris Read says --", "Jake Ball's return", "Bowling by pace.", "pace.", "Lively.", "Following the play.", "Jake Ball played for the England Lions.", "Chris Read says --", "Jake Ball's return", "Bowling by pace.", "Following the play.", "Jake Ball in play.", "Playing for the England Lions", "Chris Read, the captain of Nottinghamshire, says Jake Ball's pace bowling return will be \"liveable\" following his England Lions play.", "says."]}, {"instance_id": "pyrxsum-62", "summary": "A serial robber who threatened an 18-year-old shop worker with a knife was caught after his streak of grey hair was recognised in CCTV footage.", "summary_trees": ["# ::snt A serial robber who threatened an 18-year-old shop worker with a knife was caught after his streak of grey hair was recognised in CCTV footage.\n(c / catch-01\n      :ARG1 (p / person\n            :ARG0-of (r / rob-01\n                  :mod (s / serial))\n            :ARG0-of (t / threaten-01\n                  :ARG1 (p2 / person\n                        :ARG0-of (w / work-01\n                              :ARG2 (s2 / shop))\n                        :age (t2 / temporal-quantity\n                              :quant 18\n                              :unit (y / year)))\n                  :ARG2 (k / knife))\n            :part (s3 / streak\n                  :consist-of (h / hair\n                        :ARG1-of (g / gray-02))))\n      :time (a / after\n            :op1 (r2 / recognize-02\n                  :ARG1 p\n                  :location (f / footage\n                        :mod (t3 / television\n                              :mod (c2 / circuit\n                                    :ARG1-of (c3 / close-01)))))))"], "tree": ["(c / catch-01\n   :ARG1 (p / person\n            :ARG0-of (r / rob-01\n                        :mod (s / serial))\n            :ARG0-of (t / threaten-01\n                        :ARG1 (p2 / person\n                                  :ARG0-of (w / work-01\n                                              :ARG2 (s2 / shop))\n                                  :age (t2 / temporal-quantity\n                                           :quant 18\n                                           :unit (y / year)))\n                        :ARG2 (k / knife))\n            :part (s3 / streak\n                      :consist-of (h / hair\n                                     :ARG1-of (g / gray-02)))))", "(c / catch-01\n   :time (a / after\n            :op1 (r2 / recognize-02\n                     :ARG1 (p / person)\n                     :location (f / footage\n                                  :mod (t3 / television\n                                           :mod (c2 / circuit\n                                                    :ARG1-of (c3 / close-01)))))))", "(p / person\n   :ARG0-of (r / rob-01\n               :mod (s / serial))\n   :ARG0-of (t / threaten-01\n               :ARG1 (p2 / person\n                         :ARG0-of (w / work-01\n                                     :ARG2 (s2 / shop))\n                         :age (t2 / temporal-quantity\n                                  :quant 18\n                                  :unit (y / year)))\n               :ARG2 (k / knife))\n   :part (s3 / streak\n             :consist-of (h / hair\n                            :ARG1-of (g / gray-02))))", "(a / after\n   :op1 (r2 / recognize-02\n            :ARG1 (p / person)\n            :location (f / footage\n                         :mod (t3 / television\n                                  :mod (c2 / circuit\n                                           :ARG1-of (c3 / close-01))))))", "(c / catch-01\n   :ARG1 (p / person))", "(r / rob-01\n   :mod (s / serial))", "(t / threaten-01\n   :ARG1 (p2 / person))", "(w / work-01\n   :ARG2 (s2 / shop))", "(g / gray-02)", "(r2 / recognize-02\n    :ARG1 (p / person)\n    :location (f / footage))", "(c3 / close-01)", "(c / catch-01\n   :ARG1 (p / person))", "(r / rob-01\n   :mod (s / serial))", "(t / threaten-01\n   :ARG1 (p2 / person))", "(w / work-01\n   :ARG2 (s2 / shop))", "(r2 / recognize-02\n    :ARG1 (p / person))", "(r2 / recognize-02\n    :location (f / footage))", "(c / catch-01\n   :ARG1 (p / person\n            :ARG0 (r / rob-01\n                     :mod (s / serial))\n            :ARG0 (t / threaten-01\n                     :ARG1 (p2 / person\n                               :ARG0 (w / work-01\n                                        :ARG2 (s2 / shop))\n                               :age (t2 / temporal-quantity\n                                        :quant 18\n                                        :unit (y / year)))\n                     :ARG2 (k / knife))\n            :part (s3 / streak\n                      :consist-of (h / hair\n                                     :ARG1 (g / gray-02)))))", "(c / catch-01\n   :time (a / after\n            :op1 (r2 / recognize-02)))"], "smus": ["A serial robber who threatened an 18 year old shop worker with a knife was caught with a streak of gray hair.", "The catch was after people were recognized on CCTV footage.", "A serial robber who threatened an 18 year old shop worker with a knife with a streak of gray hair.", "After the people were recognized on CCTV footage.", "People were caught.", "Serial robbery.", "People were threatened.", "Work in a shop.", "Gray.", "The people were recognized in the footage.", "Closed.", "People were caught.", "Serial robbery.", "People were threatened.", "Work in a shop.", "People are recognized.", "The footage is recognized.", "A serial robber was caught with a gray haired streak when a 18 year old shop worker threatened with a knife.", "Catched after being recognized."]}, {"instance_id": "pyrxsum-63", "summary": "A British man has survived a fall from the 15th floor of a building in New Zealand, local media report.", "summary_trees": ["# ::snt A British man has survived a fall from the 15th floor of a building in New Zealand, local media report.\n(r / report-01\n      :ARG0 (m / media\n            :ARG1-of (l / local-02))\n      :ARG1 (s / survive-01\n            :ARG0 (m2 / man\n                  :mod (c / country\n                        :name (n / name\n                              :op1 \"Britain\")))\n            :ARG1 (f / fall-01\n                  :ARG1 m2\n                  :ARG3 (f2 / floor\n                        :ord (o / ordinal-entity\n                              :value 15)\n                        :part-of (b / building\n                              :location (c2 / country\n                                    :name (n2 / name\n                                          :op1 \"New\"\n                                          :op2 \"Zealand\")))))))"], "tree": ["(r / report-01\n   :ARG0 (m / media\n            :ARG1-of (l / local-02)))", "(r / report-01\n   :ARG1 (s / survive-01\n            :ARG0 (m2 / man\n                      :mod (c / country\n                              :name (n / name\n                                       :op1 \"Britain\")))\n            :ARG1 (f / fall-01\n                     :ARG1 m2\n                     :ARG3 (f2 / floor\n                               :ord (o / ordinal-entity\n                                       :value 15)\n                               :part-of (b / building\n                                           :location (c2 / country\n                                                         :name (n2 / name\n                                                                   :op1 \"New\"\n                                                                   :op2 \"Zealand\")))))))", "(m / media\n   :ARG1-of (l / local-02))", "(s / survive-01\n   :ARG0 (m2 / man\n             :mod (c / country\n                     :name (n / name\n                              :op1 \"Britain\")))\n   :ARG1 (f / fall-01\n            :ARG1 m2\n            :ARG3 (f2 / floor\n                      :ord (o / ordinal-entity\n                              :value 15)\n                      :part-of (b / building\n                                  :location (c2 / country\n                                                :name (n2 / name\n                                                          :op1 \"New\"\n                                                          :op2 \"Zealand\"))))))", "(r / report-01\n   :ARG0 (m / media))", "(l / local-02)", "(s / survive-01\n   :ARG0 (m2 / man))", "(f / fall-01\n   :ARG1 (m2 / man)\n   :ARG3 (f2 / floor))", "(r / report-01\n   :ARG0 (m / media))", "(s / survive-01\n   :ARG0 (m2 / man))", "(f / fall-01\n   :ARG1 (m2 / man))", "(f / fall-01\n   :ARG3 (f2 / floor))", "(r / report-01\n   :ARG0 (m / media\n            :ARG1 (l / local-02))\n   :ARG1 (s / survive-01\n            :ARG0 (m2 / man\n                      :mod (c / country\n                              :name (n / name\n                                       :op1 \"Britain\")))\n            :ARG1 (f / fall-01\n                     :ARG1 m2\n                     :ARG3 (f2 / floor\n                               :ord (o / ordinal-entity\n                                       :value 15)\n                               :part (b / building)))))", "(r / report-01)"], "smus": ["Local media report:", "A British man has survived a fall from the 15th floor of a New Zealand building, according to a report.", "Local media", "A British man has survived a fall from the 15th floor of a New Zealand building.", "Media report:", "Local.", "The man survived.", "The man fell to the floor.", "Media report:", "The man survived.", "The man fell.", "The floor fell.", "Local media reports that a British man has survived the fall from the 15th floor of the building.", "Report."]}, {"instance_id": "pyrxsum-64", "summary": "The Royal Navy has released an image of planned improvements to a jetty at Portsmouth Naval Base.", "summary_trees": ["# ::snt The Royal Navy has released an image of planned improvements to a jetty at Portsmouth Naval Base.\n(r / release-01\n      :ARG0 (m / military\n            :name (n / name\n                  :op1 \"Royal\"\n                  :op2 \"Navy\"))\n      :ARG1 (ii / image\n            :topic (ii2 / improve-01\n                  :ARG1 (j / jetty\n                        :location (f / facility\n                              :name (n2 / name\n                                    :op1 \"Portsmouth\"\n                                    :op2 \"Naval\"\n                                    :op3 \"Base\")))\n                  :ARG1-of (p / plan-01))))"], "tree": ["(r / release-01\n   :ARG0 (m / military\n            :name (n / name\n                     :op1 \"Royal\"\n                     :op2 \"Navy\")))", "(r / release-01\n   :ARG1 (ii / image\n             :topic (ii2 / improve-01\n                         :ARG1 (j / jetty\n                                  :location (f / facility\n                                               :name (n2 / name\n                                                         :op1 \"Portsmouth\"\n                                                         :op2 \"Naval\"\n                                                         :op3 \"Base\")))\n                         :ARG1-of (p / plan-01))))", "(m / military\n   :name (n / name\n            :op1 \"Royal\"\n            :op2 \"Navy\"))", "(ii / image\n    :topic (ii2 / improve-01\n                :ARG1 (j / jetty\n                         :location (f / facility\n                                      :name (n2 / name\n                                                :op1 \"Portsmouth\"\n                                                :op2 \"Naval\"\n                                                :op3 \"Base\")))\n                :ARG1-of (p / plan-01)))", "(r / release-01\n   :ARG0 (m / military :name (n / name :op1 \"Royal\" :op2 \"Navy\")))", "(ii2 / improve-01\n     :ARG1 (j / jetty))", "(p / plan-01)", "(r / release-01\n   :ARG0 (m / military :name (n / name :op1 \"Royal\" :op2 \"Navy\")))", "(ii2 / improve-01\n     :ARG1 (j / jetty))", "(r / release-01\n   :ARG0 (m / military\n            :name (n / name\n                     :op1 \"Royal\"\n                     :op2 \"Navy\"))\n   :ARG1 (ii / image\n             :topic (ii2 / improve-01\n                         :ARG1 (j / jetty)\n                         :ARG1 (p / plan-01))))", "(r / release-01)"], "smus": ["The Royal Navy has released.", "Image released of planned improvements to the jetty at Portsmouth Naval Base.", "Royal Navy", "Image of planned improvements to the jetty at Portsmouth Naval Base", "The Royal Navy has released.", "Improvements to the jetty.", "Planned.", "The Royal Navy has released.", "Improvements to the jetty.", "The Royal Navy has released an image of planned improvements to the jetty.", "Released."]}, {"instance_id": "pyrxsum-65", "summary": "China has said Japan is endangering peace in the region after it passed controversial laws expanding the role of its military abroad.", "summary_trees": ["# ::snt China has said Japan is endangering peace in the region after it passed controversial laws expanding the role of its military abroad.\n(s / say-01\n      :ARG0 (c / country\n            :name (n / name\n                  :op1 \"China\"))\n      :ARG1 (e / endanger-01\n            :ARG0 (c2 / country\n                  :name (n2 / name\n                        :op1 \"Japan\"))\n            :ARG1 (p / peace\n                  :location (r / region)))\n      :time (a / after\n            :op1 (p2 / pass-01\n                  :ARG0 c2\n                  :ARG2 (l / law\n                        :mod (c3 / controversy)\n                        :ARG0-of (e2 / expand-01\n                              :ARG1 (r2 / role\n                                    :poss (m / military\n                                          :poss c2\n                                          :location (a2 / abroad))))))))"], "tree": ["(s / say-01\n   :ARG0 (c / country\n            :name (n / name\n                     :op1 \"China\")))", "(s / say-01\n   :ARG1 (e / endanger-01\n            :ARG0 (c2 / country\n                      :name (n2 / name\n                                :op1 \"Japan\"))\n            :ARG1 (p / peace\n                     :location (r / region))))", "(s / say-01\n   :time (a / after\n            :op1 (p2 / pass-01\n                     :ARG0 (c2 / country :name (n2 / name :op1 \"Japan\"))\n                     :ARG2 (l / law\n                              :mod (c3 / controversy)\n                              :ARG0-of (e2 / expand-01\n                                           :ARG1 (r2 / role\n                                                     :poss (m / military\n                                                              :poss c2\n                                                              :location (a2 / abroad))))))))", "(c / country\n   :name (n / name\n            :op1 \"China\"))", "(e / endanger-01\n   :ARG0 (c2 / country\n             :name (n2 / name\n                       :op1 \"Japan\"))\n   :ARG1 (p / peace\n            :location (r / region)))", "(a / after\n   :op1 (p2 / pass-01\n            :ARG0 (c2 / country :name (n2 / name :op1 \"Japan\"))\n            :ARG2 (l / law\n                     :mod (c3 / controversy)\n                     :ARG0-of (e2 / expand-01\n                                  :ARG1 (r2 / role\n                                            :poss (m / military\n                                                     :poss c2\n                                                     :location (a2 / abroad)))))))", "(s / say-01\n   :ARG0 (c / country :name (n / name :op1 \"China\")))", "(e / endanger-01\n   :ARG0 (c2 / country :name (n2 / name :op1 \"Japan\")))", "(p2 / pass-01\n    :ARG0 (c2 / country :name (n2 / name :op1 \"Japan\"))\n    :ARG2 (l / law))", "(e2 / expand-01\n    :ARG1 (r2 / role))", "(s / say-01\n   :ARG0 (c / country :name (n / name :op1 \"China\")))", "(e / endanger-01\n   :ARG0 (c2 / country :name (n2 / name :op1 \"Japan\")))", "(p2 / pass-01\n    :ARG0 (c2 / country :name (n2 / name :op1 \"Japan\")))", "(p2 / pass-01\n    :ARG2 (l / law))", "(e2 / expand-01\n    :ARG1 (r2 / role))", "(s / say-01\n   :ARG0 (c / country\n            :name (n / name\n                     :op1 \"China\"))\n   :ARG1 (e / endanger-01\n            :ARG0 (c2 / country\n                      :name (n2 / name\n                                :op1 \"Japan\"))\n            :ARG1 (p / peace)))", "(s / say-01\n   :time (a / after\n            :op1 (p2 / pass-01)))"], "smus": ["China has said --", "Japan is said to be endangering peace in the region.", "said after Japan passed controversial laws expanding the role of its military abroad.", "China (CN)", "Japan is endangering peace in the region.", "After Japan passed controversial laws expanding the role of its military abroad.", "China has said --", "Japan is threatening.", "Japan passed laws.", "Expanding the role", "China has said --", "Japan is threatening.", "Japan passed.", "The laws passed.", "Expanding the role", "China has said that Japan is endangering peace.", "said after the passed."]}, {"instance_id": "pyrxsum-66", "summary": "Celtic restored their 10-point lead at the top of the table after overcoming Inverness Caledonian Thistle.", "summary_trees": ["# ::snt Celtic restored their 10-point lead at the top of the table after overcoming Inverness Caledonian Thistle.\n(r / restore-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Celtic\"))\n      :ARG1 (l / lead-01\n            :ARG0 t\n            :ARG2 (p / point\n                  :quant 10)\n            :location (t2 / top\n                  :part-of (t3 / table)))\n      :time (a / after\n            :op1 (o / overcome-01\n                  :ARG0 t\n                  :ARG1 (t4 / team\n                        :name (n2 / name\n                              :op1 \"Inverness\"\n                              :op2 \"Cedonian\"\n                              :op3 \"Thistle\")))))"], "tree": ["(r / restore-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Celtic\")))", "(r / restore-01\n   :ARG1 (l / lead-01\n            :ARG0 (t / team :name (n / name :op1 \"Celtic\"))\n            :ARG2 (p / point\n                     :quant 10)\n            :location (t2 / top\n                          :part-of (t3 / table))))", "(r / restore-01\n   :time (a / after\n            :op1 (o / overcome-01\n                    :ARG0 (t / team :name (n / name :op1 \"Celtic\"))\n                    :ARG1 (t4 / team\n                              :name (n2 / name\n                                        :op1 \"Inverness\"\n                                        :op2 \"Cedonian\"\n                                        :op3 \"Thistle\")))))", "(t / team\n   :name (n / name\n            :op1 \"Celtic\"))", "(l / lead-01\n   :ARG0 (t / team :name (n / name :op1 \"Celtic\"))\n   :ARG2 (p / point\n            :quant 10)\n   :location (t2 / top\n                 :part-of (t3 / table)))", "(a / after\n   :op1 (o / overcome-01\n           :ARG0 (t / team :name (n / name :op1 \"Celtic\"))\n           :ARG1 (t4 / team\n                     :name (n2 / name\n                               :op1 \"Inverness\"\n                               :op2 \"Cedonian\"\n                               :op3 \"Thistle\"))))", "(r / restore-01\n   :ARG0 (t / team :name (n / name :op1 \"Celtic\")))", "(l / lead-01\n   :ARG0 (t / team :name (n / name :op1 \"Celtic\"))\n   :ARG2 (p / point))", "(o / overcome-01\n   :ARG0 (t / team :name (n / name :op1 \"Celtic\"))\n   :ARG1 (t4 / team :name (n2 / name :op1 \"Inverness\" :op2 \"Cedonian\" :op3 \"Thistle\")))", "(r / restore-01\n   :ARG0 (t / team :name (n / name :op1 \"Celtic\")))", "(l / lead-01\n   :ARG0 (t / team :name (n / name :op1 \"Celtic\")))", "(l / lead-01\n   :ARG2 (p / point))", "(o / overcome-01\n   :ARG0 (t / team :name (n / name :op1 \"Celtic\")))", "(o / overcome-01\n   :ARG1 (t4 / team :name (n2 / name :op1 \"Inverness\" :op2 \"Cedonian\" :op3 \"Thistle\")))", "(r / restore-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Celtic\"))\n   :ARG1 (l / lead-01\n            :ARG0 t\n            :ARG2 (p / point\n                     :quant 10)))", "(r / restore-01\n   :time (a / after\n            :op1 (o / overcome-01)))"], "smus": ["Celtic restored.", "Celtic restored 10 point lead at the top of the table.", "After overcoming Inverness Celtic Thistle, the match restored.", "Celtic", "Celtic are 10th in the table, behind", "After Celtic overcoming Inverness Celtic Thistle", "Celtic restored.", "Celtic are the point leader.", "Celtic overcoming Inverness Celtic Thistle", "Celtic restored.", "Celtic lead", "Leading to the point.", "Celtic are overcoming.", "overcoming Inverness - Celtic Thistle", "Celtic restored their 10 point lead.", "After overcoming, the restoration took place."]}, {"instance_id": "pyrxsum-67", "summary": "England captain Sean O'Loughlin says he would have preferred an Englishman in charge of the national team, but is looking forward to working with Australian Wayne Bennett.", "summary_trees": ["# ::snt England captain Sean O'Loughlin says he would have preferred an Englishman in charge of the national team, but is looking forward to working with Australian Wayne Bennett.\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sean\"\n                  :op2 \"O'Loughlin\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"England\"))\n                  :ARG2 (c / captain)))\n      :ARG1 (c2 / contrast-01\n            :ARG1 (p2 / prefer-01\n                  :ARG0 p\n                  :ARG1 (c3 / charge-08\n                        :ARG1 (m / man\n                              :mod (c4 / country)\n                              :ARG2 (t2 / team\n                                    :mod (n3 / nation))))\n                  :ARG2 (l / look-forward-03\n                        :ARG0 p\n                        :ARG1 (w / work-01\n                              :ARG3 (p3 / person\n                                    :name (n4 / name\n                                          :op1 \"Wayne\"\n                                          :op2 \"Bennett\")\n                                    :mod c4\n                                    :name (n5 / name\n                                          :op1 \"Australia\")))))))"], "tree": ["(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sean\"\n                     :op2 \"O'Loughlin\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (t / team\n                                 :name (n2 / name\n                                           :op1 \"England\"))\n                        :ARG2 (c / captain))))", "(s / say-01\n   :ARG1 (c2 / contrast-01\n             :ARG1 (p2 / prefer-01\n                       :ARG0 (p / person :name (n / name :op1 \"Sean\" :op2 \"O'Loughlin\")))\n                       :ARG1 (c3 / charge-08\n                                 :ARG1 (m / man\n                                          :mod (c4 / country)\n                                          :ARG2 (t2 / team\n                                                    :mod (n3 / nation))))\n                       :ARG2 (l / look-forward-03\n                                :ARG0 p\n                                :ARG1 (w / work-01\n                                         :ARG3 (p3 / person\n                                                   :name (n4 / name\n                                                             :op1 \"Wayne\"\n                                                             :op2 \"Bennett\")\n                                                   :mod c4\n                                                   :name (n5 / name\n                                                             :op1 \"Australia\")))))))", "(p / person\n   :name (n / name\n            :op1 \"Sean\"\n            :op2 \"O'Loughlin\")\n   :ARG0-of (h / have-org-role-91\n               :ARG1 (t / team\n                        :name (n2 / name\n                                  :op1 \"England\"))\n               :ARG2 (c / captain)))", "(c2 / contrast-01\n    :ARG1 (p2 / prefer-01\n              :ARG0 (p / person :name (n / name :op1 \"Sean\" :op2 \"O'Loughlin\")))\n              :ARG1 (c3 / charge-08\n                        :ARG1 (m / man\n                                 :mod (c4 / country)\n                                 :ARG2 (t2 / team\n                                           :mod (n3 / nation))))\n              :ARG2 (l / look-forward-03\n                       :ARG0 p\n                       :ARG1 (w / work-01\n                                :ARG3 (p3 / person\n                                          :name (n4 / name\n                                                    :op1 \"Wayne\"\n                                                    :op2 \"Bennett\")\n                                          :mod c4\n                                          :name (n5 / name\n                                                    :op1 \"Australia\"))))))", "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Sean\" :op2 \"O'Loughlin\"))))", "(c2 / contrast-01\n    :ARG1 (p2 / prefer-01))", "(p2 / prefer-01\n    :ARG0 (p / person :name (n / name :op1 \"Sean\" :op2 \"O'Loughlin\")))\n    :ARG1 (c3 / charge-08))", "(c3 / charge-08\n    :ARG1 (m / man))", "(l / look-forward-03\n   :ARG0 (p / person :name (n / name :op1 \"Sean\" :op2 \"O'Loughlin\")))\n   :ARG1 (w / work-01))", "(w / work-01\n   :ARG3 (p3 / person :name (n4 / name :op1 \"Wayne\" :op2 \"Bennett\"))))", "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Sean\" :op2 \"O'Loughlin\"))))", "(c2 / contrast-01\n    :ARG1 (p2 / prefer-01))", "(p2 / prefer-01\n    :ARG0 (p / person :name (n / name :op1 \"Sean\" :op2 \"O'Loughlin\"))))", "(p2 / prefer-01\n    :ARG1 (c3 / charge-08))", "(c3 / charge-08\n    :ARG1 (m / man))", "(l / look-forward-03\n   :ARG0 (p / person :name (n / name :op1 \"Sean\" :op2 \"O'Loughlin\"))))", "(l / look-forward-03\n   :ARG1 (w / work-01))", "(w / work-01\n   :ARG3 (p3 / person :name (n4 / name :op1 \"Wayne\" :op2 \"Bennett\"))))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sean\"\n                     :op2 \"O'Loughlin\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (t / team\n                              :name (n2 / name\n                                        :op1 \"England\"))\n                     :ARG2 (c / captain)))\n   :ARG1 (c2 / contrast-01\n             :ARG1 (p2 / prefer-01\n                       :ARG0 p\n                       :ARG1 (c3 / charge-08\n                                 :ARG1 (m / man\n                                          :mod (c4 / country)\n                                          :ARG2 (t2 / team\n                                                    :mod (n3 / nation))))\n                       :ARG2 (l / look-forward-03\n                                :ARG0 p\n                                :ARG1 (w / work-01\n                                         :ARG3 (p3 / person\n                                                   :name (n4 / name\n                                                             :op1 \"Wayne\"\n                                                             :op2 \"Bennett\")\n                                                   :mod c4\n                                                   :name (n5 / name\n                                                             :op1 \"Australia\")))))))", "(s / say-01)"], "smus": ["England captain Sean O'Loughlin says --", "Sean O'Loughlin says he would have preferred the countryman in charge of the national team but is looking forward to working with Australian Wayne Bennett.", "England captain Sean O'Loughlin", "Sean O'Loughlin would have preferred the country man in charge of the national team, but he was looking forward to working with Australian Wayne Bennett.", "Sean O'Loughlin says --", "But preferred.", "Sean O'Loughlin would have preferred the charge.", "The man was in charge.", "Sean O'Loughlin is looking forward to working.", "Working with Wayne Bennett.", "Sean O'Loughlin says --", "But preferred.", "Sean O'Loughlin preferred.", "The charge would be preferred.", "The man was in charge.", "Sean O'Loughlin is looking forward to.", "Looking forward to working.", "Working with Wayne Bennett.", "England captain Sean O'Loughlin says he would have preferred a countryman in charge of a national team but is looking forward to working with Australian Wayne Bennett.", "says."]}, {"instance_id": "pyrxsum-68", "summary": "Promotion-chasing Stevenage were held to a by Cambridge in League Two.", "summary_trees": ["# ::snt Promotion-chasing Stevenage were held to a by Cambridge in League Two.\n(h / hold-04\n      :ARG0 (u / university\n            :name (n / name\n                  :op1 \"Cambridge\"))\n      :ARG1 (t / team\n            :name (n2 / name\n                  :op1 \"Stevenage\")\n            :ARG0-of (c / chase-01\n                  :ARG1 (p / promote-01\n                        :ARG1 t)))\n      :location (l / league\n            :name (n3 / name\n                  :op1 \"League\"\n                  :op2 \"Two\")))"], "tree": ["(h / hold-04\n   :ARG0 (u / university\n            :name (n / name\n                     :op1 \"Cambridge\")))", "(h / hold-04\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Stevenage\")\n            :ARG0-of (c / chase-01\n                        :ARG1 (p / promote-01\n                                 :ARG1 t))))", "(h / hold-04\n   :location (l / league\n                :name (n3 / name\n                          :op1 \"League\"\n                          :op2 \"Two\")))", "(u / university\n   :name (n / name\n            :op1 \"Cambridge\"))", "(t / team\n   :name (n2 / name\n             :op1 \"Stevenage\")\n   :ARG0-of (c / chase-01\n               :ARG1 (p / promote-01\n                        :ARG1 t)))", "(l / league\n   :name (n3 / name\n             :op1 \"League\"\n             :op2 \"Two\"))", "(h / hold-04\n   :ARG0 (u / university :name (n / name :op1 \"Cambridge\")))", "(c / chase-01\n   :ARG1 (p / promote-01))", "(p / promote-01\n   :ARG1 (t / team :name (n2 / name :op1 \"Stevenage\"))))", "(h / hold-04\n   :ARG0 (u / university :name (n / name :op1 \"Cambridge\")))", "(c / chase-01\n   :ARG1 (p / promote-01))", "(p / promote-01\n   :ARG1 (t / team :name (n2 / name :op1 \"Stevenage\"))))", "(h / hold-04\n   :ARG0 (u / university\n            :name (n / name\n                     :op1 \"Cambridge\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Stevenage\")\n            :ARG0 (c / chase-01\n                     :ARG1 (p / promote-01\n                              :ARG1 t))))", "(h / hold-04\n   :location (l / league\n                :name (n3 / name\n                          :op1 \"League\"\n                          :op2 \"Two\")))"], "smus": ["Cambridge University has held.", "Stevenage are held to be the ones chasing promotion.", "held in League Two.", "Cambridge", "Stevenage are chasing promotion.", "League Two", "Cambridge University has held.", "chasing promotion", "Stevenage promotion.", "Cambridge University has held.", "chasing promotion", "Stevenage promotion.", "Cambridge has held Stevenage to a promotion chase.", "held in League Two."]}, {"instance_id": "pyrxsum-69", "summary": "Yet again, we are looking at shocking pictures of a plane crash.", "summary_trees": ["# ::snt Yet again, we are looking at shocking pictures of a plane crash.\n(l / look-01\n      :ARG0 (w / we)\n      :ARG1 (p / picture\n            :topic (c / crash-01\n                  :ARG1 (p2 / plane))\n            :ARG0-of (s / shock-01))\n      :mod (a / again\n            :mod (y / yet)))"], "tree": ["(l / look-01\n   :ARG0 (w / we))", "(l / look-01\n   :ARG1 (p / picture\n            :topic (c / crash-01\n                      :ARG1 (p2 / plane))\n            :ARG0-of (s / shock-01)))", "(l / look-01\n   :mod (a / again\n           :mod (y / yet)))", "(p / picture\n   :topic (c / crash-01\n             :ARG1 (p2 / plane))\n   :ARG0-of (s / shock-01))", "(a / again\n   :mod (y / yet))", "(l / look-01\n   :ARG0 (w / we))", "(c / crash-01\n   :ARG1 (p2 / plane))", "(s / shock-01)", "(l / look-01\n   :ARG0 (w / we))", "(c / crash-01\n   :ARG1 (p2 / plane))", "(l / look-01\n   :ARG0 (w / we)\n   :ARG1 (p / picture\n            :topic (c / crash-01\n                      :ARG1 (p2 / plane))\n            :ARG0 (s / shock-01))\n   :mod (a / again\n           :mod (y / yet)))", "(l / look-01\n   :mod (a / again\n           :mod (y / yet)))"], "smus": ["We're looking.", "Looking at the shocking pictures of the plane crash.", "Looking yet again.", "Shocking pictures of plane crash.", "Yet again.", "We're looking.", "The plane crashed.", "Shocking.", "We're looking.", "The plane crashed.", "Yet again, we are looking at the shocking pictures of the plane crash.", "Looking yet again."]}, {"instance_id": "pyrxsum-70", "summary": "Prime Minister David Cameron will later attempt to halt the civil war in his party caused by Iain Duncan Smith's resignation from the cabinet.", "summary_trees": ["# ::snt Prime Minister David Cameron will later attempt to halt the civil war in his party caused by Iain Duncan Smith's resignation from the cabinet.\n(a / attempt-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"David\"\n                  :op2 \"Cameron\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (m / minister\n                        :mod (p2 / prime))))\n      :ARG1 (h2 / halt-01\n            :ARG0 p\n            :ARG1 (w / war-01\n                  :mod (c / civil)\n                  :location (p3 / party\n                        :poss p)\n                  :ARG1-of (c2 / cause-01\n                        :ARG0 (r / resign-01\n                              :ARG0 (p4 / person\n                                    :name (n2 / name\n                                          :op1 \"Iain\"\n                                          :op2 \"Duncan\"\n                                          :op3 \"Smith\"))\n                              :ARG1 (c3 / cabinet)))))\n      :time (a2 / after))"], "tree": ["(a / attempt-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Cameron\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG2 (m / minister\n                                 :mod (p2 / prime)))))", "(a / attempt-01\n   :ARG1 (h2 / halt-01\n             :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Cameron\")))\n             :ARG1 (w / war-01\n                      :mod (c / civil)\n                      :location (p3 / party\n                                    :poss p)\n                      :ARG1-of (c2 / cause-01\n                                   :ARG0 (r / resign-01\n                                            :ARG0 (p4 / person\n                                                      :name (n2 / name\n                                                                :op1 \"Iain\"\n                                                                :op2 \"Duncan\"\n                                                                :op3 \"Smith\"))\n                                            :ARG1 (c3 / cabinet))))))", "(a / attempt-01\n   :time (a2 / after))", "(p / person\n   :name (n / name\n            :op1 \"David\"\n            :op2 \"Cameron\")\n   :ARG0-of (h / have-org-role-91\n               :ARG2 (m / minister\n                        :mod (p2 / prime))))", "(h2 / halt-01\n    :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Cameron\")))\n    :ARG1 (w / war-01\n             :mod (c / civil)\n             :location (p3 / party\n                           :poss p)\n             :ARG1-of (c2 / cause-01\n                          :ARG0 (r / resign-01\n                                   :ARG0 (p4 / person\n                                             :name (n2 / name\n                                                       :op1 \"Iain\"\n                                                       :op2 \"Duncan\"\n                                                       :op3 \"Smith\"))\n                                   :ARG1 (c3 / cabinet)))))", "(a / attempt-01\n   :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Cameron\"))))", "(h2 / halt-01\n    :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Cameron\")))\n    :ARG1 (w / war-01))", "(w / war-01\n   :mod (c / civil))", "(c2 / cause-01\n    :ARG0 (r / resign-01))", "(r / resign-01\n   :ARG0 (p4 / person :name (n2 / name :op1 \"Iain\" :op2 \"Duncan\" :op3 \"Smith\")))", "(a / attempt-01\n   :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Cameron\"))))", "(h2 / halt-01\n    :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Cameron\"))))", "(h2 / halt-01\n    :ARG1 (w / war-01))", "(w / war-01\n   :mod (c / civil))", "(c2 / cause-01\n    :ARG0 (r / resign-01))", "(r / resign-01\n   :ARG0 (p4 / person :name (n2 / name :op1 \"Iain\" :op2 \"Duncan\" :op3 \"Smith\")))", "(a / attempt-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Cameron\")\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m / minister\n                              :mod (p2 / prime))))\n   :ARG1 (h2 / halt-01\n             :ARG0 p\n             :ARG1 (w / war-01\n                      :mod (c / civil)\n                      :ARG1 (c2 / cause-01\n                                :ARG0 (r / resign-01\n                                         :ARG0 (p4 / person\n                                                   :name (n2 / name\n                                                             :op1 \"Iain\"\n                                                             :op2 \"Duncan\"\n                                                             :op3 \"Smith\"))\n                                         :ARG1 (c3 / cabinet))))))", "(a / attempt-01\n   :time (a2 / after))"], "smus": ["Prime Minister David Cameron will attempt.", "David Cameron will attempt to halt the civil war in his party caused by the resignation of Iain Duncan Smith from the cabinet.", "An attempt later.", "Prime Minister David Cameron", "David Cameron will halt the civil war in his party caused by the resignation of Iain Duncan Smith from the cabinet.", "David Cameron will attempt.", "David Cameron will halt the war.", "Civil war.", "resigning caused.", "Ian Duncan Smith's resignation", "David Cameron will attempt.", "David Cameron will halt.", "halt the war.", "Civil war.", "resigning caused.", "Ian Duncan Smith's resignation", "Prime Minister David Cameron will attempt to halt the civil war caused by Iain Duncan Smith's resignation from the cabinet.", "An attempt later."]}, {"instance_id": "pyrxsum-71", "summary": "The percentage of Americans living in poverty is statistically unchanged from 2010's record high, even as household income fell, a US Census report says.", "summary_trees": ["# ::snt The percentage of Americans living in poverty is statistically unchanged from 2010's record high, even as household income fell, a US Census report says.\n(s / say-01\n      :ARG0 (r / report-01\n            :ARG0 (g / government-organization\n                  :name (n / name\n                        :op1 \"US\"\n                        :op2 \"Census\")))\n      :ARG1 (c / change-01\n            :polarity -\n            :ARG1 (p / percentage\n                  :quant-of (p2 / person\n                        :mod (c2 / country\n                              :name (n2 / name\n                                    :op1 \"America\"))\n                        :ARG0-of (l / live-01\n                              :manner (p3 / poor))))\n            :ARG2 (h / high-02\n                  :ARG1 p\n                  :mod (r2 / record)\n                  :time (d / date-entity\n                        :year 2010))\n            :mod (s2 / statistical)\n            :concession (e / even-as\n                  :op1 (f / fall-01\n                        :ARG1 (ii / income\n                              :mod (h2 / household))))))"], "tree": ["(s / say-01\n   :ARG0 (r / report-01\n            :ARG0 (g / government-organization\n                     :name (n / name\n                              :op1 \"US\"\n                              :op2 \"Census\"))))", "(s / say-01\n   :ARG1 (c / change-01\n            :polarity -\n            :ARG1 (p / percentage\n                     :quant-of (p2 / person\n                                   :mod (c2 / country\n                                            :name (n2 / name\n                                                      :op1 \"America\"))\n                                   :ARG0-of (l / live-01\n                                               :manner (p3 / poor))))\n            :ARG2 (h / high-02\n                     :ARG1 p\n                     :mod (r2 / record)\n                     :time (d / date-entity\n                              :year 2010))\n            :mod (s2 / statistical)\n            :concession (e / even-as\n                           :op1 (f / fall-01\n                                   :ARG1 (ii / income\n                                             :mod (h2 / household))))))", "(r / report-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"US\"\n                     :op2 \"Census\")))", "(c / change-01\n   :polarity -\n   :ARG1 (p / percentage\n            :quant-of (p2 / person\n                          :mod (c2 / country\n                                   :name (n2 / name\n                                             :op1 \"America\"))\n                          :ARG0-of (l / live-01\n                                      :manner (p3 / poor))))\n   :ARG2 (h / high-02\n            :ARG1 p\n            :mod (r2 / record)\n            :time (d / date-entity\n                     :year 2010))\n   :mod (s2 / statistical)\n   :concession (e / even-as\n                  :op1 (f / fall-01\n                          :ARG1 (ii / income\n                                    :mod (h2 / household)))))", "(s / say-01\n   :ARG0 (r / report-01))", "(r / report-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"US\" :op2 \"Census\")))", "(c / change-01\n   :polarity -\n   :ARG1 (p / percentage))", "(l / live-01\n   :manner (p3 / poor))", "(h / high-02\n   :ARG1 (p / percentage)\n   :mod (r2 / record))", "(f / fall-01\n   :ARG1 (ii / income))", "(s / say-01\n   :ARG0 (r / report-01))", "(r / report-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"US\" :op2 \"Census\")))", "(c / change-01\n   :polarity -)", "(c / change-01\n   :ARG1 (p / percentage))", "(l / live-01\n   :manner (p3 / poor))", "(h / high-02\n   :ARG1 (p / percentage))", "(h / high-02\n   :mod (r2 / record))", "(f / fall-01\n   :ARG1 (ii / income))", "(s / say-01\n   :ARG0 (r / report-01\n            :ARG0 (g / government-organization\n                     :name (n / name\n                              :op1 \"US\"\n                              :op2 \"Census\")))\n   :ARG1 (c / change-01\n            :polarity -\n            :ARG1 (p / percentage\n                     :quant (p2 / person\n                                :mod (c2 / country\n                                         :name (n2 / name\n                                                   :op1 \"America\"))\n                                :ARG0 (l / live-01\n                                         :manner (p3 / poor))))\n            :ARG2 (h / high-02\n                     :ARG1 p\n                     :mod (r2 / record))\n            :mod (s2 / statistical)\n            :concession (e / even-as\n                           :op1 (f / fall-01\n                                   :ARG1 (ii / income\n                                             :mod (h2 / household))))))", "(s / say-01)"], "smus": ["According to the US Census report --", "The percentage of Americans living in poverty hasn't statistically changed from the record high of 2010 even as household income fell.", "The US Census report:", "Even as household income fell, the percentage of Americans living in poverty didn't change statistically to a record high in 2010.", "According to the report --", "The US Census report:", "The percentage is unchanged.", "Living in poverty.", "The percentage is a record high.", "Income fell.", "According to the report --", "The US Census report:", "Unchangeable.", "The percentage is changing.", "Living in poverty.", "The percentage is high.", "Record high.", "Income fell.", "According to a US Census report, even as household income fell, the percentage of Americans living in poverty hasn't statistically changed from record high to record high.", "says."]}, {"instance_id": "pyrxsum-72", "summary": "A 34-year-old woman who was injured in an attack by a knifeman on a Swiss train has died in hospital, police say.", "summary_trees": ["# ::snt A 34-year-old woman who was injured in an attack by a knifeman on a Swiss train has died in hospital, police say.\n(s / say-01\n      :ARG0 (p / police)\n      :ARG1 (d / die-01\n            :ARG1 (w / woman\n                  :ARG1-of (ii / injure-01\n                        :ARG0 (a / attack-01\n                              :ARG0 (k / knifeman)\n                              :ARG1 w\n                              :location (t / train\n                                    :mod (c / country\n                                          :name (n / name\n                                                :op1 \"Switzerland\")))))\n                  :age (t2 / temporal-quantity\n                        :quant 34\n                        :unit (y / year)))\n            :location (h / hospital)))"], "tree": ["(s / say-01\n   :ARG0 (p / police))", "(s / say-01\n   :ARG1 (d / die-01\n            :ARG1 (w / woman\n                     :ARG1-of (ii / injure-01\n                                  :ARG0 (a / attack-01\n                                           :ARG0 (k / knifeman)\n                                           :ARG1 w\n                                           :location (t / train\n                                                        :mod (c / country\n                                                                :name (n / name\n                                                                         :op1 \"Switzerland\")))))\n                     :age (t2 / temporal-quantity\n                              :quant 34\n                              :unit (y / year)))\n            :location (h / hospital)))", "(d / die-01\n   :ARG1 (w / woman\n            :ARG1-of (ii / injure-01\n                         :ARG0 (a / attack-01\n                                  :ARG0 (k / knifeman)\n                                  :ARG1 w\n                                  :location (t / train\n                                               :mod (c / country\n                                                       :name (n / name\n                                                                :op1 \"Switzerland\")))))\n            :age (t2 / temporal-quantity\n                     :quant 34\n                     :unit (y / year)))\n   :location (h / hospital))", "(s / say-01\n   :ARG0 (p / police))", "(d / die-01\n   :ARG1 (w / woman))", "(ii / injure-01\n    :ARG0 (a / attack-01))", "(a / attack-01\n   :ARG0 (k / knifeman))", "(s / say-01\n   :ARG0 (p / police))", "(d / die-01\n   :ARG1 (w / woman))", "(ii / injure-01\n    :ARG0 (a / attack-01))", "(a / attack-01\n   :ARG0 (k / knifeman))", "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (d / die-01\n            :ARG1 (w / woman\n                     :ARG1 (ii / injure-01\n                               :ARG0 (a / attack-01\n                                        :ARG0 (k / knifeman)\n                                        :ARG1 w))\n                     :age (t2 / temporal-quantity\n                              :quant 34\n                              :unit (y / year)))))", "(s / say-01)"], "smus": ["Police say.", "A 34-year-old woman who was injured in a knifeman's attack on a Swiss train has died in hospital, officials say.", "A 34-year-old woman who was injured in a knifeman's attack on a Swiss train died in hospital.", "Police say.", "The woman died.", "The attack injured.", "The knifeman attacked.", "Police say.", "The woman died.", "The attack injured.", "The knifeman attacked.", "Police say a 34 year old woman was killed in the knifeman attack.", "Say."]}, {"instance_id": "pyrxsum-73", "summary": "Boeing has shown off its \"space bins\" that can hold 50% more luggage than existing designs.", "summary_trees": ["# ::snt Boeing has shown off its \"space bins\" that can hold 50% more luggage than existing designs.\n(s / show-off-04\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Boeing\"))\n      :ARG1 (b / bin\n            :mod (s2 / space)\n            :poss c\n            :ARG0-of (h / hold-01\n                  :ARG1 (l / luggage\n                        :ARG1-of (h2 / have-quant-91\n                              :ARG3 (m / more\n                                    :quant (p / percentage-entity\n                                          :value 50))\n                              :ARG4 (l2 / luggage\n                                    :ARG1-of (d / design-01\n                                          :ARG1-of (e / exist-01)))))\n                  :ARG1-of (p2 / possible-01))))"], "tree": ["(s / show-off-04\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Boeing\")))", "(s / show-off-04\n   :ARG1 (b / bin\n            :mod (s2 / space)\n            :poss (c / company :name (n / name :op1 \"Boeing\"))\n            :ARG0-of (h / hold-01\n                        :ARG1 (l / luggage\n                                 :ARG1-of (h2 / have-quant-91\n                                              :ARG3 (m / more\n                                                       :quant (p / percentage-entity\n                                                                 :value 50))\n                                              :ARG4 (l2 / luggage\n                                                        :ARG1-of (d / design-01\n                                                                    :ARG1-of (e / exist-01)))))\n                        :ARG1-of (p2 / possible-01))))", "(c / company\n   :name (n / name\n            :op1 \"Boeing\"))", "(b / bin\n   :mod (s2 / space)\n   :poss (c / company :name (n / name :op1 \"Boeing\"))\n   :ARG0-of (h / hold-01\n               :ARG1 (l / luggage\n                        :ARG1-of (h2 / have-quant-91\n                                     :ARG3 (m / more\n                                              :quant (p / percentage-entity\n                                                        :value 50))\n                                     :ARG4 (l2 / luggage\n                                               :ARG1-of (d / design-01\n                                                           :ARG1-of (e / exist-01)))))\n               :ARG1-of (p2 / possible-01)))", "(s / show-off-04\n   :ARG0 (c / company :name (n / name :op1 \"Boeing\")))", "(h / hold-01\n   :ARG1 (l / luggage))", "(d / design-01)", "(e / exist-01)", "(p2 / possible-01)", "(s / show-off-04\n   :ARG0 (c / company :name (n / name :op1 \"Boeing\")))", "(h / hold-01\n   :ARG1 (l / luggage))", "(s / show-off-04\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Boeing\"))\n   :ARG1 (b / bin\n            :mod (s2 / space)\n            :poss c\n            :ARG0 (h / hold-01\n                     :ARG1 (l / luggage\n                              :ARG1 (h2 / have-quant-91\n                                        :ARG3 (m / more\n                                                 :quant (p / percentage-entity\n                                                           :value 50))\n                                        :ARG4 (l2 / luggage\n                                                  :ARG1 (d / design-01\n                                                           :ARG1 (e / exist-01)))))\n                     :ARG1 (p2 / possible-01))))", "(s / show-off-04)"], "smus": ["Boeing has shown off.", "Boeing's space bins were shown off, which could hold 50 percent more luggage than existing designs.", "Boeing", "Boeing's space bins may hold 50 percent more luggage than existing designs.", "Boeing has shown off.", "Hold luggage.", "Designs", "Existing.", "Maybe.", "Boeing has shown off.", "Hold luggage.", "Boeing has shown off its space bins that can hold 50 percent more luggage than existing designs.", "Showed off."]}, {"instance_id": "pyrxsum-74", "summary": "Australia is a step closer to exporting live cattle to China, opening a new market for its farmers.", "summary_trees": ["# ::snt Australia is a step closer to exporting live cattle to China, opening a new market for its farmers.\n(c / close-06\n      :ARG1 (c2 / country\n            :name (n / name\n                  :op1 \"Australia\"))\n      :ARG2 (e / export-01\n            :ARG0 c2\n            :ARG1 (c3 / cattle\n                  :mod (l / live))\n            :ARG2 (c4 / country\n                  :name (n2 / name\n                        :op1 \"China\")))\n      :ARG2-of (h / have-degree-91\n            :ARG1 c2\n            :ARG3 (m / more))\n      :ARG0-of (o / open-01\n            :ARG1 (m2 / market\n                  :ARG1-of (n3 / new-01))\n            :ARG3 (p / person\n                  :ARG0-of (f / farm-01)\n                  :poss c2)))"], "tree": ["(c / close-06\n   :ARG1 (c2 / country\n             :name (n / name\n                      :op1 \"Australia\")))", "(c / close-06\n   :ARG2 (e / export-01\n            :ARG0 (c2 / country :name (n / name :op1 \"Australia\"))\n            :ARG1 (c3 / cattle\n                      :mod (l / live))\n            :ARG2 (c4 / country\n                      :name (n2 / name\n                                :op1 \"China\"))))", "(c / close-06\n   :ARG2-of (h / have-degree-91\n               :ARG1 (c2 / country :name (n / name :op1 \"Australia\"))\n               :ARG3 (m / more)))", "(c / close-06\n   :ARG0-of (o / open-01\n               :ARG1 (m2 / market\n                         :ARG1-of (n3 / new-01))\n               :ARG3 (p / person\n                        :ARG0-of (f / farm-01)\n                        :poss (c2 / country :name (n / name :op1 \"Australia\")))))", "(c2 / country\n    :name (n / name\n             :op1 \"Australia\"))", "(e / export-01\n   :ARG0 (c2 / country :name (n / name :op1 \"Australia\"))\n   :ARG1 (c3 / cattle\n             :mod (l / live))\n   :ARG2 (c4 / country\n             :name (n2 / name\n                       :op1 \"China\")))", "(h / have-degree-91\n   :ARG1 (c2 / country :name (n / name :op1 \"Australia\"))\n   :ARG3 (m / more))", "(o / open-01\n   :ARG1 (m2 / market\n             :ARG1-of (n3 / new-01))\n   :ARG3 (p / person\n            :ARG0-of (f / farm-01)\n            :poss (c2 / country :name (n / name :op1 \"Australia\"))))", "(c / close-06\n   :ARG1 (c2 / country :name (n / name :op1 \"Australia\")))", "(e / export-01\n   :ARG0 (c2 / country :name (n / name :op1 \"Australia\"))\n   :ARG1 (c3 / cattle))", "(o / open-01\n   :ARG1 (m2 / market))", "(n3 / new-01)", "(f / farm-01)", "(c / close-06\n   :ARG1 (c2 / country :name (n / name :op1 \"Australia\")))", "(e / export-01\n   :ARG0 (c2 / country :name (n / name :op1 \"Australia\")))", "(e / export-01\n   :ARG1 (c3 / cattle))", "(o / open-01\n   :ARG1 (m2 / market))", "(c / close-06\n   :ARG1 (c2 / country\n             :name (n / name\n                      :op1 \"Australia\"))\n   :ARG2 (e / export-01\n            :ARG0 c2\n            :ARG1 (c3 / cattle\n                      :mod (l / live))\n            :ARG2 (c4 / country\n                      :name (n2 / name\n                                :op1 \"China\")))\n   :ARG2 (h / have-degree-91\n            :ARG1 c2\n            :ARG3 (m / more))\n   :ARG0 (o / open-01\n            :ARG1 (m2 / market\n                      :ARG1 (n3 / new-01))\n            :ARG3 (p / person\n                     :ARG0 (f / farm-01)\n                     :poss c2)))", "(c / close-06)"], "smus": ["Australia is close.", "Australia is closing its live cattle exports to China.", "Closer to Australia.", "Close opening a new market for Australia's farmers.", "Australia (AU)", "Australia is exporting live cattle to China.", "Australia is more.", "Opening a new market for Australian farmers.", "Australia is close.", "Australia is exporting cattle.", "Opening the market.", "New.", "Farmers.", "Australia is close.", "Australia is exporting.", "Exporting cattle.", "Opening the market.", "Opening a new market for Australian farmers, Australia is closer to exporting live cattle to China.", "Close."]}, {"instance_id": "pyrxsum-75", "summary": "Anthony Joshua's world title bout with Wladimir Klitschko comes at the \"perfect time\", says former undisputed heavyweight champion Lennox Lewis.", "summary_trees": ["# ::snt Anthony Joshua's world title bout with Wladimir Klitschko comes at the \"perfect time\", says former undisputed heavyweight champion Lennox Lewis.\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lennox\"\n                  :op2 \"Lewis\"))\n      :ARG1 (c / come-04\n            :ARG1 (b / bout-03\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Anthony\"\n                              :op2 \"Joshua\"))\n                  :ARG1 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Wladimir\"\n                              :op2 \"Klitschko\"))\n                  :ARG3 (t / title\n                        :mod (w / world)))\n            :ARG3 (t2 / time\n                  :ARG1-of (p4 / perfect-02)))\n      :ARG2 (c2 / champion\n            :mod (h / heavyweight)\n            :ARG1-of (d / dispute-01\n                  :polarity -)\n            :domain p2\n            :time (f / former)))"], "tree": ["(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lennox\"\n                     :op2 \"Lewis\")))", "(s / say-01\n   :ARG1 (c / come-04\n            :ARG1 (b / bout-03\n                     :ARG0 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Anthony\"\n                                         :op2 \"Joshua\"))\n                     :ARG1 (p3 / person\n                               :name (n3 / name\n                                         :op1 \"Wladimir\"\n                                         :op2 \"Klitschko\"))\n                     :ARG3 (t / title\n                              :mod (w / world)))\n            :ARG3 (t2 / time\n                      :ARG1-of (p4 / perfect-02))))", "(s / say-01\n   :ARG2 (c2 / champion\n             :mod (h / heavyweight)\n             :ARG1-of (d / dispute-01\n                         :polarity -)\n             :domain (p2 / person :name (n2 / name :op1 \"Anthony\" :op2 \"Joshua\"))\n             :time (f / former)))", "(p / person\n   :name (n / name\n            :op1 \"Lennox\"\n            :op2 \"Lewis\"))", "(c / come-04\n   :ARG1 (b / bout-03\n            :ARG0 (p2 / person\n                      :name (n2 / name\n                                :op1 \"Anthony\"\n                                :op2 \"Joshua\"))\n            :ARG1 (p3 / person\n                      :name (n3 / name\n                                :op1 \"Wladimir\"\n                                :op2 \"Klitschko\"))\n            :ARG3 (t / title\n                     :mod (w / world)))\n   :ARG3 (t2 / time\n             :ARG1-of (p4 / perfect-02)))", "(c2 / champion\n    :mod (h / heavyweight)\n    :ARG1-of (d / dispute-01\n                :polarity -)\n    :domain (p2 / person :name (n2 / name :op1 \"Anthony\" :op2 \"Joshua\"))\n    :time (f / former))", "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Lennox\" :op2 \"Lewis\")))", "(c / come-04\n   :ARG1 (b / bout-03))", "(b / bout-03\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Anthony\" :op2 \"Joshua\")))", "(p4 / perfect-02)", "(d / dispute-01\n   :polarity -)", "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Lennox\" :op2 \"Lewis\")))", "(c / come-04\n   :ARG1 (b / bout-03))", "(b / bout-03\n   :ARG0 (p2 / person :name (n2 / name :op1 \"Anthony\" :op2 \"Joshua\")))", "(d / dispute-01\n   :polarity -)", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Lennox\"\n                     :op2 \"Lewis\"))\n   :ARG1 (c / come-04\n            :ARG1 (b / bout-03\n                     :ARG0 (p2 / person\n                               :name (n2 / name\n                                         :op1 \"Anthony\"\n                                         :op2 \"Joshua\"))\n                     :ARG1 (p3 / person\n                               :name (n3 / name\n                                         :op1 \"Wladimir\"\n                                         :op2 \"Klitschko\"))\n                     :ARG3 (t / title\n                              :mod (w / world)))\n            :ARG3 (t2 / time\n                      :ARG1 (p4 / perfect-02)))\n   :ARG2 (c2 / champion\n             :mod (h / heavyweight)\n             :ARG1 (d / dispute-01\n                      :polarity -)\n             :domain p2))", "(s / say-01)"], "smus": ["\"Lennox Lewis says --", "\"Anthony Joshua's bout with Vladimir Klitschko for the world title comes at a perfect time,\" says Krutschko.", "Anthony Joshua is the former undisputed heavyweight champion.", "Lenox Lewis", "Anthony Joshua's bout with Vladimir Klitschko for the world title comes at a perfect time.", "Anthony Joshua is the former undisputed heavyweight champion.", "\"Lennox Lewis says --", "It's a bout.", "Anthony Joshua's bout", "Perfect.", "Undisputed.", "\"Lennox Lewis says --", "It's a bout.", "Anthony Joshua's bout", "Undisputed.", "Lenox Lewis says the world heavyweight title bout between Anthony Joshua and Vladimir Klitschko comes at a perfect time as the undisputed heavyweight champion.", "says."]}, {"instance_id": "pyrxsum-76", "summary": "People with hidden health conditions are being offered \"Please offer me a seat\" badges in a bid to help ease their suffering on London transport.", "summary_trees": ["# ::snt People with hidden health conditions are being offered \"Please offer me a seat\" badges in a bid to help ease their suffering on London transport.\n(o / offer-01\n      :ARG1 (b / badge\n            :ARG0-of (s / say-01\n                  :ARG1 (o2 / offer-01\n                        :mode imperative\n                        :polite +\n                        :ARG0 (y / you)\n                        :ARG1 (s2 / seat)\n                        :ARG3 (p / person)))\n            :ARG3 p\n            :ARG0-of (h / have-03\n                  :ARG1 (c / condition\n                        :mod (h2 / health)\n                        :ARG1-of (h3 / hide-01))))\n      :purpose (b2 / bid-01\n            :ARG0 p\n            :ARG1 (h4 / help-01\n                  :ARG0 p\n                  :ARG1 (e / ease-02\n                        :ARG0 p\n                        :ARG1 (s3 / suffer-01\n                              :ARG0 p\n                              :location (t / transport\n                                    :location (c2 / city\n                                          :name (n / name\n                                                :op1 \"London\"))))))))"], "tree": ["(o / offer-01\n   :ARG1 (b / badge\n            :ARG0-of (s / say-01\n                        :ARG1 (o2 / offer-01\n                                  :mode imperative\n                                  :polite +\n                                  :ARG0 (y / you)\n                                  :ARG1 (s2 / seat)\n                                  :ARG3 (p / person\n                                           :ARG3-of b)))\n            :ARG0-of (h / have-03\n                        :ARG1 (c / condition\n                                 :mod (h2 / health)\n                                 :ARG1-of (h3 / hide-01)))))", "(o / offer-01\n   :purpose (b2 / bid-01\n                :ARG0 (p / person)\n                :ARG1 (h4 / help-01\n                          :ARG0 p\n                          :ARG1 (e / ease-02\n                                   :ARG0 p\n                                   :ARG1 (s3 / suffer-01\n                                             :ARG0 p\n                                             :location (t / transport\n                                                          :location (c2 / city\n                                                                        :name (n / name\n                                                                                 :op1 \"London\"))))))))", "(b / badge\n   :ARG0-of (s / say-01\n               :ARG1 (o2 / offer-01\n                         :mode imperative\n                         :polite +\n                         :ARG0 (y / you)\n                         :ARG1 (s2 / seat)\n                         :ARG3 (p / person\n                                  :ARG3-of b)))\n   :ARG0-of (h / have-03\n               :ARG1 (c / condition\n                        :mod (h2 / health)\n                        :ARG1-of (h3 / hide-01))))", "(b2 / bid-01\n    :ARG0 (p / person)\n    :ARG1 (h4 / help-01\n              :ARG0 p\n              :ARG1 (e / ease-02\n                       :ARG0 p\n                       :ARG1 (s3 / suffer-01\n                                 :ARG0 p\n                                 :location (t / transport\n                                              :location (c2 / city\n                                                            :name (n / name\n                                                                     :op1 \"London\")))))))", "(o / offer-01\n   :ARG1 (b / badge))", "(s / say-01\n   :ARG1 (o2 / offer-01))", "(o2 / offer-01\n    :mode imperative\n    :polite +\n    :ARG0 (y / you))", "(h / have-03\n   :ARG1 (c / condition))", "(h3 / hide-01)", "(b2 / bid-01\n    :ARG0 (p / person)\n    :ARG1 (h4 / help-01))", "(h4 / help-01\n    :ARG0 (p / person)\n    :ARG1 (e / ease-02))", "(e / ease-02\n   :ARG0 (p / person)\n   :ARG1 (s3 / suffer-01))", "(s3 / suffer-01\n    :ARG0 (p / person)\n    :location (t / transport))", "(o / offer-01\n   :ARG1 (b / badge))", "(s / say-01\n   :ARG1 (o2 / offer-01))", "(o2 / offer-01\n    :mode imperative)", "(o2 / offer-01\n    :polite +)", "(o2 / offer-01\n    :ARG0 (y / you))", "(h / have-03\n   :ARG1 (c / condition))", "(b2 / bid-01\n    :ARG0 (p / person))", "(b2 / bid-01\n    :ARG1 (h4 / help-01))", "(h4 / help-01\n    :ARG0 (p / person))", "(h4 / help-01\n    :ARG1 (e / ease-02))", "(e / ease-02\n   :ARG0 (p / person))", "(e / ease-02\n   :ARG1 (s3 / suffer-01))", "(s3 / suffer-01\n    :ARG0 (p / person))", "(s3 / suffer-01\n    :location (t / transport))", "(o / offer-01\n   :ARG1 (b / badge\n            :ARG0 (s / say-01\n                     :ARG1 (o2 / offer-01\n                               :mode imperative\n                               :polite +\n                               :ARG0 (y / you)\n                               :ARG1 (s2 / seat)\n                               :ARG3 (p / person\n                                        :ARG3-of b)))\n            :ARG0 (h / have-03\n                     :ARG1 (c / condition\n                              :mod (h2 / health)\n                              :ARG1 (h3 / hide-01)))))", "(o / offer-01\n   :purpose (b2 / bid-01))"], "smus": ["Offer badges with hidden health conditions that say \"please offer your seat\"", "Offer to help people ease their suffering on London transport", "badges with hidden health conditions, \"please offer your seat\"", "People are bidding to help ease their suffering on London transport.", "Offer badges.", "Offer made.", "Please offer.", "Conditions:", "hid", "People are making a bid to help.", "People will help to ease.", "People will ease the suffering.", "People's suffering in transport.", "Offer badges.", "Offer made.", "Offer.", "Please offer.", "Offer.", "Conditions:", "The bidders.", "Help bid.", "Help people.", "Help ease.", "People will ease.", "to ease suffering.", "People are suffering.", "Suffering in transport.", "Offer badges for people with hidden health conditions: \"Please offer them a seat.", "Offer for bid."]}, {"instance_id": "pyrxsum-77", "summary": "Leicester Tigers have signed new England loose-head prop Ellis Genge from newly-promoted Bristol.", "summary_trees": ["# ::snt Leicester Tigers have signed new England loose-head prop Ellis Genge from newly-promoted Bristol.\n(s / sign-02\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Leicester\"\n                  :op2 \"Tigers\"))\n      :ARG1 (p / person\n            :name (n2 / name\n                  :op1 \"Ellis\"\n                  :op2 \"Genge\")\n            :ARG0-of (p2 / prop-01)\n            :mod (l / loose-head)\n            :mod (t2 / team\n                  :name (n3 / name\n                        :op1 \"England\"))\n            :ARG1-of (n4 / new-02))\n      :ARG3 (t3 / team\n            :name (n5 / name\n                  :op1 \"Bristol\")\n            :ARG1-of (p3 / promote-01\n                  :ARG1-of (n6 / new-02))))"], "tree": ["(s / sign-02\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Leicester\"\n                     :op2 \"Tigers\")))", "(s / sign-02\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Ellis\"\n                      :op2 \"Genge\")\n            :ARG0-of (p2 / prop-01)\n            :mod (l / loose-head)\n            :mod (t2 / team\n                     :name (n3 / name\n                               :op1 \"England\"))\n            :ARG1-of (n4 / new-02)))", "(s / sign-02\n   :ARG3 (t3 / team\n             :name (n5 / name\n                       :op1 \"Bristol\")\n             :ARG1-of (p3 / promote-01\n                          :ARG1-of (n6 / new-02))))", "(t / team\n   :name (n / name\n            :op1 \"Leicester\"\n            :op2 \"Tigers\"))", "(p / person\n   :name (n2 / name\n             :op1 \"Ellis\"\n             :op2 \"Genge\")\n   :ARG0-of (p2 / prop-01)\n   :mod (l / loose-head)\n   :mod (t2 / team\n            :name (n3 / name\n                      :op1 \"England\"))\n   :ARG1-of (n4 / new-02))", "(t3 / team\n    :name (n5 / name\n              :op1 \"Bristol\")\n    :ARG1-of (p3 / promote-01\n                 :ARG1-of (n6 / new-02)))", "(s / sign-02\n   :ARG0 (t / team :name (n / name :op1 \"Leicester\" :op2 \"Tigers\")))", "(p2 / prop-01)", "(n4 / new-02)", "(p3 / promote-01)", "(n6 / new-02)", "(s / sign-02\n   :ARG0 (t / team :name (n / name :op1 \"Leicester\" :op2 \"Tigers\")))", "(s / sign-02\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Leicester\"\n                     :op2 \"Tigers\"))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Ellis\"\n                      :op2 \"Genge\")\n            :ARG0 (p2 / prop-01)\n            :mod (l / loose-head)\n            :mod (t2 / team\n                     :name (n3 / name\n                               :op1 \"England\"))\n            :ARG1 (n4 / new-02))\n   :ARG3 (t3 / team\n             :name (n5 / name\n                       :op1 \"Bristol\")\n             :ARG1 (p3 / promote-01\n                       :ARG1 (n6 / new-02))))", "(s / sign-02)"], "smus": ["Leicester Tigers have signed", "New England loose-head prop Ellis Genge has been signed.", "A new promoted team Bristol have been signed.", "Leicester Tigers", "New England loose-head prop Ellis Genge", "Bristol newly promoted", "Leicester Tigers have signed", "Prop.", "New.", "promoted", "New.", "Leicester Tigers have signed", "Leicester Tigers have signed English loose-head prop Ellis Genge for Bristol to be promoted to new.", "Signed."]}, {"instance_id": "pyrxsum-78", "summary": "Keith Farmer followed up his double at Knockhill by winning the Supersport sprint race at Snetterton on Saturday.", "summary_trees": ["# ::snt Keith Farmer followed up his double at Knockhill by winning the Supersport sprint race at Snetterton on Saturday.\n(f / follow-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Keith\"\n                  :op2 \"Farmer\"))\n      :ARG1 (d / double-01\n            :ARG0 p\n            :location (l / location\n                  :name (n2 / name\n                        :op1 \"Knockhill\")))\n      :ARG2 (w / win-01\n            :ARG0 p\n            :ARG2 (r / race-02\n                  :mod (s / sprint)\n                  :mod (e / event\n                        :name (n3 / name\n                              :op1 \"Supersport\"))\n                  :location (l2 / local-region\n                        :name (n4 / name\n                              :op1 \"Snetterton\")))\n            :time (d2 / date-entity\n                  :weekday (s2 / saturday))))"], "tree": ["(f / follow-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Keith\"\n                     :op2 \"Farmer\")))", "(f / follow-01\n   :ARG1 (d / double-01\n            :ARG0 (p / person :name (n / name :op1 \"Keith\" :op2 \"Farmer\"))\n            :location (l / location\n                         :name (n2 / name\n                                   :op1 \"Knockhill\"))))", "(f / follow-01\n   :ARG2 (w / win-01\n            :ARG0 (p / person :name (n / name :op1 \"Keith\" :op2 \"Farmer\"))\n            :ARG2 (r / race-02\n                     :mod (s / sprint)\n                     :mod (e / event\n                             :name (n3 / name\n                                       :op1 \"Supersport\"))\n                     :location (l2 / local-region\n                                   :name (n4 / name\n                                             :op1 \"Snetterton\")))\n            :time (d2 / date-entity\n                      :weekday (s2 / saturday))))", "(p / person\n   :name (n / name\n            :op1 \"Keith\"\n            :op2 \"Farmer\"))", "(d / double-01\n   :ARG0 (p / person :name (n / name :op1 \"Keith\" :op2 \"Farmer\"))\n   :location (l / location\n                :name (n2 / name\n                          :op1 \"Knockhill\")))", "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"Keith\" :op2 \"Farmer\"))\n   :ARG2 (r / race-02\n            :mod (s / sprint)\n            :mod (e / event\n                    :name (n3 / name\n                              :op1 \"Supersport\"))\n            :location (l2 / local-region\n                          :name (n4 / name\n                                    :op1 \"Snetterton\")))\n   :time (d2 / date-entity\n             :weekday (s2 / saturday)))", "(f / follow-01\n   :ARG0 (p / person :name (n / name :op1 \"Keith\" :op2 \"Farmer\")))", "(d / double-01\n   :ARG0 (p / person :name (n / name :op1 \"Keith\" :op2 \"Farmer\"))\n   :location (l / location :name (n2 / name :op1 \"Knockhill\")))", "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"Keith\" :op2 \"Farmer\"))\n   :ARG2 (r / race-02))", "(r / race-02\n   :mod (s / sprint))", "(f / follow-01\n   :ARG0 (p / person :name (n / name :op1 \"Keith\" :op2 \"Farmer\")))", "(d / double-01\n   :ARG0 (p / person :name (n / name :op1 \"Keith\" :op2 \"Farmer\")))", "(d / double-01\n   :location (l / location :name (n2 / name :op1 \"Knockhill\")))", "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"Keith\" :op2 \"Farmer\")))", "(w / win-01\n   :ARG2 (r / race-02))", "(r / race-02\n   :mod (s / sprint))", "(f / follow-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Keith\"\n                     :op2 \"Farmer\"))\n   :ARG1 (d / double-01\n            :ARG0 p)\n   :ARG2 (w / win-01\n            :ARG0 p\n            :ARG2 (r / race-02\n                     :mod (s / sprint)\n                     :mod (e / event\n                             :name (n3 / name\n                                       :op1 \"Supersport\")))))", "(f / follow-01)"], "smus": ["Keith Farmer followed.", "Keith Farmer doubled in Knockhill followed.", "Following Keith Farmer's Saturday victory in the Supersport sprint race in Snetterton.", "Keith Farmer", "Keith Farmer doubled in Knockhill.", "Keith Farmer won the Supersport sprint race in Snetterton on Saturday.", "Keith Farmer followed.", "Keith Farmer doubled in Knockhill.", "Keith Farmer is winning the race.", "A sprint race.", "Keith Farmer followed.", "Keith Farmer doubled.", "Double at Knockhill.", "Keith Farmer is winning.", "The race is over.", "A sprint race.", "Keith Farmer followed up his double by winning the Supersport sprint race.", "Followed."]}, {"instance_id": "pyrxsum-79", "summary": "Northern Ireland striker Conor Washington counts himself a lucky man as he prepares to head to Euro 2016.", "summary_trees": ["# ::snt Northern Ireland striker Conor Washington counts himself a lucky man as he prepares to head to Euro 2016.\n(c / count-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Conor\"\n                  :op2 \"Washington\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"Northern\"\n                              :op2 \"Ireland\"))\n                  :ARG3 (s / striker)))\n      :ARG1 (l / lucky\n            :domain p)\n      :time (p2 / prepare-02\n            :ARG1 p\n            :ARG2 (h2 / head-02\n                  :ARG0 p\n                  :ARG1 (g / game\n                        :name (n3 / name\n                              :op1 \"Euro\"\n                              :op2 \"2016\")))))"], "tree": ["(c / count-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Conor\"\n                     :op2 \"Washington\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (t / team\n                                 :name (n2 / name\n                                           :op1 \"Northern\"\n                                           :op2 \"Ireland\"))\n                        :ARG3 (s / striker))))", "(c / count-02\n   :ARG1 (l / lucky\n            :domain (p / person :name (n / name :op1 \"Conor\" :op2 \"Washington\")))))", "(c / count-02\n   :time (p2 / prepare-02\n             :ARG1 (p / person :name (n / name :op1 \"Conor\" :op2 \"Washington\")))\n             :ARG2 (h2 / head-02\n                       :ARG0 p\n                       :ARG1 (g / game\n                                :name (n3 / name\n                                          :op1 \"Euro\"\n                                          :op2 \"2016\")))))", "(p / person\n   :name (n / name\n            :op1 \"Conor\"\n            :op2 \"Washington\")\n   :ARG0-of (h / have-org-role-91\n               :ARG1 (t / team\n                        :name (n2 / name\n                                  :op1 \"Northern\"\n                                  :op2 \"Ireland\"))\n               :ARG3 (s / striker)))", "(p2 / prepare-02\n    :ARG1 (p / person :name (n / name :op1 \"Conor\" :op2 \"Washington\")))\n    :ARG2 (h2 / head-02\n              :ARG0 p\n              :ARG1 (g / game\n                       :name (n3 / name\n                                 :op1 \"Euro\"\n                                 :op2 \"2016\"))))", "(c / count-02\n   :ARG0 (p / person :name (n / name :op1 \"Conor\" :op2 \"Washington\"))))", "(p2 / prepare-02\n    :ARG1 (p / person :name (n / name :op1 \"Conor\" :op2 \"Washington\")))\n    :ARG2 (h2 / head-02))", "(h2 / head-02\n    :ARG0 (p / person :name (n / name :op1 \"Conor\" :op2 \"Washington\")))\n    :ARG1 (g / game :name (n3 / name :op1 \"Euro\" :op2 \"2016\")))", "(c / count-02\n   :ARG0 (p / person :name (n / name :op1 \"Conor\" :op2 \"Washington\"))))", "(p2 / prepare-02\n    :ARG1 (p / person :name (n / name :op1 \"Conor\" :op2 \"Washington\"))))", "(p2 / prepare-02\n    :ARG2 (h2 / head-02))", "(h2 / head-02\n    :ARG0 (p / person :name (n / name :op1 \"Conor\" :op2 \"Washington\"))))", "(h2 / head-02\n    :ARG1 (g / game :name (n3 / name :op1 \"Euro\" :op2 \"2016\")))", "(c / count-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Conor\"\n                     :op2 \"Washington\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (t / team\n                              :name (n2 / name\n                                        :op1 \"Northern\"\n                                        :op2 \"Ireland\"))\n                     :ARG3 (s / striker)))\n   :ARG1 (l / lucky\n            :domain p))", "(c / count-02\n   :time (p2 / prepare-02))"], "smus": ["Northern Ireland striker Coron Washington counts.", "Conor Washington counts as lucky.", "As Conor Washington prepares to head to Euro 2016.", "Northern Ireland striker Coron Washington", "Conor Washington prepares to head to Euro 2016.", "Conor Washington counts.", "Conor Washington prepares to head", "Conor Washington will head to Euro 2016.", "Conor Washington counts.", "As Cory Washington prepares", "Head prepares", "Conor Washington will head.", "Head to Euro 2016.", "Conor Washington counts as a Northern Ireland striker.", "As preparations go, it counts."]}, {"instance_id": "pyrxsum-80", "summary": "The Reality Check team answers more of your questions about the implications of the UK's vote to leave the European Union.", "summary_trees": ["# ::snt The Reality Check team answers more of your questions about the implications of the UK's vote to leave the European Union.\n(a / answer-01\n      :ARG0 (t / team\n            :ARG0-of (c / check-01\n                  :ARG1 (r / reality)))\n      :ARG1 (q / question-01\n            :ARG0 (y / you)\n            :ARG1 (ii / implicate-01\n                  :ARG2 (v / vote-01\n                        :ARG0 (c2 / country\n                              :name (n / name\n                                    :op1 \"UK\"))\n                        :ARG1 (l / leave-15\n                              :ARG0 c2\n                              :ARG1 (o / organization\n                                    :name (n2 / name\n                                          :op1 \"European\"\n                                          :op2 \"Union\")))))\n            :quant (m / more)))"], "tree": ["(a / answer-01\n   :ARG0 (t / team\n            :ARG0-of (c / check-01\n                        :ARG1 (r / reality))))", "(a / answer-01\n   :ARG1 (q / question-01\n            :ARG0 (y / you)\n            :ARG1 (ii / implicate-01\n                      :ARG2 (v / vote-01\n                               :ARG0 (c2 / country\n                                         :name (n / name\n                                                  :op1 \"UK\"))\n                               :ARG1 (l / leave-15\n                                        :ARG0 c2\n                                        :ARG1 (o / organization\n                                                 :name (n2 / name\n                                                           :op1 \"European\"\n                                                           :op2 \"Union\")))))\n            :quant (m / more)))", "(t / team\n   :ARG0-of (c / check-01\n               :ARG1 (r / reality)))", "(q / question-01\n   :ARG0 (y / you)\n   :ARG1 (ii / implicate-01\n             :ARG2 (v / vote-01\n                      :ARG0 (c2 / country\n                                :name (n / name\n                                         :op1 \"UK\"))\n                      :ARG1 (l / leave-15\n                               :ARG0 c2\n                               :ARG1 (o / organization\n                                        :name (n2 / name\n                                                  :op1 \"European\"\n                                                  :op2 \"Union\")))))\n   :quant (m / more))", "(a / answer-01\n   :ARG0 (t / team))", "(c / check-01\n   :ARG1 (r / reality))", "(q / question-01\n   :ARG0 (y / you))", "(ii / implicate-01\n    :ARG2 (v / vote-01))", "(v / vote-01\n   :ARG0 (c2 / country :name (n / name :op1 \"UK\")))", "(a / answer-01\n   :ARG0 (t / team))", "(c / check-01\n   :ARG1 (r / reality))", "(q / question-01\n   :ARG0 (y / you))", "(ii / implicate-01\n    :ARG2 (v / vote-01))", "(v / vote-01\n   :ARG0 (c2 / country :name (n / name :op1 \"UK\")))", "(a / answer-01\n   :ARG0 (t / team\n            :ARG0 (c / check-01\n                     :ARG1 (r / reality)))\n   :ARG1 (q / question-01\n            :ARG0 (y / you)\n            :ARG1 (ii / implicate-01\n                      :ARG2 (v / vote-01\n                               :ARG0 (c2 / country\n                                         :name (n / name\n                                                  :op1 \"UK\"))\n                               :ARG1 (l / leave-15\n                                        :ARG0 c2\n                                        :ARG1 (o / organization\n                                                 :name (n2 / name\n                                                           :op1 \"European\"\n                                                           :op2 \"Union\")))))\n            :quant (m / more)))", "(a / answer-01)"], "smus": ["Reality check team answers.", "Answers more of your questions about the implications of the UK's vote to leave the European Union.", "Reality check team", "More questions about the implications of the UK vote to leave the European Union.", "The team answers.", "Reality check.", "Your questions.", "The vote is implicated.", "The UK's vote.", "The team answers.", "Reality check.", "Your questions.", "The vote is implicated.", "The UK's vote.", "Reality check team answers more of your questions about the implications of the UK's vote to leave the European Union.", "Answers:"]}, {"instance_id": "pyrxsum-81", "summary": "Principality Stadium chief executive Martyn Phillips would relish the chance to host an Anthony Joshua bout at the 74,500 capacity Cardiff venue.", "summary_trees": ["# ::snt Principality Stadium chief executive Martyn Phillips would relish the chance to host an Anthony Joshua bout at the 74,500 capacity Cardiff venue.\n(r / relish-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Martyn\"\n                  :op2 \"Phillips\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (s / stadium\n                        :name (n2 / name\n                              :op1 \"Principality\"\n                              :op2 \"Stadium\"))\n                  :ARG2 (e / executive\n                        :mod (c / chief))))\n      :ARG1 (c2 / chance-02\n            :ARG0 p\n            :ARG1 (h2 / host-01\n                  :ARG0 p\n                  :ARG1 (b / bout\n                        :mod (p2 / person\n                              :name (n3 / name\n                                    :op1 \"Anthony\"\n                                    :op2 \"Joshua\")))\n                  :location (v / venue\n                        :ARG0-of (h3 / have-03\n                              :ARG1 (c3 / capacity\n                                    :quant 74500))\n                        :location (c4 / city\n                              :name (n4 / name\n                                    :op1 \"Cardiff\"))))))"], "tree": ["(r / relish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Martyn\"\n                     :op2 \"Phillips\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (s / stadium\n                                 :name (n2 / name\n                                           :op1 \"Principality\"\n                                           :op2 \"Stadium\"))\n                        :ARG2 (e / executive\n                                 :mod (c / chief)))))", "(r / relish-01\n   :ARG1 (c2 / chance-02\n             :ARG0 (p / person :name (n / name :op1 \"Martyn\" :op2 \"Phillips\")))\n             :ARG1 (h2 / host-01\n                       :ARG0 p\n                       :ARG1 (b / bout\n                                :mod (p2 / person\n                                         :name (n3 / name\n                                                   :op1 \"Anthony\"\n                                                   :op2 \"Joshua\")))\n                       :location (v / venue\n                                    :ARG0-of (h3 / have-03\n                                                 :ARG1 (c3 / capacity\n                                                           :quant 74500))\n                                    :location (c4 / city\n                                                  :name (n4 / name\n                                                            :op1 \"Cardiff\"))))))", "(p / person\n   :name (n / name\n            :op1 \"Martyn\"\n            :op2 \"Phillips\")\n   :ARG0-of (h / have-org-role-91\n               :ARG1 (s / stadium\n                        :name (n2 / name\n                                  :op1 \"Principality\"\n                                  :op2 \"Stadium\"))\n               :ARG2 (e / executive\n                        :mod (c / chief))))", "(c2 / chance-02\n    :ARG0 (p / person :name (n / name :op1 \"Martyn\" :op2 \"Phillips\")))\n    :ARG1 (h2 / host-01\n              :ARG0 p\n              :ARG1 (b / bout\n                       :mod (p2 / person\n                                :name (n3 / name\n                                          :op1 \"Anthony\"\n                                          :op2 \"Joshua\")))\n              :location (v / venue\n                           :ARG0-of (h3 / have-03\n                                        :ARG1 (c3 / capacity\n                                                  :quant 74500))\n                           :location (c4 / city\n                                         :name (n4 / name\n                                                   :op1 \"Cardiff\")))))", "(r / relish-01\n   :ARG0 (p / person :name (n / name :op1 \"Martyn\" :op2 \"Phillips\"))))", "(c2 / chance-02\n    :ARG0 (p / person :name (n / name :op1 \"Martyn\" :op2 \"Phillips\")))\n    :ARG1 (h2 / host-01))", "(h2 / host-01\n    :ARG0 (p / person :name (n / name :op1 \"Martyn\" :op2 \"Phillips\")))\n    :ARG1 (b / bout))", "(h3 / have-03\n    :ARG1 (c3 / capacity))", "(r / relish-01\n   :ARG0 (p / person :name (n / name :op1 \"Martyn\" :op2 \"Phillips\"))))", "(c2 / chance-02\n    :ARG0 (p / person :name (n / name :op1 \"Martyn\" :op2 \"Phillips\"))))", "(c2 / chance-02\n    :ARG1 (h2 / host-01))", "(h2 / host-01\n    :ARG0 (p / person :name (n / name :op1 \"Martyn\" :op2 \"Phillips\"))))", "(h2 / host-01\n    :ARG1 (b / bout))", "(h3 / have-03\n    :ARG1 (c3 / capacity))", "(r / relish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Martyn\"\n                     :op2 \"Phillips\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (s / stadium\n                              :name (n2 / name\n                                        :op1 \"Principality\"\n                                        :op2 \"Stadium\"))\n                     :ARG2 (e / executive\n                              :mod (c / chief))))\n   :ARG1 (c2 / chance-02\n             :ARG0 p\n             :ARG1 (h2 / host-01\n                       :ARG0 p\n                       :ARG1 (b / bout\n                                :mod (p2 / person\n                                         :name (n3 / name\n                                                   :op1 \"Anthony\"\n                                                   :op2 \"Joshua\"))))))", "(r / relish-01)"], "smus": ["Principal Stadium CEO Martyn Phillips will relish --", "Martyn Phillips will relish the chance to host an Anthony Joshua bout at a 74,000 capacity venue in Cardiff.", "Principal Stadium CEO Martyn Phillips", "Martyn Phillips has a chance to host an Anthony Joshua bout at a 74,000 capacity venue in Cardiff.", "Martyn Phillips will relish.", "Martyn Phillips has a chance to host.", "Martyn Phillips will host the bout.", "capacity.", "Martyn Phillips will relish.", "Martyn Phillips has a chance.", "A chance to host.", "Martyn Phillips will host.", "Host the bout.", "capacity.", "Principal Stadium CEO Martyn Phillips will relish the chance to host an Anthony Joshua bout.", "Rejoice."]}, {"instance_id": "pyrxsum-82", "summary": "Google's net income rose 17% to $3.93bn in the three months to June from the quarter last year, boosted by an 11% rise in revenues to $17.7bn.", "summary_trees": ["# ::snt Google's net income rose 17% to $3.93bn in the three months to June from the quarter last year, boosted by an 11% rise in revenues to $17.7bn.\n(r / rise-01\n      :ARG1 (ii / income\n            :mod (n / net)\n            :poss (c / company\n                  :name (n2 / name\n                        :op1 \"Google\")))\n      :ARG2 (p / percentage-entity\n            :value 17)\n      :ARG4 (m / monetary-quantity\n            :quant 3393000000000\n            :unit (d / dollar))\n      :time (d2 / date-entity\n            :month 6)\n      :time (q / quarter\n            :mod (l / last))\n      :ARG1-of (b / boost-01\n            :ARG0 (r2 / rise-01\n                  :ARG1 (r3 / revenue\n                        :poss c)\n                  :ARG2 (p2 / percentage-entity\n                        :value 11)\n                  :ARG4 (m2 / monetary-quantity\n                        :quant 170000000000\n                        :unit (d3 / dollar)))))"], "tree": ["(r / rise-01\n   :ARG1 (ii / income\n             :mod (n / net)\n             :poss (c / company\n                      :name (n2 / name\n                                :op1 \"Google\"))))", "(r / rise-01\n   :ARG2 (p / percentage-entity\n            :value 17))", "(r / rise-01\n   :ARG4 (m / monetary-quantity\n            :quant 3393000000000\n            :unit (d / dollar)))", "(r / rise-01\n   :time (d2 / date-entity\n             :month 6))", "(r / rise-01\n   :time (q / quarter\n            :mod (l / last)))", "(r / rise-01\n   :ARG1-of (b / boost-01\n               :ARG0 (r2 / rise-01\n                         :ARG1 (r3 / revenue\n                                   :poss (c / company :name (n2 / name :op1 \"Google\")))\n                         :ARG2 (p2 / percentage-entity\n                                   :value 11)\n                         :ARG4 (m2 / monetary-quantity\n                                   :quant 170000000000\n                                   :unit (d3 / dollar)))))", "(ii / income\n    :mod (n / net)\n    :poss (c / company\n             :name (n2 / name\n                       :op1 \"Google\")))", "(m / monetary-quantity\n   :quant 3393000000000\n   :unit (d / dollar))", "(q / quarter\n   :mod (l / last))", "(b / boost-01\n   :ARG0 (r2 / rise-01\n             :ARG1 (r3 / revenue\n                       :poss (c / company :name (n2 / name :op1 \"Google\")))\n             :ARG2 (p2 / percentage-entity\n                       :value 11)\n             :ARG4 (m2 / monetary-quantity\n                       :quant 170000000000\n                       :unit (d3 / dollar))))", "(r / rise-01\n   :ARG1 (ii / income))", "(b / boost-01\n   :ARG0 (r2 / rise-01))", "(r2 / rise-01\n    :ARG1 (r3 / revenue))", "(r / rise-01\n   :ARG1 (ii / income))", "(b / boost-01\n   :ARG0 (r2 / rise-01))", "(r2 / rise-01\n    :ARG1 (r3 / revenue))", "(r / rise-01\n   :ARG1 (ii / income\n             :mod (n / net)\n             :poss (c / company\n                      :name (n2 / name\n                                :op1 \"Google\")))\n   :ARG2 (p / percentage-entity\n            :value 17)\n   :ARG4 (m / monetary-quantity\n            :quant 3393000000000\n            :unit (d / dollar))\n   :ARG1 (b / boost-01\n            :ARG0 (r2 / rise-01\n                      :ARG1 (r3 / revenue\n                                :poss c)\n                      :ARG2 (p2 / percentage-entity\n                                :value 11)\n                      :ARG4 (m2 / monetary-quantity\n                                :quant 170000000000\n                                :unit (d3 / dollar)))))", "(r / rise-01\n   :time (d2 / date-entity\n             :month 6)\n   :time (q / quarter\n            :mod (l / last)))"], "smus": ["Google's net income is going up.", "A 17% rise.", "The rise was $339.3 billion in monetary dollars.", "The rise occurred in June.", "The rise was in the last quarter.", "The rise was boosted by a 11% rise in Google's revenues to $17.1 billion.", "Google's net income is $.", "$339.3 billion in monetary dollars", "last quarter", "Google's revenue rise from 11% to 17.5 billion dollars has boosted.", "Income rises", "The rise has boosted", "Revenues are going up.", "Income rises", "The rise has boosted", "Revenues are going up.", "Google's net income rose 17% to $339.3 billion dollars as a boost to its revenues of 11% to $17 billion.", "The rise in June was the last quarter."]}, {"instance_id": "pyrxsum-83", "summary": "Pregnant women should visit countries with a risk of malaria only if their trip is essential, experts are warning.", "summary_trees": ["# ::snt Pregnant women should visit countries with a risk of malaria only if their trip is essential, experts are warning.\n(w / warn-01\n      :ARG0 (p / person\n            :ARG1-of (e / expert-01))\n      :ARG1 (r / recommend-01\n            :ARG1 (v / visit-01\n                  :ARG0 (w2 / woman\n                        :ARG1-of (ii / impregnate-01))\n                  :ARG1 (c / country\n                        :ARG1-of (r2 / risk-01\n                              :ARG2 (m / malaria)))\n                  :condition (e2 / essential\n                        :mod (o / only))\n                  :domain-of e2)))"], "tree": ["(w / warn-01\n   :ARG0 (p / person\n            :ARG1-of (e / expert-01)))", "(w / warn-01\n   :ARG1 (r / recommend-01\n            :ARG1 (v / visit-01\n                     :ARG0 (w2 / woman\n                               :ARG1-of (ii / impregnate-01))\n                     :ARG1 (c / country\n                              :ARG1-of (r2 / risk-01\n                                           :ARG2 (m / malaria)))\n                     :condition (e2 / essential\n                                    :mod (o / only)\n                                    :domain v))))", "(p / person\n   :ARG1-of (e / expert-01))", "(r / recommend-01\n   :ARG1 (v / visit-01\n            :ARG0 (w2 / woman\n                      :ARG1-of (ii / impregnate-01))\n            :ARG1 (c / country\n                     :ARG1-of (r2 / risk-01\n                                  :ARG2 (m / malaria)))\n            :condition (e2 / essential\n                           :mod (o / only)\n                           :domain v)))", "(w / warn-01\n   :ARG0 (p / person))", "(e / expert-01)", "(r / recommend-01\n   :ARG1 (v / visit-01))", "(v / visit-01\n   :ARG0 (w2 / woman))", "(ii / impregnate-01)", "(r2 / risk-01\n    :ARG2 (m / malaria))", "(w / warn-01\n   :ARG0 (p / person))", "(r / recommend-01\n   :ARG1 (v / visit-01))", "(v / visit-01\n   :ARG0 (w2 / woman))", "(r2 / risk-01\n    :ARG2 (m / malaria))", "(w / warn-01\n   :ARG0 (p / person\n            :ARG1 (e / expert-01))\n   :ARG1 (r / recommend-01\n            :ARG1 (v / visit-01\n                     :ARG0 (w2 / woman\n                               :ARG1 (ii / impregnate-01))\n                     :ARG1 (c / country\n                              :ARG1 (r2 / risk-01\n                                        :ARG2 (m / malaria)))\n                     :condition (e2 / essential\n                                    :mod (o / only)\n                                    :domain v))))", "(w / warn-01)"], "smus": ["Experts are warning.", "Warning: Pregnancy women should visit malaria-risk countries only if it is essential.", "Experts", "Pregnancy women should visit malaria-risk countries only if it is essential.", "People are warning.", "Experts", "Visit.", "Women will visit.", "Having a pregnancy.", "Malaria is a risk.", "People are warning.", "Visit.", "Women will visit.", "Malaria is a risk.", "Experts are warning pregnant women should visit countries at risk of malaria only if it is essential.", "Warning:"]}, {"instance_id": "pyrxsum-84", "summary": "In Africa's schools, old-fashioned, dusty textbooks are gradually being replaced by tablets, computers and mobile phones.", "summary_trees": ["# ::snt In Africa's schools, old-fashioned, dusty textbooks are gradually being replaced by tablets, computers and mobile phones.\n(r / replace-01\n      :ARG1 (t / textbook\n            :mod (d / dusty)\n            :mod (f / fashion\n                  :mod (o / old)))\n      :ARG2 (a / and\n            :op1 (t2 / tablet)\n            :op2 (c / computer)\n            :op3 (p / phone\n                  :ARG1-of (m / mobile-02)))\n      :manner (g / gradual)\n      :location (s / school\n            :location (c2 / continent\n                  :name (n / name\n                        :op1 \"Africa\"))))"], "tree": ["(r / replace-01\n   :ARG1 (t / textbook\n            :mod (d / dusty)\n            :mod (f / fashion\n                    :mod (o / old))))", "(r / replace-01\n   :ARG2 (a / and\n            :op1 (t2 / tablet)\n            :op2 (c / computer)\n            :op3 (p / phone\n                    :ARG1-of (m / mobile-02))))", "(r / replace-01\n   :manner (g / gradual))", "(r / replace-01\n   :location (s / school\n                :location (c2 / continent\n                              :name (n / name\n                                       :op1 \"Africa\"))))", "(t / textbook\n   :mod (d / dusty)\n   :mod (f / fashion\n           :mod (o / old)))", "(a / and\n   :op1 (t2 / tablet)\n   :op2 (c / computer)\n   :op3 (p / phone\n           :ARG1-of (m / mobile-02)))", "(s / school\n   :location (c2 / continent\n                 :name (n / name\n                          :op1 \"Africa\")))", "(r / replace-01\n   :ARG1 (t / textbook))", "(m / mobile-02)", "(r / replace-01\n   :ARG1 (t / textbook))", "(r / replace-01\n   :ARG1 (t / textbook\n            :mod (d / dusty)\n            :mod (f / fashion\n                    :mod (o / old)))\n   :ARG2 (t2 / tablet)\n   :manner (g / gradual)\n   :location (s / school\n                :location (c2 / continent\n                              :name (n / name\n                                       :op1 \"Africa\"))))", "(r / replace-01\n   :ARG1 (t / textbook\n            :mod (d / dusty)\n            :mod (f / fashion\n                    :mod (o / old)))\n   :ARG2 (c / computer)\n   :manner (g / gradual)\n   :location (s / school\n                :location (c2 / continent\n                              :name (n / name\n                                       :op1 \"Africa\"))))", "(r / replace-01\n   :ARG1 (t / textbook\n            :mod (d / dusty)\n            :mod (f / fashion\n                    :mod (o / old)))\n   :ARG2 (p / phone\n            :ARG1-of (m / mobile-02))\n   :manner (g / gradual)\n   :manner g\n   :location (s / school\n                :location (c2 / continent\n                              :name (n / name\n                                       :op1 \"Africa\"))))", "(r / replace-01\n   :ARG1 (t / textbook\n            :mod (d / dusty)\n            :mod (f / fashion\n                    :mod (o / old)))\n   :ARG2 (a / and\n            :op1 (t2 / tablet)\n            :op2 (c / computer)\n            :op3 (p / phone\n                    :ARG1 (m / mobile-02)))\n   :manner (g / gradual))", "(r / replace-01\n   :manner (g / gradual)\n   :location (s / school\n                :location (c2 / continent\n                              :name (n / name\n                                       :op1 \"Africa\"))))"], "smus": ["The dusty old-fashioned textbooks were replaced.", "Tablets, computers and mobile phones are replaced.", "gradually replaced.", "Replaced in African schools.", "dusty old fashion textbooks", "tablets, computers and mobile phones", "Schools in Africa", "The textbooks have been replaced.", "Mobile.", "The textbooks have been replaced.", "In African schools, old-fashioned dusty textbooks are gradually replaced with tablets.", "In African schools, old-fashioned dusty textbooks were gradually replaced with computers.", "In African schools, old-fashioned dusty textbooks were gradually replaced by mobile phones.", "The old-fashion dusty textbooks are gradually replaced by tablets, computers and mobile phones.", "In African schools, the replacements are gradually being made."]}, {"instance_id": "pyrxsum-85", "summary": "More than half of Scots have run out of money before pay day, according to a new report.", "summary_trees": ["# ::snt More than half of Scots have run out of money before pay day, according to a new report.\n(s / say-01\n      :ARG0 (r / report\n            :ARG1-of (n / new-01))\n      :ARG1 (r2 / run-out-05\n            :ARG1 (m / money)\n            :ARG2 (p / person\n                  :mod (c / country\n                        :name (n2 / name\n                              :op1 \"Scotland\"))\n                  :quant (m2 / more-than\n                        :op1 \"1/2\"))\n            :time (b / before\n                  :op1 (d / day\n                        :time-of (p2 / pay-01)))))"], "tree": ["(s / say-01\n   :ARG0 (r / report\n            :ARG1-of (n / new-01)))", "(s / say-01\n   :ARG1 (r2 / run-out-05\n             :ARG1 (m / money)\n             :ARG2 (p / person\n                      :mod (c / country\n                              :name (n2 / name\n                                        :op1 \"Scotland\"))\n                      :quant (m2 / more-than\n                                 :op1 \"1/2\"))\n             :time (b / before\n                      :op1 (d / day\n                              :time-of (p2 / pay-01)))))", "(r / report\n   :ARG1-of (n / new-01))", "(r2 / run-out-05\n    :ARG1 (m / money)\n    :ARG2 (p / person\n             :mod (c / country\n                     :name (n2 / name\n                               :op1 \"Scotland\"))\n             :quant (m2 / more-than\n                        :op1 \"1/2\"))\n    :time (b / before\n             :op1 (d / day\n                     :time-of (p2 / pay-01))))", "(s / say-01\n   :ARG0 (r / report))", "(n / new-01)", "(r2 / run-out-05\n    :ARG1 (m / money))", "(p2 / pay-01)", "(s / say-01\n   :ARG0 (r / report))", "(r2 / run-out-05\n    :ARG1 (m / money))", "(s / say-01\n   :ARG0 (r / report\n            :ARG1 (n / new-01))\n   :ARG1 (r2 / run-out-05\n             :ARG1 (m / money)\n             :ARG2 (p / person\n                      :mod (c / country\n                              :name (n2 / name\n                                        :op1 \"Scotland\"))\n                      :quant (m2 / more-than\n                                 :op1 \"1/2\"))))", "(s / say-01)"], "smus": ["According to the new report --", "More than half the Scots ran out of money before the day of the pay.", "New report.", "More than half the Scots ran out of money before the day of the pay.", "According to the report --", "New.", "ran out of money.", "pay.", "According to the report --", "ran out of money.", "The new report said more than half the Scots had run out of money.", "Says."]}, {"instance_id": "pyrxsum-86", "summary": "The Taliban's capture of the strategically-located Sangin, once considered the deadliest battlefield for US and British troops in Afghanistan, will increase the group's mobility in the north of the province and give it control of an important supply line with the provincial capital Lashkar Gah", "summary_trees": ["# ::snt The Taliban's capture of the strategically-located Sangin, once considered the deadliest battlefield for US and British troops in Afghanistan, will increase the group's mobility in the north of the province and give it control of an important supply line with the provincial capital Lashkar Gah\n(a / and\n      :op1 (ii / increase-01\n            :ARG0 (c / capture-01\n                  :ARG0 (c2 / criminal-organization\n                        :name (n / name\n                              :op1 \"Taliban\"))\n                  :ARG1 (c3 / city\n                        :name (n2 / name\n                              :op1 \"Sangin\")\n                        :ARG1-of (l / locate-01\n                              :manner (s / strategic))\n                        :ARG1-of (c4 / consider-02\n                              :ARG2 (b / battlefield\n                                    :location (c5 / country\n                                          :name (n3 / name\n                                                :op1 \"Afghanistan\")\n                                          :part (n4 / north))\n                                    :beneficiary (a2 / and\n                                          :op1 (t / troop\n                                                :mod (c6 / country\n                                                      :name (n5 / name\n                                                            :op1 \"United\"\n                                                            :op2 \"States\")))\n                                          :op2 (t2 / troop\n                                                :mod (c7 / country\n                                                      :name (n6 / name\n                                                            :op1 \"Britain\"))))\n                                    :ARG1-of (h / have-degree-91\n                                          :ARG2 (k / kill-01\n                                                :ARG0 b)\n                                          :ARG3 (m / most)))\n                              :time (o / once))))\n            :ARG1 (m2 / mobility\n                  :poss c2\n                  :location n4))\n      :op2 (g / give-01\n            :ARG0 c\n            :ARG1 (c8 / control-01\n                  :ARG0 c2\n                  :ARG1 (l2 / line\n                        :ARG1-of (ii2 / important-01)\n                        :ARG3-of (s2 / supply-01\n                              :ARG2 (c9 / city\n                                    :name (n7 / name\n                                          :op1 \"Lashkar\"\n                                          :op2 \"Gah\")\n                                    :ARG0-of (h2 / have-org-role-91\n                                          :ARG1 (p / province\n                                                :ARG2 (c10 / capital)))))\n                        :ARG2 c2))))"], "tree": ["(a / and\n   :op1 (ii / increase-01\n            :ARG0 (c / capture-01\n                     :ARG0 (c2 / criminal-organization\n                               :name (n / name\n                                        :op1 \"Taliban\"))\n                     :ARG1 (c3 / city\n                               :name (n2 / name\n                                         :op1 \"Sangin\")\n                               :ARG1-of (l / locate-01\n                                           :manner (s / strategic))\n                               :ARG1-of (c4 / consider-02\n                                            :ARG2 (b / battlefield\n                                                     :location (c5 / country\n                                                                   :name (n3 / name\n                                                                             :op1 \"Afghanistan\")\n                                                                   :part (n4 / north))\n                                                     :beneficiary (a2 / and\n                                                                      :op1 (t / troop\n                                                                              :mod (c6 / country\n                                                                                       :name (n5 / name\n                                                                                                 :op1 \"United\"\n                                                                                                 :op2 \"States\")))\n                                                                      :op2 (t2 / troop\n                                                                               :mod (c7 / country\n                                                                                        :name (n6 / name\n                                                                                                  :op1 \"Britain\"))))\n                                                     :ARG1-of (h / have-degree-91\n                                                                 :ARG2 (k / kill-01\n                                                                          :ARG0 b)\n                                                                 :ARG3 (m / most)))\n                                            :time (o / once))))\n            :ARG1 (m2 / mobility\n                      :poss c2\n                      :location n4)))", "(a / and\n   :op2 (g / give-01\n           :ARG0 (c / capture-01)\n           :ARG1 (c8 / control-01\n                     :ARG0 (c2 / criminal-organization :name (n / name :op1 \"Taliban\"))\n                     :ARG1 (l2 / line\n                               :ARG1-of (ii2 / important-01)\n                               :ARG3-of (s2 / supply-01\n                                            :ARG2 (c9 / city\n                                                      :name (n7 / name\n                                                                :op1 \"Lashkar\"\n                                                                :op2 \"Gah\")\n                                                      :ARG0-of (h2 / have-org-role-91\n                                                                   :ARG1 (p / province\n                                                                            :ARG2 (c10 / capital)))))\n                               :ARG2 c2))))", "(ii / increase-01\n    :ARG0 (c / capture-01\n             :ARG0 (c2 / criminal-organization\n                       :name (n / name\n                                :op1 \"Taliban\"))\n             :ARG1 (c3 / city\n                       :name (n2 / name\n                                 :op1 \"Sangin\")\n                       :ARG1-of (l / locate-01\n                                   :manner (s / strategic))\n                       :ARG1-of (c4 / consider-02\n                                    :ARG2 (b / battlefield\n                                             :location (c5 / country\n                                                           :name (n3 / name\n                                                                     :op1 \"Afghanistan\")\n                                                           :part (n4 / north))\n                                             :beneficiary (a2 / and\n                                                              :op1 (t / troop\n                                                                      :mod (c6 / country\n                                                                               :name (n5 / name\n                                                                                         :op1 \"United\"\n                                                                                         :op2 \"States\")))\n                                                              :op2 (t2 / troop\n                                                                       :mod (c7 / country\n                                                                                :name (n6 / name\n                                                                                          :op1 \"Britain\"))))\n                                             :ARG1-of (h / have-degree-91\n                                                         :ARG2 (k / kill-01\n                                                                  :ARG0 b)\n                                                         :ARG3 (m / most)))\n                                    :time (o / once))))\n    :ARG1 (m2 / mobility\n              :poss c2\n              :location n4))", "(g / give-01\n   :ARG0 (c / capture-01)\n   :ARG1 (c8 / control-01\n             :ARG0 (c2 / criminal-organization :name (n / name :op1 \"Taliban\"))\n             :ARG1 (l2 / line\n                       :ARG1-of (ii2 / important-01)\n                       :ARG3-of (s2 / supply-01\n                                    :ARG2 (c9 / city\n                                              :name (n7 / name\n                                                        :op1 \"Lashkar\"\n                                                        :op2 \"Gah\")\n                                              :ARG0-of (h2 / have-org-role-91\n                                                           :ARG1 (p / province\n                                                                    :ARG2 (c10 / capital)))))\n                       :ARG2 c2)))", "(ii / increase-01\n    :ARG0 (c / capture-01))", "(c / capture-01\n   :ARG0 (c2 / criminal-organization :name (n / name :op1 \"Taliban\")))", "(l / locate-01\n   :manner (s / strategic))", "(c4 / consider-02\n    :ARG2 (b / battlefield))", "(k / kill-01\n   :ARG0 (b / battlefield))", "(g / give-01\n   :ARG0 (c / capture-01)\n   :ARG1 (c8 / control-01))", "(c8 / control-01\n    :ARG0 (c2 / criminal-organization :name (n / name :op1 \"Taliban\"))\n    :ARG1 (l2 / line))", "(ii2 / important-01)", "(s2 / supply-01\n    :ARG2 (c9 / city :name (n7 / name :op1 \"Lashkar\" :op2 \"Gah\"))))", "(ii / increase-01\n    :ARG0 (c / capture-01))", "(c / capture-01\n   :ARG0 (c2 / criminal-organization :name (n / name :op1 \"Taliban\")))", "(l / locate-01\n   :manner (s / strategic))", "(c4 / consider-02\n    :ARG2 (b / battlefield))", "(k / kill-01\n   :ARG0 (b / battlefield))", "(g / give-01\n   :ARG0 (c / capture-01))", "(g / give-01\n   :ARG1 (c8 / control-01))", "(c8 / control-01\n    :ARG0 (c2 / criminal-organization :name (n / name :op1 \"Taliban\")))", "(c8 / control-01\n    :ARG1 (l2 / line))", "(s2 / supply-01\n    :ARG2 (c9 / city :name (n7 / name :op1 \"Lashkar\" :op2 \"Gah\"))))", "(ii / increase-01\n    :ARG0 (c / capture-01\n             :ARG0 (c2 / criminal-organization\n                       :name (n / name\n                                :op1 \"Taliban\"))\n             :ARG1 (c3 / city\n                       :name (n2 / name\n                                 :op1 \"Sangin\")\n                       :ARG1-of (l / locate-01\n                                   :manner (s / strategic))\n                       :ARG1-of (c4 / consider-02\n                                    :ARG2 (b / battlefield\n                                             :location (c5 / country\n                                                           :name (n3 / name\n                                                                     :op1 \"Afghanistan\")\n                                                           :part (n4 / north))\n                                             :beneficiary (t / troop\n                                                             :mod (c6 / country\n                                                                      :name (n5 / name\n                                                                                :op1 \"United\"\n                                                                                :op2 \"States\"))\n                                                             :op2 (t2 / troop\n                                                                      :mod (c7 / country\n                                                                               :name (n6 / name\n                                                                                         :op1 \"Britain\"))))\n                                             :ARG1-of (h / have-degree-91\n                                                         :ARG2 (k / kill-01\n                                                                  :ARG0 b)\n                                                         :ARG3 (m / most)))\n                                    :time (o / once))))\n    :ARG1 (m2 / mobility\n              :poss c2\n              :location n4))", "(g / give-01\n   :ARG0 (c / capture-01)\n   :ARG1 (c8 / control-01\n             :ARG0 (c2 / criminal-organization :name (n / name :op1 \"Taliban\"))\n             :ARG1 (l2 / line\n                       :ARG1-of (ii2 / important-01)\n                       :ARG3-of (s2 / supply-01\n                                    :ARG2 (c9 / city\n                                              :name (n7 / name\n                                                        :op1 \"Lashkar\"\n                                                        :op2 \"Gah\")\n                                              :ARG0-of (h2 / have-org-role-91\n                                                           :ARG1 (p / province\n                                                                    :ARG2 (c10 / capital)))))\n                       :ARG2 c2)))", "(a / and\n   :op1 (ii / increase-01\n            :ARG0 (c / capture-01\n                     :ARG0 (c2 / criminal-organization\n                               :name (n / name\n                                        :op1 \"Taliban\"))\n                     :ARG1 (c3 / city\n                               :name (n2 / name\n                                         :op1 \"Sangin\")\n                               :ARG1 (l / locate-01\n                                        :manner (s / strategic))\n                               :ARG1 (c4 / consider-02\n                                         :ARG2 (b / battlefield\n                                                  :beneficiary (a2 / and\n                                                                   :op1 (t / troop\n                                                                           :mod (c6 / country\n                                                                                    :name (n5 / name\n                                                                                              :op1 \"United\"\n                                                                                              :op2 \"States\")))\n                                                                   :op2 (t2 / troop\n                                                                            :mod (c7 / country\n                                                                                     :name (n6 / name\n                                                                                               :op1 \"Britain\"))))\n                                                  :ARG1 (h / have-degree-91\n                                                           :ARG2 (k / kill-01\n                                                                    :ARG0 b)\n                                                           :ARG3 (m / most))))))\n            :ARG1 (m2 / mobility\n                      :poss c2))\n   :op2 (g / give-01\n           :ARG0 c\n           :ARG1 (c8 / control-01\n                     :ARG0 c2\n                     :ARG1 (l2 / line\n                               :ARG1 (ii2 / important-01)\n                               :ARG3 (s2 / supply-01\n                                         :ARG2 (c9 / city\n                                                   :name (n7 / name\n                                                             :op1 \"Lashkar\"\n                                                             :op2 \"Gah\")\n                                                   :ARG0 (h2 / have-org-role-91\n                                                             :ARG1 (p / province\n                                                                      :ARG2 (c10 / capital)))))\n                               :ARG2 c2))))", "(a / and\n   :op1 (ii / increase-01)\n   :op2 (g / give-01))"], "smus": ["And the Taliban's capture of strategically located Sangin, once considered the deadliest battlefield in northern Afghanistan for American and British troops, would increase their mobility in the region.", "And the capture would give the Taliban control over an important supply line to the provincial capital Lashkar Gah.", "The Taliban's capture of strategically located Sangin, once considered the deadliest battlefield in northern Afghanistan for American and British troops, would increase their mobility in the region.", "The capture would give the Taliban control of an important supply line to the provincial capital Lashkar Gah.", "Capture will increase.", "The Taliban captured.", "Strategically located.", "Considered a battlefield.", "The battlefield is killing.", "Capture will give control.", "The Taliban have line control.", "Important.", "Supply to Lashkar Gah", "Capture will increase.", "The Taliban captured.", "Strategically located.", "Considered a battlefield.", "The battlefield is killing.", "Capture will give.", "Give control.", "The Taliban have control.", "Line control.", "Supply to Lashkar Gah", "The Taliban's capture of strategically located Sangin, once considered the deadliest battlefield in northern Afghanistan for American and British troops, would increase their mobility in northern Afghanistan.", "The capture would give the Taliban control of an important supply line to the provincial capital Lashkar Gah.", "The Taliban's capture of Sangin would increase its mobility and give control of the important line of supply to Lashkar Gah, the provincial capital of the province, which is strategically located as a battlefield for American and British troops.", "Increase and give."]}, {"instance_id": "pyrxsum-87", "summary": "Western Sahara is a sparsely-populated area of mostly desert situated on the northwest coast of Africa.", "summary_trees": ["# ::snt Western Sahara is a sparsely-populated area of mostly desert situated on the northwest coast of Africa.\n(a / area\n      :ARG1-of (p / populate-01\n            :manner (s / sparse))\n      :consist-of (d / desert\n            :quant (m / most))\n      :domain (c / country-region\n            :name (n / name\n                  :op1 \"Western\"\n                  :op2 \"Sahara\"))\n      :ARG1-of (s2 / situate-01\n            :ARG2 (c2 / coast\n                  :mod (n2 / northwest)\n                  :part-of (c3 / continent\n                        :name (n3 / name\n                              :op1 \"Africa\")))))"], "tree": ["(a / area\n   :ARG1-of (p / populate-01\n               :manner (s / sparse)))", "(a / area\n   :consist-of (d / desert\n                  :quant (m / most)))", "(a / area\n   :domain (c / country-region\n              :name (n / name\n                       :op1 \"Western\"\n                       :op2 \"Sahara\")))", "(a / area\n   :ARG1-of (s2 / situate-01\n                :ARG2 (c2 / coast\n                          :mod (n2 / northwest)\n                          :part-of (c3 / continent\n                                       :name (n3 / name\n                                                 :op1 \"Africa\")))))", "(p / populate-01\n   :manner (s / sparse))", "(d / desert\n   :quant (m / most))", "(c / country-region\n   :name (n / name\n            :op1 \"Western\"\n            :op2 \"Sahara\"))", "(s2 / situate-01\n    :ARG2 (c2 / coast\n              :mod (n2 / northwest)\n              :part-of (c3 / continent\n                           :name (n3 / name\n                                     :op1 \"Africa\"))))", "(p / populate-01\n   :manner (s / sparse))", "(s2 / situate-01\n    :ARG2 (c2 / coast))", "(p / populate-01\n   :manner (s / sparse))", "(s2 / situate-01\n    :ARG2 (c2 / coast))", "(a / area\n   :ARG1 (p / populate-01\n            :manner (s / sparse))\n   :consist-of (d / desert\n                  :quant (m / most))\n   :domain (c / country-region\n              :name (n / name\n                       :op1 \"Western\"\n                       :op2 \"Sahara\"))\n   :ARG1 (s2 / situate-01\n             :ARG2 (c2 / coast\n                       :mod (n2 / northwest)\n                       :part (c3 / continent\n                                 :name (n3 / name\n                                           :op1 \"Africa\")))))", "(a / area\n   :consist-of (d / desert\n                  :quant (m / most))\n   :domain (c / country-region\n              :name (n / name\n                       :op1 \"Western\"\n                       :op2 \"Sahara\")))"], "smus": ["A sparsely populated area.", "The area is mostly desert.", "Western Sahara is an area.", "The area is situated on Africa's northwest coast.", "sparsely populated.", "Most of the desert.", "Western Sahara (WS)", "located on Africa's northwest coast.", "sparsely populated.", "located on the coast.", "sparsely populated.", "located on the coast.", "Western Sahara is a sparsely populated, mostly desert area situated on Africa's northwest coast.", "Western Sahara is mostly a desert area."]}, {"instance_id": "pyrxsum-88", "summary": "Deputy First Minister John Swinney will give MSPs his response to a report into the death of Aberdeen schoolboy Bailey Gwynne next week.", "summary_trees": ["# ::snt Deputy First Minister John Swinney will give MSPs his response to a report into the death of Aberdeen schoolboy Bailey Gwynne next week.\n(g / give-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"Swinney\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (m / minister\n                        :mod (d / deputy)\n                        :ord (o / ordinal-entity\n                              :value 1))))\n      :ARG1 (r / respond-01\n            :ARG0 p\n            :ARG1 (r2 / report-01\n                  :ARG1 (d2 / die-01\n                        :ARG1 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Bailey\"\n                                    :op2 \"Gwynne\")\n                              :mod (s / schoolboy)\n                              :location (c / city\n                                    :name (n3 / name\n                                          :op1 \"Aberdeen\"))))))\n      :ARG2 (p3 / person\n            :ARG0-of (h2 / have-org-role-91\n                  :ARG2 (m2 / member)))\n      :time (w / week\n            :mod (n4 / next)))"], "tree": ["(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Swinney\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG2 (m / minister\n                                 :mod (d / deputy)\n                                 :ord (o / ordinal-entity\n                                         :value 1)))))", "(g / give-01\n   :ARG1 (r / respond-01\n            :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\")))\n            :ARG1 (r2 / report-01\n                      :ARG1 (d2 / die-01\n                                :ARG1 (p2 / person\n                                          :name (n2 / name\n                                                    :op1 \"Bailey\"\n                                                    :op2 \"Gwynne\")\n                                          :mod (s / schoolboy)\n                                          :location (c / city\n                                                       :name (n3 / name\n                                                                 :op1 \"Aberdeen\")))))))", "(g / give-01\n   :ARG2 (p3 / person\n             :ARG0-of (h2 / have-org-role-91\n                          :ARG2 (m2 / member))))", "(g / give-01\n   :time (w / week\n            :mod (n4 / next)))", "(p / person\n   :name (n / name\n            :op1 \"John\"\n            :op2 \"Swinney\")\n   :ARG0-of (h / have-org-role-91\n               :ARG2 (m / minister\n                        :mod (d / deputy)\n                        :ord (o / ordinal-entity\n                                :value 1))))", "(r / respond-01\n   :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\")))\n   :ARG1 (r2 / report-01\n             :ARG1 (d2 / die-01\n                       :ARG1 (p2 / person\n                                 :name (n2 / name\n                                           :op1 \"Bailey\"\n                                           :op2 \"Gwynne\")\n                                 :mod (s / schoolboy)\n                                 :location (c / city\n                                              :name (n3 / name\n                                                        :op1 \"Aberdeen\"))))))", "(p3 / person\n    :ARG0-of (h2 / have-org-role-91\n                 :ARG2 (m2 / member)))", "(w / week\n   :mod (n4 / next))", "(g / give-01\n   :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\"))))", "(r / respond-01\n   :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\")))\n   :ARG1 (r2 / report-01))", "(r2 / report-01\n    :ARG1 (d2 / die-01))", "(d2 / die-01\n    :ARG1 (p2 / person :name (n2 / name :op1 \"Bailey\" :op2 \"Gwynne\"))))", "(g / give-01\n   :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\"))))", "(r / respond-01\n   :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\"))))", "(r / respond-01\n   :ARG1 (r2 / report-01))", "(r2 / report-01\n    :ARG1 (d2 / die-01))", "(d2 / die-01\n    :ARG1 (p2 / person :name (n2 / name :op1 \"Bailey\" :op2 \"Gwynne\"))))", "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Swinney\")\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m / minister\n                              :mod (d / deputy)\n                              :ord (o / ordinal-entity\n                                      :value 1))))\n   :ARG1 (r / respond-01\n            :ARG0 p\n            :ARG1 (r2 / report-01\n                      :ARG1 (d2 / die-01\n                                :ARG1 (p2 / person\n                                          :name (n2 / name\n                                                    :op1 \"Bailey\"\n                                                    :op2 \"Gwynne\")\n                                          :mod (s / schoolboy)))))\n   :ARG2 (p3 / person\n             :ARG0 (h2 / have-org-role-91\n                       :ARG2 (m2 / member))))", "(g / give-01\n   :time (w / week\n            :mod (n4 / next)))"], "smus": ["First Deputy Minister John Swinney will give.", "John Swinney's response to the report of the death of schoolboy Bailey Gwynne in Aberdeen:", "Give to the members.", "Give next week.", "John Swinney is the first Deputy Minister.", "John Swinney's response to a report of the death of schoolboy Bailey Gwynne in Aberdeen.", "Member", "Next week.", "John Swinney will give.", "John Swinney's response to the report:", "Report of deaths", "Bailey Gwynne died.", "John Swinney will give.", "John Swinney's response:", "Response to report", "Report of deaths", "Bailey Gwynne died.", "First Deputy Minister John Swinney will give a response to a report of the death of schoolboy Bailey Gwynne to members.", "Give next week."]}, {"instance_id": "pyrxsum-89", "summary": "Police at the Download Festival have kept their promise and have been posing for fan photos despite extra security.", "summary_trees": ["# ::snt Police at the Download Festival have kept their promise and have been posing for fan photos despite extra security.\n(a / and\n      :op1 (k / keep-01\n            :ARG0 (p / police\n                  :location (f / festival\n                        :name (n / name\n                              :op1 \"Download\"\n                              :op2 \"Festival\")))\n            :ARG1 (p2 / promise-01\n                  :ARG0 p))\n      :op2 (p3 / pose-01\n            :ARG0 p\n            :ARG2 (p4 / photo\n                  :mod (f2 / fan))\n            :concession (s / security\n                  :mod (e / extra))))"], "tree": ["(a / and\n   :op1 (k / keep-01\n           :ARG0 (p / police\n                    :location (f / festival\n                                 :name (n / name\n                                          :op1 \"Download\"\n                                          :op2 \"Festival\")))\n           :ARG1 (p2 / promise-01\n                     :ARG0 p)))", "(a / and\n   :op2 (p3 / pose-01\n            :ARG0 (p / police)\n            :ARG2 (p4 / photo\n                      :mod (f2 / fan))\n            :concession (s / security\n                           :mod (e / extra))))", "(k / keep-01\n   :ARG0 (p / police\n            :location (f / festival\n                         :name (n / name\n                                  :op1 \"Download\"\n                                  :op2 \"Festival\")))\n   :ARG1 (p2 / promise-01\n             :ARG0 p))", "(p3 / pose-01\n    :ARG0 (p / police)\n    :ARG2 (p4 / photo\n              :mod (f2 / fan))\n    :concession (s / security\n                   :mod (e / extra)))", "(k / keep-01\n   :ARG0 (p / police))", "(p2 / promise-01\n    :ARG0 (p / police))", "(p3 / pose-01\n    :ARG0 (p / police)\n    :ARG2 (p4 / photo))", "(k / keep-01\n   :ARG0 (p / police))", "(p2 / promise-01\n    :ARG0 (p / police))", "(p3 / pose-01\n    :ARG0 (p / police))", "(p3 / pose-01\n    :ARG2 (p4 / photo))", "(k / keep-01\n   :ARG0 (p / police\n            :location (f / festival\n                         :name (n / name\n                                  :op1 \"Download\"\n                                  :op2 \"Festival\")))\n   :ARG1 (p2 / promise-01\n             :ARG0 p))", "(p3 / pose-01\n    :ARG0 (p / police)\n    :ARG2 (p4 / photo\n              :mod (f2 / fan))\n    :concession (s / security\n                   :mod (e / extra)))", "(a / and\n   :op1 (k / keep-01\n           :ARG0 (p / police)\n           :ARG1 (p2 / promise-01\n                     :ARG0 p))\n   :op2 (p3 / pose-01\n            :ARG0 p\n            :ARG2 (p4 / photo\n                      :mod (f2 / fan))\n            :concession (s / security\n                           :mod (e / extra))))", "(a / and\n   :op1 (k / keep-01)\n   :op2 (p3 / pose-01))"], "smus": ["And the police at the Download Festival have kept their promise.", "And police were posing with fan photos despite extra security.", "Police at the Download Festival have kept their promise.", "Police posing with fan photos despite extra security.", "Police kept an eye on.", "Police promise.", "Police posing with photos.", "Police kept an eye on.", "Police promise.", "Police posing.", "Posing for photos.", "Police at the Download Festival have kept their promise.", "Police posing with fan photos despite extra security.", "The police have kept their promise and are posing with fan photos despite extra security.", "kept and posing."]}, {"instance_id": "pyrxsum-90", "summary": "Competition for nesting sites could explain why some birds and bumblebees are declining faster than others.", "summary_trees": ["# ::snt Competition for nesting sites could explain why some birds and bumblebees are declining faster than others.\n(p / possible-01\n      :ARG1 (e / explain-01\n            :ARG0 (c / compete-01\n                  :ARG2 (s / site\n                        :location-of (n / nest-01)))\n            :ARG1 (t / thing\n                  :ARG0-of (c2 / cause-01\n                        :ARG1 (d / decline-01\n                              :ARG1 (a / and\n                                    :op1 (b / bird\n                                          :mod (s2 / some))\n                                    :op2 (b2 / bee\n                                          :mod s2))\n                              :ARG1-of (h / have-degree-91\n                                    :ARG2 (f / fast-02)\n                                    :ARG3 (m / more)\n                                    :ARG4 (o / other)))))))"], "tree": ["(p / possible-01\n   :ARG1 (e / explain-01\n            :ARG0 (c / compete-01\n                     :ARG2 (s / site\n                              :location-of (n / nest-01)))\n            :ARG1 (t / thing\n                     :ARG0-of (c2 / cause-01\n                                  :ARG1 (d / decline-01\n                                           :ARG1 (a / and\n                                                    :op1 (b / bird\n                                                            :mod (s2 / some))\n                                                    :op2 (b2 / bee\n                                                             :mod s2))\n                                           :ARG1-of (h / have-degree-91\n                                                       :ARG2 (f / fast-02)\n                                                       :ARG3 (m / more)\n                                                       :ARG4 (o / other)))))))", "(e / explain-01\n   :ARG0 (c / compete-01\n            :ARG2 (s / site\n                     :location-of (n / nest-01)))\n   :ARG1 (t / thing\n            :ARG0-of (c2 / cause-01\n                         :ARG1 (d / decline-01\n                                  :ARG1 (a / and\n                                           :op1 (b / bird\n                                                   :mod (s2 / some))\n                                           :op2 (b2 / bee\n                                                    :mod s2))\n                                  :ARG1-of (h / have-degree-91\n                                              :ARG2 (f / fast-02)\n                                              :ARG3 (m / more)\n                                              :ARG4 (o / other))))))", "(p / possible-01\n   :ARG1 (e / explain-01))", "(e / explain-01\n   :ARG0 (c / compete-01))", "(c / compete-01\n   :ARG2 (s / site))", "(n / nest-01)", "(c2 / cause-01\n    :ARG1 (d / decline-01))", "(d / decline-01\n   :ARG1 (a / and))", "(f / fast-02)", "(p / possible-01\n   :ARG1 (e / explain-01))", "(e / explain-01\n   :ARG0 (c / compete-01))", "(c / compete-01\n   :ARG2 (s / site))", "(c2 / cause-01\n    :ARG1 (d / decline-01))", "(d / decline-01\n   :ARG1 (a / and))", "(p / possible-01\n   :ARG1 (e / explain-01\n            :ARG0 (c / compete-01\n                     :ARG2 (s / site\n                              :location-of (n / nest-01)))\n            :ARG1 (t / thing\n                     :ARG0-of (c2 / cause-01\n                                  :ARG1 (d / decline-01\n                                           :ARG1 (b / bird\n                                                    :mod (s2 / some)))))))", "(p / possible-01\n   :ARG1 (e / explain-01\n            :ARG0 (c / compete-01\n                     :ARG2 (s / site\n                              :location-of (n / nest-01)))\n            :ARG1 (t / thing\n                     :ARG0-of (c2 / cause-01\n                                  :ARG1 (d / decline-01\n                                           :ARG1 (b2 / bee\n                                                     :mod (s2 / some))\n                                           :ARG1-of (h / have-degree-91\n                                                       :ARG2 (f / fast-02)\n                                                       :ARG3 (m / more)\n                                                       :ARG4 (o / other)))))))", "(p / possible-01\n   :ARG1 (e / explain-01\n            :ARG0 (c / compete-01\n                     :ARG2 (s / site))\n            :ARG1 (t / thing\n                     :ARG0 (c2 / cause-01\n                               :ARG1 (d / decline-01\n                                        :ARG1 (a / and\n                                                 :op1 (b / bird\n                                                         :mod (s2 / some))\n                                                 :op2 (b2 / bee\n                                                          :mod s2))\n                                        :ARG1 (h / have-degree-91\n                                                 :ARG2 (f / fast-02)\n                                                 :ARG3 (m / more)\n                                                 :ARG4 (o / other)))))))", "(p / possible-01)"], "smus": ["Competition for nesting sites can explain why some birds and bees are declining faster than others.", "Competition for nest sites will explain why some birds and bees are declining faster than others.", "Could explain.", "Competition does explain...", "Competition between sites.", "Nested.", "So, declining.", "The decline is...", "Fast.", "Could explain.", "Competition does explain...", "Competition between sites.", "So, declining.", "The decline is...", "Competition for nesting sites can explain why some birds are declining.", "Competition for nest sites can explain why some bees are declining faster than others.", "Competition among sites can explain why some birds and bees are declining faster than others.", "Maybe."]}, {"instance_id": "pyrxsum-91", "summary": "The UK should not have to pay \"large\" sums to the EU to trade with it after Brexit, Boris Johnson has said.", "summary_trees": ["# ::snt The UK should not have to pay \"large\" sums to the EU to trade with it after Brexit, Boris Johnson has said.\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Boris\"\n                  :op2 \"Johnson\"))\n      :ARG1 (r / recommend-01\n            :ARG1 (o / obligate-01\n                  :polarity -\n                  :ARG1 (c / country\n                        :name (n2 / name\n                              :op1 \"UK\"))\n                  :ARG2 (p2 / pay-01\n                        :ARG0 c\n                        :ARG1 (s2 / sum\n                              :mod (l / large))\n                        :ARG2 (o2 / organization\n                              :name (n3 / name\n                                    :op1 \"EU\"))\n                        :purpose (t / trade-01\n                              :ARG0 c\n                              :ARG2 o2\n                              :time (a / after\n                                    :op1 (l2 / leave-15\n                                          :ARG0 c\n                                          :ARG1 o2)))))))"], "tree": ["(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Boris\"\n                     :op2 \"Johnson\")))", "(s / say-01\n   :ARG1 (r / recommend-01\n            :ARG1 (o / obligate-01\n                     :polarity -\n                     :ARG1 (c / country\n                              :name (n2 / name\n                                        :op1 \"UK\"))\n                     :ARG2 (p2 / pay-01\n                               :ARG0 c\n                               :ARG1 (s2 / sum\n                                         :mod (l / large))\n                               :ARG2 (o2 / organization\n                                         :name (n3 / name\n                                                   :op1 \"EU\"))\n                               :purpose (t / trade-01\n                                           :ARG0 c\n                                           :ARG2 o2\n                                           :time (a / after\n                                                    :op1 (l2 / leave-15\n                                                             :ARG0 c\n                                                             :ARG1 o2)))))))", "(p / person\n   :name (n / name\n            :op1 \"Boris\"\n            :op2 \"Johnson\"))", "(r / recommend-01\n   :ARG1 (o / obligate-01\n            :polarity -\n            :ARG1 (c / country\n                     :name (n2 / name\n                               :op1 \"UK\"))\n            :ARG2 (p2 / pay-01\n                      :ARG0 c\n                      :ARG1 (s2 / sum\n                                :mod (l / large))\n                      :ARG2 (o2 / organization\n                                :name (n3 / name\n                                          :op1 \"EU\"))\n                      :purpose (t / trade-01\n                                  :ARG0 c\n                                  :ARG2 o2\n                                  :time (a / after\n                                           :op1 (l2 / leave-15\n                                                    :ARG0 c\n                                                    :ARG1 o2))))))", "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Boris\" :op2 \"Johnson\")))", "(r / recommend-01\n   :ARG1 (o / obligate-01))", "(o / obligate-01\n   :polarity -\n   :ARG1 (c / country :name (n2 / name :op1 \"UK\")))", "(p2 / pay-01\n    :ARG0 (c / country :name (n2 / name :op1 \"UK\"))\n    :ARG1 (s2 / sum))", "(t / trade-01\n   :ARG0 (c / country :name (n2 / name :op1 \"UK\"))\n   :ARG2 (o2 / organization :name (n3 / name :op1 \"EU\"))\n   :time (a / after))", "(s / say-01\n   :ARG0 (p / person :name (n / name :op1 \"Boris\" :op2 \"Johnson\")))", "(r / recommend-01\n   :ARG1 (o / obligate-01))", "(o / obligate-01\n   :polarity -)", "(o / obligate-01\n   :ARG1 (c / country :name (n2 / name :op1 \"UK\")))", "(p2 / pay-01\n    :ARG0 (c / country :name (n2 / name :op1 \"UK\")))", "(p2 / pay-01\n    :ARG1 (s2 / sum))", "(t / trade-01\n   :ARG0 (c / country :name (n2 / name :op1 \"UK\")))", "(t / trade-01\n   :ARG2 (o2 / organization :name (n3 / name :op1 \"EU\")))", "(t / trade-01\n   :time (a / after))", "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Boris\"\n                     :op2 \"Johnson\"))\n   :ARG1 (r / recommend-01\n            :ARG1 (o / obligate-01\n                     :polarity -\n                     :ARG1 (c / country\n                              :name (n2 / name\n                                        :op1 \"UK\"))\n                     :ARG2 (p2 / pay-01\n                               :ARG0 c\n                               :ARG1 (s2 / sum\n                                         :mod (l / large))\n                               :ARG2 (o2 / organization\n                                         :name (n3 / name\n                                                   :op1 \"EU\"))))))", "(s / say-01)"], "smus": ["Boris Johnson said --", "It is said that the UK should not have to pay large sums to the EU to trade with the EU after leaving the EU.", "Boris Johnson", "The UK should not have to pay large sums to the EU to trade with the EU after leaving the EU.", "Boris Johnson said --", "Should have to.", "The UK does not have to.", "The UK will pay the sums.", "The UK will trade with the EU later.", "Boris Johnson said --", "Should have to.", "Not necessarily.", "The UK must.", "The UK is paying.", "Payment of sums.", "The UK is trading.", "Trade with the EU", "Trade after.", "Boris Johnson has said that the UK should not have to pay large sums to the EU.", "said."]}, {"instance_id": "pyrxsum-92", "summary": "A grizzly bear has attacked and killed a cyclist just outside the Glacier National Park in the northern US state of Montana, police say.", "summary_trees": ["# ::snt A grizzly bear has attacked and killed a cyclist just outside the Glacier National Park in the northern US state of Montana, police say.\n(s / say-01\n      :ARG0 (p / police)\n      :ARG1 (a / and\n            :op1 (a2 / attack-01\n                  :ARG0 (b / bear\n                        :mod (g / grizzly))\n                  :ARG1 (p2 / person\n                        :ARG0-of (c / cycle-01)))\n            :op2 (k / kill-01\n                  :ARG0 b\n                  :ARG1 p2)\n            :location (o / outside\n                  :op1 (p3 / park\n                        :name (n / name\n                              :op1 \"Glacier\"\n                              :op2 \"National\"\n                              :op3 \"Park\")\n                        :location (n2 / north\n                              :part-of (s2 / state\n                                    :name (n3 / name\n                                          :op1 \"Montana\")\n                                    :location (c2 / country\n                                          :name (n4 / name\n                                                :op1 \"US\")))))\n                  :mod (j / just))))"], "tree": ["(s / say-01\n   :ARG0 (p / police))", "(s / say-01\n   :ARG1 (a / and\n            :op1 (a2 / attack-01\n                     :ARG0 (b / bear\n                              :mod (g / grizzly))\n                     :ARG1 (p2 / person\n                               :ARG0-of (c / cycle-01)))\n            :op2 (k / kill-01\n                    :ARG0 b\n                    :ARG1 p2)\n            :location (o / outside\n                         :op1 (p3 / park\n                                  :name (n / name\n                                           :op1 \"Glacier\"\n                                           :op2 \"National\"\n                                           :op3 \"Park\")\n                                  :location (n2 / north\n                                                :part-of (s2 / state\n                                                             :name (n3 / name\n                                                                       :op1 \"Montana\")\n                                                             :location (c2 / country\n                                                                           :name (n4 / name\n                                                                                     :op1 \"US\")))))\n                         :mod (j / just))))", "(a / and\n   :op1 (a2 / attack-01\n            :ARG0 (b / bear\n                     :mod (g / grizzly))\n            :ARG1 (p2 / person\n                      :ARG0-of (c / cycle-01)))\n   :op2 (k / kill-01\n           :ARG0 b\n           :ARG1 p2)\n   :location (o / outside\n                :op1 (p3 / park\n                         :name (n / name\n                                  :op1 \"Glacier\"\n                                  :op2 \"National\"\n                                  :op3 \"Park\")\n                         :location (n2 / north\n                                       :part-of (s2 / state\n                                                    :name (n3 / name\n                                                              :op1 \"Montana\")\n                                                    :location (c2 / country\n                                                                  :name (n4 / name\n                                                                            :op1 \"US\")))))\n                :mod (j / just)))", "(s / say-01\n   :ARG0 (p / police))", "(a2 / attack-01\n    :ARG0 (b / bear))", "(c / cycle-01)", "(k / kill-01\n   :ARG0 (b / bear)\n   :ARG1 (p2 / person))", "(s / say-01\n   :ARG0 (p / police))", "(a2 / attack-01\n    :ARG0 (b / bear))", "(k / kill-01\n   :ARG0 (b / bear))", "(k / kill-01\n   :ARG1 (p2 / person))", "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (a2 / attack-01\n             :ARG0 (b / bear\n                      :mod (g / grizzly))\n             :ARG1 (p2 / person\n                       :ARG0-of (c / cycle-01))))", "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (k / kill-01\n            :ARG0 (b / bear)\n            :ARG1 (p2 / person)\n            :location (o / outside\n                         :op1 (p3 / park\n                                  :name (n / name\n                                           :op1 \"Glacier\"\n                                           :op2 \"National\"\n                                           :op3 \"Park\")\n                                  :location (n2 / north\n                                                :part-of (s2 / state\n                                                             :name (n3 / name\n                                                                       :op1 \"Montana\")\n                                                             :location (c2 / country\n                                                                           :name (n4 / name\n                                                                                     :op1 \"US\")))))\n                         :mod (j / just))))", "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (a / and\n            :op1 (a2 / attack-01\n                     :ARG0 (b / bear\n                              :mod (g / grizzly))\n                     :ARG1 (p2 / person\n                               :ARG0 (c / cycle-01)))\n            :op2 (k / kill-01\n                    :ARG0 b\n                    :ARG1 p2)))", "(s / say-01)"], "smus": ["Police say.", "The grizzly bear attacked and killed a cyclist just outside Glacier National Park in northern Montana, US.", "Just outside Glacier National Park in northern Montana, US, a grizzly bear attacked and killed a cyclist.", "Police say.", "The bear was attacked.", "Cycle.", "The bear killed people.", "Police say.", "The bear was attacked.", "The bear killed.", "killed people.", "Police say a grizzly bear attacked a cyclist.", "Police say a bear killed people just outside Glacier National Park in northern Montana, US.", "Police say a grizzly bear attacked and killed a cyclist.", "Say."]}, {"instance_id": "pyrxsum-93", "summary": "A man has been arrested over the \"violent assault\" and rape of a woman in a railway station car park, police have said.", "summary_trees": ["# ::snt A man has been arrested over the \"violent assault\" and rape of a woman in a railway station car park, police have said.\n(s / say-01\n      :ARG0 (p / police)\n      :ARG1 (a / arrest-01\n            :ARG1 (m / man)\n            :ARG2 (a2 / and\n                  :op1 (a3 / assault-01\n                        :ARG0 m\n                        :ARG1 (w / woman)\n                        :mod (v / violent))\n                  :op2 (r / rape-01\n                        :ARG0 m\n                        :ARG1 w)\n                  :location (p2 / park\n                        :mod (c / car)\n                        :mod (s2 / station\n                              :mod (r2 / railway))))))"], "tree": ["(s / say-01\n   :ARG0 (p / police))", "(s / say-01\n   :ARG1 (a / arrest-01\n            :ARG1 (m / man)\n            :ARG2 (a2 / and\n                      :op1 (a3 / assault-01\n                               :ARG0 m\n                               :ARG1 (w / woman)\n                               :mod (v / violent))\n                      :op2 (r / rape-01\n                              :ARG0 m\n                              :ARG1 w)\n                      :location (p2 / park\n                                    :mod (c / car)\n                                    :mod (s2 / station\n                                             :mod (r2 / railway))))))", "(a / arrest-01\n   :ARG1 (m / man)\n   :ARG2 (a2 / and\n             :op1 (a3 / assault-01\n                      :ARG0 m\n                      :ARG1 (w / woman)\n                      :mod (v / violent))\n             :op2 (r / rape-01\n                     :ARG0 m\n                     :ARG1 w)\n             :location (p2 / park\n                           :mod (c / car)\n                           :mod (s2 / station\n                                    :mod (r2 / railway)))))", "(s / say-01\n   :ARG0 (p / police))", "(a / arrest-01\n   :ARG1 (m / man))", "(a3 / assault-01\n    :ARG0 (m / man)\n    :ARG1 (w / woman))", "(r / rape-01\n   :ARG0 (m / man)\n   :ARG1 (w / woman))", "(s / say-01\n   :ARG0 (p / police))", "(a / arrest-01\n   :ARG1 (m / man))", "(a3 / assault-01\n    :ARG0 (m / man))", "(a3 / assault-01\n    :ARG1 (w / woman))", "(r / rape-01\n   :ARG0 (m / man))", "(r / rape-01\n   :ARG1 (w / woman))", "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (a / arrest-01\n            :ARG1 (m / man)\n            :ARG2 (a3 / assault-01\n                      :ARG0 m\n                      :ARG1 (w / woman)\n                      :mod (v / violent))))", "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (a / arrest-01\n            :ARG1 (m / man)\n            :ARG2 (r / rape-01\n                     :ARG0 m\n                     :ARG1 (w / woman)\n                     :location (p2 / park\n                                   :mod (c / car)\n                                   :mod (s2 / station\n                                            :mod (r2 / railway))))))", "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (a / arrest-01\n            :ARG1 (m / man)\n            :ARG2 (a2 / and\n                      :op1 (a3 / assault-01\n                               :ARG0 m\n                               :ARG1 (w / woman)\n                               :mod (v / violent))\n                      :op2 (r / rape-01\n                              :ARG0 m\n                              :ARG1 w))))", "(s / say-01)"], "smus": ["Police said.", "The man was arrested for a violent assault and rape against a woman in a car park at a railway station, it was said.", "The man was arrested for a violent assault and rape against a woman in a car park at a railway station.", "Police said.", "The man was arrested.", "A man assaulted a woman.", "A man raping a woman.", "Police said.", "The man was arrested.", "The man was the victim of an assault.", "The woman was assaulted.", "The man was raped.", "Rape of a woman", "Police say a man was arrested for a violent assault on a woman.", "Police said a man was arrested for raping a woman in a car park at a railway station.", "Police have said the man was arrested for a violent assault and rape against a woman.", "said."]}, {"instance_id": "pyrxsum-94", "summary": "A diabetic MP who asked Coca-Cola not to take its Christmas truck to Leicester has been accused of hypocrisy for opening a sweet shop in the city.", "summary_trees": ["# ::snt A diabetic MP who asked Coca-Cola not to take its Christmas truck to Leicester has been accused of hypocrisy for opening a sweet shop in the city.\n(a / accuse-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (p2 / parliament)\n                  :ARG2 (m / member\n                        :mod (d / diabetes)))\n            :ARG0-of (a2 / ask-02\n                  :ARG1 (t / take-01\n                        :polarity -\n                        :ARG0 (c / company\n                              :name (n / name\n                                    :op1 \"Coke-Cola\"))\n                        :ARG1 (t2 / truck\n                              :mod (f / festival\n                                    :name (n2 / name\n                                          :op1 \"Christmas\"))\n                              :poss c)\n                        :ARG3 (c2 / city\n                              :name (n3 / name\n                                    :op1 \"Leicester\")))\n                  :ARG2 c))\n      :ARG2 (h2 / hypocrisy)\n      :ARG1-of (c3 / cause-01\n            :ARG0 (o / open-01\n                  :ARG0 p\n                  :ARG1 (s / shop\n                        :mod (s2 / sweet))\n                  :location c2)))"], "tree": ["(a / accuse-01\n   :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (p2 / parliament)\n                        :ARG2 (m / member\n                                 :mod (d / diabetes)))\n            :ARG0-of (a2 / ask-02\n                         :ARG1 (t / take-01\n                                  :polarity -\n                                  :ARG0 (c / company\n                                           :name (n / name\n                                                    :op1 \"Coke-Cola\"))\n                                  :ARG1 (t2 / truck\n                                            :mod (f / festival\n                                                    :name (n2 / name\n                                                              :op1 \"Christmas\"))\n                                            :poss c)\n                                  :ARG3 (c2 / city\n                                            :name (n3 / name\n                                                      :op1 \"Leicester\")))\n                         :ARG2 c)))", "(a / accuse-01\n   :ARG2 (h2 / hypocrisy))", "(a / accuse-01\n   :ARG1-of (c3 / cause-01\n                :ARG0 (o / open-01\n                         :ARG0 (p / person)\n                         :ARG1 (s / shop\n                                  :mod (s2 / sweet))\n                         :location (c2 / city :name (n3 / name :op1 \"Leicester\")))))", "(p / person\n   :ARG0-of (h / have-org-role-91\n               :ARG1 (p2 / parliament)\n               :ARG2 (m / member\n                        :mod (d / diabetes)))\n   :ARG0-of (a2 / ask-02\n                :ARG1 (t / take-01\n                         :polarity -\n                         :ARG0 (c / company\n                                  :name (n / name\n                                           :op1 \"Coke-Cola\"))\n                         :ARG1 (t2 / truck\n                                   :mod (f / festival\n                                           :name (n2 / name\n                                                     :op1 \"Christmas\"))\n                                   :poss c)\n                         :ARG3 (c2 / city\n                                   :name (n3 / name\n                                             :op1 \"Leicester\")))\n                :ARG2 c))", "(c3 / cause-01\n    :ARG0 (o / open-01\n             :ARG0 (p / person)\n             :ARG1 (s / shop\n                      :mod (s2 / sweet))\n             :location (c2 / city :name (n3 / name :op1 \"Leicester\"))))", "(a / accuse-01\n   :ARG1 (p / person))", "(a2 / ask-02\n    :ARG1 (t / take-01))", "(t / take-01\n   :polarity -\n   :ARG0 (c / company :name (n / name :op1 \"Coke-Cola\")))", "(c3 / cause-01\n    :ARG0 (o / open-01))", "(o / open-01\n   :ARG0 (p / person)\n   :ARG1 (s / shop))", "(a / accuse-01\n   :ARG1 (p / person))", "(a2 / ask-02\n    :ARG1 (t / take-01))", "(t / take-01\n   :polarity -)", "(t / take-01\n   :ARG0 (c / company :name (n / name :op1 \"Coke-Cola\")))", "(c3 / cause-01\n    :ARG0 (o / open-01))", "(o / open-01\n   :ARG0 (p / person))", "(o / open-01\n   :ARG1 (s / shop))", "(a / accuse-01\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (p2 / parliament)\n                     :ARG2 (m / member\n                              :mod (d / diabetes)))\n            :ARG0 (a2 / ask-02\n                      :ARG1 (t / take-01\n                               :polarity -\n                               :ARG0 (c / company\n                                        :name (n / name\n                                                 :op1 \"Coke-Cola\"))\n                               :ARG1 (t2 / truck\n                                         :mod (f / festival\n                                                 :name (n2 / name\n                                                           :op1 \"Christmas\"))\n                                         :poss c)\n                               :ARG3 (c2 / city\n                                         :name (n3 / name\n                                                   :op1 \"Leicester\")))\n                      :ARG2 c))\n   :ARG2 (h2 / hypocrisy)\n   :ARG1 (c3 / cause-01\n             :ARG0 (o / open-01\n                      :ARG0 p\n                      :ARG1 (s / shop\n                               :mod (s2 / sweet)))))", "(a / accuse-01)"], "smus": ["A diabetic MP who asked Coke-Cola not to take their Christmas truck to Leicester was accused of doing so.", "Hypocrisy is accused.", "accused because people opened a sweet shop in the city of Leicester.", "A diabetic MP asked Coke-Cola not to take their Christmas truck to Leicester.", "Because people open a sweet shop in Leicester city.", "The people were accused.", "\"Take,\" asked.", "Coke-Cola didn't take.", "Because it's open.", "People open the shop.", "The people were accused.", "\"Take,\" asked.", "Don't take.", "Coca-Cola will take.", "Because it's open.", "People are open minded.", "The shop is open.", "A diabetic MP who asked Coke-Cola not to take their Christmas truck to Leicester was accused of hypocrisy for opening a sweet shop.", "accused."]}, {"instance_id": "pyrxsum-95", "summary": "An Orlando mother who was found not guilty of murdering her two-year old daughter Caylee has broken her silence six years later.", "summary_trees": ["# ::snt An Orlando mother who was found not guilty of murdering her two-year old daughter Caylee has broken her silence six years later.\n(b / break-18\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (m / mother))\n            :location (c / city\n                  :name (n / name\n                        :op1 \"Orlando\"))\n            :ARG0-of (f / find-01\n                  :ARG1 (g / guilty-01\n                        :polarity -\n                        :ARG1 p\n                        :ARG2 (m2 / murder-01\n                              :ARG0 p\n                              :ARG1 (p2 / person\n                                    :name (n2 / name\n                                          :op1 \"Caylee\")\n                                    :ARG0-of (h2 / have-rel-role-91\n                                          :ARG1 p\n                                          :ARG2 (d / daughter))\n                                    :age (t / temporal-quantity\n                                          :quant 2\n                                          :unit (y / year)))))))\n      :ARG1 (s / silence\n            :poss p)\n      :time (a / after\n            :quant (t2 / temporal-quantity\n                  :quant 6\n                  :unit (y2 / year))))"], "tree": ["(b / break-18\n   :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                        :ARG2 (m / mother))\n            :location (c / city\n                         :name (n / name\n                                  :op1 \"Orlando\"))\n            :ARG0-of (f / find-01\n                        :ARG1 (g / guilty-01\n                                 :polarity -\n                                 :ARG1 p\n                                 :ARG2 (m2 / murder-01\n                                           :ARG0 p\n                                           :ARG1 (p2 / person\n                                                     :name (n2 / name\n                                                               :op1 \"Caylee\")\n                                                     :ARG0-of (h2 / have-rel-role-91\n                                                                  :ARG1 p\n                                                                  :ARG2 (d / daughter))\n                                                     :age (t / temporal-quantity\n                                                             :quant 2\n                                                             :unit (y / year))))))))", "(b / break-18\n   :ARG1 (s / silence\n            :poss (p / person)))", "(b / break-18\n   :time (a / after\n            :quant (t2 / temporal-quantity\n                       :quant 6\n                       :unit (y2 / year))))", "(p / person\n   :ARG0-of (h / have-rel-role-91\n               :ARG2 (m / mother))\n   :location (c / city\n                :name (n / name\n                         :op1 \"Orlando\"))\n   :ARG0-of (f / find-01\n               :ARG1 (g / guilty-01\n                        :polarity -\n                        :ARG1 p\n                        :ARG2 (m2 / murder-01\n                                  :ARG0 p\n                                  :ARG1 (p2 / person\n                                            :name (n2 / name\n                                                      :op1 \"Caylee\")\n                                            :ARG0-of (h2 / have-rel-role-91\n                                                         :ARG1 p\n                                                         :ARG2 (d / daughter))\n                                            :age (t / temporal-quantity\n                                                    :quant 2\n                                                    :unit (y / year)))))))", "(a / after\n   :quant (t2 / temporal-quantity\n              :quant 6\n              :unit (y2 / year)))", "(f / find-01\n   :ARG1 (g / guilty-01))", "(g / guilty-01\n   :polarity -\n   :ARG1 (p / person)\n   :ARG2 (m2 / murder-01))", "(m2 / murder-01\n    :ARG0 (p / person)\n    :ARG1 (p2 / person :name (n2 / name :op1 \"Caylee\"))))", "(f / find-01\n   :ARG1 (g / guilty-01))", "(g / guilty-01\n   :polarity -)", "(g / guilty-01\n   :ARG1 (p / person))", "(g / guilty-01\n   :ARG2 (m2 / murder-01))", "(m2 / murder-01\n    :ARG0 (p / person))", "(m2 / murder-01\n    :ARG1 (p2 / person :name (n2 / name :op1 \"Caylee\"))))", "(b / break-18\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (m / mother))\n            :ARG0 (f / find-01\n                     :ARG1 (g / guilty-01\n                              :polarity -\n                              :ARG1 p\n                              :ARG2 (m2 / murder-01\n                                        :ARG0 p\n                                        :ARG1 (p2 / person\n                                                  :name (n2 / name\n                                                            :op1 \"Caylee\")\n                                                  :ARG0 (h2 / have-rel-role-91\n                                                            :ARG1 p\n                                                            :ARG2 (d / daughter))\n                                                  :age (t / temporal-quantity\n                                                          :quant 2\n                                                          :unit (y / year)))))))\n   :ARG1 (s / silence\n            :poss p))", "(b / break-18\n   :time (a / after\n            :quant (t2 / temporal-quantity\n                       :quant 6\n                       :unit (y2 / year))))"], "smus": ["The mother in Orlando, who has been found not guilty of murdering her two-year-old daughter, Caylee, was broken.", "The silence of the people has been broken.", "Breaked six years later.", "The mother in Orlando, who has been found not guilty of murdering her two-year-old daughter, Caylee.", "6 years later.", "Guilty found.", "The person was not guilty of murder.", "Caylee was murdered by the people.", "Guilty found.", "Not guilty.", "Guilty.", "guilty of murder.", "Murder by the people.", "Caylee was murdered.", "The mother has broken her silence after being found not guilty of murdering her two-year-old daughter, Caylee.", "Breaked six years later."]}, {"instance_id": "pyrxsum-96", "summary": "The devolution settlement for Wales is less fair than those offered to Scotland and Northern Ireland, the Archbishop of Wales has said.", "summary_trees": ["# ::snt The devolution settlement for Wales is less fair than those offered to Scotland and Northern Ireland, the Archbishop of Wales has said.\n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c / country\n                        :name (n / name\n                              :op1 \"Wales\"))\n                  :ARG2 (a / archbishop)))\n      :ARG1 (f / fair-01\n            :ARG1 (s2 / settlement\n                  :mod (d / devolve-01)\n                  :beneficiary c)\n            :ARG2-of (h2 / have-degree-91\n                  :ARG1 s2\n                  :ARG3 (l / less)\n                  :ARG4 (s3 / settlement\n                        :ARG1-of (o / offer-01\n                              :ARG3 (a2 / and\n                                    :op1 (c2 / country\n                                          :name (n2 / name\n                                                :op1 \"Scotland\"))\n                                    :op2 (c3 / country\n                                          :name (n3 / name\n                                                :op1 \"Northern\"\n                                                :op2 \"Ireland\"))))))))"], "tree": ["(s / say-01\n   :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (c / country\n                                 :name (n / name\n                                          :op1 \"Wales\"))\n                        :ARG2 (a / archbishop))))", "(s / say-01\n   :ARG1 (f / fair-01\n            :ARG1 (s2 / settlement\n                      :mod (d / devolve-01)\n                      :beneficiary (c / country :name (n / name :op1 \"Wales\")))\n            :ARG2-of (h2 / have-degree-91\n                         :ARG1 s2\n                         :ARG3 (l / less)\n                         :ARG4 (s3 / settlement\n                                   :ARG1-of (o / offer-01\n                                               :ARG3 (a2 / and\n                                                         :op1 (c2 / country\n                                                                  :name (n2 / name\n                                                                            :op1 \"Scotland\"))\n                                                         :op2 (c3 / country\n                                                                  :name (n3 / name\n                                                                            :op1 \"Northern\"\n                                                                            :op2 \"Ireland\"))))))))", "(p / person\n   :ARG0-of (h / have-org-role-91\n               :ARG1 (c / country\n                        :name (n / name\n                                 :op1 \"Wales\"))\n               :ARG2 (a / archbishop)))", "(f / fair-01\n   :ARG1 (s2 / settlement\n             :mod (d / devolve-01)\n             :beneficiary (c / country :name (n / name :op1 \"Wales\")))\n   :ARG2-of (h2 / have-degree-91\n                :ARG1 s2\n                :ARG3 (l / less)\n                :ARG4 (s3 / settlement\n                          :ARG1-of (o / offer-01\n                                      :ARG3 (a2 / and\n                                                :op1 (c2 / country\n                                                         :name (n2 / name\n                                                                   :op1 \"Scotland\"))\n                                                :op2 (c3 / country\n                                                         :name (n3 / name\n                                                                   :op1 \"Northern\"\n                                                                   :op2 \"Ireland\")))))))", "(s / say-01\n   :ARG0 (p / person))", "(f / fair-01\n   :ARG1 (s2 / settlement))", "(d / devolve-01)", "(o / offer-01\n   :ARG3 (a2 / and))", "(s / say-01\n   :ARG0 (p / person))", "(f / fair-01\n   :ARG1 (s2 / settlement))", "(o / offer-01\n   :ARG3 (a2 / and))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (c / country\n                                 :name (n / name\n                                          :op1 \"Wales\"))\n                        :ARG2 (a / archbishop)))\n   :ARG1 (f / fair-01\n            :ARG1 (s2 / settlement\n                      :mod (d / devolve-01)\n                      :beneficiary c)\n            :ARG2-of (h2 / have-degree-91\n                         :ARG1 s2\n                         :ARG3 (l / less)\n                         :ARG4 (s3 / settlement\n                                   :ARG1-of (o / offer-01\n                                               :ARG3 (c2 / country\n                                                         :name (n2 / name\n                                                                   :op1 \"Scotland\")))))))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (c / country\n                                 :name (n / name\n                                          :op1 \"Wales\"))\n                        :ARG2 (a / archbishop)))\n   :ARG1 (f / fair-01\n            :ARG1 (s2 / settlement\n                      :mod (d / devolve-01)\n                      :beneficiary c)\n            :ARG2-of (h2 / have-degree-91\n                         :ARG1 s2\n                         :ARG3 (l / less)\n                         :ARG4 (s3 / settlement\n                                   :ARG1-of (o / offer-01\n                                               :ARG3 (c3 / country\n                                                         :name (n3 / name\n                                                                   :op1 \"Northern\"\n                                                                   :op2 \"Ireland\")))))))", "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (c / country\n                              :name (n / name\n                                       :op1 \"Wales\"))\n                     :ARG2 (a / archbishop)))\n   :ARG1 (f / fair-01\n            :ARG1 (s2 / settlement\n                      :mod (d / devolve-01)\n                      :beneficiary c)\n            :ARG2 (h2 / have-degree-91\n                      :ARG1 s2\n                      :ARG3 (l / less)\n                      :ARG4 (s3 / settlement\n                                :ARG1 (o / offer-01\n                                         :ARG3 (a2 / and\n                                                   :op1 (c2 / country\n                                                            :name (n2 / name\n                                                                      :op1 \"Scotland\"))\n                                                   :op2 (c3 / country\n                                                            :name (n3 / name\n                                                                      :op1 \"Northern\"\n                                                                      :op2 \"Ireland\"))))))))", "(s / say-01)"], "smus": ["Wales' Archbishop has said --", "A devolved settlement with Wales was said to be less fair than that offered to Scotland and Northern Ireland.", "Wales' Archbishop", "A devolved settlement for Wales would be less fair than that offered to Scotland and Northern Ireland.", "People have said --", "The settlement was fair.", "Devolvement.", "offered and...", "People have said --", "The settlement was fair.", "offered and...", "Wales' Archbishop has said that a devolved settlement for Wales would be less fair than that offered to Scotland.", "Wales' Archbishop has said that a devolved settlement for Wales would be less fair than that offered to Northern Ireland.", "Wales' Archbishop has said that a devolved settlement for Wales would be less fair than the settlement offered to Scotland and Northern Ireland.", "said."]}, {"instance_id": "pyrxsum-97", "summary": "Labour will keep its election promises despite uncertainty over Brexit, but cuts to some services are inevitable, the first minister has warned.", "summary_trees": ["# ::snt Labour will keep its election promises despite uncertainty over Brexit, but cuts to some services are inevitable, the first minister has warned.\n(w / warn-01\n      :ARG0 (m / minister\n            :ord (o / ordinal-entity\n                  :value 1))\n      :ARG1 (h / have-concession-91\n            :ARG1 (p / possible-01\n                  :polarity -\n                  :ARG1 (a / avoid-01\n                        :ARG1 (c / cut-02\n                              :ARG1 (s / service\n                                    :mod (s2 / some)))))\n            :ARG2 (k / keep-01\n                  :ARG0 (p2 / political-party\n                        :name (n / name\n                              :op1 \"Labour\"))\n                  :ARG1 (p3 / promise-01\n                        :ARG0 p2\n                        :mod (e / elect-01))\n                  :concession (c2 / certain\n                        :polarity -\n                        :domain (l / leave-15\n                              :ARG1 (c3 / country\n                                    :name (n2 / name\n                                          :op1 \"Great\"\n                                          :op2 \"Britain\")))))))"], "tree": ["(w / warn-01\n   :ARG0 (m / minister\n            :ord (o / ordinal-entity\n                    :value 1)))", "(w / warn-01\n   :ARG1 (h / have-concession-91\n            :ARG1 (p / possible-01\n                     :polarity -\n                     :ARG1 (a / avoid-01\n                              :ARG1 (c / cut-02\n                                       :ARG1 (s / service\n                                                :mod (s2 / some)))))\n            :ARG2 (k / keep-01\n                     :ARG0 (p2 / political-party\n                               :name (n / name\n                                        :op1 \"Labour\"))\n                     :ARG1 (p3 / promise-01\n                               :ARG0 p2\n                               :mod (e / elect-01))\n                     :concession (c2 / certain\n                                     :polarity -\n                                     :domain (l / leave-15\n                                                :ARG1 (c3 / country\n                                                          :name (n2 / name\n                                                                    :op1 \"Great\"\n                                                                    :op2 \"Britain\")))))))", "(m / minister\n   :ord (o / ordinal-entity\n           :value 1))", "(h / have-concession-91\n   :ARG1 (p / possible-01\n            :polarity -\n            :ARG1 (a / avoid-01\n                     :ARG1 (c / cut-02\n                              :ARG1 (s / service\n                                       :mod (s2 / some)))))\n   :ARG2 (k / keep-01\n            :ARG0 (p2 / political-party\n                      :name (n / name\n                               :op1 \"Labour\"))\n            :ARG1 (p3 / promise-01\n                      :ARG0 p2\n                      :mod (e / elect-01))\n            :concession (c2 / certain\n                            :polarity -\n                            :domain (l / leave-15\n                                       :ARG1 (c3 / country\n                                                 :name (n2 / name\n                                                           :op1 \"Great\"\n                                                           :op2 \"Britain\"))))))", "(w / warn-01\n   :ARG0 (m / minister))", "(p / possible-01\n   :polarity -\n   :ARG1 (a / avoid-01))", "(a / avoid-01\n   :ARG1 (c / cut-02))", "(c / cut-02\n   :ARG1 (s / service))", "(k / keep-01\n   :ARG0 (p2 / political-party :name (n / name :op1 \"Labour\")))", "(p3 / promise-01\n    :ARG0 (p2 / political-party :name (n / name :op1 \"Labour\"))\n    :mod (e / elect-01))", "(e / elect-01)", "(w / warn-01\n   :ARG0 (m / minister))", "(p / possible-01\n   :polarity -)", "(p / possible-01\n   :ARG1 (a / avoid-01))", "(a / avoid-01\n   :ARG1 (c / cut-02))", "(c / cut-02\n   :ARG1 (s / service))", "(k / keep-01\n   :ARG0 (p2 / political-party :name (n / name :op1 \"Labour\")))", "(p3 / promise-01\n    :ARG0 (p2 / political-party :name (n / name :op1 \"Labour\")))", "(p3 / promise-01\n    :mod (e / elect-01))", "(w / warn-01\n   :ARG0 (m / minister\n            :ord (o / ordinal-entity\n                    :value 1))\n   :ARG1 (h / have-concession-91\n            :ARG1 (p / possible-01\n                     :polarity -\n                     :ARG1 (a / avoid-01\n                              :ARG1 (c / cut-02\n                                       :ARG1 (s / service\n                                                :mod (s2 / some)))))\n            :ARG2 (k / keep-01\n                     :ARG0 (p2 / political-party\n                               :name (n / name\n                                        :op1 \"Labour\"))\n                     :ARG1 (p3 / promise-01\n                               :ARG0 p2\n                               :mod (e / elect-01))\n                     :concession (c2 / certain\n                                     :polarity -\n                                     :domain (l / leave-15\n                                                :ARG1 (c3 / country\n                                                          :name (n2 / name\n                                                                    :op1 \"Great\"\n                                                                    :op2 \"Britain\")))))))", "(w / warn-01)"], "smus": ["The first minister has warned.", "Labour has kept its election promises, but it is uncertain whether Britain will leave, the party has been warned that cuts to some services are inevitable.", "First minister.", "While leaving Britain isn't certain, Labour will keep its electoral promises, cuts to some services will be inevitable.", "The minister has warned --", "There is no avoiding.", "Cuts are avoided.", "cuts services", "Labour will keep.", "Labour promises election", "Election", "The minister has warned --", "Unable to.", "Possibly.", "Cuts are avoided.", "cuts services", "Labour will keep.", "Labour promises.", "Election promises.", "The first minister has warned that while leaving Britain is uncertain, cuts to some services are inevitable.", "Warning:"]}, {"instance_id": "pyrxsum-98", "summary": "A convicted fraudster used an \"ingenious\" escape plot to trick prison wardens into letting him go free, a court has heard.", "summary_trees": ["# ::snt A convicted fraudster used an \"ingenious\" escape plot to trick prison wardens into letting him go free, a court has heard.\n(h / hear-01\n      :ARG0 (c / court)\n      :ARG1 (u / use-01\n            :ARG0 (p / person\n                  :ARG0-of (d / defraud-01)\n                  :ARG1-of (c2 / convict-01))\n            :ARG1 (p2 / plot-01\n                  :ARG0 p\n                  :ARG1 (e / escape-01\n                        :ARG0 p)\n                  :mod (ii / ingenious))\n            :ARG2 (t / trick-01\n                  :ARG0 p\n                  :ARG1 (w / warden\n                        :mod (p3 / prison))\n                  :ARG2 (l / let-01\n                        :ARG0 w\n                        :ARG1 (f / free-04\n                              :ARG1 p)))))"], "tree": ["(h / hear-01\n   :ARG0 (c / court))", "(h / hear-01\n   :ARG1 (u / use-01\n            :ARG0 (p / person\n                     :ARG0-of (d / defraud-01)\n                     :ARG1-of (c2 / convict-01))\n            :ARG1 (p2 / plot-01\n                      :ARG0 p\n                      :ARG1 (e / escape-01\n                               :ARG0 p)\n                      :mod (ii / ingenious))\n            :ARG2 (t / trick-01\n                     :ARG0 p\n                     :ARG1 (w / warden\n                              :mod (p3 / prison))\n                     :ARG2 (l / let-01\n                              :ARG0 w\n                              :ARG1 (f / free-04\n                                       :ARG1 p)))))", "(u / use-01\n   :ARG0 (p / person\n            :ARG0-of (d / defraud-01)\n            :ARG1-of (c2 / convict-01))\n   :ARG1 (p2 / plot-01\n             :ARG0 p\n             :ARG1 (e / escape-01\n                      :ARG0 p)\n             :mod (ii / ingenious))\n   :ARG2 (t / trick-01\n            :ARG0 p\n            :ARG1 (w / warden\n                     :mod (p3 / prison))\n            :ARG2 (l / let-01\n                     :ARG0 w\n                     :ARG1 (f / free-04\n                              :ARG1 p))))", "(h / hear-01\n   :ARG0 (c / court))", "(u / use-01\n   :ARG0 (p / person))", "(d / defraud-01)", "(c2 / convict-01)", "(p2 / plot-01\n    :ARG0 (p / person)\n    :ARG1 (e / escape-01))", "(e / escape-01\n   :ARG0 (p / person))", "(t / trick-01\n   :ARG0 (p / person)\n   :ARG1 (w / warden))", "(l / let-01\n   :ARG0 (w / warden)\n   :ARG1 (f / free-04))", "(f / free-04\n   :ARG1 (p / person))", "(h / hear-01\n   :ARG0 (c / court))", "(u / use-01\n   :ARG0 (p / person))", "(p2 / plot-01\n    :ARG0 (p / person))", "(p2 / plot-01\n    :ARG1 (e / escape-01))", "(e / escape-01\n   :ARG0 (p / person))", "(t / trick-01\n   :ARG0 (p / person))", "(t / trick-01\n   :ARG1 (w / warden))", "(l / let-01\n   :ARG0 (w / warden))", "(l / let-01\n   :ARG1 (f / free-04))", "(f / free-04\n   :ARG1 (p / person))", "(h / hear-01\n   :ARG0 (c / court)\n   :ARG1 (u / use-01\n            :ARG0 (p / person\n                     :ARG0 (d / defraud-01)\n                     :ARG1 (c2 / convict-01))\n            :ARG1 (p2 / plot-01\n                      :ARG0 p\n                      :ARG1 (e / escape-01\n                               :ARG0 p)\n                      :mod (ii / ingenious))\n            :ARG2 (t / trick-01\n                     :ARG0 p\n                     :ARG1 (w / warden\n                              :mod (p3 / prison))\n                     :ARG2 (l / let-01\n                              :ARG0 w\n                              :ARG1 (f / free-04\n                                       :ARG1 p)))))", "(h / hear-01)"], "smus": ["The court heard that --", "It has been heard that convicted fraudsters used an ingenious escape plot to trick prison wardens into letting them free.", "Convicted fraudsters used their ingenious escape plot to trick prison wardens into letting them free.", "The court heard that --", "People used to.", "Fraud.", "Convicted.", "People plot to escape.", "Escape.", "Trick the wardens.", "Wardens are letting the free.", "People are free.", "The court heard that --", "People used to.", "People are plotting.", "Escape plot.", "Escape.", "Trick people.", "Trick the wardens.", "Wardens are letting.", "letting the freedoms happen.", "People are free.", "The court heard that the fraudster used his ingenious escape plot to trick the prison wardens into letting him free.", "Heard."]}, {"instance_id": "pyrxsum-99", "summary": "The M6 motorway between Wolverhampton and Walsall has reopened after a fatal crash.", "summary_trees": ["# ::snt The M6 motorway between Wolverhampton and Walsall has reopened after a fatal crash.\n(r / reopen-01\n      :ARG1 (r2 / road\n            :name (n / name\n                  :op1 \"M6\")\n            :location (b / between\n                  :op1 (c / city\n                        :name (n2 / name\n                              :op1 \"Wolverhampton\"))\n                  :op2 (c2 / city\n                        :name (n3 / name\n                              :op1 \"Walsall\")))\n            :mod (m / motorway))\n      :time (a / after\n            :op1 (c3 / crash-01\n                  :mod (f / fatal))))"], "tree": ["(r / reopen-01\n   :ARG1 (r2 / road\n             :name (n / name\n                      :op1 \"M6\")\n             :location (b / between\n                          :op1 (c / city\n                                  :name (n2 / name\n                                            :op1 \"Wolverhampton\"))\n                          :op2 (c2 / city\n                                   :name (n3 / name\n                                             :op1 \"Walsall\")))\n             :mod (m / motorway)))", "(r / reopen-01\n   :time (a / after\n            :op1 (c3 / crash-01\n                     :mod (f / fatal))))", "(r2 / road\n    :name (n / name\n             :op1 \"M6\")\n    :location (b / between\n                 :op1 (c / city\n                         :name (n2 / name\n                                   :op1 \"Wolverhampton\"))\n                 :op2 (c2 / city\n                          :name (n3 / name\n                                    :op1 \"Walsall\")))\n    :mod (m / motorway))", "(a / after\n   :op1 (c3 / crash-01\n            :mod (f / fatal)))", "(r / reopen-01\n   :ARG1 (r2 / road :name (n / name :op1 \"M6\"))))", "(c3 / crash-01\n    :mod (f / fatal))", "(r / reopen-01\n   :ARG1 (r2 / road :name (n / name :op1 \"M6\"))))", "(c3 / crash-01\n    :mod (f / fatal))", "(r / reopen-01\n   :ARG1 (r2 / road\n             :name (n / name\n                      :op1 \"M6\")\n             :mod (m / motorway)))", "(r / reopen-01\n   :time (a / after\n            :op1 (c3 / crash-01\n                     :mod (f / fatal))))"], "smus": ["The M6 motorway between Wolverhampton and Walsall has been reopened.", "Reopened after fatal crash", "The M6 motorway between Wolverhampton and Walsall.", "After a fatal crash.", "The M6 has been reopened.", "A fatal crash occurred.", "The M6 has been reopened.", "A fatal crash occurred.", "The motorway M6 has been reopened.", "Reopened after fatal crash"]}]