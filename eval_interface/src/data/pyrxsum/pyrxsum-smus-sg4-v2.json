[
  {
    "instance_id": "pyrxsum-0",
    "summary": "Netherlands midfielder Wesley Sneijder has joined French Ligue 1 side Nice on a free transfer.",
    "summary_trees": [
      "# ::snt Netherlands midfielder Wesley Sneijder has joined French Ligue 1 side Nice on a free transfer.\n(j / join-04\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Wesley\"\n                  :op2 \"Sneijder\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"Netherlands\"))\n                  :ARG3 (m / midfielder)))\n      :ARG1 (t2 / team\n            :name (n3 / name\n                  :op1 \"Nice\")\n            :mod (l / league\n                  :name (n4 / name\n                        :op1 \"Ligue\"\n                        :op2 1)\n                  :mod (c / country\n                        :name (n5 / name\n                              :op1 \"France\"))))\n      :manner (t3 / transfer-01\n            :ARG1 p\n            :ARG1-of (f / free-03)))"
    ],
    "tree": [
      "(j / join-04\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Wesley\"\n                     :op2 \"Sneijder\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (t / team\n                              :name (n2 / name\n                                        :op1 \"Netherlands\"))\n                     :ARG3 (m / midfielder)))\n   :ARG1 (t2 / team\n             :name (n3 / name\n                       :op1 \"Nice\")\n             :mod (l / league\n                     :name (n4 / name\n                               :op1 \"Ligue\"\n                               :op2 1)\n                     :mod (c / country\n                             :name (n5 / name\n                                       :op1 \"France\")))))"
    ],
    "smus": [
      "The Dutch midfielder Wesley sneijder has joined Nice in the French Ligue 1 team."
    ]
  },
  {
    "instance_id": "pyrxsum-1",
    "summary": "A State Department official \"pressured\" the FBI to change the classification of a Hillary Clinton email in a \"quid pro quo\", according to FBI documents.",
    "summary_trees": [
      "# ::snt A State Department official \"pressured\" the FBI to change the classification of a Hillary Clinton email in a \"quid pro quo\", according to FBI documents.\n(s / say-01\n      :ARG0 (d / document\n            :source (g / government-organization\n                  :name (n / name\n                        :op1 \"FBI\")))\n      :ARG1 (p / pressure-01\n            :ARG0 (p2 / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (g2 / government-organization\n                              :name (n2 / name\n                                    :op1 \"State\"\n                                    :op2 \"Department\"))\n                        :ARG2 (o / official)))\n            :ARG1 g\n            :ARG2 (c / change-01\n                  :ARG0 g\n                  :ARG1 (c2 / classify-01\n                        :ARG1 (e / email-01\n                              :ARG0 (p3 / person\n                                    :name (n3 / name\n                                          :op1 \"Hillary\"\n                                          :op2 \"Clinton\"))))\n                  :manner (q / quid-pro-quo))))"
    ],
    "tree": [
      "(e / email-01\n   :ARG0 (p3 / person\n             :name (n3 / name\n                       :op1 \"Hillary\"\n                       :op2 \"Clinton\")))"
    ],
    "smus": [
      "Hillary Clinton e-mail:"
    ]
  },
  {
    "instance_id": "pyrxsum-2",
    "summary": "American Jason Dufner will take a five-shot lead into the third round of the Memorial Tournament after carding an eagle on the 18th hole on Friday.",
    "summary_trees": [
      "# ::snt American Jason Dufner will take a five-shot lead into the third round of the Memorial Tournament after carding an eagle on the 18th hole on Friday.\n(t / take-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jason\"\n                  :op2 \"Dufner\")\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"America\")))\n      :ARG1 (l / lead-01\n            :ARG0 p\n            :ARG2 (s / shot\n                  :quant 5))\n      :ARG2 (r / round\n            :ord (o / ordinal-entity\n                  :value 3)\n            :subevent-of (g / game\n                  :name (n3 / name\n                        :op1 \"Memorial\"\n                        :op2 \"Tournament\")))\n      :time (a / after\n            :op1 (c2 / card-01\n                  :ARG0 p\n                  :ARG1 (e / eagle)\n                  :time (h / hole\n                        :ord (o2 / ordinal-entity\n                              :value 18))\n                  :time (d / date-entity\n                        :weekday (f / friday)))))"
    ],
    "tree": [
      "(c2 / card-01\n    :ARG0 (p / person :name (n / name :op1 \"Jason\" :op2 \"Dufner\")))\n    :ARG1 (e / eagle)\n    :time (h / hole\n             :ord (o2 / ordinal-entity\n                      :value 18))\n    :time (d / date-entity\n             :weekday (f / friday)))",
      "(c2 / card-01\n    :time (h / hole\n             :ord (o2 / ordinal-entity\n                      :value 18))\n    :time (d / date-entity\n             :weekday (f / friday)))"
    ],
    "smus": [
      "Jason Dufner was carding an eagle at the 18th hole on Friday.",
      "Carding on Friday at the 18th hole."
    ]
  },
  {
    "instance_id": "pyrxsum-3",
    "summary": "A British man has been been questioned in Peru after posing naked at the Machu Picchu ruins, local police have said.",
    "summary_trees": [
      "# ::snt A British man has been been questioned in Peru after posing naked at the Machu Picchu ruins, local police have said.\n(s / say-01\n      :ARG0 (p / police\n            :ARG1-of (l / local-02))\n      :ARG1 (q / question-01\n            :ARG1 (m / man\n                  :mod (c / country\n                        :name (n / name\n                              :op1 \"Britain\")))\n            :location (c2 / country\n                  :name (n2 / name\n                        :op1 \"Peru\"))\n            :time (a / after\n                  :op1 (p2 / pose-01\n                        :ARG0 m\n                        :manner (n3 / naked)\n                        :location (r / ruin\n                              :name (n4 / name\n                                    :op1 \"Machu\"\n                                    :op2 \"Picchu\"))))))"
    ],
    "tree": [
      "(p2 / pose-01\n    :ARG0 (m / man)\n    :manner (n3 / naked)\n    :location (r / ruin\n                 :name (n4 / name\n                           :op1 \"Machu\"\n                           :op2 \"Picchu\")))",
      "(q / question-01\n   :ARG1 (m / man\n            :mod (c / country\n                    :name (n / name\n                             :op1 \"Britain\"))))",
      "(s / say-01\n   :ARG0 (p / police\n            :ARG1 (l / local-02))\n   :ARG1 (q / question-01\n            :ARG1 (m / man\n                     :mod (c / country\n                             :name (n / name\n                                      :op1 \"Britain\")))\n            :location (c2 / country\n                          :name (n2 / name\n                                    :op1 \"Peru\"))\n            :time (a / after\n                     :op1 (p2 / pose-01\n                              :ARG0 m\n                              :manner (n3 / naked)\n                              :location (r / ruin\n                                           :name (n4 / name\n                                                     :op1 \"Machu\"\n                                                     :op2 \"Picchu\"))))))",
      "(p2 / pose-01\n    :manner (n3 / naked)\n    :location (r / ruin\n                 :name (n4 / name\n                           :op1 \"Machu\"\n                           :op2 \"Picchu\")))"
    ],
    "smus": [
      "A man posing as a naked man in the Ruins of Machu Picchu.",
      "The British man was questioned.",
      "Local police have said a British man was questioned in Peru after posing as a naked man in the Machu Picchu ruin.",
      "posing as a naked man in the Ruins of Machu Picchu."
    ]
  },
  {
    "instance_id": "pyrxsum-4",
    "summary": "Great Britain skeleton racer David Swift has retired from the sport.",
    "summary_trees": [
      "# ::snt Great Britain skeleton racer David Swift has retired from the sport.\n(r / retire-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"David\"\n                  :op2 \"Swift\")\n            :ARG0-of (r2 / race-02\n                  :ARG3 (s / skeleton))\n            :mod (t / team\n                  :name (n2 / name\n                        :op1 \"Great\"\n                        :op2 \"Britain\")))\n      :ARG1 (s2 / sport))"
    ],
    "tree": [
      "(r2 / race-02\n    :ARG3 (s / skeleton))",
      "(r / retire-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Swift\")\n            :ARG0 (r2 / race-02\n                      :ARG3 (s / skeleton))\n            :mod (t / team\n                    :name (n2 / name\n                              :op1 \"Great\"\n                              :op2 \"Britain\"))))",
      "(r / retire-01\n   :ARG1 (s2 / sport))",
      "(r / retire-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Swift\")\n            :ARG0 (r2 / race-02\n                      :ARG3 (s / skeleton))\n            :mod (t / team\n                    :name (n2 / name\n                              :op1 \"Great\"\n                              :op2 \"Britain\")))\n   :ARG1 (s2 / sport))"
    ],
    "smus": [
      "skeleton race.",
      "Great Britain skeleton racer David Swift has retired.",
      "The sport is retired.",
      "Great Britain's David Swift retired from sport."
    ]
  },
  {
    "instance_id": "pyrxsum-5",
    "summary": "Michael Dunlop set the fastest times for the Ulster Grand Prix Superbike and Superstock classes in Thursday's delayed practice sessions at Dundrod.",
    "summary_trees": [
      "# ::snt Michael Dunlop set the fastest times for the Ulster Grand Prix Superbike and Superstock classes in Thursday's delayed practice sessions at Dundrod.\n(s / set-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Michael\"\n                  :op2 \"Dunlop\"))\n      :ARG1 (t / time\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (f / fast-02)\n                  :ARG3 (m / most)))\n      :beneficiary (a / and\n            :op1 (c / class\n                  :name (n2 / name\n                        :op1 \"Ulster\"\n                        :op2 \"Grand\"\n                        :op3 \"Prix\"\n                        :op4 \"Superbike\"))\n            :op2 (c2 / class\n                  :name (n3 / name\n                        :op1 \"Superstock\")))\n      :time (s2 / session\n            :mod (p2 / practice-01)\n            :ARG1-of (d / delay-01)\n            :location (c3 / city\n                  :name (n4 / name\n                        :op1 \"Dundrod\"))\n            :time (d2 / date-entity\n                  :weekday (t2 / thursday))))"
    ],
    "tree": [
      "(h / have-degree-91\n   :ARG2 (f / fast-02)\n   :ARG3 (m / most))",
      "(s / set-02\n   :ARG1 (t / time\n            :ARG1 (h / have-degree-91\n                     :ARG2 (f / fast-02)\n                     :ARG3 (m / most)))\n   :time (s2 / session\n             :mod (p2 / practice-01)\n             :ARG1 (d / delay-01)\n             :location (c3 / city\n                           :name (n4 / name\n                                     :op1 \"Dundrod\"))\n             :time (d2 / date-entity\n                       :weekday (t2 / thursday))))",
      "(s / set-02\n   :ARG1 (t / time\n            :ARG1 (h / have-degree-91\n                     :ARG2 (f / fast-02)\n                     :ARG3 (m / most))))",
      "(s / set-02\n   :time (s2 / session\n             :mod (p2 / practice-01)\n             :location (c3 / city\n                           :name (n4 / name\n                                     :op1 \"Dundrod\"))\n             :time (d2 / date-entity\n                       :weekday (t2 / thursday))))"
    ],
    "smus": [
      "Fastest.",
      "The fastest times were set for Thursday at practice sessions in Dundrod.",
      "Time frames were set for the fastest.",
      "Set for Thursday at practice sessions in Dundrod."
    ]
  },
  {
    "instance_id": "pyrxsum-6",
    "summary": "Argentine club Newell's Old Boys have re-signed Sunderland striker Ignacio Scocco on a five-year contract.",
    "summary_trees": [
      "# ::snt Argentine club Newell's Old Boys have re-signed Sunderland striker Ignacio Scocco on a five-year contract.\n(s / sign-02\n      :ARG0 (c / club\n            :name (n / name\n                  :op1 \"Old\"\n                  :op2 \"Boys\")\n            :mod (c2 / country\n                  :name (n2 / name\n                        :op1 \"Argentina\"))\n            :poss (t / team\n                  :name (n3 / name\n                        :op1 \"Newell's\")))\n      :ARG1 (p / person\n            :name (n4 / name\n                  :op1 \"Ignacio\"\n                  :op2 \"Scocco\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (t2 / team\n                        :name (n5 / name\n                              :op1 \"Sunderland\"))\n                  :ARG3 (s2 / striker)))\n      :ARG3 (c3 / contract\n            :duration (t3 / temporal-quantity\n                  :quant 5\n                  :unit (y / year)))\n      :mod (a / again))"
    ],
    "tree": [
      "(h / have-org-role-91\n   :ARG1 (t2 / team\n             :name (n5 / name\n                       :op1 \"Sunderland\"))\n   :ARG3 (s2 / striker))",
      "(s / sign-02\n   :ARG0 (c / club\n            :name (n / name\n                     :op1 \"Old\"\n                     :op2 \"Boys\")\n            :mod (c2 / country\n                     :name (n2 / name\n                               :op1 \"Argentina\"))\n            :poss (t / team\n                     :name (n3 / name\n                               :op1 \"Newell's\")))\n   :ARG1 (p / person\n            :name (n4 / name\n                      :op1 \"Ignacio\"\n                      :op2 \"Scocco\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (t2 / team\n                               :name (n5 / name\n                                         :op1 \"Sunderland\"))\n                     :ARG3 (s2 / striker))))"
    ],
    "smus": [
      "-Sunderland striker",
      "Newell's Argentinian club Old Boys have signed Ignacio Scocco as a Spurs striker."
    ]
  },
  {
    "instance_id": "pyrxsum-7",
    "summary": "West Ham say they are \"disappointed\" with a ruling that the terms of their rental of the Olympic Stadium from next season should be made public.",
    "summary_trees": [
      "# ::snt West Ham say they are \"disappointed\" with a ruling that the terms of their rental of the Olympic Stadium from next season should be made public.\n(s / say-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"West\"\n                  :op2 \"Ham\"))\n      :ARG1 (d / disappoint-01\n            :ARG0 (r / rule-01\n                  :ARG1 (r2 / recommend-01\n                        :ARG1 (p / public-02\n                              :ARG1 (t2 / term\n                                    :mod (r3 / rent-01\n                                          :ARG0 t\n                                          :ARG1 (s2 / stadium\n                                                :name (n2 / name\n                                                      :op1 \"Olympic\"\n                                                      :op2 \"Stadium\"))\n                                          :time (s3 / season\n                                                :mod (n3 / next)))))))\n            :ARG1 t))"
    ],
    "tree": [
      "(r3 / rent-01\n    :ARG1 (s2 / stadium\n              :name (n2 / name\n                        :op1 \"Olympic\"\n                        :op2 \"Stadium\")))",
      "(p / public-02\n   :ARG1 (t2 / term\n             :mod (r3 / rent-01\n                      :ARG0 (t / team :name (n / name :op1 \"West\" :op2 \"Ham\"))\n                      :ARG1 (s2 / stadium\n                                :name (n2 / name\n                                          :op1 \"Olympic\"\n                                          :op2 \"Stadium\"))\n                      :time (s3 / season\n                                :mod (n3 / next)))))",
      "(r2 / recommend-01\n    :ARG1 (p / public-02\n             :ARG1 (t2 / term\n                       :mod (r3 / rent-01\n                                :ARG0 (t / team :name (n / name :op1 \"West\" :op2 \"Ham\"))\n                                :ARG1 (s2 / stadium\n                                          :name (n2 / name\n                                                    :op1 \"Olympic\"\n                                                    :op2 \"Stadium\"))\n                                :time (s3 / season\n                                          :mod (n3 / next))))))",
      "(r / rule-01\n   :ARG1 (r2 / recommend-01\n             :ARG1 (p / public-02\n                      :ARG1 (t2 / term\n                                :mod (r3 / rent-01\n                                         :ARG0 (t / team :name (n / name :op1 \"West\" :op2 \"Ham\"))\n                                         :ARG1 (s2 / stadium\n                                                   :name (n2 / name\n                                                             :op1 \"Olympic\"\n                                                             :op2 \"Stadium\"))\n                                         :time (s3 / season\n                                                   :mod (n3 / next)))))))",
      "(d / disappoint-01\n   :ARG0 (r / rule-01\n            :ARG1 (r2 / recommend-01\n                      :ARG1 (p / public-02\n                               :ARG1 (t2 / term\n                                         :mod (r3 / rent-01\n                                                  :ARG0 (t / team :name (n / name :op1 \"West\" :op2 \"Ham\"))\n                                                  :ARG1 (s2 / stadium\n                                                            :name (n2 / name\n                                                                      :op1 \"Olympic\"\n                                                                      :op2 \"Stadium\"))\n                                                  :time (s3 / season\n                                                            :mod (n3 / next))))))))",
      "(d / disappoint-01\n   :ARG0 (r / rule-01\n            :ARG1 (r2 / recommend-01\n                      :ARG1 (p / public-02\n                               :ARG1 (t2 / term\n                                         :mod (r3 / rent-01\n                                                  :ARG0 (t / team :name (n / name :op1 \"West\" :op2 \"Ham\"))\n                                                  :ARG1 (s2 / stadium\n                                                            :name (n2 / name\n                                                                      :op1 \"Olympic\"\n                                                                      :op2 \"Stadium\"))\n                                                  :time (s3 / season\n                                                            :mod (n3 / next)))))))\n   :ARG1 t)",
      "(s / say-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"West\"\n                     :op2 \"Ham\"))\n   :ARG1 (d / disappoint-01\n            :ARG0 (r / rule-01\n                     :ARG1 (r2 / recommend-01\n                               :ARG1 (p / public-02\n                                        :ARG1 (t2 / term\n                                                  :mod (r3 / rent-01\n                                                           :ARG0 t\n                                                           :ARG1 (s2 / stadium\n                                                                     :name (n2 / name\n                                                                               :op1 \"Olympic\"\n                                                                               :op2 \"Stadium\"))\n                                                           :time (s3 / season\n                                                                     :mod (n3 / next)))))))\n            :ARG1 t))"
    ],
    "smus": [
      "Olympic Stadium is rented.",
      "Terms of West Ham's olympic stadium rental next season are public.",
      "Terms of West Ham's Olympic Stadium rental next season should be public.",
      "The ruling is that the terms of West Ham's Olympic Stadium rental next season should be public.",
      "The ruling that the terms of West Ham's Olympic Stadium rental next season should be public was disappointing.",
      "The ruling that the terms of West Ham's Olympic Stadium rental next season should be public was disappointing.",
      "West Ham say they are disappointed by the ruling that their terms of rental for the Olympic Stadium next season should be public."
    ]
  },
  {
    "instance_id": "pyrxsum-8",
    "summary": "Ex-army chief Abdul Fattah al-Sisi has vowed to to tackle \"terrorism\" and bring security, after being sworn in as Egypt's new president.",
    "summary_trees": [
      "# ::snt Ex-army chief Abdul Fattah al-Sisi has vowed to to tackle \"terrorism\" and bring security, after being sworn in as Egypt's new president.\n(v / vow-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Abdul\"\n                  :op2 \"Fattah\"\n                  :op3 \"al-Sisi\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (a / army)\n                  :ARG2 (c / chief)\n                  :time (e / ex)))\n      :ARG1 (a2 / and\n            :op1 (t / tackle-01\n                  :ARG0 p\n                  :ARG1 (t2 / terrorism))\n            :op2 (b / bring-01\n                  :ARG0 p\n                  :ARG1 (s / security)))\n      :time (a3 / after\n            :op1 (s2 / swear-in-06\n                  :ARG1 p\n                  :ARG2 (p2 / person\n                        :ARG0-of (h2 / have-org-role-91\n                              :ARG1 (c2 / country\n                                    :name (n2 / name\n                                          :op1 \"Egypt\"))\n                              :ARG2 (p3 / president\n                                    :ARG1-of (n3 / new-01)))))))"
    ],
    "tree": [
      "(h2 / have-org-role-91\n    :ARG1 (c2 / country\n              :name (n2 / name\n                        :op1 \"Egypt\"))\n    :ARG2 (p3 / president\n              :ARG1 (n3 / new-01)))",
      "(s2 / swear-in-06\n    :ARG1 (p / person :name (n / name :op1 \"Abdul\" :op2 \"Fattah\" :op3 \"al-Sisi\")))\n    :ARG2 (p2 / person\n              :ARG0 (h2 / have-org-role-91\n                        :ARG1 (c2 / country\n                                  :name (n2 / name\n                                            :op1 \"Egypt\"))\n                        :ARG2 (p3 / president\n                                  :ARG1 (n3 / new-01)))))"
    ],
    "smus": [
      "Egypt has a new president.",
      "Abdul Fattah al-Sisi is sworn in as Egypt's new president."
    ]
  },
  {
    "instance_id": "pyrxsum-9",
    "summary": "Twenty-times champion jump jockey Sir Anthony McCoy has described having a statue put up in his honour at Cheltenham as 'flattering.'",
    "summary_trees": [
      "# ::snt Twenty-times champion jump jockey Sir Anthony McCoy has described having a statue put up in his honour at Cheltenham as 'flattering.'\n(d / describe-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sir\"\n                  :op2 \"Anthony\"\n                  :op3 \"McCoy\")\n            :ARG0-of (r / ride-01\n                  :ARG1 (j / jump-03))\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (c / champion\n                        :frequency 20)))\n      :ARG1 (h2 / have-04\n            :ARG1 (p2 / put-up-13\n                  :ARG1 (s / statue\n                        :ARG2-of (h3 / honor-01\n                              :ARG1 p))\n                  :location (s2 / sports-facility\n                        :name (n2 / name\n                              :op1 \"Cheltenham\"))))\n      :ARG2 (f / flatter-01))"
    ],
    "tree": [
      "(d / describe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sir\"\n                     :op2 \"Anthony\"\n                     :op3 \"McCoy\")\n            :ARG0-of (r / ride-01\n                        :ARG1 (j / jump-03))\n            :ARG0-of (h / have-org-role-91\n                        :ARG2 (c / champion\n                                 :frequency 20)))\n   :ARG1 (h2 / have-04\n             :ARG1 (p2 / put-up-13\n                       :ARG1 (s / statue\n                                :ARG2-of (h3 / honor-01\n                                             :ARG1 p))\n                       :location (s2 / sports-facility\n                                     :name (n2 / name\n                                               :op1 \"Cheltenham\"))))\n   :ARG2 (f / flatter-01))"
    ],
    "smus": [
      "Jumper and 20-time champion Sir Anthony McCoy has described having his own statue put up in Chelsea as flattering."
    ]
  },
  {
    "instance_id": "pyrxsum-10",
    "summary": "A cafe owner has defended a sign urging people to eat cake to avoid being kidnapped in the town where April Jones was abducted and murdered in 2012.",
    "summary_trees": [
      "# ::snt A cafe owner has defended a sign urging people to eat cake to avoid being kidnapped in the town where April Jones was abducted and murdered in 2012.\n(d / defend-01\n      :ARG0 (p / person\n            :ARG0-of (o / own-01\n                  :ARG1 (c / cafe)))\n      :ARG1 (s / sign\n            :ARG0-of (u / urge-01\n                  :ARG1 (p2 / person)\n                  :ARG2 (e / eat-01\n                        :ARG0 p2\n                        :ARG1 (c2 / cake)\n                        :purpose (a / avoid-01\n                              :ARG0 p2\n                              :ARG1 (k / kidnap-01\n                                    :ARG1 p2\n                                    :location (t / town\n                                          :location-of (a2 / and\n                                                :op1 (a3 / abduct-01\n                                                      :ARG1 (p3 / person\n                                                            :name (n / name\n                                                                  :op1 \"April\"\n                                                                  :op2 \"Jones\")))\n                                                :op2 (m / murder-01\n                                                      :ARG1 p3)\n                                                :time (d2 / date-entity\n                                                      :year 2012)))))))))"
    ],
    "tree": [
      "(a3 / abduct-01\n    :ARG1 (p3 / person\n              :name (n / name\n                       :op1 \"April\"\n                       :op2 \"Jones\")))",
      "(a / avoid-01\n   :ARG0 (p2 / person)\n   :ARG1 (k / kidnap-01\n            :ARG1 p2\n            :location (t / town\n                         :location (a2 / and\n                                       :op1 (a3 / abduct-01\n                                                :ARG1 (p3 / person\n                                                          :name (n / name\n                                                                   :op1 \"April\"\n                                                                   :op2 \"Jones\")))\n                                       :op2 (m / murder-01\n                                               :ARG1 p3)\n                                       :time (d2 / date-entity\n                                                 :year 2012)))))",
      "(e / eat-01\n   :ARG0 (p2 / person)\n   :ARG1 (c2 / cake))",
      "(e / eat-01\n   :ARG1 (c2 / cake))",
      "(u / urge-01\n   :ARG1 (p2 / person)\n   :ARG2 (e / eat-01\n            :ARG0 p2\n            :ARG1 (c2 / cake)\n            :purpose (a / avoid-01\n                        :ARG0 p2\n                        :ARG1 (k / kidnap-01\n                                 :ARG1 p2\n                                 :location (t / town\n                                              :location (a2 / and\n                                                            :op1 (a3 / abduct-01\n                                                                     :ARG1 (p3 / person\n                                                                               :name (n / name\n                                                                                        :op1 \"April\"\n                                                                                        :op2 \"Jones\")))\n                                                            :op2 (m / murder-01\n                                                                    :ARG1 p3)\n                                                            :time (d2 / date-entity\n                                                                      :year 2012)))))))",
      "(d / defend-01\n   :ARG0 (p / person\n            :ARG0 (o / own-01\n                     :ARG1 (c / cafe))))",
      "(d / defend-01\n   :ARG0 (p / person\n            :ARG0 (o / own-01\n                     :ARG1 (c / cafe)))\n   :ARG1 (s / sign\n            :ARG0 (u / urge-01\n                     :ARG1 (p2 / person)\n                     :ARG2 (e / eat-01\n                              :ARG0 p2\n                              :ARG1 (c2 / cake)\n                              :purpose (a / avoid-01\n                                          :ARG0 p2\n                                          :ARG1 (k / kidnap-01\n                                                   :ARG1 p2\n                                                   :location (t / town\n                                                                :location (a2 / and\n                                                                              :op1 (a3 / abduct-01\n                                                                                       :ARG1 (p3 / person\n                                                                                                 :name (n / name\n                                                                                                          :op1 \"April\"\n                                                                                                          :op2 \"Jones\")))\n                                                                              :op2 (m / murder-01\n                                                                                      :ARG1 p3)\n                                                                              :time (d2 / date-entity\n                                                                                        :year 2012)))))))))",
      "(a / avoid-01\n   :ARG0 (p2 / person)\n   :ARG1 (k / kidnap-01\n            :ARG1 p2\n            :location (t / town\n                         :location (a3 / abduct-01\n                                       :ARG1 (p3 / person\n                                                 :name (n / name\n                                                          :op1 \"April\"\n                                                          :op2 \"Jones\"))))))",
      "(a / avoid-01\n   :ARG0 (p2 / person)\n   :ARG1 (k / kidnap-01\n            :ARG1 p2\n            :location (t / town\n                         :location (m / murder-01\n                                      :ARG1 (p3 / person :name (n / name :op1 \"April\" :op2 \"Jones\"))\n                                      :time (d2 / date-entity\n                                                :year 2012)))))",
      "(u / urge-01\n   :ARG1 (p2 / person)\n   :ARG2 (e / eat-01\n            :ARG0 p2\n            :ARG1 (c2 / cake)\n            :purpose (a / avoid-01\n                        :ARG0 p2\n                        :ARG1 (k / kidnap-01\n                                 :ARG1 p2\n                                 :location (t / town\n                                              :location (a3 / abduct-01\n                                                            :ARG1 (p3 / person\n                                                                      :name (n / name\n                                                                               :op1 \"April\"\n                                                                               :op2 \"Jones\"))))))))",
      "(u / urge-01\n   :ARG1 (p2 / person)\n   :ARG2 (e / eat-01\n            :ARG0 p2\n            :ARG1 (c2 / cake)\n            :purpose (a / avoid-01\n                        :ARG0 p2\n                        :ARG1 (k / kidnap-01\n                                 :ARG1 p2\n                                 :location (t / town\n                                              :location (m / murder-01\n                                                           :ARG1 (p3 / person :name (n / name :op1 \"April\" :op2 \"Jones\"))\n                                                           :time (d2 / date-entity\n                                                                     :year 2012)))))))",
      "(d / defend-01\n   :ARG0 (p / person\n            :ARG0 (o / own-01\n                     :ARG1 (c / cafe)))\n   :ARG1 (s / sign\n            :ARG0 (u / urge-01\n                     :ARG1 (p2 / person)\n                     :ARG2 (e / eat-01\n                              :ARG0 p2\n                              :ARG1 (c2 / cake)\n                              :purpose (a / avoid-01\n                                          :ARG0 p2\n                                          :ARG1 (k / kidnap-01\n                                                   :ARG1 p2\n                                                   :location (t / town\n                                                                :location (a3 / abduct-01\n                                                                              :ARG1 (p3 / person\n                                                                                        :name (n / name\n                                                                                                 :op1 \"April\"\n                                                                                                 :op2 \"Jones\"))))))))))",
      "(d / defend-01\n   :ARG0 (p / person\n            :ARG0 (o / own-01\n                     :ARG1 (c / cafe)))\n   :ARG1 (s / sign\n            :ARG0 (u / urge-01\n                     :ARG1 (p2 / person)\n                     :ARG2 (e / eat-01\n                              :ARG0 p2\n                              :ARG1 (c2 / cake)\n                              :purpose (a / avoid-01\n                                          :ARG0 p2\n                                          :ARG1 (k / kidnap-01\n                                                   :ARG1 p2\n                                                   :location (t / town\n                                                                :location (m / murder-01\n                                                                             :ARG1 (p3 / person :name (n / name :op1 \"April\" :op2 \"Jones\"))\n                                                                             :time (d2 / date-entity\n                                                                                       :year 2012)))))))))"
    ],
    "smus": [
      "April Jones was abducted.",
      "People will avoid being kidnapped in a town where April Jones was abducted and murdered in 2012.",
      "People will eat the cake.",
      "Eat the cake.",
      "People are urging them to eat cake to avoid being kidnapped in a town where April Jones was abducted and murdered in 2012.",
      "The cafe owners have defended.",
      "The cafe owner has defended a sign urging people to eat cake to avoid being kidnapped in a town where April Jones was abducted and murdered in 2012.",
      "People would avoid being kidnapped in the town where April Jones was abducted.",
      "People will avoid being kidnapped in the town where April Jones was murdered in 2012.",
      "People are urging them to eat cake to avoid being kidnapped in the town where April Jones was abducted.",
      "People are urging them to eat the cake to avoid being kidnapped in the town where April Jones was murdered in 2012.",
      "The cafe owner defended a sign urging people to eat cake to avoid being kidnapped in the town where April Jones was abducted.",
      "The cafe owner has defended a sign urging people to eat cake to avoid being kidnapped in the town where April Jones was murdered in 2012."
    ]
  },
  {
    "instance_id": "pyrxsum-11",
    "summary": "Three people have been killed and at least 62 others wounded in two explosions on passenger buses in the Kenyan capital Nairobi, officials say.",
    "summary_trees": [
      "# ::snt Three people have been killed and at least 62 others wounded in two explosions on passenger buses in the Kenyan capital Nairobi, officials say.\n(s / say-01\n      :ARG0 (o / official)\n      :ARG1 (a / and\n            :op1 (k / kill-01\n                  :ARG0 (e / explode-01\n                        :quant 2\n                        :ARG1 (b / bus\n                              :mod (p / passenger))\n                        :location (c / city\n                              :name (n / name\n                                    :op1 \"Nairobi\")\n                              :ARG0-of (h / have-org-role-91\n                                    :ARG1 (c2 / country\n                                          :name (n2 / name\n                                                :op1 \"Kenya\"))\n                                    :ARG2 (c3 / capital))))\n                  :ARG1 (p2 / person\n                        :quant 3))\n            :op2 (w / wound-01\n                  :ARG0 e\n                  :ARG1 (p3 / person\n                        :quant (a2 / at-least\n                              :op1 62)\n                        :mod (o2 / other)))))"
    ],
    "tree": [
      "(w / wound-01\n   :ARG1 (p3 / person\n             :quant (a2 / at-least\n                        :op1 62)\n             :mod (o2 / other)))",
      "(e / explode-01\n   :ARG1 (b / bus\n            :mod (p / passenger)))",
      "(e / explode-01\n   :location (c / city\n                :name (n / name\n                         :op1 \"Nairobi\")\n                :ARG0 (h / have-org-role-91\n                         :ARG1 (c2 / country\n                                   :name (n2 / name\n                                             :op1 \"Kenya\"))\n                         :ARG2 (c3 / capital))))",
      "(k / kill-01\n   :ARG0 (e / explode-01\n            :quant 2\n            :ARG1 (b / bus\n                     :mod (p / passenger))\n            :location (c / city\n                         :name (n / name\n                                  :op1 \"Nairobi\")\n                         :ARG0 (h / have-org-role-91\n                                  :ARG1 (c2 / country\n                                            :name (n2 / name\n                                                      :op1 \"Kenya\"))\n                                  :ARG2 (c3 / capital))))\n   :ARG1 (p2 / person\n             :quant 3))",
      "(k / kill-01\n   :ARG1 (p2 / person\n             :quant 3))",
      "(k / kill-01\n   :ARG0 (e / explode-01\n            :quant 2\n            :ARG1 (b / bus\n                     :mod (p / passenger))\n            :location (c / city\n                         :name (n / name\n                                  :op1 \"Nairobi\")\n                         :ARG0 (h / have-org-role-91\n                                  :ARG1 (c2 / country\n                                            :name (n2 / name\n                                                      :op1 \"Kenya\"))\n                                  :ARG2 (c3 / capital)))))",
      "(s / say-01\n   :ARG0 (o / official)\n   :ARG1 (a / and\n            :op1 (k / kill-01\n                    :ARG0 (e / explode-01\n                             :quant 2\n                             :ARG1 (b / bus\n                                      :mod (p / passenger))\n                             :location (c / city\n                                          :name (n / name\n                                                   :op1 \"Nairobi\")\n                                          :ARG0 (h / have-org-role-91\n                                                   :ARG1 (c2 / country\n                                                             :name (n2 / name\n                                                                       :op1 \"Kenya\"))\n                                                   :ARG2 (c3 / capital))))\n                    :ARG1 (p2 / person\n                              :quant 3))\n            :op2 (w / wound-01\n                    :ARG0 e\n                    :ARG1 (p3 / person\n                              :quant (a2 / at-least\n                                         :op1 62)\n                              :mod (o2 / other)))))",
      "(e / explode-01\n   :location (c / city\n                :name (n / name\n                         :op1 \"Nairobi\")))",
      "(s / say-01\n   :ARG0 (o / official)\n   :ARG1 (k / kill-01\n            :ARG0 (e / explode-01\n                     :quant 2\n                     :ARG1 (b / bus\n                              :mod (p / passenger))\n                     :location (c / city\n                                  :name (n / name\n                                           :op1 \"Nairobi\")\n                                  :ARG0 (h / have-org-role-91\n                                           :ARG1 (c2 / country\n                                                     :name (n2 / name\n                                                               :op1 \"Kenya\"))\n                                           :ARG2 (c3 / capital))))\n            :ARG1 (p2 / person\n                      :quant 3)))",
      "(s / say-01\n   :ARG0 (o / official)\n   :ARG1 (w / wound-01\n            :ARG0 (e / explode-01)\n            :ARG1 (p3 / person\n                      :quant (a2 / at-least\n                                 :op1 62)\n                      :mod (o2 / other))))"
    ],
    "smus": [
      "At least 62 others were wounded.",
      "Passenger buses explode.",
      "Kenyan capital Nairobi explodes",
      "Two explosions in passenger buses in the Kenyan capital Nairobi have killed three.",
      "Three people were killed.",
      "Two passenger buses explode in the Kenyan capital Nairobi, killing",
      "Two explosions in Kenyan capital Nairobi have killed three and wounded at least 62 others, officials say.",
      "Explosions in Nairobi",
      "Officials say two explosions in passenger buses in the Kenyan capital Nairobi have killed three.",
      "Officials say at least 62 others were wounded in the explosions."
    ]
  },
  {
    "instance_id": "pyrxsum-12",
    "summary": "Thirty homes had to be evacuated after a gas pipe was damaged in a fire that was started deliberately.",
    "summary_trees": [
      "# ::snt Thirty homes had to be evacuated after a gas pipe was damaged in a fire that was started deliberately.\n(o / obligate-01\n      :ARG2 (e / evacuate-01\n            :ARG1 (h / home\n                  :quant 30))\n      :time (a / after\n            :op1 (d / damage-01\n                  :ARG0 (f / fire\n                        :ARG1-of (s / start-01\n                              :manner (d2 / deliberate)))\n                  :ARG1 (p / pipe\n                        :mod (g / gas)))))"
    ],
    "tree": [
      "(s / start-01\n   :manner (d2 / deliberate))",
      "(d / damage-01\n   :ARG1 (p / pipe\n            :mod (g / gas)))",
      "(d / damage-01\n   :ARG0 (f / fire\n            :ARG1 (s / start-01\n                     :manner (d2 / deliberate)))\n   :ARG1 (p / pipe\n            :mod (g / gas)))",
      "(d / damage-01\n   :ARG0 (f / fire\n            :ARG1 (s / start-01\n                     :manner (d2 / deliberate))))",
      "(e / evacuate-01\n   :ARG1 (h / home\n            :quant 30))",
      "(o / obligate-01\n   :ARG2 (e / evacuate-01\n            :ARG1 (h / home\n                     :quant 30)))"
    ],
    "smus": [
      "Deliberately started.",
      "Gas pipe damaged.",
      "A fire deliberately started damaged the gas pipe.",
      "The fire was damaged by deliberately started fires.",
      "30 homes were evacuated.",
      "30 homes had to be evacuated."
    ]
  },
  {
    "instance_id": "pyrxsum-13",
    "summary": "Friends of Keith Harris have joined his family at his funeral in Blackpool.",
    "summary_trees": [
      "# ::snt Friends of Keith Harris have joined his family at his funeral in Blackpool.\n(j / join-04\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Keith\"\n                              :op2 \"Harris\"))\n                  :ARG2 (f / friend)))\n      :ARG1 (f2 / family\n            :poss p2)\n      :location (f3 / funeral\n            :location (c / city\n                  :name (n2 / name\n                        :op1 \"Blackpool\"))))"
    ],
    "tree": [
      "(h / have-rel-role-91\n   :ARG1 (p2 / person\n             :name (n / name\n                      :op1 \"Keith\"\n                      :op2 \"Harris\"))\n   :ARG2 (f / friend))",
      "(j / join-04\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (p2 / person\n                               :name (n / name\n                                        :op1 \"Keith\"\n                                        :op2 \"Harris\"))\n                     :ARG2 (f / friend)))\n   :ARG1 (f2 / family\n             :poss p2))"
    ],
    "smus": [
      "Keith Harris is one of his friends.",
      "Keith Harris's friends have joined his family."
    ]
  },
  {
    "instance_id": "pyrxsum-14",
    "summary": "Former Labour MP Bob Marshall-Andrews has defected to the Lib Dems after describing Jeremy Corbyn's party as a \"political basket case\".",
    "summary_trees": [
      "# ::snt Former Labour MP Bob Marshall-Andrews has defected to the Lib Dems after describing Jeremy Corbyn's party as a \"political basket case\".\n(d / defect-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Bob\"\n                  :op2 \"Marshall-Andrews\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (p2 / parliament)\n                  :ARG2 (m / member)\n                  :time (f / former))\n            :ARG0-of (h2 / have-org-role-91\n                  :ARG1 (p3 / political-party\n                        :name (n2 / name\n                              :op1 \"Labour\"))))\n      :ARG1 (p4 / political-party\n            :name (n3 / name\n                  :op1 \"Liberal\"\n                  :op2 \"Democrat\"))\n      :time (a / after\n            :op1 (d2 / describe-01\n                  :ARG0 p\n                  :ARG1 (p5 / party\n                        :poss (p6 / person\n                              :name (n4 / name\n                                    :op1 \"Jeremy\"\n                                    :op2 \"Corbyn\")))\n                  :ARG2 (c / case\n                        :mod (b / basket)\n                        :mod (p7 / politics)))))"
    ],
    "tree": [
      "(d2 / describe-01\n    :ARG0 (p / person :name (n / name :op1 \"Bob\" :op2 \"Marshall-Andrews\")))\n    :ARG1 (p5 / party\n              :poss (p6 / person\n                        :name (n4 / name\n                                  :op1 \"Jeremy\"\n                                  :op2 \"Corbyn\")))\n    :ARG2 (c / case\n             :mod (b / basket)\n             :mod (p7 / politics)))",
      "(d2 / describe-01\n    :ARG0 (p / person :name (n / name :op1 \"Bob\" :op2 \"Marshall-Andrews\")))\n    :ARG1 (p5 / party\n              :poss (p6 / person\n                        :name (n4 / name\n                                  :op1 \"Jeremy\"\n                                  :op2 \"Corbyn\"))))",
      "(d2 / describe-01\n    :ARG1 (p5 / party\n              :poss (p6 / person\n                        :name (n4 / name\n                                  :op1 \"Jeremy\"\n                                  :op2 \"Corbyn\")))\n    :ARG2 (c / case\n             :mod (b / basket)\n             :mod (p7 / politics)))",
      "(d / defect-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Bob\"\n                     :op2 \"Marshall-Andrews\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (p2 / parliament)\n                     :ARG2 (m / member)\n                     :time (f / former))\n            :ARG0 (h2 / have-org-role-91\n                      :ARG1 (p3 / political-party\n                                :name (n2 / name\n                                          :op1 \"Labour\"))))\n   :ARG1 (p4 / political-party\n             :name (n3 / name\n                       :op1 \"Liberal\"\n                       :op2 \"Democrat\"))\n   :time (a / after\n            :op1 (d2 / describe-01\n                     :ARG0 p\n                     :ARG1 (p5 / party\n                               :poss (p6 / person\n                                         :name (n4 / name\n                                                   :op1 \"Jeremy\"\n                                                   :op2 \"Corbyn\")))\n                     :ARG2 (c / case\n                              :mod (b / basket)\n                              :mod (p7 / politics)))))",
      "(d / defect-01\n   :time (a / after\n            :op1 (d2 / describe-01)))"
    ],
    "smus": [
      "Bob Marshall-Andrews describing Jeremy Corbyn's party as a political basket case.",
      "Bob Marshall-Andrews is describing Jeremy Corbyn's party.",
      "Jeremy Corbyn's party is describing itself as a political basket case.",
      "After describing Jeremy Corbyn's party as a basket case of politics, former MP Bob Marshall-Andrews, who is Labour's former MP, has defected to the Lib Dems.",
      "Defective occurred after describing."
    ]
  },
  {
    "instance_id": "pyrxsum-15",
    "summary": "Castleford Tigers beat local rivals Wakefield Trinity to clinch the League Leaders' Shield.",
    "summary_trees": [
      "# ::snt Castleford Tigers beat local rivals Wakefield Trinity to clinch the League Leaders' Shield.\n(b / beat-03\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Castleford\"\n                  :op2 \"Tigers\"))\n      :ARG1 (t2 / team\n            :name (n2 / name\n                  :op1 \"Wakefield\"\n                  :op2 \"Trinity\")\n            :ARG0-of (r / rival-01\n                  :ARG1 t)\n            :ARG1-of (l / local-02))\n      :purpose (c / clinch-01\n            :ARG0 t\n            :ARG1 (s / shield\n                  :name (n3 / name\n                        :op1 \"League\"\n                        :op2 \"Leaders'\"\n                        :op3 \"Shield\"))))"
    ],
    "tree": [
      "(c / clinch-01\n   :ARG0 (t / team :name (n / name :op1 \"Castleford\" :op2 \"Tigers\"))\n   :ARG1 (s / shield\n            :name (n3 / name\n                      :op1 \"League\"\n                      :op2 \"Leaders'\"\n                      :op3 \"Shield\")))",
      "(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Castleford\"\n                     :op2 \"Tigers\"))\n   :ARG1 (t2 / team\n             :name (n2 / name\n                       :op1 \"Wakefield\"\n                       :op2 \"Trinity\")\n             :ARG0 (r / rival-01\n                      :ARG1 t)\n             :ARG1 (l / local-02)))",
      "(b / beat-03\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Castleford\"\n                     :op2 \"Tigers\"))\n   :ARG1 (t2 / team\n             :name (n2 / name\n                       :op1 \"Wakefield\"\n                       :op2 \"Trinity\")\n             :ARG0 (r / rival-01\n                      :ARG1 t)\n             :ARG1 (l / local-02))\n   :purpose (c / clinch-01\n               :ARG0 t\n               :ARG1 (s / shield\n                        :name (n3 / name\n                                  :op1 \"League\"\n                                  :op2 \"Leaders'\"\n                                  :op3 \"Shield\"))))",
      "(b / beat-03\n   :purpose (c / clinch-01))"
    ],
    "smus": [
      "Castleford Tigers to clinch League Leaders' shield",
      "Castleford Tigers beat local rivals Wakefield Trinity 2-1",
      "The Castleford Tigers beat local rivals Wakefield Trinity to clinch the League Leaders' shield.",
      "Beat to clinch."
    ]
  },
  {
    "instance_id": "pyrxsum-16",
    "summary": "At least 23 people have been killed in the north-eastern Nigerian town of Monguno after a Boko Haram bomb confiscated by vigilantes exploded, an MP and army source have told the BBC.",
    "summary_trees": [
      "# ::snt At least 23 people have been killed in the north-eastern Nigerian town of Monguno after a Boko Haram bomb confiscated by vigilantes exploded, an MP and army source have told the BBC.\n(t / tell-01\n      :ARG0 (a / and\n            :op1 (p / person\n                  :ARG0-of (h / have-org-role-91\n                        :ARG1 (p2 / parliament)\n                        :ARG2 (m / member)))\n            :op2 (s / source\n                  :mod (a2 / army)))\n      :ARG1 (k / kill-01\n            :ARG1 (p3 / person\n                  :quant (a3 / at-least\n                        :op1 23))\n            :location (t2 / town\n                  :name (n / name\n                        :op1 \"Monguno\")\n                  :location (n2 / northeast\n                        :part-of (c / country\n                              :name (n3 / name\n                                    :op1 \"Nigeria\"))))\n            :time (a4 / after\n                  :op1 (e / explode-01\n                        :ARG1 (b / bomb-01\n                              :ARG0 (c2 / criminal-organization\n                                    :name (n4 / name\n                                          :op1 \"Boko\"\n                                          :op2 \"Haram\"))\n                              :ARG1-of (c3 / confiscate-01\n                                    :ARG0 (v / vigilante))))))\n      :ARG2 (p4 / publication\n            :name (n5 / name\n                  :op1 \"BBC\")))"
    ],
    "tree": [
      "(c3 / confiscate-01\n    :ARG0 (v / vigilante))",
      "(b / bomb-01\n   :ARG0 (c2 / criminal-organization\n             :name (n4 / name\n                       :op1 \"Boko\"\n                       :op2 \"Haram\")))",
      "(e / explode-01\n   :ARG1 (b / bomb-01\n            :ARG0 (c2 / criminal-organization\n                      :name (n4 / name\n                                :op1 \"Boko\"\n                                :op2 \"Haram\"))\n            :ARG1 (c3 / confiscate-01\n                      :ARG0 (v / vigilante))))",
      "(k / kill-01\n   :ARG1 (p3 / person\n             :quant (a3 / at-least\n                        :op1 23)))",
      "(t / tell-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :ARG0 (h / have-org-role-91\n                             :ARG1 (p2 / parliament)\n                             :ARG2 (m / member)))\n            :op2 (s / source\n                    :mod (a2 / army)))\n   :ARG1 (k / kill-01\n            :ARG1 (p3 / person\n                      :quant (a3 / at-least\n                                 :op1 23))\n            :location (t2 / town\n                          :name (n / name\n                                   :op1 \"Monguno\")\n                          :location (n2 / northeast\n                                        :part (c / country\n                                                 :name (n3 / name\n                                                           :op1 \"Nigeria\"))))\n            :time (a4 / after\n                      :op1 (e / explode-01\n                              :ARG1 (b / bomb-01\n                                       :ARG0 (c2 / criminal-organization\n                                                 :name (n4 / name\n                                                           :op1 \"Boko\"\n                                                           :op2 \"Haram\"))\n                                       :ARG1 (c3 / confiscate-01\n                                                 :ARG0 (v / vigilante))))))\n   :ARG2 (p4 / publication\n             :name (n5 / name\n                       :op1 \"BBC\")))",
      "(t / tell-01\n   :ARG0 (a / and\n            :op1 (p / person\n                    :ARG0 (h / have-org-role-91\n                             :ARG1 (p2 / parliament)\n                             :ARG2 (m / member)))\n            :op2 (s / source\n                    :mod (a2 / army)))\n   :ARG1 (k / kill-01\n            :ARG1 (p3 / person\n                      :quant (a3 / at-least\n                                 :op1 23))\n            :location (t2 / town\n                          :name (n / name\n                                   :op1 \"Monguno\")\n                          :location (n2 / northeast\n                                        :part (c / country\n                                                 :name (n3 / name\n                                                           :op1 \"Nigeria\"))))\n            :time (a4 / after\n                      :op1 (e / explode-01\n                              :ARG1 (b / bomb-01\n                                       :ARG0 (c2 / criminal-organization\n                                                 :name (n4 / name\n                                                           :op1 \"Boko\"\n                                                           :op2 \"Haram\"))\n                                       :ARG1 (c3 / confiscate-01\n                                                 :ARG0 (v / vigilante)))))))",
      "(t / tell-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (p2 / parliament)\n                     :ARG2 (m / member)))\n   :ARG1 (k / kill-01\n            :ARG1 (p3 / person\n                      :quant (a3 / at-least\n                                 :op1 23))\n            :location (t2 / town\n                          :name (n / name\n                                   :op1 \"Monguno\")\n                          :location (n2 / northeast\n                                        :part (c / country\n                                                 :name (n3 / name\n                                                           :op1 \"Nigeria\"))))\n            :time (a4 / after\n                      :op1 (e / explode-01\n                              :ARG1 (b / bomb-01\n                                       :ARG0 (c2 / criminal-organization\n                                                 :name (n4 / name\n                                                           :op1 \"Boko\"\n                                                           :op2 \"Haram\"))\n                                       :ARG1 (c3 / confiscate-01\n                                                 :ARG0 (v / vigilante))))))\n   :ARG2 (p4 / publication\n             :name (n5 / name\n                       :op1 \"BBC\")))",
      "(t / tell-01\n   :ARG0 (s / source\n            :mod (a2 / army))\n   :ARG1 (k / kill-01\n            :ARG1 (p3 / person\n                      :quant (a3 / at-least\n                                 :op1 23))\n            :location (t2 / town\n                          :name (n / name\n                                   :op1 \"Monguno\")\n                          :location (n2 / northeast\n                                        :part (c / country\n                                                 :name (n3 / name\n                                                           :op1 \"Nigeria\"))))\n            :time (a4 / after\n                      :op1 (e / explode-01\n                              :ARG1 (b / bomb-01\n                                       :ARG0 (c2 / criminal-organization\n                                                 :name (n4 / name\n                                                           :op1 \"Boko\"\n                                                           :op2 \"Haram\"))\n                                       :ARG1 (c3 / confiscate-01\n                                                 :ARG0 (v / vigilante))))))\n   :ARG1 k\n   :ARG2 (p4 / publication\n             :name (n5 / name\n                       :op1 \"BBC\")))",
      "(t / tell-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (p2 / parliament)\n                     :ARG2 (m / member)))\n   :ARG1 (k / kill-01\n            :ARG1 (p3 / person\n                      :quant (a3 / at-least\n                                 :op1 23))\n            :location (t2 / town\n                          :name (n / name\n                                   :op1 \"Monguno\")\n                          :location (n2 / northeast\n                                        :part (c / country\n                                                 :name (n3 / name\n                                                           :op1 \"Nigeria\"))))\n            :time (a4 / after\n                      :op1 (e / explode-01\n                              :ARG1 (b / bomb-01\n                                       :ARG0 (c2 / criminal-organization\n                                                 :name (n4 / name\n                                                           :op1 \"Boko\"\n                                                           :op2 \"Haram\"))\n                                       :ARG1 (c3 / confiscate-01\n                                                 :ARG0 (v / vigilante)))))))",
      "(t / tell-01\n   :ARG0 (s / source\n            :mod (a2 / army))\n   :ARG1 (k / kill-01\n            :ARG1 (p3 / person\n                      :quant (a3 / at-least\n                                 :op1 23))\n            :location (t2 / town\n                          :name (n / name\n                                   :op1 \"Monguno\")\n                          :location (n2 / northeast\n                                        :part (c / country\n                                                 :name (n3 / name\n                                                           :op1 \"Nigeria\"))))\n            :time (a4 / after\n                      :op1 (e / explode-01\n                              :ARG1 (b / bomb-01\n                                       :ARG0 (c2 / criminal-organization\n                                                 :name (n4 / name\n                                                           :op1 \"Boko\"\n                                                           :op2 \"Haram\"))\n                                       :ARG1 (c3 / confiscate-01\n                                                 :ARG0 (v / vigilante))))))\n   :ARG1 k)"
    ],
    "smus": [
      "Vigilantes have confiscated.",
      "The bombing occurred by the Boko Haram group.",
      "The bombing by Boko Haram that the vigilantes confiscated exploded.",
      "At least 23 people were killed.",
      "At least 23 people were killed in the northern Nigerian town of Monguno after a bomb by Boko Haram exploded that was confiscated by vigilantes, parliament members and an army source have told the BBC.",
      "At least 23 people were killed in the northern Nigerian town of Monguno after a bomb by Boko Haram exploded that was confiscated by vigilantes, parliament members and an army source have told reporters.",
      "Parliamentarians have told the BBC that at least 23 people were killed in the northern Nigerian town of Monguno after a bomb by Boko Haram exploded that was confiscated by vigilantes.",
      "At least 23 people were killed in the northern Nigerian town of Monguno after a bomb by Boko Haram exploded on the confiscated goods by vigilantes, an army source has told the BBC.",
      "Parliamentarians have told of at least 23 people killed in the town of Monguno in northeastern Nigeria after a bombing by Boko Haram exploded that was confiscated by vigilantes.",
      "At least 23 people were killed in the northern Nigerian town of Monguno after a bomb by Boko Haram exploded that was confiscated by vigilantes, an army source has told the group."
    ]
  },
  {
    "instance_id": "pyrxsum-17",
    "summary": "The sports centre at Ravenscraig is a homage, a \"symphony in steel\", say the architects.",
    "summary_trees": [
      "# ::snt The sports centre at Ravenscraig is a homage, a \"symphony in steel\", say the architects.\n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (a / architect-01))\n      :ARG1 (a2 / and\n            :op1 (h / homage)\n            :op2 (s2 / symphony\n                  :location (s3 / steel))\n            :domain (c / center\n                  :mod (s4 / sport)\n                  :location (c2 / city\n                        :name (n / name\n                              :op1 \"Ravenscraig\")))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (a / architect-01))\n   :ARG1 (a2 / and\n             :op1 (h / homage)\n             :op2 (s2 / symphony\n                      :location (s3 / steel))\n             :domain (c / center\n                        :mod (s4 / sport)\n                        :location (c2 / city\n                                      :name (n / name\n                                               :op1 \"Ravenscraig\")))))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (a / architect-01))\n   :ARG1 (h / homage))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (a / architect-01))\n   :ARG1 (s2 / symphony\n             :location (s3 / steel)\n             :domain (c / center\n                        :mod (s4 / sport)\n                        :location (c2 / city\n                                      :name (n / name\n                                               :op1 \"Ravenscraig\")))))"
    ],
    "smus": [
      "The Ravenscraig sports centre is an homage, a steel symphony, architects say.",
      "The architects say homage.",
      "The Ravenscraig sports centre is a symphony in steel, architects say."
    ]
  },
  {
    "instance_id": "pyrxsum-18",
    "summary": "The winner of The Jump 2017 is Spencer Matthews.",
    "summary_trees": [
      "# ::snt The winner of The Jump 2017 is Spencer Matthews.\n(w / win-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Spencer\"\n                  :op2 \"Matthews\"))\n      :ARG1 (e / event\n            :name (n2 / name\n                  :op1 \"The\"\n                  :op2 \"Jump\")\n            :time (d / date-entity\n                  :year 2017)))"
    ],
    "tree": [
      "(w / win-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Spencer\"\n                     :op2 \"Matthews\"))\n   :ARG1 (e / event\n            :name (n2 / name\n                      :op1 \"The\"\n                      :op2 \"Jump\")\n            :time (d / date-entity\n                     :year 2017)))",
      "(w / win-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Spencer\"\n                     :op2 \"Matthews\")))"
    ],
    "smus": [
      "Spencer Matthews won the 2017 The Jump.",
      "Spencer Matthews won."
    ]
  },
  {
    "instance_id": "pyrxsum-19",
    "summary": "Fifa presidential candidate Gianni Infantino says he would press for the World Cup to be held in a whole region rather than one or two countries.",
    "summary_trees": [
      "# ::snt Fifa presidential candidate Gianni Infantino says he would press for the World Cup to be held in a whole region rather than one or two countries.\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Gianni\"\n                  :op2 \"Infantino\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (o / organization\n                        :name (n2 / name\n                              :op1 \"Fifa\"))\n                  :ARG2 (c / candidate\n                        :mod (p2 / president))))\n      :ARG1 (p3 / press-01\n            :ARG0 p\n            :ARG2 (h2 / hold-04\n                  :ARG1 (g / game\n                        :name (n3 / name\n                              :op1 \"World\"\n                              :op2 \"Cup\"))\n                  :location (r / region\n                        :mod (w / whole)\n                        :ARG1-of (ii / instead-of-91\n                              :ARG2 (h3 / hold-04\n                                    :ARG1 g\n                                    :location (c2 / country\n                                          :quant (o2 / or\n                                                :op1 1\n                                                :op2 2))))))))"
    ],
    "tree": [
      "(h3 / hold-04\n    :ARG1 (g / game :name (n3 / name :op1 \"World\" :op2 \"Cup\"))\n    :location (c2 / country\n                  :quant (o2 / or\n                             :op1 1\n                             :op2 2)))",
      "(h2 / hold-04\n    :ARG1 (g / game\n             :name (n3 / name\n                       :op1 \"World\"\n                       :op2 \"Cup\"))\n    :location (r / region\n                 :mod (w / whole)\n                 :ARG1 (ii / instead-of-91\n                           :ARG2 (h3 / hold-04\n                                     :ARG1 g\n                                     :location (c2 / country\n                                                   :quant (o2 / or\n                                                              :op1 1\n                                                              :op2 2))))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Gianni\"\n                     :op2 \"Infantino\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (o / organization\n                              :name (n2 / name\n                                        :op1 \"Fifa\"))\n                     :ARG2 (c / candidate\n                              :mod (p2 / president))))\n   :ARG1 (p3 / press-01\n             :ARG0 p\n             :ARG2 (h2 / hold-04\n                       :ARG1 (g / game\n                                :name (n3 / name\n                                          :op1 \"World\"\n                                          :op2 \"Cup\"))\n                       :location (r / region\n                                    :mod (w / whole)\n                                    :ARG1 (ii / instead-of-91\n                                              :ARG2 (h3 / hold-04\n                                                        :ARG1 g\n                                                        :location (c2 / country\n                                                                      :quant (o2 / or\n                                                                                 :op1 1\n                                                                                 :op2 2))))))))",
      "(h3 / hold-04\n    :location (c2 / country\n                  :quant (o2 / or\n                             :op1 1\n                             :op2 2)))",
      "(h2 / hold-04\n    :location (r / region\n                 :mod (w / whole)))"
    ],
    "smus": [
      "The Wor Cup will be held in one or two countries.",
      "The Wor Cup is held in the whole region, not in one or two countries.",
      "Gianni Infantino, the president of FIFA, says he will press for the Wor Cup to be held in the whole region rather than in one or two countries.",
      "held in one or two countries.",
      "held in the whole region."
    ]
  },
  {
    "instance_id": "pyrxsum-20",
    "summary": "Finance Secretary John Swinney has warned of \"tough choices\" facing Scotland as he prepares to set out his budget.",
    "summary_trees": [
      "# ::snt Finance Secretary John Swinney has warned of \"tough choices\" facing Scotland as he prepares to set out his budget.\n(w / warn-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"Swinney\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (s / secretary\n                        :topic (f / finance))))\n      :ARG1 (c / choose-01\n            :ARG0 (c2 / country\n                  :name (n2 / name\n                        :op1 \"Scotland\"))\n            :ARG1-of (t / tough-02)\n            :ARG1-of (f2 / face-01\n                  :ARG0 c2))\n      :time (p2 / prepare-02\n            :ARG0 p\n            :ARG1 (s2 / set-out-06\n                  :ARG0 p\n                  :ARG1 (b / budget\n                        :poss p))))"
    ],
    "tree": [
      "(s2 / set-out-06\n    :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\")))\n    :ARG1 (b / budget\n             :poss p))"
    ],
    "smus": [
      "John Swinney set out his budget."
    ]
  },
  {
    "instance_id": "pyrxsum-21",
    "summary": "The judge leading the inquiry into the Grenfell Tower fire has written to the prime minister with recommendations for its terms of reference.",
    "summary_trees": [
      "# ::snt The judge leading the inquiry into the Grenfell Tower fire has written to the prime minister with recommendations for its terms of reference.\n(w / write-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG3 (j / judge-01))\n            :ARG0-of (l / lead-02\n                  :ARG1 (ii / inquire-01\n                        :ARG2 (f / fire\n                              :location (b / building\n                                    :name (n / name\n                                          :op1 \"Grenfell\"\n                                          :op2 \"Tower\"))))))\n      :ARG1 (r / recommend-01\n            :ARG0 p\n            :ARG4 (t / term-01\n                  :ARG0 (ii2 / it)\n                  :ARG2-of (r2 / reference-04)))\n      :ARG2 (p2 / person\n            :ARG0-of (h2 / have-org-role-91\n                  :ARG2 (m / minister\n                        :mod (p3 / prime)))))"
    ],
    "tree": [
      "(h2 / have-org-role-91\n    :ARG2 (m / minister\n             :mod (p3 / prime)))",
      "(t / term-01\n   :ARG0 (ii2 / it)\n   :ARG2 (r2 / reference-04))",
      "(r / recommend-01\n   :ARG0 (p / person)\n   :ARG4 (t / term-01\n            :ARG0 (ii2 / it)\n            :ARG2 (r2 / reference-04)))",
      "(ii / inquire-01\n    :ARG2 (f / fire\n             :location (b / building\n                          :name (n / name\n                                   :op1 \"Grenfell\"\n                                   :op2 \"Tower\"))))",
      "(l / lead-02\n   :ARG1 (ii / inquire-01\n             :ARG2 (f / fire\n                      :location (b / building\n                                   :name (n / name\n                                            :op1 \"Grenfell\"\n                                            :op2 \"Tower\")))))",
      "(h / have-org-role-91\n   :ARG3 (j / judge-01))",
      "(w / write-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG3 (j / judge-01))\n            :ARG0 (l / lead-02\n                     :ARG1 (ii / inquire-01\n                               :ARG2 (f / fire\n                                        :location (b / building\n                                                     :name (n / name\n                                                              :op1 \"Grenfell\"\n                                                              :op2 \"Tower\"))))))\n   :ARG1 (r / recommend-01\n            :ARG0 p\n            :ARG4 (t / term-01\n                     :ARG0 (ii2 / it)\n                     :ARG2 (r2 / reference-04))))",
      "(w / write-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG3 (j / judge-01))\n            :ARG0 (l / lead-02\n                     :ARG1 (ii / inquire-01\n                               :ARG2 (f / fire\n                                        :location (b / building\n                                                     :name (n / name\n                                                              :op1 \"Grenfell\"\n                                                              :op2 \"Tower\")))))))"
    ],
    "smus": [
      "Prime minister",
      "It is a reference term.",
      "People should use its terms as a reference.",
      "inquiry into fire at Glenfell Tower",
      "leading to an inquiry into the fire at Glenfell Tower.",
      "Judge.",
      "A judge leading an inquiry into the Glenfell Tower fire has written that it should be referred to as a reference.",
      "A judge has written leading an inquiry into the fire at Glenfell Tower."
    ]
  },
  {
    "instance_id": "pyrxsum-22",
    "summary": "Police in a small Alaska town mistakenly told a couple their son had been killed in a car crash, leading to an extraordinary reunion hours later.",
    "summary_trees": [
      "# ::snt Police in a small Alaska town mistakenly told a couple their son had been killed in a car crash, leading to an extraordinary reunion hours later.\n(l / lead-03\n      :ARG0 (t / tell-01\n            :ARG0 (p / police\n                  :location (t2 / town\n                        :mod (s / small)\n                        :location (s2 / state\n                              :name (n / name\n                                    :op1 \"Alaska\"))))\n            :ARG1 (k / kill-01\n                  :ARG1 (p2 / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 (c / couple)\n                              :ARG2 (s3 / son)))\n                  :ARG1-of (c2 / cause-01\n                        :ARG0 (c3 / crash-01\n                              :ARG1 (c4 / car))))\n            :ARG2 c\n            :ARG1-of (m / mistake-01))\n      :ARG2 (r / reunite-01\n            :mod (e / extraordinary)\n            :time (a / after\n                  :quant (m2 / multiple\n                        :op1 (t3 / temporal-quantity\n                              :quant 1\n                              :unit (h2 / hour))))))"
    ],
    "tree": [
      "(r / reunite-01\n   :mod (e / extraordinary)\n   :time (a / after\n            :quant (m2 / multiple\n                       :op1 (t3 / temporal-quantity\n                                :quant 1\n                                :unit (h2 / hour)))))",
      "(c3 / crash-01\n    :ARG1 (c4 / car))",
      "(k / kill-01\n   :ARG1 (p2 / person\n             :ARG0 (h / have-rel-role-91\n                      :ARG1 (c / couple)\n                      :ARG2 (s3 / son))))",
      "(t / tell-01\n   :ARG0 (p / police\n            :location (t2 / town\n                          :mod (s / small)\n                          :location (s2 / state\n                                        :name (n / name\n                                                 :op1 \"Alaska\"))))\n   :ARG1 (k / kill-01\n            :ARG1 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 (c / couple)\n                               :ARG2 (s3 / son)))\n            :ARG1 (c2 / cause-01\n                      :ARG0 (c3 / crash-01\n                                :ARG1 (c4 / car))))\n   :ARG2 c)",
      "(t / tell-01\n   :ARG0 (p / police\n            :location (t2 / town\n                          :mod (s / small)\n                          :location (s2 / state\n                                        :name (n / name\n                                                 :op1 \"Alaska\"))))\n   :ARG1 (k / kill-01\n            :ARG1 (p2 / person\n                      :ARG0 (h / have-rel-role-91\n                               :ARG1 (c / couple)\n                               :ARG2 (s3 / son)))\n            :ARG1 (c2 / cause-01\n                      :ARG0 (c3 / crash-01\n                                :ARG1 (c4 / car)))))",
      "(l / lead-03\n   :ARG0 (t / tell-01\n            :ARG0 (p / police\n                     :location (t2 / town\n                                   :mod (s / small)\n                                   :location (s2 / state\n                                                 :name (n / name\n                                                          :op1 \"Alaska\"))))\n            :ARG1 (k / kill-01\n                     :ARG1 (p2 / person\n                               :ARG0 (h / have-rel-role-91\n                                        :ARG1 (c / couple)\n                                        :ARG2 (s3 / son)))\n                     :ARG1 (c2 / cause-01\n                               :ARG0 (c3 / crash-01\n                                         :ARG1 (c4 / car))))\n            :ARG2 c\n            :ARG1 (m / mistake-01))\n   :ARG2 (r / reunite-01\n            :mod (e / extraordinary)\n            :time (a / after\n                     :quant (m2 / multiple\n                                :op1 (t3 / temporal-quantity\n                                         :quant 1\n                                         :unit (h2 / hour))))))"
    ],
    "smus": [
      "The extraordinary reunification took place hours later.",
      "A car crash happened.",
      "The couple's son was killed.",
      "A small town in Alaska told the police that the couple's son had been killed in a car crash.",
      "Police in a small town in Alaska told reporters that the couple's son had been killed in a car crash.",
      "A small town in Alaska, police told them the son had been killed by mistake in a car crash, leading to an extraordinary reunification hours later."
    ]
  },
  {
    "instance_id": "pyrxsum-23",
    "summary": "South Africa's prosecutors have sought permission to appeal against athlete Oscar Pistorius' \"shockingly light\" sentence, court papers show.",
    "summary_trees": [
      "# ::snt South Africa's prosecutors have sought permission to appeal against athlete Oscar Pistorius' \"shockingly light\" sentence, court papers show.\n(s / show-01\n      :ARG0 (p / paper\n            :mod (c / court))\n      :ARG1 (s2 / seek-01\n            :ARG0 (p2 / person\n                  :ARG0-of (p3 / prosecute-01)\n                  :mod (c2 / country\n                        :name (n / name\n                              :op1 \"South\"\n                              :op2 \"Africa\")))\n            :ARG1 (p4 / permit-01\n                  :ARG1 (a / appeal-01\n                        :ARG0 p2\n                        :ARG1 (s3 / sentence-01\n                              :ARG1 (p5 / person\n                                    :name (n2 / name\n                                          :op1 \"Oscar\"\n                                          :op2 \"Pistorius\")\n                                    :mod (a2 / athlete))\n                              :ARG1-of (l / light-06\n                                    :ARG0-of (s4 / shock-01)))))))"
    ],
    "tree": [
      "(l / light-06\n   :ARG0 (s4 / shock-01))",
      "(s3 / sentence-01\n    :ARG1 (p5 / person\n              :name (n2 / name\n                        :op1 \"Oscar\"\n                        :op2 \"Pistorius\")\n              :mod (a2 / athlete)))",
      "(a / appeal-01\n   :ARG0 (p2 / person)\n   :ARG1 (s3 / sentence-01\n             :ARG1 (p5 / person\n                       :name (n2 / name\n                                 :op1 \"Oscar\"\n                                 :op2 \"Pistorius\")\n                       :mod (a2 / athlete))))",
      "(a / appeal-01\n   :ARG1 (s3 / sentence-01\n             :ARG1 (p5 / person\n                       :name (n2 / name\n                                 :op1 \"Oscar\"\n                                 :op2 \"Pistorius\")\n                       :mod (a2 / athlete))))",
      "(p4 / permit-01\n    :ARG1 (a / appeal-01\n             :ARG0 (p2 / person)\n             :ARG1 (s3 / sentence-01\n                       :ARG1 (p5 / person\n                                 :name (n2 / name\n                                           :op1 \"Oscar\"\n                                           :op2 \"Pistorius\")\n                                 :mod (a2 / athlete)))))",
      "(s2 / seek-01\n    :ARG0 (p2 / person\n              :ARG0 (p3 / prosecute-01)\n              :mod (c2 / country\n                       :name (n / name\n                                :op1 \"South\"\n                                :op2 \"Africa\")))\n    :ARG1 (p4 / permit-01\n              :ARG1 (a / appeal-01\n                       :ARG0 p2\n                       :ARG1 (s3 / sentence-01\n                                 :ARG1 (p5 / person\n                                           :name (n2 / name\n                                                     :op1 \"Oscar\"\n                                                     :op2 \"Pistorius\")\n                                           :mod (a2 / athlete))))))",
      "(s / show-01\n   :ARG0 (p / paper\n            :mod (c / court))\n   :ARG1 (s2 / seek-01\n             :ARG0 (p2 / person\n                       :ARG0 (p3 / prosecute-01)\n                       :mod (c2 / country\n                                :name (n / name\n                                         :op1 \"South\"\n                                         :op2 \"Africa\")))\n             :ARG1 (p4 / permit-01\n                       :ARG1 (a / appeal-01\n                                :ARG0 p2\n                                :ARG1 (s3 / sentence-01\n                                          :ARG1 (p5 / person\n                                                    :name (n2 / name\n                                                              :op1 \"Oscar\"\n                                                              :op2 \"Pistorius\")\n                                                    :mod (a2 / athlete)))))))"
    ],
    "smus": [
      "Shockingly light.",
      "Oscar Pistorius is serving a sentence as an athlete.",
      "People will appeal the sentence given to athlete Oscar Pistorius.",
      "The athlete Oscar Pistorius will appeal the sentence.",
      "The person may appeal the sentence given to athlete Oscar Pistorius.",
      "South African prosecutors have sought permission to appeal the sentence given to athlete Oscar Pistorius.",
      "Court papers show South African prosecutors have sought permission to appeal the sentence given to athlete Oscar Pistorius."
    ]
  },
  {
    "instance_id": "pyrxsum-24",
    "summary": "The UK's first maternity clinic for women who have been victims of rape and sexual assault has opened.",
    "summary_trees": [
      "# ::snt The UK's first maternity clinic for women who have been victims of rape and sexual assault has opened.\n(o / open-01\n      :ARG1 (c / clinic\n            :mod (m / maternity)\n            :ord (o2 / ordinal-entity\n                  :value 1)\n            :location (c2 / country\n                  :name (n / name\n                        :op1 \"UK\"))\n            :beneficiary (w / woman\n                  :ARG1-of (v / victimize-01\n                        :ARG0 (a / and\n                              :op1 (r / rape-01\n                                    :ARG1 w)\n                              :op2 (a2 / assault-01\n                                    :ARG1 w\n                                    :manner (s / sex)))))))"
    ],
    "tree": [
      "(a2 / assault-01\n    :manner (s / sex))",
      "(o / open-01\n   :ARG1 (c / clinic\n            :mod (m / maternity)\n            :ord (o2 / ordinal-entity\n                     :value 1)\n            :location (c2 / country\n                          :name (n / name\n                                   :op1 \"UK\"))\n            :beneficiary (w / woman\n                            :ARG1 (v / victimize-01\n                                     :ARG0 (a / and\n                                              :op1 (r / rape-01\n                                                      :ARG1 w)\n                                              :op2 (a2 / assault-01\n                                                       :ARG1 w\n                                                       :manner (s / sex)))))))",
      "(o / open-01\n   :ARG1 (c / clinic\n            :mod (m / maternity)\n            :ord (o2 / ordinal-entity\n                     :value 1)\n            :location (c2 / country\n                          :name (n / name\n                                   :op1 \"UK\"))\n            :beneficiary (w / woman\n                            :ARG1 (v / victimize-01\n                                     :ARG0 (r / rape-01\n                                              :ARG1 w)))))",
      "(o / open-01\n   :ARG1 (c / clinic\n            :mod (m / maternity)\n            :ord (o2 / ordinal-entity\n                     :value 1)\n            :location (c2 / country\n                          :name (n / name\n                                   :op1 \"UK\"))\n            :beneficiary (w / woman\n                            :ARG1 (v / victimize-01\n                                     :ARG0 (a2 / assault-01\n                                               :ARG1 w\n                                               :manner (s / sex))))))"
    ],
    "smus": [
      "Sexual assault.",
      "The first maternity clinic in the UK has opened for women who have been victims of rape and sexual assault.",
      "The first maternity clinic in the UK has opened for women who have been rape victims.",
      "The first maternity clinic in the UK has opened for women who have been victims of sexual assault."
    ]
  },
  {
    "instance_id": "pyrxsum-25",
    "summary": "The number of children referred to the NHS with gender identity issues has increased significantly in recent years, according to figures obtained by the BBC.",
    "summary_trees": [
      "# ::snt The number of children referred to the NHS with gender identity issues has increased significantly in recent years, according to figures obtained by the BBC.\n(s / say-01\n      :ARG0 (f / figure\n            :ARG1-of (o / obtain-01\n                  :ARG0 (p / publication\n                        :name (n / name\n                              :op1 \"BBC\"))))\n      :ARG1 (ii / increase-01\n            :ARG1 (n2 / number\n                  :quant-of (c / child\n                        :ARG1-of (r / refer-02\n                              :ARG2 (g / government-organization\n                                    :name (n3 / name\n                                          :op1 \"NHS\"))\n                              :ARG1-of (c2 / cause-01\n                                    :ARG0 (ii2 / issue-02\n                                          :ARG0 (ii3 / identity\n                                                :mod (g2 / gender))\n                                          :ARG1 c)))))\n            :ARG2 (s2 / significant-02)\n            :time (y / year\n                  :mod (r2 / recent))))"
    ],
    "tree": [
      "(ii2 / issue-02\n     :ARG0 (ii3 / identity\n                :mod (g2 / gender)))",
      "(ii2 / issue-02\n     :ARG0 (ii3 / identity\n                :mod (g2 / gender))\n     :ARG1 (c / child))",
      "(ii / increase-01\n    :ARG1 (n2 / number))",
      "(s / say-01\n   :ARG0 (f / figure\n            :ARG1 (o / obtain-01\n                     :ARG0 (p / publication\n                              :name (n / name\n                                       :op1 \"BBC\"))))\n   :ARG1 (ii / increase-01\n             :ARG1 (n2 / number)))"
    ],
    "smus": [
      "Issues of gender identity.",
      "The children are issues of gender identity.",
      "The number has increased.",
      "According to figures obtained by the BBC, the number has increased."
    ]
  },
  {
    "instance_id": "pyrxsum-26",
    "summary": "The mayor of an east London borough has been accused of \"corrupt and illegal practices\", at a special court hearing.",
    "summary_trees": [
      "# ::snt The mayor of an east London borough has been accused of \"corrupt and illegal practices\", at a special court hearing.\n(a / accuse-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (b / borough\n                        :location (e / east\n                              :part-of (c / city\n                                    :name (n / name\n                                          :op1 \"London\"))))\n                  :ARG2 (m / mayor)))\n      :ARG2 (p2 / practice-01\n            :ARG0 p\n            :ARG1-of (c2 / corrupt-01)\n            :ARG1-of (l / legal-02\n                  :polarity -))\n      :time (h2 / hearing-02\n            :ARG0 (c3 / court)\n            :ARG1 p\n            :ARG1-of (s / special-02)))"
    ],
    "tree": [
      "(h2 / hearing-02\n    :ARG0 (c3 / court))",
      "(a / accuse-01\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (b / borough\n                              :location (e / east\n                                           :part (c / city\n                                                    :name (n / name\n                                                             :op1 \"London\"))))\n                     :ARG2 (m / mayor)))\n   :ARG2 (p2 / practice-01\n             :ARG0 p\n             :ARG1 (c2 / corrupt-01)\n             :ARG1 (l / legal-02\n                      :polarity -)))"
    ],
    "smus": [
      "The court will hear the case.",
      "The mayor of the east London borough has been accused of criminal and corrupt practices."
    ]
  },
  {
    "instance_id": "pyrxsum-27",
    "summary": "A 21-year-old man has appeared in court in County Clare charged over the fatal stabbing of Karl Haugh in Kilkee at the weekend.",
    "summary_trees": [
      "# ::snt A 21-year-old man has appeared in court in County Clare charged over the fatal stabbing of Karl Haugh in Kilkee at the weekend.\n(a / appear-01\n      :ARG1 (m / man\n            :age (t / temporal-quantity\n                  :quant 21\n                  :unit (y / year))\n            :ARG1-of (c / charge-05\n                  :ARG2 (s / stab-01\n                        :ARG1 (p / person\n                              :name (n / name\n                                    :op1 \"Karl\"\n                                    :op2 \"Haugh\"))\n                        :mod (f / fatal)\n                        :location (c2 / city\n                              :name (n2 / name\n                                    :op1 \"Kilkee\"))\n                        :time (w / weekend))))\n      :location (c3 / court\n            :location (c4 / county\n                  :name (n3 / name\n                        :op1 \"Clare\"))))"
    ],
    "tree": [
      "(s / stab-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Karl\"\n                     :op2 \"Haugh\")))",
      "(s / stab-01\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Karl\"\n                     :op2 \"Haugh\"))\n   :location (c2 / city\n                 :name (n2 / name\n                           :op1 \"Kilkee\")))",
      "(a / appear-01\n   :ARG1 (m / man\n            :age (t / temporal-quantity\n                    :quant 21\n                    :unit (y / year))\n            :ARG1 (c / charge-05\n                     :ARG2 (s / stab-01\n                              :ARG1 (p / person\n                                       :name (n / name\n                                                :op1 \"Karl\"\n                                                :op2 \"Haugh\"))\n                              :mod (f / fatal)\n                              :location (c2 / city\n                                            :name (n2 / name\n                                                      :op1 \"Kilkee\"))\n                              :time (w / weekend))))\n   :location (c3 / court\n                 :location (c4 / county\n                               :name (n3 / name\n                                         :op1 \"Clare\"))))",
      "(a / appear-01\n   :ARG1 (m / man\n            :age (t / temporal-quantity\n                    :quant 21\n                    :unit (y / year))\n            :ARG1 (c / charge-05\n                     :ARG2 (s / stab-01\n                              :ARG1 (p / person\n                                       :name (n / name\n                                                :op1 \"Karl\"\n                                                :op2 \"Haugh\"))\n                              :mod (f / fatal)\n                              :location (c2 / city\n                                            :name (n2 / name\n                                                      :op1 \"Kilkee\"))\n                              :time (w / weekend)))))",
      "(s / stab-01\n   :location (c2 / city\n                 :name (n2 / name\n                           :op1 \"Kilkee\")))",
      "(a / appear-01\n   :location (c3 / court\n                 :location (c4 / county\n                               :name (n3 / name\n                                         :op1 \"Clare\"))))"
    ],
    "smus": [
      "Karl Haugh got stabbed",
      "Karl Haugh was stabbed in Kilkee.",
      "A 21-year-old man appeared in Clare County court charged with fatally stabbing Karl Haugh in Kilkee over the weekend.",
      "A 21-year-old man has appeared on charges of fatally stabbing Karl Haugh in Kilkee over the weekend.",
      "The stab wounds occurred in Kilkee.",
      "The case was heard in Clare County court."
    ]
  },
  {
    "instance_id": "pyrxsum-28",
    "summary": "Post Office workers will stage five days of strikes from Monday in a continuing dispute over jobs, pensions and branch closures, their union says.",
    "summary_trees": [
      "# ::snt Post Office workers will stage five days of strikes from Monday in a continuing dispute over jobs, pensions and branch closures, their union says.\n(s / say-01\n      :ARG0 (u / union\n            :poss (p / person\n                  :ARG0-of (w / work-01\n                        :ARG2 (g / government-organization\n                              :name (n / name\n                                    :op1 \"Post\"\n                                    :op2 \"Office\")))))\n      :ARG1 (s2 / strike-02\n            :ARG0 p\n            :time (f / from\n                  :op1 (d / date-entity\n                        :weekday (m / monday)))\n            :duration (t / temporal-quantity\n                  :quant 5\n                  :unit (d2 / day))\n            :ARG1-of (c / cause-01\n                  :ARG0 (d3 / dispute-01\n                        :ARG2 (a / and\n                              :op1 (j / job)\n                              :op2 (p2 / pension)\n                              :op3 (c2 / close-01\n                                    :ARG1 (b / branch)))\n                        :ARG1-of (c3 / continue-01)))))"
    ],
    "tree": [
      "(c2 / close-01\n    :ARG1 (b / branch))",
      "(s / say-01\n   :ARG0 (u / union\n            :poss (p / person\n                     :ARG0 (w / work-01\n                              :ARG2 (g / government-organization\n                                       :name (n / name\n                                                :op1 \"Post\"\n                                                :op2 \"Office\")))))\n   :ARG1 (s2 / strike-02\n             :ARG0 p\n             :time (f / from\n                      :op1 (d / date-entity\n                              :weekday (m / monday)))\n             :duration (t / temporal-quantity\n                          :quant 5\n                          :unit (d2 / day))\n             :ARG1 (c / cause-01\n                      :ARG0 (d3 / dispute-01\n                                :ARG2 (a / and\n                                         :op1 (j / job)\n                                         :op2 (p2 / pension)\n                                         :op3 (c2 / close-01\n                                                  :ARG1 (b / branch)))\n                                :ARG1 (c3 / continue-01)))))",
      "(s / say-01\n   :ARG0 (u / union\n            :poss (p / person\n                     :ARG0 (w / work-01\n                              :ARG2 (g / government-organization\n                                       :name (n / name\n                                                :op1 \"Post\"\n                                                :op2 \"Office\")))))\n   :ARG1 (s2 / strike-02\n             :ARG0 p\n             :time (f / from\n                      :op1 (d / date-entity\n                              :weekday (m / monday)))\n             :duration (t / temporal-quantity\n                          :quant 5\n                          :unit (d2 / day))\n             :ARG1 (c / cause-01\n                      :ARG0 (d3 / dispute-01\n                                :ARG2 (j / job)\n                                :ARG1 (c3 / continue-01)))))",
      "(s / say-01\n   :ARG0 (u / union\n            :poss (p / person\n                     :ARG0 (w / work-01\n                              :ARG2 (g / government-organization\n                                       :name (n / name\n                                                :op1 \"Post\"\n                                                :op2 \"Office\")))))\n   :ARG1 (s2 / strike-02\n             :ARG0 p\n             :time (f / from\n                      :op1 (d / date-entity\n                              :weekday (m / monday)))\n             :duration (t / temporal-quantity\n                          :quant 5\n                          :unit (d2 / day))\n             :ARG1 (c / cause-01\n                      :ARG0 (d3 / dispute-01\n                                :ARG2 (p2 / pension)\n                                :ARG1 (c3 / continue-01)))))",
      "(s / say-01\n   :ARG0 (u / union\n            :poss (p / person\n                     :ARG0 (w / work-01\n                              :ARG2 (g / government-organization\n                                       :name (n / name\n                                                :op1 \"Post\"\n                                                :op2 \"Office\")))))\n   :ARG1 (s2 / strike-02\n             :ARG0 p\n             :time (f / from\n                      :op1 (d / date-entity\n                              :weekday (m / monday)))\n             :duration (t / temporal-quantity\n                          :quant 5\n                          :unit (d2 / day))\n             :ARG1 (c / cause-01\n                      :ARG0 (d3 / dispute-01\n                                :ARG2 (c2 / close-01\n                                          :ARG1 (b / branch))\n                                :ARG1 (c3 / continue-01)\n                                :ARG1 c3))))"
    ],
    "smus": [
      "Branch closes.",
      "The Post Office workers' union says they will be on strike from Monday for five days over continuing disputes over jobs, pensions and branch closures.",
      "The Post Office workers' union says they will be on strike for five days from Monday over a continuing job dispute.",
      "The Post Office workers' union says they will be on strike for five days from Monday over a continuing pension dispute.",
      "The Post Office workers' union says they will be on strike from Monday for five days over a continuing dispute over branch closures."
    ]
  },
  {
    "instance_id": "pyrxsum-29",
    "summary": "Wales' youth workers will be regulated by the Education Workforce Council for the first time from 1 April.",
    "summary_trees": [
      "# ::snt Wales' youth workers will be regulated by the Education Workforce Council for the first time from 1 April.\n(r / regulate-01\n      :ARG0 (g / government-organization\n            :name (n / name\n                  :op1 \"Education\"\n                  :op2 \"Workforce\"\n                  :op3 \"Council\"))\n      :ARG1 (p / person\n            :ARG0-of (w / work-01\n                  :ARG2 (y / youth))\n            :location (c / country\n                  :name (n2 / name\n                        :op1 \"Wales\")))\n      :ord (o / ordinal-entity\n            :value 1)\n      :time (f / from\n            :op1 (d / date-entity\n                  :month 4\n                  :day 1)))"
    ],
    "tree": [
      "(w / work-01\n   :ARG2 (y / youth))",
      "(r / regulate-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Education\"\n                     :op2 \"Workforce\"\n                     :op3 \"Council\"))\n   :ARG1 (p / person\n            :ARG0 (w / work-01\n                     :ARG2 (y / youth))\n            :location (c / country\n                         :name (n2 / name\n                                   :op1 \"Wales\"))))",
      "(r / regulate-01\n   :ARG1 (p / person\n            :ARG0 (w / work-01\n                     :ARG2 (y / youth))\n            :location (c / country\n                         :name (n2 / name\n                                   :op1 \"Wales\"))))",
      "(r / regulate-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"Education\"\n                     :op2 \"Workforce\"\n                     :op3 \"Council\")))"
    ],
    "smus": [
      "Youth work",
      "Youth workers in Wales are regulated by the Education Workforce Council.",
      "Youth workers in Wales are regulated.",
      "The Education Workforce Council is regulated."
    ]
  },
  {
    "instance_id": "pyrxsum-30",
    "summary": "Liberal Democrat leader Tim Farron says he does not believe gay sex is a sin, following questions about his views on the subject.",
    "summary_trees": [
      "# ::snt Liberal Democrat leader Tim Farron says he does not believe gay sex is a sin, following questions about his views on the subject.\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Tim\"\n                  :op2 \"Farron\")\n            :ARG0-of (l / lead-02\n                  :ARG1 (p2 / political-party\n                        :name (n2 / name\n                              :op1 \"Liberal\"\n                              :op2 \"Democrat\"))))\n      :ARG1 (b / believe-01\n            :polarity -\n            :ARG0 p\n            :ARG1 (s2 / sin-01\n                  :ARG0 (s3 / sex-01\n                        :ARG1 (g / gay-01))))\n      :ARG1-of (f / follow-01\n            :ARG2 (q / question-01\n                  :ARG1 (v / view-02\n                        :ARG0 p\n                        :ARG1 s2))))"
    ],
    "tree": [
      "(v / view-02\n   :ARG0 (p / person :name (n / name :op1 \"Tim\" :op2 \"Farron\")))\n   :ARG1 (s2 / sin-01))",
      "(q / question-01\n   :ARG1 (v / view-02\n            :ARG0 (p / person :name (n / name :op1 \"Tim\" :op2 \"Farron\")))\n            :ARG1 (s2 / sin-01)))",
      "(s3 / sex-01\n    :ARG1 (g / gay-01))",
      "(s2 / sin-01\n    :ARG0 (s3 / sex-01\n              :ARG1 (g / gay-01)))",
      "(b / believe-01\n   :ARG0 (p / person :name (n / name :op1 \"Tim\" :op2 \"Farron\")))\n   :ARG1 (s2 / sin-01\n             :ARG0 (s3 / sex-01\n                       :ARG1 (g / gay-01))))",
      "(b / believe-01\n   :ARG1 (s2 / sin-01\n             :ARG0 (s3 / sex-01\n                       :ARG1 (g / gay-01))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Tim\"\n                     :op2 \"Farron\")\n            :ARG0 (l / lead-02\n                     :ARG1 (p2 / political-party\n                               :name (n2 / name\n                                         :op1 \"Liberal\"\n                                         :op2 \"Democrat\"))))\n   :ARG1 (b / believe-01\n            :polarity -\n            :ARG0 p\n            :ARG1 (s2 / sin-01\n                      :ARG0 (s3 / sex-01\n                                :ARG1 (g / gay-01)))))"
    ],
    "smus": [
      "Tim Farron views sin.",
      "Questioning Tim Ferran's sin view.",
      "Gay sex.",
      "Gay sex is a sin.",
      "Tim Farron does believe that having sex with gays is a sin.",
      "Believe it is a sin to have sex with gays.",
      "Liberal Democrat leader Tim Farron says he does not believe homosexual sex is a sin."
    ]
  },
  {
    "instance_id": "pyrxsum-31",
    "summary": "Paint has been thrown over an Orange hall in north Belfast.",
    "summary_trees": [
      "# ::snt Paint has been thrown over an Orange hall in north Belfast.\n(t / throw-01\n      :ARG1 (p / paint)\n      :ARG2 (o / over\n            :op1 (h / hall\n                  :mod (o2 / organization\n                        :name (n / name\n                              :op1 \"Society\"\n                              :op2 \"of\"\n                              :op3 \"Orange\"))\n                  :location (n2 / north\n                        :part-of (c / city\n                              :name (n3 / name\n                                    :op1 \"Belfast\"))))))"
    ],
    "tree": [
      "(t / throw-01\n   :ARG1 (p / paint)\n   :ARG2 (o / over\n            :op1 (h / hall\n                    :mod (o2 / organization\n                             :name (n / name\n                                      :op1 \"Society\"\n                                      :op2 \"of\"\n                                      :op3 \"Orange\"))\n                    :location (n2 / north\n                                  :part (c / city\n                                           :name (n3 / name\n                                                     :op1 \"Belfast\"))))))",
      "(t / throw-01\n   :ARG1 (p / paint))"
    ],
    "smus": [
      "Paint was thrown over the Orange Society hall in northern Belfast.",
      "Paint thrown."
    ]
  },
  {
    "instance_id": "pyrxsum-32",
    "summary": "Liverpool boss Jurgen Klopp defended under-fire goalkeeper Simon Mignolet after his latest uncertain display in the draw with Arsenal at Anfield.",
    "summary_trees": [
      "# ::snt Liverpool boss Jurgen Klopp defended under-fire goalkeeper Simon Mignolet after his latest uncertain display in the draw with Arsenal at Anfield.\n(d / defend-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Jurgen\"\n                  :op2 \"Klopp\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"Liverpool\"))\n                  :ARG2 (b / boss)))\n      :ARG1 (p2 / person\n            :name (n3 / name\n                  :op1 \"Simon\"\n                  :op2 \"Mignolet\")\n            :ARG0-of (h2 / have-org-role-91\n                  :ARG2 (g / goalkeeper))\n            :ARG1-of (f / fire-02\n                  :mod (u / under)))\n      :time (a / after\n            :op1 (d2 / display-01\n                  :ARG0 p2\n                  :ARG1-of (k / know-01\n                        :polarity -)\n                  :mod (l / last)\n                  :subevent-of (d3 / draw-01\n                        :ARG0 p2\n                        :ARG3 (t2 / team\n                              :name (n4 / name\n                                    :op1 \"Arsenal\"))\n                        :location (s / sports-facility\n                              :name (n5 / name\n                                    :op1 \"Anfield\"))))))"
    ],
    "tree": [
      "(d / defend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (t / team\n                              :name (n2 / name\n                                        :op1 \"Liverpool\"))\n                     :ARG2 (b / boss))))",
      "(d / defend-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Jurgen\"\n                     :op2 \"Klopp\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (t / team\n                              :name (n2 / name\n                                        :op1 \"Liverpool\"))\n                     :ARG2 (b / boss)))\n   :ARG1 (p2 / person\n             :name (n3 / name\n                       :op1 \"Simon\"\n                       :op2 \"Mignolet\")\n             :ARG0 (h2 / have-org-role-91\n                       :ARG2 (g / goalkeeper))\n             :ARG1 (f / fire-02\n                      :mod (u / under))))"
    ],
    "smus": [
      "Jurgen Klopp defended Liverpool boss.",
      "Jurgen Klopp defended Liverpool boss Simon Merlot as goalkeeper for the under fire."
    ]
  },
  {
    "instance_id": "pyrxsum-33",
    "summary": "Thousands of people have been leaving besieged, rebel-held eastern districts of the Syrian city of Aleppo following the resumption of evacuations agreed as part of a ceasefire deal last week.",
    "summary_trees": [
      "# ::snt Thousands of people have been leaving besieged, rebel-held eastern districts of the Syrian city of Aleppo following the resumption of evacuations agreed as part of a ceasefire deal last week.\n(l / leave-11\n      :ARG0 (p / person\n            :quant (m / multiple\n                  :op1 1000))\n      :ARG1 (d / district\n            :location (e / east)\n            :ARG1-of (b / besiege-01)\n            :ARG1-of (h / hold-01\n                  :ARG0 (p2 / person\n                        :ARG0-of (r / rebel-01)))\n            :part-of (c / city\n                  :name (n / name\n                        :op1 \"Aleppo\")\n                  :location (c2 / country\n                        :name (n2 / name\n                              :op1 \"Syria\"))))\n      :ARG1-of (f / follow-01\n            :ARG2 (r2 / resume-01\n                  :ARG1 (e2 / evacuate-01\n                        :ARG1-of (a / agree-01\n                              :part-of (d2 / deal-01\n                                    :ARG2 (c3 / cease-01\n                                          :ARG1 (f2 / fire-01))\n                                    :time (w / week\n                                          :mod (l2 / last))))))))"
    ],
    "tree": [
      "(c3 / cease-01\n    :ARG1 (f2 / fire-01))",
      "(d2 / deal-01\n    :ARG2 (c3 / cease-01\n              :ARG1 (f2 / fire-01)))",
      "(l / leave-11\n   :ARG0 (p / person\n            :quant (m / multiple\n                      :op1 1000))\n   :ARG1 (d / district\n            :location (e / east)\n            :ARG1 (b / besiege-01)\n            :ARG1 (h / hold-01\n                     :ARG0 (p2 / person\n                               :ARG0 (r / rebel-01)))\n            :part (c / city\n                     :name (n / name\n                              :op1 \"Aleppo\")\n                     :location (c2 / country\n                                   :name (n2 / name\n                                             :op1 \"Syria\")))))",
      "(l / leave-11\n   :ARG0 (p / person\n            :quant (m / multiple\n                      :op1 1000)))"
    ],
    "smus": [
      "cease fire",
      "The deal was a cease fire.",
      "Thousands of people are leaving eastern districts of Syria's Aleppo city besieged by rebels.",
      "Thousands of people are leaving."
    ]
  },
  {
    "instance_id": "pyrxsum-34",
    "summary": "Thousands of people have marched in opposition to plans to downgrade Stafford Hospital's services.",
    "summary_trees": [
      "# ::snt Thousands of people have marched in opposition to plans to downgrade Stafford Hospital's services.\n(m / march-01\n      :ARG0 (p / person\n            :quant (m2 / multiple\n                  :op1 1000))\n      :purpose (o / oppose-01\n            :ARG0 p\n            :ARG1 (p2 / plan-01\n                  :ARG1 (d / downgrade-02\n                        :ARG1 (s / service\n                              :poss (h / hospital\n                                    :name (n / name\n                                          :op1 \"Stafford\"\n                                          :op2 \"Hospital\")))))))"
    ],
    "tree": [
      "(d / downgrade-02\n   :ARG1 (s / service\n            :poss (h / hospital\n                     :name (n / name\n                              :op1 \"Stafford\"\n                              :op2 \"Hospital\"))))"
    ],
    "smus": [
      "Downgrade Stafford Hospital's services."
    ]
  },
  {
    "instance_id": "pyrxsum-35",
    "summary": "Filled with goodwill, unfathomable optimism and a slightly heavy heart, you embark on a health kick.",
    "summary_trees": [
      "# ::snt Filled with goodwill, unfathomable optimism and a slightly heavy heart, you embark on a health kick.\n(e / embark-01\n      :ARG0 (y / you\n            :ARG1-of (f / fill-01\n                  :ARG2 (a / and\n                        :op1 (g / goodwill)\n                        :op2 (o / optimism\n                              :ARG1-of (c / conceive-01\n                                    :polarity -))\n                        :op3 (h / heart\n                              :mod (h2 / heavy\n                                    :degree (s / slight))))))\n      :ARG1 (k / kick-01\n            :ARG0 y\n            :ARG1 (h3 / health)))"
    ],
    "tree": [
      "(k / kick-01\n   :ARG0 (y / you)\n   :ARG1 (h3 / health))",
      "(k / kick-01\n   :ARG1 (h3 / health))",
      "(e / embark-01\n   :ARG0 (y / you\n            :ARG1 (f / fill-01\n                     :ARG2 (a / and\n                              :op1 (g / goodwill)\n                              :op2 (o / optimism\n                                      :ARG1 (c / conceive-01\n                                               :polarity -))\n                              :op3 (h / heart\n                                      :mod (h2 / heavy\n                                               :degree (s / slight))))))\n   :ARG1 (k / kick-01\n            :ARG0 y\n            :ARG1 (h3 / health)))",
      "(e / embark-01\n   :ARG0 (y / you\n            :ARG1 (f / fill-01\n                     :ARG2 (g / goodwill))))",
      "(e / embark-01\n   :ARG0 (y / you\n            :ARG1 (f / fill-01\n                     :ARG2 (o / optimism\n                              :ARG1 (c / conceive-01\n                                       :polarity -)))))",
      "(e / embark-01\n   :ARG0 (y / you\n            :ARG1 (f / fill-01\n                     :ARG2 (h / heart\n                              :mod (h2 / heavy\n                                       :degree (s / slight)))))\n   :ARG1 (k / kick-01\n            :ARG0 y\n            :ARG1 (h3 / health)))"
    ],
    "smus": [
      "You're kicking health.",
      "Kicking health.",
      "You embark on a health kick filled with goodwill, conceiving optimism and a slightly heavy heart.",
      "You embark on a journey filled with goodwill.",
      "You embark on a journey filled with optimism about conceiving.",
      "You embark on a health kick, filled with a slightly heavy heart."
    ]
  },
  {
    "instance_id": "pyrxsum-36",
    "summary": "Russia and Qatar may have had to pay bribes to secure their World Cups, Sepp Blatter's former special advisor has suggested.",
    "summary_trees": [
      "# ::snt Russia and Qatar may have had to pay bribes to secure their World Cups, Sepp Blatter's former special advisor has suggested.\n(s / suggest-01\n      :ARG0 (p / person\n            :ARG0-of (a / advise-01\n                  :ARG1 (p2 / person\n                        :name (n / name\n                              :op1 \"Sepp\"\n                              :op2 \"Blatter\"))\n                  :time (f / former)\n                  :ARG1-of (s2 / special-02)))\n      :ARG1 (p3 / possible-01\n            :ARG1 (o / obligate-01\n                  :ARG1 (a2 / and\n                        :op1 (c / country\n                              :name (n2 / name\n                                    :op1 \"Russia\"))\n                        :op2 (c2 / country\n                              :name (n3 / name\n                                    :op1 \"Qatar\")))\n                  :ARG2 (p4 / pay-01\n                        :ARG0 a2\n                        :ARG1 (b / bribe-01)\n                        :purpose (s3 / secure-02\n                              :ARG0 a2\n                              :ARG1 (g / game\n                                    :name (n4 / name\n                                          :op1 \"World\"\n                                          :op2 \"Cup\")\n                                    :poss a2))))))"
    ],
    "tree": [
      "(s3 / secure-02\n    :ARG0 (a2 / and)\n    :ARG1 (g / game\n             :name (n4 / name\n                       :op1 \"World\"\n                       :op2 \"Cup\")\n             :poss a2))",
      "(s3 / secure-02\n    :ARG1 (g / game\n             :name (n4 / name\n                       :op1 \"World\"\n                       :op2 \"Cup\")\n             :poss (a2 / and)))"
    ],
    "smus": [
      "and secure their World Cup.",
      "Secure their World Cup."
    ]
  },
  {
    "instance_id": "pyrxsum-37",
    "summary": "The High Court has begun hearing the legal challenge of a terminally ill UK man who wants the right to die.",
    "summary_trees": [
      "# ::snt The High Court has begun hearing the legal challenge of a terminally ill UK man who wants the right to die.\n(b / begin-01\n      :ARG0 (g / government-organization\n            :name (n / name\n                  :op1 \"High\"\n                  :op2 \"Court\"))\n      :ARG1 (h / hear-01\n            :ARG0 g\n            :ARG1 (c / challenge-01\n                  :ARG0 (m / man\n                        :ARG1-of (ii / ill-01\n                              :mod (t / terminal))\n                        :mod (c2 / country\n                              :name (n2 / name\n                                    :op1 \"UK\"))\n                        :ARG0-of (w / want-01\n                              :ARG1 (r / right-05\n                                    :ARG1 m\n                                    :ARG2 (d / die-01\n                                          :ARG1 m))))\n                  :ARG1-of (l / legal-02))))"
    ],
    "tree": [
      "(r / right-05\n   :ARG1 (m / man)\n   :ARG2 (d / die-01\n            :ARG1 m))",
      "(c / challenge-01\n   :ARG0 (m / man\n            :ARG1 (ii / ill-01\n                      :mod (t / terminal))\n            :mod (c2 / country\n                     :name (n2 / name\n                               :op1 \"UK\"))\n            :ARG0 (w / want-01\n                     :ARG1 (r / right-05\n                              :ARG1 m\n                              :ARG2 (d / die-01\n                                       :ARG1 m)))))",
      "(h / hear-01\n   :ARG0 (g / government-organization :name (n / name :op1 \"High\" :op2 \"Court\"))\n   :ARG1 (c / challenge-01\n            :ARG0 (m / man\n                     :ARG1 (ii / ill-01\n                               :mod (t / terminal))\n                     :mod (c2 / country\n                              :name (n2 / name\n                                        :op1 \"UK\"))\n                     :ARG0 (w / want-01\n                              :ARG1 (r / right-05\n                                       :ARG1 m\n                                       :ARG2 (d / die-01\n                                                :ARG1 m))))\n            :ARG1 (l / legal-02)))",
      "(b / begin-01\n   :ARG0 (g / government-organization\n            :name (n / name\n                     :op1 \"High\"\n                     :op2 \"Court\"))\n   :ARG1 (h / hear-01\n            :ARG0 g\n            :ARG1 (c / challenge-01\n                     :ARG0 (m / man\n                              :ARG1 (ii / ill-01\n                                        :mod (t / terminal))\n                              :mod (c2 / country\n                                       :name (n2 / name\n                                                 :op1 \"UK\"))\n                              :ARG0 (w / want-01\n                                       :ARG1 (r / right-05\n                                                :ARG1 m\n                                                :ARG2 (d / die-01\n                                                         :ARG1 m))))\n                     :ARG1 (l / legal-02))))",
      "(b / begin-01\n   :ARG1 (h / hear-01\n            :ARG0 (g / government-organization :name (n / name :op1 \"High\" :op2 \"Court\"))\n            :ARG1 (c / challenge-01\n                     :ARG0 (m / man\n                              :ARG1 (ii / ill-01\n                                        :mod (t / terminal))\n                              :mod (c2 / country\n                                       :name (n2 / name\n                                                 :op1 \"UK\"))\n                              :ARG0 (w / want-01\n                                       :ARG1 (r / right-05\n                                                :ARG1 m\n                                                :ARG2 (d / die-01\n                                                         :ARG1 m))))\n                     :ARG1 (l / legal-02))))"
    ],
    "smus": [
      "The man's right to die.",
      "The challenge for a terminally ill UK man who wants the right to die is this:",
      "The High Court is hearing a legal challenge from a terminally ill UK man who wants the right to die.",
      "The High Court has begun hearing a legal challenge from a terminally ill UK man who wants the right to die.",
      "The High Court has begun hearing a legal challenge from a terminally ill UK man who wants the right to die."
    ]
  },
  {
    "instance_id": "pyrxsum-38",
    "summary": "An online appeal set up to help the family of a five-year-old girl who died when her head became stuck in a lift in Dorset has raised more than \u00a312,000.",
    "summary_trees": [
      "# ::snt An online appeal set up to help the family of a five-year-old girl who died when her head became stuck in a lift in Dorset has raised more than \u00a312,000.\n(r / raise-02\n      :ARG0 (a / appeal-02\n            :mod (o / online)\n            :ARG1-of (s / set-up-03\n                  :purpose (h / help-01\n                        :ARG0 a\n                        :ARG1 (f / family\n                              :poss (g / girl\n                                    :age (t / temporal-quantity\n                                          :quant 5\n                                          :unit (y / year))\n                                    :ARG1-of (d / die-01\n                                          :ARG1-of (c / cause-01\n                                                :ARG0 (b / become-01\n                                                      :ARG1 (h2 / head)\n                                                      :ARG2 (s2 / stick-01\n                                                            :ARG1 h2\n                                                            :ARG2 (l / lift)\n                                                            :location (c2 / county\n                                                                  :name (n / name\n                                                                        :op1 \"Dorset\"))))))\n                                    :part h2)))))\n      :ARG1 (m / more-than\n            :op1 (m2 / monetary-quantity\n                  :quant 12000\n                  :unit (p / pound))))"
    ],
    "tree": [
      "(s2 / stick-01\n    :ARG1 (h2 / head)\n    :ARG2 (l / lift))",
      "(b / become-01\n   :ARG1 (h2 / head)\n   :ARG2 (s2 / stick-01\n             :ARG1 h2\n             :ARG2 (l / lift)\n             :location (c2 / county\n                           :name (n / name\n                                    :op1 \"Dorset\"))))",
      "(h / help-01\n   :ARG0 (a / appeal-02)\n   :ARG1 (f / family\n            :poss (g / girl\n                     :age (t / temporal-quantity\n                             :quant 5\n                             :unit (y / year)))))"
    ],
    "smus": [
      "The head stifled in a lift.",
      "The head became stuck in the lift in Dorset.",
      "The appeal would help the family of the 5 year old girl."
    ]
  },
  {
    "instance_id": "pyrxsum-39",
    "summary": "Game of Thrones star \"The Mountain\" has been beaten to Europe's Strongest Man title by a man from Swindon.",
    "summary_trees": [
      "# ::snt Game of Thrones star \"The Mountain\" has been beaten to Europe's Strongest Man title by a man from Swindon.\n(b / beat-03\n      :ARG0 (m / man\n            :source (c / city\n                  :name (n / name\n                        :op1 \"Swindon\")))\n      :ARG1 (p / person\n            :name (n2 / name\n                  :op1 \"The\"\n                  :op2 \"Mountain\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (b2 / broadcast-program\n                        :name (n3 / name\n                              :op1 \"Game\"\n                              :op2 \"of\"\n                              :op3 \"Thrones\"))))\n      :ARG2 (t / title-01\n            :ARG1 p\n            :ARG2 (s / strong-02\n                  :ARG2-of (h2 / have-degree-91\n                        :ARG1 m\n                        :ARG3 (m2 / most)\n                        :ARG5 (c2 / continent\n                              :name (n4 / name\n                                    :op1 \"Europe\"))))))"
    ],
    "tree": [
      "(h2 / have-degree-91\n    :ARG1 (m / man)\n    :ARG3 (m2 / most)\n    :ARG5 (c2 / continent\n              :name (n4 / name\n                        :op1 \"Europe\")))",
      "(s / strong-02\n   :ARG2 (h2 / have-degree-91\n             :ARG1 (m / man)\n             :ARG3 (m2 / most)\n             :ARG5 (c2 / continent\n                       :name (n4 / name\n                                 :op1 \"Europe\"))))",
      "(t / title-01\n   :ARG1 (p / person :name (n2 / name :op1 \"The\" :op2 \"Mountain\")))\n   :ARG2 (s / strong-02\n            :ARG2 (h2 / have-degree-91\n                      :ARG1 (m / man)\n                      :ARG3 (m2 / most)\n                      :ARG5 (c2 / continent\n                                :name (n4 / name\n                                          :op1 \"Europe\")))))",
      "(b / beat-03\n   :ARG0 (m / man\n            :source (c / city\n                       :name (n / name\n                                :op1 \"Swindon\")))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"The\"\n                      :op2 \"Mountain\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (b2 / broadcast-program\n                               :name (n3 / name\n                                         :op1 \"Game\"\n                                         :op2 \"of\"\n                                         :op3 \"Thrones\")))))",
      "(b / beat-03\n   :ARG0 (m / man\n            :source (c / city\n                       :name (n / name\n                                :op1 \"Swindon\")))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"The\"\n                      :op2 \"Mountain\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (b2 / broadcast-program\n                               :name (n3 / name\n                                         :op1 \"Game\"\n                                         :op2 \"of\"\n                                         :op3 \"Thrones\"))))\n   :ARG2 (t / title-01\n            :ARG1 p\n            :ARG2 (s / strong-02\n                     :ARG2 (h2 / have-degree-91\n                               :ARG1 m\n                               :ARG3 (m2 / most)\n                               :ARG5 (c2 / continent\n                                         :name (n4 / name\n                                                   :op1 \"Europe\"))))))"
    ],
    "smus": [
      "The Man is the most man in Europe.",
      "Strongest Man in Europe.",
      "The Mountain is the title of the strongest man in Europe.",
      "A Swindon man has beat The Mountain on the Game of Thrones.",
      "The Mountain of the Game of Thrones man from Swindon has beaten the title of strongest man in Europe."
    ]
  },
  {
    "instance_id": "pyrxsum-40",
    "summary": "Labour leadership contender Andy Burnham has told supporters he has an \"outside but realistic chance\" of winning the contest.",
    "summary_trees": [
      "# ::snt Labour leadership contender Andy Burnham has told supporters he has an \"outside but realistic chance\" of winning the contest.\n(t / tell-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Andy\"\n                  :op2 \"Burnham\")\n            :ARG0-of (c / contend-02\n                  :ARG1 (l / lead-02\n                        :ARG1 (p2 / political-party\n                              :name (n2 / name\n                                    :op1 \"Labour\")))))\n      :ARG1 (h / have-03\n            :ARG0 p\n            :ARG1 (c2 / chance-02\n                  :ARG0 p\n                  :ARG1 (w / win-01\n                        :ARG0 p\n                        :ARG2 (c3 / contest-02))\n                  :ARG2 (o / outside)\n                  :ARG1-of (c4 / contrast-01\n                        :ARG2 (r / realistic-03\n                              :ARG1 c2))))\n      :ARG2 (p3 / person\n            :ARG0-of (s / support-01)))"
    ],
    "tree": [
      "(t / tell-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Andy\"\n                     :op2 \"Burnham\")\n            :ARG0-of (c / contend-02\n                        :ARG1 (l / lead-02\n                                 :ARG1 (p2 / political-party\n                                           :name (n2 / name\n                                                     :op1 \"Labour\")))))\n   :ARG1 (h / have-03\n            :ARG0 p\n            :ARG1 (c2 / chance-02\n                      :ARG0 p\n                      :ARG1 (w / win-01\n                               :ARG0 p\n                               :ARG2 (c3 / contest-02))\n                      :ARG2 (o / outside)\n                      :ARG1-of (c4 / contrast-01\n                                   :ARG2 (r / realistic-03\n                                            :ARG1 c2))))\n   :ARG2 (p3 / person\n             :ARG0-of (s / support-01)))"
    ],
    "smus": [
      "Labour leader and contendor Andy Burnham has told supporters he has an outside chance of winning the contest but that it is unrealistic."
    ]
  },
  {
    "instance_id": "pyrxsum-41",
    "summary": "Belfast Giants have closed the gap on Elite League leaders Cardiff Devils to six points with this comfortable win over the Capitals at the SSE Arena.",
    "summary_trees": [
      "# ::snt Belfast Giants have closed the gap on Elite League leaders Cardiff Devils to six points with this comfortable win over the Capitals at the SSE Arena.\n(c / close-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Belfast\"\n                  :op2 \"Giants\"))\n      :ARG1 (g / gap)\n      :ARG4 (t2 / team\n            :name (n2 / name\n                  :op1 \"Cardiff\"\n                  :op2 \"Devils\")\n            :ARG0-of (l / lead-01\n                  :ARG1 (l2 / league\n                        :name (n3 / name\n                              :op1 \"Elite\"\n                              :op2 \"League\"))))\n      :extent (p / point\n            :quant 6)\n      :manner (w / win-01\n            :ARG0 t\n            :ARG4 (t3 / team\n                  :name (n4 / name\n                        :op1 \"Capitals\"))\n            :ARG0-of (c2 / comfortable-02)\n            :location (s / sports-facility\n                  :name (n5 / name\n                        :op1 \"SSE\"\n                        :op2 \"Arena\"))\n            :mod (t4 / this)))"
    ],
    "tree": [
      "(c / close-01\n   :ARG1 (g / gap))",
      "(c / close-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Belfast\"\n                     :op2 \"Giants\"))\n   :ARG1 (g / gap))"
    ],
    "smus": [
      "The gap has closed.",
      "The Belfast Giants have closed the gap."
    ]
  },
  {
    "instance_id": "pyrxsum-42",
    "summary": "Hayley Turner, Britain's most successful female jockey, believes her career has helped inspire other women to progress in the sport.",
    "summary_trees": [
      "# ::snt Hayley Turner, Britain's most successful female jockey, believes her career has helped inspire other women to progress in the sport.\n(b / believe-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Hayley\"\n                  :op2 \"Turner\")\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (s / succeed-01\n                        :ARG0 p\n                        :ARG1 (j / jockey\n                              :mod (f / female)))\n                  :ARG3 (m / most)\n                  :ARG5 (c / country\n                        :name (n2 / name\n                              :op1 \"Britain\"))))\n      :ARG1 (h2 / help-01\n            :ARG0 (c2 / career\n                  :poss p)\n            :ARG1 (ii / inspire-01\n                  :ARG0 c2\n                  :ARG1 (w / woman\n                        :mod (o / other))\n                  :ARG2 (p2 / progress-01\n                        :ARG1 w\n                        :ARG4 (s2 / sport)))))"
    ],
    "tree": [
      "(ii / inspire-01\n    :ARG0 (c2 / career)\n    :ARG1 (w / woman\n             :mod (o / other)))",
      "(h2 / help-01\n    :ARG0 (c2 / career\n              :poss (p / person :name (n / name :op1 \"Hayley\" :op2 \"Turner\"))))\n    :ARG1 (ii / inspire-01\n              :ARG0 c2\n              :ARG1 (w / woman\n                       :mod (o / other))\n              :ARG2 (p2 / progress-01\n                        :ARG1 w\n                        :ARG4 (s2 / sport))))",
      "(s / succeed-01\n   :ARG0 (p / person :name (n / name :op1 \"Hayley\" :op2 \"Turner\")))\n   :ARG1 (j / jockey\n            :mod (f / female)))",
      "(s / succeed-01\n   :ARG1 (j / jockey\n            :mod (f / female)))",
      "(b / believe-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Hayley\"\n                     :op2 \"Turner\")\n            :ARG1 (h / have-degree-91\n                     :ARG2 (s / succeed-01\n                              :ARG0 p\n                              :ARG1 (j / jockey\n                                       :mod (f / female)))\n                     :ARG3 (m / most)\n                     :ARG5 (c / country\n                              :name (n2 / name\n                                        :op1 \"Britain\"))))\n   :ARG1 (h2 / help-01\n             :ARG0 (c2 / career\n                       :poss p)\n             :ARG1 (ii / inspire-01\n                       :ARG0 c2\n                       :ARG1 (w / woman\n                                :mod (o / other))\n                       :ARG2 (p2 / progress-01\n                                 :ARG1 w\n                                 :ARG4 (s2 / sport)))))",
      "(b / believe-01\n   :ARG1 (h2 / help-01\n             :ARG0 (c2 / career\n                       :poss (p / person :name (n / name :op1 \"Hayley\" :op2 \"Turner\"))))\n             :ARG1 (ii / inspire-01\n                       :ARG0 c2\n                       :ARG1 (w / woman\n                                :mod (o / other))\n                       :ARG2 (p2 / progress-01\n                                 :ARG1 w\n                                 :ARG4 (s2 / sport)))))"
    ],
    "smus": [
      "Careers inspire other women.",
      "Hayley Turner's career has helped inspire other women to progress in sport.",
      "Hayley Turner was a successful female jockey.",
      "The female jockey was successful.",
      "Hayley Turner believes her career has helped other women inspire them to progress in sport and is the most successful female jockey in Britain.",
      "Hayley Turner believes her career has helped inspire other women to progress in sport."
    ]
  },
  {
    "instance_id": "pyrxsum-43",
    "summary": "An elderly woman has died in a house fire in Enniskillen.",
    "summary_trees": [
      "# ::snt An elderly woman has died in a house fire in Enniskillen.\n(d / die-01\n      :ARG1 (w / woman\n            :mod (e / elderly))\n      :ARG1-of (c / cause-01\n            :ARG0 (f / fire\n                  :location (h / house)\n                  :location (c2 / city\n                        :name (n / name\n                              :op1 \"Enniskillen\")))))"
    ],
    "tree": [
      "(c / cause-01\n   :ARG0 (f / fire\n            :location (h / house)\n            :location (c2 / city\n                          :name (n / name\n                                   :op1 \"Enniskillen\"))))",
      "(d / die-01\n   :ARG1 (w / woman\n            :mod (e / elderly)))"
    ],
    "smus": [
      "Caused by house fire in Enniskillen.",
      "An elderly woman has died."
    ]
  },
  {
    "instance_id": "pyrxsum-44",
    "summary": "Championship side Fulham have signed striker Gohi Cyriac on loan until the end of the season from Belgian Pro League side KV Oostende.",
    "summary_trees": [
      "# ::snt Championship side Fulham have signed striker Gohi Cyriac on loan until the end of the season from Belgian Pro League side KV Oostende.\n(s / sign-02\n      :ARG0 (s2 / side\n            :name (n / name\n                  :op1 \"Fulham\")\n            :mod (c / championship))\n      :ARG1 (p / person\n            :name (n2 / name\n                  :op1 \"Gohi\"\n                  :op2 \"Cyriac\")\n            :ARG0-of (s3 / strike-02))\n      :ARG3 (s4 / side\n            :name (n3 / name\n                  :op1 \"KV\"\n                  :op2 \"Oostende\")\n            :mod (l / league\n                  :name (n4 / name\n                        :op1 \"Pro\"\n                        :op2 \"League\")\n                  :mod (c2 / country\n                        :name (n5 / name\n                              :op1 \"Belgium\"))))\n      :manner (l2 / loan)\n      :time (u / until\n            :op1 (e / end-01\n                  :ARG1 (s5 / season))))"
    ],
    "tree": [
      "(e / end-01\n   :ARG1 (s5 / season))",
      "(s / sign-02\n   :ARG0 (s2 / side\n             :name (n / name\n                      :op1 \"Fulham\")\n             :mod (c / championship))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Gohi\"\n                      :op2 \"Cyriac\")\n            :ARG0 (s3 / strike-02)))",
      "(s / sign-02\n   :ARG0 (s2 / side\n             :name (n / name\n                      :op1 \"Fulham\")\n             :mod (c / championship))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Gohi\"\n                      :op2 \"Cyriac\")\n            :ARG0 (s3 / strike-02))\n   :time (u / until\n            :op1 (e / end-01\n                    :ARG1 (s5 / season))))",
      "(s / sign-02\n   :time (u / until\n            :op1 (e / end-01)))"
    ],
    "smus": [
      "End of season",
      "Fulham have signed striker Gohi Cyriac from the championship side.",
      "Fulham have signed striker Gohi Cyriac until the end of the season.",
      "Signed until the end."
    ]
  },
  {
    "instance_id": "pyrxsum-45",
    "summary": "Wales started their 2018 World Cup qualifying campaign in confident fashion as they convincingly beat Moldova.",
    "summary_trees": [
      "# ::snt Wales started their 2018 World Cup qualifying campaign in confident fashion as they convincingly beat Moldova.\n(s / start-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Wales\"))\n      :ARG1 (c / campaign-01\n            :ARG0 t\n            :ARG1 (q / qualify-02\n                  :ARG1 t\n                  :ARG2 (g / game\n                        :name (n2 / name\n                              :op1 \"World\"\n                              :op2 \"Cup\")\n                        :time (d / date-entity\n                              :year 2018))))\n      :manner (c2 / confident-01\n            :ARG1 t)\n      :time (b / beat-03\n            :ARG0 t\n            :ARG1 (t2 / team\n                  :name (n3 / name\n                        :op1 \"Moldova\"))\n            :ARG0-of (c3 / convince-01)))"
    ],
    "tree": [
      "(b / beat-03\n   :ARG0 (t / team :name (n / name :op1 \"Wales\"))\n   :ARG1 (t2 / team\n             :name (n3 / name\n                       :op1 \"Moldova\")))",
      "(q / qualify-02\n   :ARG1 (t / team :name (n / name :op1 \"Wales\"))\n   :ARG2 (g / game\n            :name (n2 / name\n                      :op1 \"World\"\n                      :op2 \"Cup\")\n            :time (d / date-entity\n                     :year 2018)))",
      "(q / qualify-02\n   :ARG2 (g / game\n            :name (n2 / name\n                      :op1 \"World\"\n                      :op2 \"Cup\")\n            :time (d / date-entity\n                     :year 2018)))",
      "(c / campaign-01\n   :ARG0 (t / team :name (n / name :op1 \"Wales\"))\n   :ARG1 (q / qualify-02\n            :ARG1 t\n            :ARG2 (g / game\n                     :name (n2 / name\n                               :op1 \"World\"\n                               :op2 \"Cup\")\n                     :time (d / date-entity\n                              :year 2018))))",
      "(c / campaign-01\n   :ARG1 (q / qualify-02\n            :ARG1 (t / team :name (n / name :op1 \"Wales\"))\n            :ARG2 (g / game\n                     :name (n2 / name\n                               :op1 \"World\"\n                               :op2 \"Cup\")\n                     :time (d / date-entity\n                              :year 2018))))",
      "(s / start-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Wales\"))\n   :ARG1 (c / campaign-01\n            :ARG0 t\n            :ARG1 (q / qualify-02\n                     :ARG1 t\n                     :ARG2 (g / game\n                              :name (n2 / name\n                                        :op1 \"World\"\n                                        :op2 \"Cup\")\n                              :time (d / date-entity\n                                       :year 2018)))))",
      "(s / start-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Wales\"))\n   :ARG1 (c / campaign-01\n            :ARG0 t\n            :ARG1 (q / qualify-02\n                     :ARG1 t\n                     :ARG2 (g / game\n                              :name (n2 / name\n                                        :op1 \"World\"\n                                        :op2 \"Cup\")\n                              :time (d / date-entity\n                                       :year 2018))))\n   :time (b / beat-03\n            :ARG0 t\n            :ARG1 (t2 / team\n                      :name (n3 / name\n                                :op1 \"Moldova\"))\n            :ARG0 (c3 / convince-01)))",
      "(s / start-01\n   :ARG1 (c / campaign-01\n            :ARG0 (t / team :name (n / name :op1 \"Wales\"))\n            :ARG1 (q / qualify-02\n                     :ARG1 t\n                     :ARG2 (g / game\n                              :name (n2 / name\n                                        :op1 \"World\"\n                                        :op2 \"Cup\")\n                              :time (d / date-entity\n                                       :year 2018))))\n   :time (b / beat-03\n            :ARG0 t\n            :ARG1 (t2 / team\n                      :name (n3 / name\n                                :op1 \"Moldova\"))\n            :ARG0 (c3 / convince-01)))",
      "(s / start-01\n   :ARG1 (c / campaign-01\n            :ARG0 (t / team :name (n / name :op1 \"Wales\"))\n            :ARG1 (q / qualify-02\n                     :ARG1 t\n                     :ARG2 (g / game\n                              :name (n2 / name\n                                        :op1 \"World\"\n                                        :op2 \"Cup\")\n                              :time (d / date-entity\n                                       :year 2018)))))",
      "(s / start-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Wales\")))",
      "(s / start-01\n   :time (b / beat-03))"
    ],
    "smus": [
      "Wales beat Moldova 1-0.",
      "Wales will qualify for the 2018 World Cup.",
      "Qualifying for the 2018 World Cup",
      "Wales are campaigning for qualification for the 2018 World Cup.",
      "Wales' qualification for the 2018 World Cup is a campaign.",
      "Wales started a campaign to qualify for the 2018 World Cup.",
      "Wales started a campaign to qualify for the 2018 World Cup when they defeated Moldova convincingly.",
      "Wales started a campaign to qualify for the 2018 World Cup when they defeated Moldova convincingly.",
      "Wales started a campaign to qualify for the 2018 World Cup.",
      "Wales started.",
      "started when the beat."
    ]
  },
  {
    "instance_id": "pyrxsum-46",
    "summary": "The BBC's director general has accused the Iranian authorities of intimidating those working for its Persian service.",
    "summary_trees": [
      "# ::snt The BBC's director general has accused the Iranian authorities of intimidating those working for its Persian service.\n(a / accuse-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (p2 / publication\n                        :name (n / name\n                              :op1 \"BBC\"))\n                  :ARG2 (d / director\n                        :mod (g / general))))\n      :ARG1 (a2 / authority\n            :mod (c / country\n                  :name (n2 / name\n                        :op1 \"Iran\")))\n      :ARG2 (ii / intimidate-01\n            :ARG0 a2\n            :ARG1 (p3 / person\n                  :ARG0-of (w / work-01\n                        :ARG2 (s / service\n                              :mod (l / language\n                                    :name (n3 / name\n                                          :op1 \"Persian\"))\n                              :poss p2)))))"
    ],
    "tree": [
      "(w / work-01\n   :ARG2 (s / service\n            :mod (l / language\n                    :name (n3 / name\n                              :op1 \"Persian\"))\n            :poss (p2 / publication :name (n / name :op1 \"BBC\"))))",
      "(ii / intimidate-01\n    :ARG1 (p3 / person\n              :ARG0 (w / work-01\n                       :ARG2 (s / service\n                                :mod (l / language\n                                        :name (n3 / name\n                                                  :op1 \"Persian\"))\n                                :poss (p2 / publication :name (n / name :op1 \"BBC\"))))))",
      "(a / accuse-01\n   :ARG1 (a2 / authority\n             :mod (c / country\n                     :name (n2 / name\n                               :op1 \"Iran\")))\n   :ARG2 (ii / intimidate-01\n             :ARG0 a2\n             :ARG1 (p3 / person\n                       :ARG0 (w / work-01\n                                :ARG2 (s / service\n                                         :mod (l / language\n                                                 :name (n3 / name\n                                                           :op1 \"Persian\"))\n                                         :poss (p2 / publication :name (n / name :op1 \"BBC\")))))))",
      "(a / accuse-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (p2 / publication\n                               :name (n / name\n                                        :op1 \"BBC\"))\n                     :ARG2 (d / director\n                              :mod (g / general))))\n   :ARG1 (a2 / authority\n             :mod (c / country\n                     :name (n2 / name\n                               :op1 \"Iran\")))\n   :ARG2 (ii / intimidate-01\n             :ARG0 a2\n             :ARG1 (p3 / person\n                       :ARG0 (w / work-01\n                                :ARG2 (s / service\n                                         :mod (l / language\n                                                 :name (n3 / name\n                                                           :op1 \"Persian\"))\n                                         :poss p2)))))"
    ],
    "smus": [
      "Working on the BBC's Persian service.",
      "People working in the BBC's Persian service were intimidated.",
      "Iranian authorities have been accused of intimidating people working for the BBC's Persian service.",
      "The BBC director general has accused Iranian authorities of intimidating people working in his Persian service."
    ]
  },
  {
    "instance_id": "pyrxsum-47",
    "summary": "A mother of six with an IQ of 70 should be sterilised for her own safety, the Court of Protection has ruled.",
    "summary_trees": [
      "# ::snt A mother of six with an IQ of 70 should be sterilised for her own safety, the Court of Protection has ruled.\n(r / rule-01\n      :ARG0 (g / government-organization\n            :name (n / name\n                  :op1 \"Court\"\n                  :op2 \"of\"\n                  :op3 \"Protection\"))\n      :ARG3 (r2 / recommend-01\n            :ARG1 (s / sterilize-01\n                  :ARG1 (p / person\n                        :ARG0-of (h / have-rel-role-91\n                              :ARG1 (c / child\n                                    :quant 6)\n                              :ARG2 (m / mother))\n                        :ARG0-of (h2 / have-03\n                              :ARG1 (q / quotient\n                                    :quant 70\n                                    :degree-of (ii / intelligent-01))))\n                  :purpose (s2 / safe-01\n                        :ARG1 p))))"
    ],
    "tree": [
      "(s / sterilize-01\n   :ARG1 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG1 (c / child\n                              :quant 6)\n                     :ARG2 (m / mother))\n            :ARG0 (h2 / have-03\n                      :ARG1 (q / quotient\n                               :quant 70\n                               :degree (ii / intelligent-01))))\n   :purpose (s2 / safe-01\n                :ARG1 p))",
      "(s / sterilize-01\n   :purpose (s2 / safe-01))"
    ],
    "smus": [
      "The mother of six with 70IQ is sterilized for safety.",
      "Sterilized for safety"
    ]
  },
  {
    "instance_id": "pyrxsum-48",
    "summary": "China's biggest privately-held conglomerate Fosun has joined a bidding war for the Portuguese hospital operator Espirito Santo Saude (ESS).",
    "summary_trees": [
      "# ::snt China's biggest privately-held conglomerate Fosun has joined a bidding war for the Portuguese hospital operator Espirito Santo Saude (ESS).\n(j / join-01\n      :ARG0 (c / conglomerate\n            :name (n / name\n                  :op1 \"Fosun\")\n            :ARG1-of (o / own-01\n                  :ARG1-of (p / private-03))\n            :ARG1-of (h / have-degree-91\n                  :ARG2 (b / big)\n                  :ARG3 (m / most)\n                  :ARG5 (c2 / country\n                        :name (n2 / name\n                              :op1 \"China\"))))\n      :ARG1 (w / war-01\n            :ARG2 (b2 / bid-01\n                  :ARG3 (c3 / company\n                        :name (n3 / name\n                              :op1 \"Espirito\"\n                              :op2 \"Santo\"\n                              :op3 \"Saude\")\n                        :ARG0-of (o2 / operate-01\n                              :ARG1 (h2 / hospital))\n                        :mod (c4 / country\n                              :name (n4 / name\n                                    :op1 \"Portugal\"))))))"
    ],
    "tree": [
      "(o2 / operate-01\n    :ARG1 (h2 / hospital))"
    ],
    "smus": [
      "Hospital operation"
    ]
  },
  {
    "instance_id": "pyrxsum-49",
    "summary": "Bosses have been urged not to indulge in invasive surveillance by reading their employees' private messages.",
    "summary_trees": [
      "# ::snt Bosses have been urged not to indulge in invasive surveillance by reading their employees' private messages.\n(u / urge-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (b / boss)))\n      :ARG2 (ii / indulge-01\n            :polarity -\n            :ARG0 p\n            :ARG1 (s / surveil-01\n                  :ARG0 p\n                  :ARG0-of (ii2 / invade-01)\n                  :manner (r / read-01\n                        :ARG0 p\n                        :ARG1 (m / message-01\n                              :ARG0 (p2 / person\n                                    :ARG1-of (e / employ-01\n                                          :ARG0 p))\n                              :ARG1-of (p3 / private-02))))))"
    ],
    "tree": [
      "(m / message-01\n   :ARG0 (p2 / person\n             :ARG1 (e / employ-01\n                      :ARG0 (p / person))))",
      "(r / read-01\n   :ARG0 (p / person)\n   :ARG1 (m / message-01\n            :ARG0 (p2 / person\n                      :ARG1 (e / employ-01\n                               :ARG0 p))\n            :ARG1 (p3 / private-02)))",
      "(r / read-01\n   :ARG1 (m / message-01\n            :ARG0 (p2 / person\n                      :ARG1 (e / employ-01\n                               :ARG0 (p / person)))\n            :ARG1 (p3 / private-02)))",
      "(u / urge-01\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (b / boss)))\n   :ARG2 (ii / indulge-01\n             :polarity -\n             :ARG0 p\n             :ARG1 (s / surveil-01\n                      :ARG0 p\n                      :ARG0 (ii2 / invade-01)\n                      :manner (r / read-01\n                                 :ARG0 p\n                                 :ARG1 (m / message-01\n                                          :ARG0 (p2 / person\n                                                    :ARG1 (e / employ-01\n                                                             :ARG0 p))\n                                          :ARG1 (p3 / private-02))))))"
    ],
    "smus": [
      "The message to the employees is:",
      "People reading the private message of their employers.",
      "The employer's private message is read.",
      "Bosses are urged not to indulge in intrusion surveillance by reading private employer messages."
    ]
  },
  {
    "instance_id": "pyrxsum-50",
    "summary": "Supermarket chain Morrisons has increased the cost of a jar of Marmite by 12.5%, say retail industry experts.",
    "summary_trees": [
      "# ::snt Supermarket chain Morrisons has increased the cost of a jar of Marmite by 12.5%, say retail industry experts.\n(s / say-01\n      :ARG0 (p / person\n            :ARG1-of (e / expert-01\n                  :ARG2 (ii / industry\n                        :mod (r / retail-01))))\n      :ARG1 (ii2 / increase-01\n            :ARG0 (c / chain\n                  :name (n / name\n                        :op1 \"Morrisons\")\n                  :mod (s2 / supermarket))\n            :ARG1 (c2 / cost-01\n                  :ARG1 (j / jar\n                        :consist-of (p2 / product\n                              :name (n2 / name\n                                    :op1 \"Mariane\"))))\n            :ARG2 (p3 / percentage-entity\n                  :value 12.5)))"
    ],
    "tree": [
      "(c2 / cost-01\n    :ARG1 (j / jar\n             :consist-of (p2 / product\n                             :name (n2 / name\n                                       :op1 \"Mariane\"))))",
      "(ii2 / increase-01\n     :ARG1 (c2 / cost-01\n               :ARG1 (j / jar\n                        :consist-of (p2 / product\n                                        :name (n2 / name\n                                                  :op1 \"Mariane\")))))",
      "(ii2 / increase-01\n     :ARG0 (c / chain\n              :name (n / name\n                       :op1 \"Morrisons\")\n              :mod (s2 / supermarket))\n     :ARG1 (c2 / cost-01\n               :ARG1 (j / jar\n                        :consist-of (p2 / product\n                                        :name (n2 / name\n                                                  :op1 \"Mariane\")))))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG1 (e / expert-01\n                     :ARG2 (ii / industry\n                               :mod (r / retail-01))))\n   :ARG1 (ii2 / increase-01\n              :ARG0 (c / chain\n                       :name (n / name\n                                :op1 \"Morrisons\")\n                       :mod (s2 / supermarket))\n              :ARG1 (c2 / cost-01\n                        :ARG1 (j / jar\n                                 :consist-of (p2 / product\n                                                 :name (n2 / name\n                                                           :op1 \"Mariane\"))))\n              :ARG2 (p3 / percentage-entity\n                        :value 12.5)))"
    ],
    "smus": [
      "Cost per jar of Mariane",
      "The cost of a jar of Mariane has increased.",
      "The supermarket chain Morrisons has increased the cost of a jar of Mariane.",
      "Retail industry experts say supermarket chain Morrisons has increased the cost per jar of Mariane by 12.5%."
    ]
  },
  {
    "instance_id": "pyrxsum-51",
    "summary": "More should be done to help deaf people into work in Wales, a charity has said.",
    "summary_trees": [
      "# ::snt More should be done to help deaf people into work in Wales, a charity has said.\n(s / say-01\n      :ARG0 (c / charity)\n      :ARG1 (r / recommend-01\n            :ARG1 (d / do-02\n                  :ARG1 (m / more)\n                  :ARG2 (h / help-01\n                        :ARG1 (w / work-01\n                              :ARG0 (p / person\n                                    :ARG0-of (d2 / deaf-02))\n                              :location (c2 / country\n                                    :name (n / name\n                                          :op1 \"Wales\")))\n                        :ARG2 p))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (c / charity)\n   :ARG1 (r / recommend-01\n            :ARG1 (d / do-02\n                     :ARG1 (m / more)\n                     :ARG2 (h / help-01\n                              :ARG1 (w / work-01\n                                       :ARG0 (p / person\n                                                :ARG0-of (d2 / deaf-02))\n                                       :location (c2 / country\n                                                     :name (n / name\n                                                              :op1 \"Wales\")))\n                              :ARG2 p))))"
    ],
    "smus": [
      "The charity has said more should be done to help deaf people in Wales work."
    ]
  },
  {
    "instance_id": "pyrxsum-52",
    "summary": "Five teenagers have been sentenced after admitting their part in a \"riot\" which saw part of Newport city centre \"under siege\".",
    "summary_trees": [
      "# ::snt Five teenagers have been sentenced after admitting their part in a \"riot\" which saw part of Newport city centre \"under siege\".\n(s / sentence-01\n      :ARG1 (t / teenager\n            :quant 5)\n      :time (a / after\n            :op1 (a2 / admit-01\n                  :ARG0 t\n                  :ARG1 (p / part\n                        :part-of (r / riot-01\n                              :ARG0-of (s2 / see-01\n                                    :ARG1 (s3 / siege-01\n                                          :ARG1 (c / center\n                                                :part-of (c2 / city\n                                                      :name (n / name\n                                                            :op1 \"Newport\"))))))\n                        :poss t))))"
    ],
    "tree": [
      "(s3 / siege-01\n    :ARG1 (c / center\n             :part (c2 / city\n                       :name (n / name\n                                :op1 \"Newport\"))))",
      "(s2 / see-01\n    :ARG1 (s3 / siege-01\n              :ARG1 (c / center\n                       :part (c2 / city\n                                 :name (n / name\n                                          :op1 \"Newport\")))))",
      "(a2 / admit-01\n    :ARG0 (t / teenager)\n    :ARG1 (p / part))",
      "(s / sentence-01\n   :ARG1 (t / teenager\n            :quant 5))"
    ],
    "smus": [
      "The city center of Newport was under siege.",
      "The siege of the center of Newport city saw --",
      "The teens are admitting the part.",
      "Five teenagers were sentenced."
    ]
  },
  {
    "instance_id": "pyrxsum-53",
    "summary": "Fetch, sit and roll over - all the kinds of normal things that you would say to your dog.",
    "summary_trees": [
      "# ::snt Fetch, sit and roll over - all the kinds of normal things that you would say to your dog.\n(a / and\n      :op1 (f / fetch-01\n            :mode imperative\n            :ARG0 (y / you)\n            :ARG2 (d / dog\n                  :poss y))\n      :op2 (s / sit-01\n            :mode imperative\n            :ARG1 y\n            :ARG2 d)\n      :op3 (r / roll-01\n            :mode imperative\n            :ARG0 y\n            :ARG2 (o / over))\n      :domain (t / thing\n            :ARG1-of (n / normal-02)\n            :mod (k / kind\n                  :mod (a2 / all))\n            :ARG1-of (s2 / say-01\n                  :ARG0 y\n                  :ARG2 d)))"
    ],
    "tree": [
      "(s2 / say-01\n    :ARG0 (y / you)\n    :ARG2 (d / dog))",
      "(r / roll-01\n   :mode imperative\n   :ARG0 (y / you)\n   :ARG2 (o / over))",
      "(s / sit-01\n   :ARG1 (y / you)\n   :ARG2 (d / dog))",
      "(f / fetch-01\n   :mode imperative\n   :ARG0 (y / you)\n   :ARG2 (d / dog\n            :poss y))"
    ],
    "smus": [
      "You said dog.",
      "Roll over.",
      "Sit with the dog.",
      "Fetch your dog."
    ]
  },
  {
    "instance_id": "pyrxsum-54",
    "summary": "A grand jury has decided not to indict anyone in the case of Sandra Bland, who died in a Texas jail earlier this year.",
    "summary_trees": [
      "# ::snt A grand jury has decided not to indict anyone in the case of Sandra Bland, who died in a Texas jail earlier this year.\n(d / decide-01\n      :ARG0 (j / jury\n            :mod (g / grand))\n      :ARG1 (ii / indict-01\n            :polarity -\n            :ARG0 j\n            :ARG1 (a / anyone)\n            :topic (c / case-04\n                  :ARG1 (p / person\n                        :name (n / name\n                              :op1 \"Sandra\"\n                              :op2 \"Bland\")\n                        :ARG1-of (d2 / die-01\n                              :location (j2 / jail\n                                    :location (s / state\n                                          :name (n2 / name\n                                                :op1 \"Texas\")))\n                              :time (b / before)\n                              :time (y / year\n                                    :mod (t / this)))))))"
    ],
    "tree": [
      "(d2 / die-01\n    :location (j2 / jail\n                  :location (s / state\n                               :name (n2 / name\n                                         :op1 \"Texas\")))\n    :time (b / before)\n    :time (y / year\n             :mod (t / this)))",
      "(c / case-04\n   :ARG1 (p / person\n            :name (n / name\n                     :op1 \"Sandra\"\n                     :op2 \"Bland\")\n            :ARG1 (d2 / die-01\n                      :location (j2 / jail\n                                    :location (s / state\n                                                 :name (n2 / name\n                                                           :op1 \"Texas\")))\n                      :time (b / before)\n                      :time (y / year\n                               :mod (t / this)))))",
      "(d / decide-01\n   :ARG0 (j / jury\n            :mod (g / grand))\n   :ARG1 (ii / indict-01\n             :polarity -\n             :ARG0 j\n             :ARG1 (a / anyone)\n             :topic (c / case-04\n                       :ARG1 (p / person\n                                :name (n / name\n                                         :op1 \"Sandra\"\n                                         :op2 \"Bland\")\n                                :ARG1 (d2 / die-01\n                                          :location (j2 / jail\n                                                        :location (s / state\n                                                                     :name (n2 / name\n                                                                               :op1 \"Texas\")))\n                                          :time (b / before)\n                                          :time (y / year\n                                                   :mod (t / this)))))))",
      "(d / decide-01\n   :ARG1 (ii / indict-01\n             :polarity -\n             :ARG0 (j / jury)\n             :ARG1 (a / anyone)\n             :topic (c / case-04\n                       :ARG1 (p / person\n                                :name (n / name\n                                         :op1 \"Sandra\"\n                                         :op2 \"Bland\")\n                                :ARG1 (d2 / die-01\n                                          :location (j2 / jail\n                                                        :location (s / state\n                                                                     :name (n2 / name\n                                                                               :op1 \"Texas\")))\n                                          :time (b / before)\n                                          :time (y / year\n                                                   :mod (t / this)))))))"
    ],
    "smus": [
      "This year, a previous death occurred in jail in Texas.",
      "Sandra Land is the case, she died earlier this year in jail in Texas.",
      "The grand jury has decided not to indict anyone in the case of Sandra Land, who died earlier this year in Texas jail.",
      "The jury decision was not made in the case of Sandra Land, who died earlier this year in Texas jail."
    ]
  },
  {
    "instance_id": "pyrxsum-55",
    "summary": "A man was limp \"like a teddy bear\" after he was restrained by bouncers on the ground outside an Aberdeen bar, a murder trial has heard.",
    "summary_trees": [
      "# ::snt A man was limp \"like a teddy bear\" after he was restrained by bouncers on the ground outside an Aberdeen bar, a murder trial has heard.\n(h / hear-01\n      :ARG0 (t / try-02\n            :ARG1 (m / murder-01))\n      :ARG1 (l / limp-01\n            :ARG1 (m2 / man)\n            :ARG1-of (r / resemble-01\n                  :ARG2 (b / bear\n                        :mod (t2 / teddy)))\n            :time (a / after\n                  :op1 (r2 / restrain-01\n                        :ARG0 (p / person\n                              :ARG0-of (h2 / have-org-role-91\n                                    :ARG2 (b2 / bouncer)))\n                        :ARG1 m2\n                        :location (g / ground\n                              :location (o / outside\n                                    :op1 (b3 / bar\n                                          :location (c / city\n                                                :name (n / name\n                                                      :op1 \"Aberdeen\")))))))))"
    ],
    "tree": [
      "(h2 / have-org-role-91\n    :ARG2 (b2 / bouncer))",
      "(r2 / restrain-01\n    :ARG0 (p / person\n             :ARG0 (h2 / have-org-role-91\n                       :ARG2 (b2 / bouncer)))\n    :ARG1 (m2 / man)\n    :location (g / ground\n                 :location (o / outside\n                              :op1 (b3 / bar\n                                       :location (c / city\n                                                    :name (n / name\n                                                             :op1 \"Aberdeen\"))))))",
      "(r2 / restrain-01\n    :location (g / ground\n                 :location (o / outside\n                              :op1 (b3 / bar\n                                       :location (c / city\n                                                    :name (n / name\n                                                             :op1 \"Aberdeen\"))))))"
    ],
    "smus": [
      "Bouncers",
      "The bouncers have restrained the man on the ground outside an Aberdeen bar.",
      "Restrained on the ground outside an Aberdeen bar."
    ]
  },
  {
    "instance_id": "pyrxsum-56",
    "summary": "A bagpipe-playing busker has been convicted of duping people in Liverpool into thinking he was collecting for a Hillsborough charity.",
    "summary_trees": [
      "# ::snt A bagpipe-playing busker has been convicted of duping people in Liverpool into thinking he was collecting for a Hillsborough charity.\n(c / convict-01\n      :ARG1 (b / busker\n            :ARG0-of (p / play-11\n                  :ARG2 (b2 / bagpipe)))\n      :ARG2 (d / dupe-01\n            :ARG0 b\n            :ARG1 (p2 / person\n                  :location (c2 / city\n                        :name (n / name\n                              :op1 \"Liverpool\")))\n            :ARG2 (t / think-01\n                  :ARG0 p2\n                  :ARG1 (c3 / collect-01\n                        :ARG0 p2\n                        :ARG3 (c4 / charity\n                              :mod (e / event\n                                    :name (n2 / name\n                                          :op1 \"Hillsborough\")))))))"
    ],
    "tree": [
      "(t / think-01\n   :ARG0 (p2 / person)\n   :ARG1 (c3 / collect-01\n             :ARG0 p2\n             :ARG3 (c4 / charity\n                       :mod (e / event\n                               :name (n2 / name\n                                         :op1 \"Hillsborough\")))))",
      "(d / dupe-01\n   :ARG0 (b / busker)\n   :ARG1 (p2 / person\n             :location (c2 / city\n                           :name (n / name\n                                    :op1 \"Liverpool\")))\n   :ARG2 (t / think-01\n            :ARG0 p2\n            :ARG1 (c3 / collect-01\n                      :ARG0 p2\n                      :ARG3 (c4 / charity\n                                :mod (e / event\n                                        :name (n2 / name\n                                                  :op1 \"Hillsborough\"))))))"
    ],
    "smus": [
      "People are thinking of collecting for a Hillsborough charity.",
      "A busker dupes a Liverpool person into thinking they are collecting for a Hillsborough charity."
    ]
  },
  {
    "instance_id": "pyrxsum-57",
    "summary": "New Morocco coach Herve Renard begins his quest for a record-equalling third Africa Cup of Nations as qualifying for the 2017 tournament resumes this week.",
    "summary_trees": [
      "# ::snt New Morocco coach Herve Renard begins his quest for a record-equalling third Africa Cup of Nations as qualifying for the 2017 tournament resumes this week.\n(b / begin-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Herve\"\n                  :op2 \"Renard\")\n            :ARG0-of (c / coach-01\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"Morocco\")))\n            :ARG1-of (n3 / new-02))\n      :ARG1 (q / quest-01\n            :ARG0 p\n            :ARG1 (q2 / qualify-02\n                  :ARG1 p\n                  :ARG2 (t2 / tournament\n                        :name (n4 / name\n                              :op1 \"Africa\"\n                              :op2 \"Cup\"\n                              :op3 \"of\"\n                              :op4 \"Nations\")\n                        :ord (o / ordinal-entity\n                              :value 3)\n                        :ARG0-of (e / equal-01\n                              :ARG1 (r / record)))))\n      :time (r2 / resume-01\n            :ARG1 q2\n            :time (w / week\n                  :mod (t3 / this))))"
    ],
    "tree": [
      "(r2 / resume-01\n    :ARG1 (q2 / qualify-02)\n    :time (w / week\n             :mod (t3 / this)))",
      "(e / equal-01\n   :ARG1 (r / record))",
      "(q2 / qualify-02\n    :ARG1 (p / person :name (n / name :op1 \"Herve\" :op2 \"Renard\")))\n    :ARG2 (t2 / tournament\n              :name (n4 / name\n                        :op1 \"Africa\"\n                        :op2 \"Cup\"\n                        :op3 \"of\"\n                        :op4 \"Nations\")\n              :ord (o / ordinal-entity\n                      :value 3)\n              :ARG0 (e / equal-01\n                       :ARG1 (r / record))))",
      "(q2 / qualify-02\n    :ARG2 (t2 / tournament\n              :name (n4 / name\n                        :op1 \"Africa\"\n                        :op2 \"Cup\"\n                        :op3 \"of\"\n                        :op4 \"Nations\")\n              :ord (o / ordinal-entity\n                      :value 3)\n              :ARG0 (e / equal-01\n                       :ARG1 (r / record))))",
      "(q / quest-01\n   :ARG0 (p / person :name (n / name :op1 \"Herve\" :op2 \"Renard\")))\n   :ARG1 (q2 / qualify-02\n             :ARG1 p\n             :ARG2 (t2 / tournament\n                       :name (n4 / name\n                                 :op1 \"Africa\"\n                                 :op2 \"Cup\"\n                                 :op3 \"of\"\n                                 :op4 \"Nations\")\n                       :ord (o / ordinal-entity\n                               :value 3)\n                       :ARG0 (e / equal-01\n                                :ARG1 (r / record)))))",
      "(r2 / resume-01\n    :time (w / week\n             :mod (t3 / this)))"
    ],
    "smus": [
      "Qualifying resumes this week.",
      "Equaling the record.",
      "Herve Renard is qualifying for the Africa Cup of Nations, the third tournament equaling the record.",
      "Qualifying for the third African Cup of Nations with a record equaling",
      "Herve Renard is on a quest for qualifying for the third African Cup of Nations with equal record.",
      "This week resumes."
    ]
  },
  {
    "instance_id": "pyrxsum-58",
    "summary": "Soul singer Ray BLK has topped the BBC's Sound Of 2017 list, which aims to predict the most exciting new music for the year ahead.",
    "summary_trees": [
      "# ::snt Soul singer Ray BLK has topped the BBC's Sound Of 2017 list, which aims to predict the most exciting new music for the year ahead.\n(t / top-01\n      :ARG1 (l / list\n            :name (n / name\n                  :op1 \"Sound\"\n                  :op2 \"Of\"\n                  :op3 \"2017\")\n            :poss (p / publication\n                  :name (n2 / name\n                        :op1 \"BBC\"))\n            :ARG0-of (a / aim-01\n                  :ARG1 (p2 / predict-01\n                        :ARG1 (m / music\n                              :ARG1-of (n3 / new-01)\n                              :ARG1-of (h / have-degree-91\n                                    :ARG2 (e / excite-01\n                                          :ARG0 m)\n                                    :ARG3 (m2 / most))\n                              :time (y / year\n                                    :mod (a2 / ahead))))))\n      :ARG2 (p3 / person\n            :name (n4 / name\n                  :op1 \"Ray\"\n                  :op2 \"BlK\")\n            :ARG0-of (s / sing-01\n                  :ARG1 (s2 / soul))))"
    ],
    "tree": [
      "(s / sing-01\n   :ARG1 (s2 / soul))",
      "(p2 / predict-01\n    :ARG1 (m / music\n             :ARG1 (n3 / new-01)\n             :ARG1 (h / have-degree-91\n                      :ARG2 (e / excite-01\n                               :ARG0 m)\n                      :ARG3 (m2 / most))\n             :time (y / year\n                      :mod (a2 / ahead))))",
      "(a / aim-01\n   :ARG1 (p2 / predict-01\n             :ARG1 (m / music\n                      :ARG1 (n3 / new-01)\n                      :ARG1 (h / have-degree-91\n                               :ARG2 (e / excite-01\n                                        :ARG0 m)\n                               :ARG3 (m2 / most))\n                      :time (y / year\n                               :mod (a2 / ahead)))))",
      "(t / top-01\n   :ARG1 (l / list\n            :name (n / name\n                     :op1 \"Sound\"\n                     :op2 \"Of\"\n                     :op3 \"2017\")\n            :poss (p / publication\n                     :name (n2 / name\n                               :op1 \"BBC\"))\n            :ARG0 (a / aim-01\n                     :ARG1 (p2 / predict-01\n                               :ARG1 (m / music\n                                        :ARG1 (n3 / new-01)\n                                        :ARG1 (h / have-degree-91\n                                                 :ARG2 (e / excite-01\n                                                          :ARG0 m)\n                                                 :ARG3 (m2 / most))\n                                        :time (y / year\n                                                 :mod (a2 / ahead)))))))",
      "(t / top-01\n   :ARG1 (l / list\n            :name (n / name\n                     :op1 \"Sound\"\n                     :op2 \"Of\"\n                     :op3 \"2017\")\n            :poss (p / publication\n                     :name (n2 / name\n                               :op1 \"BBC\"))\n            :ARG0 (a / aim-01\n                     :ARG1 (p2 / predict-01\n                               :ARG1 (m / music\n                                        :ARG1 (n3 / new-01)\n                                        :ARG1 (h / have-degree-91\n                                                 :ARG2 (e / excite-01\n                                                          :ARG0 m)\n                                                 :ARG3 (m2 / most))\n                                        :time (y / year\n                                                 :mod (a2 / ahead))))))\n   :ARG2 (p3 / person\n             :name (n4 / name\n                       :op1 \"Ray\"\n                       :op2 \"BlK\")\n             :ARG0 (s / sing-01\n                      :ARG1 (s2 / soul))))"
    ],
    "smus": [
      "Soul singing.",
      "New music is predicted to be the most exciting year ahead.",
      "The aim is to predict the new music will be the most exciting year ahead.",
      "The BBC's Sound of 2017 list aims to predict the new music to be the most exciting of the year ahead.",
      "Ray Blak, the soul singer, is top of the BBC's Sound of 2017 list, which aims to predict the new music that will be the most exciting ahead of year."
    ]
  },
  {
    "instance_id": "pyrxsum-59",
    "summary": "Hundreds of protesters in Kabul have accused Iran of stopping fuel tankers from crossing the border into Afghanistan.",
    "summary_trees": [
      "# ::snt Hundreds of protesters in Kabul have accused Iran of stopping fuel tankers from crossing the border into Afghanistan.\n(a / accuse-01\n      :ARG0 (p / person\n            :ARG0-of (p2 / protest-01)\n            :quant (m / multiple\n                  :op1 100)\n            :location (c / city\n                  :name (n / name\n                        :op1 \"Kabul\")))\n      :ARG1 (c2 / country\n            :name (n2 / name\n                  :op1 \"Iran\"))\n      :ARG2 (s / stop-03\n            :ARG0 c2\n            :ARG1 (t / tanker\n                  :mod (f / fuel))\n            :ARG2 (c3 / cross-02\n                  :ARG0 t\n                  :ARG1 (b / border-01\n                        :ARG2 (c4 / country\n                              :name (n3 / name\n                                    :op1 \"Afghanistan\"))))))"
    ],
    "tree": [
      "(b / border-01\n   :ARG2 (c4 / country\n             :name (n3 / name\n                       :op1 \"Afghanistan\")))",
      "(c3 / cross-02\n    :ARG0 (t / tanker)\n    :ARG1 (b / border-01\n             :ARG2 (c4 / country\n                       :name (n3 / name\n                                 :op1 \"Afghanistan\"))))",
      "(c3 / cross-02\n    :ARG1 (b / border-01\n             :ARG2 (c4 / country\n                       :name (n3 / name\n                                 :op1 \"Afghanistan\"))))",
      "(s / stop-03\n   :ARG0 (c2 / country :name (n2 / name :op1 \"Iran\"))\n   :ARG1 (t / tanker\n            :mod (f / fuel))\n   :ARG2 (c3 / cross-02\n             :ARG0 t\n             :ARG1 (b / border-01\n                      :ARG2 (c4 / country\n                                :name (n3 / name\n                                          :op1 \"Afghanistan\")))))",
      "(s / stop-03\n   :ARG0 (c2 / country :name (n2 / name :op1 \"Iran\"))\n   :ARG1 (t / tanker\n            :mod (f / fuel)))",
      "(a / accuse-01\n   :ARG1 (c2 / country\n             :name (n2 / name\n                       :op1 \"Iran\"))\n   :ARG2 (s / stop-03\n            :ARG0 c2\n            :ARG1 (t / tanker\n                     :mod (f / fuel))\n            :ARG2 (c3 / cross-02\n                      :ARG0 t\n                      :ARG1 (b / border-01\n                               :ARG2 (c4 / country\n                                         :name (n3 / name\n                                                   :op1 \"Afghanistan\"))))))",
      "(a / accuse-01\n   :ARG0 (p / person\n            :ARG0 (p2 / protest-01)\n            :quant (m / multiple\n                      :op1 100)\n            :location (c / city\n                         :name (n / name\n                                  :op1 \"Kabul\")))\n   :ARG1 (c2 / country\n             :name (n2 / name\n                       :op1 \"Iran\"))\n   :ARG2 (s / stop-03\n            :ARG0 c2\n            :ARG1 (t / tanker\n                     :mod (f / fuel))\n            :ARG2 (c3 / cross-02\n                      :ARG0 t\n                      :ARG1 (b / border-01\n                               :ARG2 (c4 / country\n                                         :name (n3 / name\n                                                   :op1 \"Afghanistan\"))))))"
    ],
    "smus": [
      "border with Afghanistan",
      "Tankers are crossing the border with Afghanistan.",
      "Crossing the border with Afghanistan.",
      "Iran is stopping fuel tankers from crossing the border with Afghanistan.",
      "Iran is stopping fuel tankers.",
      "Iran is accused of stopping fuel tankers from crossing the border with Afghanistan.",
      "Hundreds of protesters in Kabul have accused Iran of stopping fuel tankers from crossing the border with Afghanistan."
    ]
  },
  {
    "instance_id": "pyrxsum-60",
    "summary": "Some police forces are putting the public at risk by rationing their response as they struggle with cutbacks, the police standards watchdog has warned.",
    "summary_trees": [
      "# ::snt Some police forces are putting the public at risk by rationing their response as they struggle with cutbacks, the police standards watchdog has warned.\n(w / warn-01\n      :ARG0 (w2 / watchdog\n            :mod (p / police)\n            :mod (s / standard))\n      :ARG1 (e / endanger-01\n            :ARG0 (f / force\n                  :mod (p2 / police)\n                  :quant (s2 / some))\n            :ARG1 (p3 / public)\n            :manner (r / ration-01\n                  :ARG0 f\n                  :ARG1 (r2 / respond-01\n                        :ARG0 f)\n                  :time (s3 / struggle-02\n                        :ARG0 f\n                        :ARG1 (c / cut-back-05\n                              :ARG0 f)))))"
    ],
    "tree": [
      "(w / warn-01\n   :ARG0 (w2 / watchdog\n             :mod (p / police)\n             :mod (s / standard))\n   :ARG1 (e / endanger-01\n            :ARG0 (f / force\n                     :mod (p2 / police)\n                     :quant (s2 / some))\n            :ARG1 (p3 / public)\n            :manner (r / ration-01\n                       :ARG0 f\n                       :ARG1 (r2 / respond-01\n                                 :ARG0 f)\n                       :time (s3 / struggle-02\n                                 :ARG0 f\n                                 :ARG1 (c / cut-back-05\n                                          :ARG0 f)))))"
    ],
    "smus": [
      "Standard police watchdogs have warned that some police forces are putting the public in danger by rationing response while they struggle to cut back."
    ]
  },
  {
    "instance_id": "pyrxsum-61",
    "summary": "Pace bowler Jake Ball has made a \"lively\" return following a winter playing for England Lions, says Nottinghamshire captain Chris Read.",
    "summary_trees": [
      "# ::snt Pace bowler Jake Ball has made a \"lively\" return following a winter playing for England Lions, says Nottinghamshire captain Chris Read.\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Chris\"\n                  :op2 \"Read\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"Nottinghamshire\"))\n                  :ARG2 (c / captain)))\n      :ARG1 (r / return-01\n            :ARG1 (p2 / person\n                  :name (n3 / name\n                        :op1 \"Jake\"\n                        :op2 \"Ball\")\n                  :ARG0-of (b / bowl-01\n                        :manner (p3 / pace-01)))\n            :ARG1-of (l / lively-00)\n            :ARG1-of (f / follow-01\n                  :ARG2 (p4 / play-01\n                        :ARG0 p2\n                        :ARG3 (t2 / team\n                              :name (n4 / name\n                                    :op1 \"England\"\n                                    :op2 \"Lions\"))\n                        :time (d / date-entity\n                              :season (w / winter))))))"
    ],
    "tree": [
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Chris\"\n                     :op2 \"Read\")\n            :ARG0-of (h / have-org-role-91\n                        :ARG1 (t / team\n                                 :name (n2 / name\n                                           :op1 \"Nottinghamshire\"))\n                        :ARG2 (c / captain)))\n   :ARG1 (r / return-01\n            :ARG1 (p2 / person\n                      :name (n3 / name\n                                :op1 \"Jake\"\n                                :op2 \"Ball\")\n                      :ARG0-of (b / bowl-01\n                                  :manner (p3 / pace-01)))\n            :ARG1-of (l / lively-00)\n            :ARG1-of (f / follow-01\n                        :ARG2 (p4 / play-01\n                                  :ARG0 p2\n                                  :ARG3 (t2 / team\n                                            :name (n4 / name\n                                                      :op1 \"England\"\n                                                      :op2 \"Lions\"))\n                                  :time (d / date-entity\n                                           :season (w / winter))))))"
    ],
    "smus": [
      "'' Chris Read, the captain of Nottinghamshire, says Jake Ball's lively return to pace bowling is following his winter play against the England Lions."
    ]
  },
  {
    "instance_id": "pyrxsum-62",
    "summary": "A serial robber who threatened an 18-year-old shop worker with a knife was caught after his streak of grey hair was recognised in CCTV footage.",
    "summary_trees": [
      "# ::snt A serial robber who threatened an 18-year-old shop worker with a knife was caught after his streak of grey hair was recognised in CCTV footage.\n(c / catch-01\n      :ARG1 (p / person\n            :ARG0-of (r / rob-01\n                  :mod (s / serial))\n            :ARG0-of (t / threaten-01\n                  :ARG1 (p2 / person\n                        :ARG0-of (w / work-01\n                              :ARG2 (s2 / shop))\n                        :age (t2 / temporal-quantity\n                              :quant 18\n                              :unit (y / year)))\n                  :ARG2 (k / knife))\n            :part (s3 / streak\n                  :consist-of (h / hair\n                        :ARG1-of (g / gray-02))))\n      :time (a / after\n            :op1 (r2 / recognize-02\n                  :ARG1 p\n                  :location (f / footage\n                        :mod (t3 / television\n                              :mod (c2 / circuit\n                                    :ARG1-of (c3 / close-01)))))))"
    ],
    "tree": [
      "(t / threaten-01\n   :ARG1 (p2 / person\n             :ARG0 (w / work-01\n                      :ARG2 (s2 / shop))\n             :age (t2 / temporal-quantity\n                      :quant 18\n                      :unit (y / year))))",
      "(c / catch-01\n   :ARG1 (p / person\n            :ARG0 (r / rob-01\n                     :mod (s / serial))\n            :ARG0 (t / threaten-01\n                     :ARG1 (p2 / person\n                               :ARG0 (w / work-01\n                                        :ARG2 (s2 / shop))\n                               :age (t2 / temporal-quantity\n                                        :quant 18\n                                        :unit (y / year)))\n                     :ARG2 (k / knife))\n            :part (s3 / streak\n                      :consist-of (h / hair\n                                     :ARG1 (g / gray-02)))))"
    ],
    "smus": [
      "The 18 year old shop worker threatened.",
      "A serial robber was caught with a gray haired streak when a 18 year old shop worker threatened with a knife."
    ]
  },
  {
    "instance_id": "pyrxsum-63",
    "summary": "A British man has survived a fall from the 15th floor of a building in New Zealand, local media report.",
    "summary_trees": [
      "# ::snt A British man has survived a fall from the 15th floor of a building in New Zealand, local media report.\n(r / report-01\n      :ARG0 (m / media\n            :ARG1-of (l / local-02))\n      :ARG1 (s / survive-01\n            :ARG0 (m2 / man\n                  :mod (c / country\n                        :name (n / name\n                              :op1 \"Britain\")))\n            :ARG1 (f / fall-01\n                  :ARG1 m2\n                  :ARG3 (f2 / floor\n                        :ord (o / ordinal-entity\n                              :value 15)\n                        :part-of (b / building\n                              :location (c2 / country\n                                    :name (n2 / name\n                                          :op1 \"New\"\n                                          :op2 \"Zealand\")))))))"
    ],
    "tree": [
      "(s / survive-01\n   :ARG0 (m2 / man\n             :mod (c / country\n                     :name (n / name\n                              :op1 \"Britain\"))))",
      "(s / survive-01\n   :ARG0 (m2 / man\n             :mod (c / country\n                     :name (n / name\n                              :op1 \"Britain\")))\n   :ARG1 (f / fall-01\n            :ARG1 m2\n            :ARG3 (f2 / floor\n                      :ord (o / ordinal-entity\n                              :value 15)\n                      :part (b / building\n                               :location (c2 / country\n                                             :name (n2 / name\n                                                       :op1 \"New\"\n                                                       :op2 \"Zealand\"))))))",
      "(r / report-01\n   :ARG0 (m / media\n            :ARG1 (l / local-02))\n   :ARG1 (s / survive-01\n            :ARG0 (m2 / man\n                      :mod (c / country\n                              :name (n / name\n                                       :op1 \"Britain\")))\n            :ARG1 (f / fall-01\n                     :ARG1 m2\n                     :ARG3 (f2 / floor\n                               :ord (o / ordinal-entity\n                                       :value 15)\n                               :part (b / building\n                                        :location (c2 / country\n                                                      :name (n2 / name\n                                                                :op1 \"New\"\n                                                                :op2 \"Zealand\")))))))",
      "(r / report-01\n   :ARG1 (s / survive-01\n            :ARG0 (m2 / man\n                      :mod (c / country\n                              :name (n / name\n                                       :op1 \"Britain\")))\n            :ARG1 (f / fall-01\n                     :ARG1 m2\n                     :ARG3 (f2 / floor\n                               :ord (o / ordinal-entity\n                                       :value 15)\n                               :part (b / building\n                                        :location (c2 / country\n                                                      :name (n2 / name\n                                                                :op1 \"New\"\n                                                                :op2 \"Zealand\")))))))"
    ],
    "smus": [
      "The British man survived.",
      "A British man has survived a fall from the 15th floor of a New Zealand building.",
      "Local media reports that a British man has survived a fall from the 15th floor of a New Zealand building.",
      "A British man has survived a fall from the 15th floor of a New Zealand building, according to a report."
    ]
  },
  {
    "instance_id": "pyrxsum-64",
    "summary": "The Royal Navy has released an image of planned improvements to a jetty at Portsmouth Naval Base.",
    "summary_trees": [
      "# ::snt The Royal Navy has released an image of planned improvements to a jetty at Portsmouth Naval Base.\n(r / release-01\n      :ARG0 (m / military\n            :name (n / name\n                  :op1 \"Royal\"\n                  :op2 \"Navy\"))\n      :ARG1 (ii / image\n            :topic (ii2 / improve-01\n                  :ARG1 (j / jetty\n                        :location (f / facility\n                              :name (n2 / name\n                                    :op1 \"Portsmouth\"\n                                    :op2 \"Naval\"\n                                    :op3 \"Base\")))\n                  :ARG1-of (p / plan-01))))"
    ],
    "tree": [
      "(ii2 / improve-01\n     :ARG1 (j / jetty\n              :location (f / facility\n                           :name (n2 / name\n                                     :op1 \"Portsmouth\"\n                                     :op2 \"Naval\"\n                                     :op3 \"Base\"))))",
      "(r / release-01\n   :ARG0 (m / military\n            :name (n / name\n                     :op1 \"Royal\"\n                     :op2 \"Navy\"))\n   :ARG1 (ii / image\n             :topic (ii2 / improve-01\n                         :ARG1 (j / jetty\n                                  :location (f / facility\n                                               :name (n2 / name\n                                                         :op1 \"Portsmouth\"\n                                                         :op2 \"Naval\"\n                                                         :op3 \"Base\")))\n                         :ARG1 (p / plan-01))))",
      "(r / release-01\n   :ARG1 (ii / image\n             :topic (ii2 / improve-01\n                         :ARG1 (j / jetty\n                                  :location (f / facility\n                                               :name (n2 / name\n                                                         :op1 \"Portsmouth\"\n                                                         :op2 \"Naval\"\n                                                         :op3 \"Base\")))\n                         :ARG1 (p / plan-01))))"
    ],
    "smus": [
      "Improvements to the jetty at Portsmouth Naval Base",
      "The Royal Navy has released an image of planned improvements to the jetty at Portsmouth Naval Base.",
      "Image released of planned improvements to the jetty at Portsmouth Naval Base."
    ]
  },
  {
    "instance_id": "pyrxsum-65",
    "summary": "China has said Japan is endangering peace in the region after it passed controversial laws expanding the role of its military abroad.",
    "summary_trees": [
      "# ::snt China has said Japan is endangering peace in the region after it passed controversial laws expanding the role of its military abroad.\n(s / say-01\n      :ARG0 (c / country\n            :name (n / name\n                  :op1 \"China\"))\n      :ARG1 (e / endanger-01\n            :ARG0 (c2 / country\n                  :name (n2 / name\n                        :op1 \"Japan\"))\n            :ARG1 (p / peace\n                  :location (r / region)))\n      :time (a / after\n            :op1 (p2 / pass-01\n                  :ARG0 c2\n                  :ARG2 (l / law\n                        :mod (c3 / controversy)\n                        :ARG0-of (e2 / expand-01\n                              :ARG1 (r2 / role\n                                    :poss (m / military\n                                          :poss c2\n                                          :location (a2 / abroad))))))))"
    ],
    "tree": [
      "(e2 / expand-01\n    :ARG1 (r2 / role\n              :poss (m / military\n                       :poss (c2 / country :name (n2 / name :op1 \"Japan\"))\n                       :location (a2 / abroad))))",
      "(e / endanger-01\n   :ARG0 (c2 / country\n             :name (n2 / name\n                       :op1 \"Japan\")))",
      "(e / endanger-01\n   :ARG1 (p / peace\n            :location (r / region)))",
      "(s / say-01\n   :ARG0 (c / country\n            :name (n / name\n                     :op1 \"China\"))\n   :ARG1 (e / endanger-01\n            :ARG0 (c2 / country\n                      :name (n2 / name\n                                :op1 \"Japan\"))\n            :ARG1 (p / peace\n                     :location (r / region))))"
    ],
    "smus": [
      "Expanding the role of Japan's military abroad",
      "Japan is threatening.",
      "Endangering peace in the region.",
      "China has said that Japan is endangering peace in the region."
    ]
  },
  {
    "instance_id": "pyrxsum-66",
    "summary": "Celtic restored their 10-point lead at the top of the table after overcoming Inverness Caledonian Thistle.",
    "summary_trees": [
      "# ::snt Celtic restored their 10-point lead at the top of the table after overcoming Inverness Caledonian Thistle.\n(r / restore-01\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Celtic\"))\n      :ARG1 (l / lead-01\n            :ARG0 t\n            :ARG2 (p / point\n                  :quant 10)\n            :location (t2 / top\n                  :part-of (t3 / table)))\n      :time (a / after\n            :op1 (o / overcome-01\n                  :ARG0 t\n                  :ARG1 (t4 / team\n                        :name (n2 / name\n                              :op1 \"Inverness\"\n                              :op2 \"Cedonian\"\n                              :op3 \"Thistle\")))))"
    ],
    "tree": [
      "(o / overcome-01\n   :ARG0 (t / team :name (n / name :op1 \"Celtic\"))\n   :ARG1 (t4 / team\n             :name (n2 / name\n                       :op1 \"Inverness\"\n                       :op2 \"Cedonian\"\n                       :op3 \"Thistle\")))",
      "(r / restore-01\n   :ARG1 (l / lead-01\n            :ARG0 (t / team :name (n / name :op1 \"Celtic\"))\n            :ARG2 (p / point\n                     :quant 10)\n            :location (t2 / top\n                          :part (t3 / table))))",
      "(r / restore-01\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Celtic\"))\n   :ARG1 (l / lead-01\n            :ARG0 t\n            :ARG2 (p / point\n                     :quant 10)\n            :location (t2 / top\n                          :part (t3 / table))))"
    ],
    "smus": [
      "Celtic overcoming Inverness Celtic Thistle",
      "Celtic restored 10 point lead at the top of the table.",
      "Celtic restored their 10 point lead at the top of the table."
    ]
  },
  {
    "instance_id": "pyrxsum-67",
    "summary": "England captain Sean O'Loughlin says he would have preferred an Englishman in charge of the national team, but is looking forward to working with Australian Wayne Bennett.",
    "summary_trees": [
      "# ::snt England captain Sean O'Loughlin says he would have preferred an Englishman in charge of the national team, but is looking forward to working with Australian Wayne Bennett.\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Sean\"\n                  :op2 \"O'Loughlin\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"England\"))\n                  :ARG2 (c / captain)))\n      :ARG1 (c2 / contrast-01\n            :ARG1 (p2 / prefer-01\n                  :ARG0 p\n                  :ARG1 (c3 / charge-08\n                        :ARG1 (m / man\n                              :mod (c4 / country)\n                              :ARG2 (t2 / team\n                                    :mod (n3 / nation))))\n                  :ARG2 (l / look-forward-03\n                        :ARG0 p\n                        :ARG1 (w / work-01\n                              :ARG3 (p3 / person\n                                    :name (n4 / name\n                                          :op1 \"Wayne\"\n                                          :op2 \"Bennett\")\n                                    :mod c4\n                                    :name (n5 / name\n                                          :op1 \"Australia\")))))))"
    ],
    "tree": [
      "(w / work-01\n   :ARG3 (p3 / person\n             :name (n4 / name\n                       :op1 \"Wayne\"\n                       :op2 \"Bennett\")\n             :mod (c4 / country)\n             :name (n5 / name\n                       :op1 \"Australia\")))",
      "(l / look-forward-03\n   :ARG0 (p / person :name (n / name :op1 \"Sean\" :op2 \"O'Loughlin\")))\n   :ARG1 (w / work-01\n            :ARG3 (p3 / person\n                      :name (n4 / name\n                                :op1 \"Wayne\"\n                                :op2 \"Bennett\")\n                      :mod (c4 / country)\n                      :name (n5 / name\n                                :op1 \"Australia\"))))",
      "(p2 / prefer-01\n    :ARG0 (p / person :name (n / name :op1 \"Sean\" :op2 \"O'Loughlin\")))\n    :ARG1 (c3 / charge-08\n              :ARG1 (m / man\n                       :mod (c4 / country)\n                       :ARG2 (t2 / team\n                                 :mod (n3 / nation)))))",
      "(p2 / prefer-01\n    :ARG0 (p / person :name (n / name :op1 \"Sean\" :op2 \"O'Loughlin\")))\n    :ARG1 (c3 / charge-08\n              :ARG1 (m / man\n                       :mod (c4 / country)\n                       :ARG2 (t2 / team\n                                 :mod (n3 / nation))))\n    :ARG2 (l / look-forward-03\n             :ARG0 p\n             :ARG1 (w / work-01\n                      :ARG3 (p3 / person\n                                :name (n4 / name\n                                          :op1 \"Wayne\"\n                                          :op2 \"Bennett\")\n                                :mod c4\n                                :name (n5 / name\n                                          :op1 \"Australia\")))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Sean\"\n                     :op2 \"O'Loughlin\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (t / team\n                              :name (n2 / name\n                                        :op1 \"England\"))\n                     :ARG2 (c / captain)))\n   :ARG1 (c2 / contrast-01\n             :ARG1 (p2 / prefer-01\n                       :ARG0 p\n                       :ARG1 (c3 / charge-08\n                                 :ARG1 (m / man\n                                          :mod (c4 / country)\n                                          :ARG2 (t2 / team\n                                                    :mod (n3 / nation))))\n                       :ARG2 (l / look-forward-03\n                                :ARG0 p\n                                :ARG1 (w / work-01\n                                         :ARG3 (p3 / person\n                                                   :name (n4 / name\n                                                             :op1 \"Wayne\"\n                                                             :op2 \"Bennett\")\n                                                   :mod c4\n                                                   :name (n5 / name\n                                                             :op1 \"Australia\")))))))"
    ],
    "smus": [
      "Working with Australian Wayne Bennett.",
      "Sean O'Loughlin is looking forward to working with Australian Wayne Bennett.",
      "Sean O'Loughlin would have preferred the country man in charge of the national team.",
      "Sean O'Loughlin has preferred the national team men in charge over looking forward to working with Australian Wayne Bennett.",
      "England captain Sean O'Loughlin says he would have preferred a countryman in charge of a national team but is looking forward to working with Australian Wayne Bennett."
    ]
  },
  {
    "instance_id": "pyrxsum-68",
    "summary": "Promotion-chasing Stevenage were held to a by Cambridge in League Two.",
    "summary_trees": [
      "# ::snt Promotion-chasing Stevenage were held to a by Cambridge in League Two.\n(h / hold-04\n      :ARG0 (u / university\n            :name (n / name\n                  :op1 \"Cambridge\"))\n      :ARG1 (t / team\n            :name (n2 / name\n                  :op1 \"Stevenage\")\n            :ARG0-of (c / chase-01\n                  :ARG1 (p / promote-01\n                        :ARG1 t)))\n      :location (l / league\n            :name (n3 / name\n                  :op1 \"League\"\n                  :op2 \"Two\")))"
    ],
    "tree": [
      "(c / chase-01\n   :ARG1 (p / promote-01\n            :ARG1 (t / team :name (n2 / name :op1 \"Stevenage\")))))",
      "(h / hold-04\n   :ARG0 (u / university\n            :name (n / name\n                     :op1 \"Cambridge\"))\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Stevenage\")\n            :ARG0 (c / chase-01\n                     :ARG1 (p / promote-01\n                              :ARG1 t))))",
      "(h / hold-04\n   :ARG1 (t / team\n            :name (n2 / name\n                      :op1 \"Stevenage\")\n            :ARG0 (c / chase-01\n                     :ARG1 (p / promote-01\n                              :ARG1 t)))\n   :location (l / league\n                :name (n3 / name\n                          :op1 \"League\"\n                          :op2 \"Two\")))",
      "(h / hold-04\n   :location (l / league\n                :name (n3 / name\n                          :op1 \"League\"\n                          :op2 \"Two\")))"
    ],
    "smus": [
      "chasing Stevenage promotion",
      "Cambridge has held Stevenage to a promotion chase.",
      "Stevenage are held in the League Two by the chase for promotion.",
      "held in League Two."
    ]
  },
  {
    "instance_id": "pyrxsum-69",
    "summary": "Yet again, we are looking at shocking pictures of a plane crash.",
    "summary_trees": [
      "# ::snt Yet again, we are looking at shocking pictures of a plane crash.\n(l / look-01\n      :ARG0 (w / we)\n      :ARG1 (p / picture\n            :topic (c / crash-01\n                  :ARG1 (p2 / plane))\n            :ARG0-of (s / shock-01))\n      :mod (a / again\n            :mod (y / yet)))"
    ],
    "tree": [
      "(c / crash-01\n   :ARG1 (p2 / plane))",
      "(l / look-01\n   :ARG0 (w / we)\n   :ARG1 (p / picture\n            :topic (c / crash-01\n                      :ARG1 (p2 / plane))\n            :ARG0 (s / shock-01)))",
      "(l / look-01\n   :ARG1 (p / picture\n            :topic (c / crash-01\n                      :ARG1 (p2 / plane))\n            :ARG0 (s / shock-01)))",
      "(l / look-01\n   :ARG0 (w / we))"
    ],
    "smus": [
      "The plane crashed.",
      "We are looking at the shocking pictures of the plane crash.",
      "Looking at the shocking pictures of the plane crash.",
      "We're looking."
    ]
  },
  {
    "instance_id": "pyrxsum-70",
    "summary": "Prime Minister David Cameron will later attempt to halt the civil war in his party caused by Iain Duncan Smith's resignation from the cabinet.",
    "summary_trees": [
      "# ::snt Prime Minister David Cameron will later attempt to halt the civil war in his party caused by Iain Duncan Smith's resignation from the cabinet.\n(a / attempt-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"David\"\n                  :op2 \"Cameron\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (m / minister\n                        :mod (p2 / prime))))\n      :ARG1 (h2 / halt-01\n            :ARG0 p\n            :ARG1 (w / war-01\n                  :mod (c / civil)\n                  :location (p3 / party\n                        :poss p)\n                  :ARG1-of (c2 / cause-01\n                        :ARG0 (r / resign-01\n                              :ARG0 (p4 / person\n                                    :name (n2 / name\n                                          :op1 \"Iain\"\n                                          :op2 \"Duncan\"\n                                          :op3 \"Smith\"))\n                              :ARG1 (c3 / cabinet)))))\n      :time (a2 / after))"
    ],
    "tree": [
      "(r / resign-01\n   :ARG0 (p4 / person\n             :name (n2 / name\n                       :op1 \"Iain\"\n                       :op2 \"Duncan\"\n                       :op3 \"Smith\")))",
      "(r / resign-01\n   :ARG0 (p4 / person\n             :name (n2 / name\n                       :op1 \"Iain\"\n                       :op2 \"Duncan\"\n                       :op3 \"Smith\"))\n   :ARG1 (c3 / cabinet))",
      "(w / war-01\n   :mod (c / civil))",
      "(h2 / halt-01\n    :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Cameron\")))\n    :ARG1 (w / war-01\n             :mod (c / civil)\n             :location (p3 / party\n                           :poss p)\n             :ARG1 (c2 / cause-01\n                       :ARG0 (r / resign-01\n                                :ARG0 (p4 / person\n                                          :name (n2 / name\n                                                    :op1 \"Iain\"\n                                                    :op2 \"Duncan\"\n                                                    :op3 \"Smith\"))\n                                :ARG1 (c3 / cabinet)))))",
      "(h2 / halt-01\n    :ARG1 (w / war-01\n             :mod (c / civil)\n             :location (p3 / party\n                           :poss (p / person :name (n / name :op1 \"David\" :op2 \"Cameron\"))))\n             :ARG1 (c2 / cause-01\n                       :ARG0 (r / resign-01\n                                :ARG0 (p4 / person\n                                          :name (n2 / name\n                                                    :op1 \"Iain\"\n                                                    :op2 \"Duncan\"\n                                                    :op3 \"Smith\"))\n                                :ARG1 (c3 / cabinet)))))",
      "(a / attempt-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Cameron\")\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m / minister\n                              :mod (p2 / prime))))\n   :ARG1 (h2 / halt-01\n             :ARG0 p\n             :ARG1 (w / war-01\n                      :mod (c / civil)\n                      :location (p3 / party\n                                    :poss p)\n                      :ARG1 (c2 / cause-01\n                                :ARG0 (r / resign-01\n                                         :ARG0 (p4 / person\n                                                   :name (n2 / name\n                                                             :op1 \"Iain\"\n                                                             :op2 \"Duncan\"\n                                                             :op3 \"Smith\"))\n                                         :ARG1 (c3 / cabinet))))))",
      "(a / attempt-01\n   :ARG1 (h2 / halt-01\n             :ARG0 (p / person :name (n / name :op1 \"David\" :op2 \"Cameron\")))\n             :ARG1 (w / war-01\n                      :mod (c / civil)\n                      :location (p3 / party\n                                    :poss p)\n                      :ARG1 (c2 / cause-01\n                                :ARG0 (r / resign-01\n                                         :ARG0 (p4 / person\n                                                   :name (n2 / name\n                                                             :op1 \"Iain\"\n                                                             :op2 \"Duncan\"\n                                                             :op3 \"Smith\"))\n                                         :ARG1 (c3 / cabinet))))))",
      "(a / attempt-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"David\"\n                     :op2 \"Cameron\")\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m / minister\n                              :mod (p2 / prime))))\n   :ARG1 (h2 / halt-01\n             :ARG0 p\n             :ARG1 (w / war-01\n                      :mod (c / civil)\n                      :location (p3 / party\n                                    :poss p)\n                      :ARG1 (c2 / cause-01\n                                :ARG0 (r / resign-01\n                                         :ARG0 (p4 / person\n                                                   :name (n2 / name\n                                                             :op1 \"Iain\"\n                                                             :op2 \"Duncan\"\n                                                             :op3 \"Smith\"))\n                                         :ARG1 (c3 / cabinet)))))\n   :time (a2 / after))",
      "(a / attempt-01\n   :time (a2 / after))"
    ],
    "smus": [
      "Ian Duncan Smith's resignation",
      "Ian Duncan Smith's resignation from the cabinet.",
      "Civil war.",
      "David Cameron will halt the civil war in his party caused by the resignation of Iain Duncan Smith from the cabinet.",
      "The civil war in David Cameron's party will halt as Iain Duncan Smith's resignation from the cabinet.",
      "Prime Minister David Cameron will attempt to halt the civil war in his party caused by Iain Duncan Smith's resignation from the cabinet.",
      "David Cameron will attempt to halt the civil war in his party caused by the resignation of Iain Duncan Smith from the cabinet.",
      "Later, Prime Minister David Cameron will attempt to halt the civil war in his party caused by Iain Duncan Smith's resignation from the cabinet.",
      "An attempt later."
    ]
  },
  {
    "instance_id": "pyrxsum-71",
    "summary": "The percentage of Americans living in poverty is statistically unchanged from 2010's record high, even as household income fell, a US Census report says.",
    "summary_trees": [
      "# ::snt The percentage of Americans living in poverty is statistically unchanged from 2010's record high, even as household income fell, a US Census report says.\n(s / say-01\n      :ARG0 (r / report-01\n            :ARG0 (g / government-organization\n                  :name (n / name\n                        :op1 \"US\"\n                        :op2 \"Census\")))\n      :ARG1 (c / change-01\n            :polarity -\n            :ARG1 (p / percentage\n                  :quant-of (p2 / person\n                        :mod (c2 / country\n                              :name (n2 / name\n                                    :op1 \"America\"))\n                        :ARG0-of (l / live-01\n                              :manner (p3 / poor))))\n            :ARG2 (h / high-02\n                  :ARG1 p\n                  :mod (r2 / record)\n                  :time (d / date-entity\n                        :year 2010))\n            :mod (s2 / statistical)\n            :concession (e / even-as\n                  :op1 (f / fall-01\n                        :ARG1 (ii / income\n                              :mod (h2 / household))))))"
    ],
    "tree": [
      "(f / fall-01\n   :ARG1 (ii / income\n             :mod (h2 / household)))",
      "(c / change-01\n   :ARG1 (p / percentage))",
      "(s / say-01\n   :ARG0 (r / report-01\n            :ARG0 (g / government-organization\n                     :name (n / name\n                              :op1 \"US\"\n                              :op2 \"Census\")))\n   :ARG1 (c / change-01\n            :polarity -\n            :ARG1 (p / percentage)))"
    ],
    "smus": [
      "household income fell.",
      "The percentage is changing.",
      "The US Census report says the percentage is unchanged."
    ]
  },
  {
    "instance_id": "pyrxsum-72",
    "summary": "A 34-year-old woman who was injured in an attack by a knifeman on a Swiss train has died in hospital, police say.",
    "summary_trees": [
      "# ::snt A 34-year-old woman who was injured in an attack by a knifeman on a Swiss train has died in hospital, police say.\n(s / say-01\n      :ARG0 (p / police)\n      :ARG1 (d / die-01\n            :ARG1 (w / woman\n                  :ARG1-of (ii / injure-01\n                        :ARG0 (a / attack-01\n                              :ARG0 (k / knifeman)\n                              :ARG1 w\n                              :location (t / train\n                                    :mod (c / country\n                                          :name (n / name\n                                                :op1 \"Switzerland\")))))\n                  :age (t2 / temporal-quantity\n                        :quant 34\n                        :unit (y / year)))\n            :location (h / hospital)))"
    ],
    "tree": [
      "(a / attack-01\n   :ARG0 (k / knifeman))",
      "(a / attack-01\n   :ARG0 (k / knifeman)\n   :ARG1 (w / woman))",
      "(d / die-01\n   :ARG1 (w / woman\n            :ARG1 (ii / injure-01\n                      :ARG0 (a / attack-01\n                               :ARG0 (k / knifeman)\n                               :ARG1 w\n                               :location (t / train\n                                            :mod (c / country\n                                                    :name (n / name\n                                                             :op1 \"Switzerland\")))))\n            :age (t2 / temporal-quantity\n                     :quant 34\n                     :unit (y / year))))",
      "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (d / die-01\n            :ARG1 (w / woman\n                     :ARG1 (ii / injure-01\n                               :ARG0 (a / attack-01\n                                        :ARG0 (k / knifeman)\n                                        :ARG1 w\n                                        :location (t / train\n                                                     :mod (c / country\n                                                             :name (n / name\n                                                                      :op1 \"Switzerland\")))))\n                     :age (t2 / temporal-quantity\n                              :quant 34\n                              :unit (y / year)))\n            :location (h / hospital)))"
    ],
    "smus": [
      "The knifeman attacked.",
      "A knifeman attacked a woman.",
      "A 34 year old woman died in a knifeman attack on a Swiss train.",
      "Police say a 34-year-old woman was killed in a knifeman attack on a Swiss train died in hospital."
    ]
  },
  {
    "instance_id": "pyrxsum-73",
    "summary": "Boeing has shown off its \"space bins\" that can hold 50% more luggage than existing designs.",
    "summary_trees": [
      "# ::snt Boeing has shown off its \"space bins\" that can hold 50% more luggage than existing designs.\n(s / show-off-04\n      :ARG0 (c / company\n            :name (n / name\n                  :op1 \"Boeing\"))\n      :ARG1 (b / bin\n            :mod (s2 / space)\n            :poss c\n            :ARG0-of (h / hold-01\n                  :ARG1 (l / luggage\n                        :ARG1-of (h2 / have-quant-91\n                              :ARG3 (m / more\n                                    :quant (p / percentage-entity\n                                          :value 50))\n                              :ARG4 (l2 / luggage\n                                    :ARG1-of (d / design-01\n                                          :ARG1-of (e / exist-01)))))\n                  :ARG1-of (p2 / possible-01))))"
    ],
    "tree": [
      "(d / design-01\n   :ARG1 (e / exist-01))",
      "(h2 / have-quant-91\n    :ARG3 (m / more\n             :quant (p / percentage-entity\n                       :value 50))\n    :ARG4 (l2 / luggage))",
      "(h / hold-01\n   :ARG1 (l / luggage\n            :ARG1 (h2 / have-quant-91\n                      :ARG3 (m / more\n                               :quant (p / percentage-entity\n                                         :value 50))\n                      :ARG4 (l2 / luggage))))",
      "(s / show-off-04\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Boeing\"))\n   :ARG1 (b / bin\n            :mod (s2 / space)\n            :poss c))"
    ],
    "smus": [
      "Existing designs.",
      "50% more than luggage.",
      "Hold 50 percent more luggage than the luggage.",
      "Boeing has shown off its space bins."
    ]
  },
  {
    "instance_id": "pyrxsum-74",
    "summary": "Australia is a step closer to exporting live cattle to China, opening a new market for its farmers.",
    "summary_trees": [
      "# ::snt Australia is a step closer to exporting live cattle to China, opening a new market for its farmers.\n(c / close-06\n      :ARG1 (c2 / country\n            :name (n / name\n                  :op1 \"Australia\"))\n      :ARG2 (e / export-01\n            :ARG0 c2\n            :ARG1 (c3 / cattle\n                  :mod (l / live))\n            :ARG2 (c4 / country\n                  :name (n2 / name\n                        :op1 \"China\")))\n      :ARG2-of (h / have-degree-91\n            :ARG1 c2\n            :ARG3 (m / more))\n      :ARG0-of (o / open-01\n            :ARG1 (m2 / market\n                  :ARG1-of (n3 / new-01))\n            :ARG3 (p / person\n                  :ARG0-of (f / farm-01)\n                  :poss c2)))"
    ],
    "tree": [
      "(o / open-01\n   :ARG1 (m2 / market\n             :ARG1 (n3 / new-01)))",
      "(e / export-01\n   :ARG0 (c2 / country :name (n / name :op1 \"Australia\"))\n   :ARG1 (c3 / cattle\n             :mod (l / live)))",
      "(e / export-01\n   :ARG1 (c3 / cattle\n             :mod (l / live)))",
      "(c / close-06\n   :ARG1 (c2 / country\n             :name (n / name\n                      :op1 \"Australia\"))\n   :ARG2 (e / export-01\n            :ARG0 c2\n            :ARG1 (c3 / cattle\n                      :mod (l / live))\n            :ARG2 (c4 / country\n                      :name (n2 / name\n                                :op1 \"China\")))\n   :ARG2 (h / have-degree-91\n            :ARG1 c2\n            :ARG3 (m / more))\n   :ARG0 (o / open-01\n            :ARG1 (m2 / market\n                      :ARG1 (n3 / new-01))\n            :ARG3 (p / person\n                     :ARG0 (f / farm-01)\n                     :poss c2)))"
    ],
    "smus": [
      "Opening the new market.",
      "Australia is exporting live cattle.",
      "Exporting live cattle.",
      "Opening a new market for Australian farmers, Australia is closer to exporting live cattle to China."
    ]
  },
  {
    "instance_id": "pyrxsum-75",
    "summary": "Anthony Joshua's world title bout with Wladimir Klitschko comes at the \"perfect time\", says former undisputed heavyweight champion Lennox Lewis.",
    "summary_trees": [
      "# ::snt Anthony Joshua's world title bout with Wladimir Klitschko comes at the \"perfect time\", says former undisputed heavyweight champion Lennox Lewis.\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Lennox\"\n                  :op2 \"Lewis\"))\n      :ARG1 (c / come-04\n            :ARG1 (b / bout-03\n                  :ARG0 (p2 / person\n                        :name (n2 / name\n                              :op1 \"Anthony\"\n                              :op2 \"Joshua\"))\n                  :ARG1 (p3 / person\n                        :name (n3 / name\n                              :op1 \"Wladimir\"\n                              :op2 \"Klitschko\"))\n                  :ARG3 (t / title\n                        :mod (w / world)))\n            :ARG3 (t2 / time\n                  :ARG1-of (p4 / perfect-02)))\n      :ARG2 (c2 / champion\n            :mod (h / heavyweight)\n            :ARG1-of (d / dispute-01\n                  :polarity -)\n            :domain p2\n            :time (f / former)))"
    ],
    "tree": [
      "(b / bout-03\n   :ARG0 (p2 / person\n             :name (n2 / name\n                       :op1 \"Anthony\"\n                       :op2 \"Joshua\"))\n   :ARG1 (p3 / person\n             :name (n3 / name\n                       :op1 \"Wladimir\"\n                       :op2 \"Klitschko\"))\n   :ARG3 (t / title\n            :mod (w / world)))"
    ],
    "smus": [
      "Anthony Joshua is a bout with Vladimir Klitschko for the world title."
    ]
  },
  {
    "instance_id": "pyrxsum-76",
    "summary": "People with hidden health conditions are being offered \"Please offer me a seat\" badges in a bid to help ease their suffering on London transport.",
    "summary_trees": [
      "# ::snt People with hidden health conditions are being offered \"Please offer me a seat\" badges in a bid to help ease their suffering on London transport.\n(o / offer-01\n      :ARG1 (b / badge\n            :ARG0-of (s / say-01\n                  :ARG1 (o2 / offer-01\n                        :mode imperative\n                        :polite +\n                        :ARG0 (y / you)\n                        :ARG1 (s2 / seat)\n                        :ARG3 (p / person)))\n            :ARG3 p\n            :ARG0-of (h / have-03\n                  :ARG1 (c / condition\n                        :mod (h2 / health)\n                        :ARG1-of (h3 / hide-01))))\n      :purpose (b2 / bid-01\n            :ARG0 p\n            :ARG1 (h4 / help-01\n                  :ARG0 p\n                  :ARG1 (e / ease-02\n                        :ARG0 p\n                        :ARG1 (s3 / suffer-01\n                              :ARG0 p\n                              :location (t / transport\n                                    :location (c2 / city\n                                          :name (n / name\n                                                :op1 \"London\"))))))))"
    ],
    "tree": [
      "(s3 / suffer-01\n    :ARG0 (p / person)\n    :location (t / transport\n                 :location (c2 / city\n                               :name (n / name\n                                        :op1 \"London\"))))",
      "(e / ease-02\n   :ARG0 (p / person)\n   :ARG1 (s3 / suffer-01\n             :ARG0 p\n             :location (t / transport\n                          :location (c2 / city\n                                        :name (n / name\n                                                 :op1 \"London\")))))",
      "(s3 / suffer-01\n    :location (t / transport\n                 :location (c2 / city\n                               :name (n / name\n                                        :op1 \"London\"))))"
    ],
    "smus": [
      "People are suffering on London transport.",
      "People will ease their suffering on London transport.",
      "The suffering in London transport."
    ]
  },
  {
    "instance_id": "pyrxsum-77",
    "summary": "Leicester Tigers have signed new England loose-head prop Ellis Genge from newly-promoted Bristol.",
    "summary_trees": [
      "# ::snt Leicester Tigers have signed new England loose-head prop Ellis Genge from newly-promoted Bristol.\n(s / sign-02\n      :ARG0 (t / team\n            :name (n / name\n                  :op1 \"Leicester\"\n                  :op2 \"Tigers\"))\n      :ARG1 (p / person\n            :name (n2 / name\n                  :op1 \"Ellis\"\n                  :op2 \"Genge\")\n            :ARG0-of (p2 / prop-01)\n            :mod (l / loose-head)\n            :mod (t2 / team\n                  :name (n3 / name\n                        :op1 \"England\"))\n            :ARG1-of (n4 / new-02))\n      :ARG3 (t3 / team\n            :name (n5 / name\n                  :op1 \"Bristol\")\n            :ARG1-of (p3 / promote-01\n                  :ARG1-of (n6 / new-02))))"
    ],
    "tree": [
      "(s / sign-02\n   :ARG0 (t / team\n            :name (n / name\n                     :op1 \"Leicester\"\n                     :op2 \"Tigers\"))\n   :ARG1 (p / person\n            :name (n2 / name\n                      :op1 \"Ellis\"\n                      :op2 \"Genge\")\n            :ARG0-of (p2 / prop-01)\n            :mod (l / loose-head)\n            :mod (t2 / team\n                     :name (n3 / name\n                               :op1 \"England\"))\n            :ARG1-of (n4 / new-02))\n   :ARG3 (t3 / team\n             :name (n5 / name\n                       :op1 \"Bristol\")\n             :ARG1-of (p3 / promote-01\n                          :ARG1-of (n6 / new-02))))"
    ],
    "smus": [
      "Leicester Tigers have signed new England loose-head prop Ellis Genge from newly promoted Bristol."
    ]
  },
  {
    "instance_id": "pyrxsum-78",
    "summary": "Keith Farmer followed up his double at Knockhill by winning the Supersport sprint race at Snetterton on Saturday.",
    "summary_trees": [
      "# ::snt Keith Farmer followed up his double at Knockhill by winning the Supersport sprint race at Snetterton on Saturday.\n(f / follow-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Keith\"\n                  :op2 \"Farmer\"))\n      :ARG1 (d / double-01\n            :ARG0 p\n            :location (l / location\n                  :name (n2 / name\n                        :op1 \"Knockhill\")))\n      :ARG2 (w / win-01\n            :ARG0 p\n            :ARG2 (r / race-02\n                  :mod (s / sprint)\n                  :mod (e / event\n                        :name (n3 / name\n                              :op1 \"Supersport\"))\n                  :location (l2 / local-region\n                        :name (n4 / name\n                              :op1 \"Snetterton\")))\n            :time (d2 / date-entity\n                  :weekday (s2 / saturday))))"
    ],
    "tree": [
      "(r / race-02\n   :mod (s / sprint))",
      "(w / win-01\n   :ARG0 (p / person :name (n / name :op1 \"Keith\" :op2 \"Farmer\"))\n   :ARG2 (r / race-02\n            :mod (s / sprint)\n            :mod (e / event\n                    :name (n3 / name\n                              :op1 \"Supersport\"))\n            :location (l2 / local-region\n                          :name (n4 / name\n                                    :op1 \"Snetterton\"))))",
      "(f / follow-01\n   :ARG1 (d / double-01\n            :ARG0 (p / person :name (n / name :op1 \"Keith\" :op2 \"Farmer\"))\n            :location (l / location\n                         :name (n2 / name\n                                   :op1 \"Knockhill\")))\n   :ARG2 (w / win-01\n            :ARG0 p\n            :ARG2 (r / race-02\n                     :mod (s / sprint)\n                     :mod (e / event\n                             :name (n3 / name\n                                       :op1 \"Supersport\"))\n                     :location (l2 / local-region\n                                   :name (n4 / name\n                                             :op1 \"Snetterton\")))\n            :time (d2 / date-entity\n                      :weekday (s2 / saturday))))",
      "(f / follow-01\n   :ARG1 (d / double-01\n            :ARG0 (p / person :name (n / name :op1 \"Keith\" :op2 \"Farmer\"))\n            :location (l / location\n                         :name (n2 / name\n                                   :op1 \"Knockhill\"))))"
    ],
    "smus": [
      "A sprint race.",
      "Keith Farmer won the Supersport sprint race in Snetterton.",
      "Keith Farmer doubled in Knockhill following victory in the Supersport sprint race in Snetterton on Saturday.",
      "Keith Farmer doubled in Knockhill followed."
    ]
  },
  {
    "instance_id": "pyrxsum-79",
    "summary": "Northern Ireland striker Conor Washington counts himself a lucky man as he prepares to head to Euro 2016.",
    "summary_trees": [
      "# ::snt Northern Ireland striker Conor Washington counts himself a lucky man as he prepares to head to Euro 2016.\n(c / count-02\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Conor\"\n                  :op2 \"Washington\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (t / team\n                        :name (n2 / name\n                              :op1 \"Northern\"\n                              :op2 \"Ireland\"))\n                  :ARG3 (s / striker)))\n      :ARG1 (l / lucky\n            :domain p)\n      :time (p2 / prepare-02\n            :ARG1 p\n            :ARG2 (h2 / head-02\n                  :ARG0 p\n                  :ARG1 (g / game\n                        :name (n3 / name\n                              :op1 \"Euro\"\n                              :op2 \"2016\")))))"
    ],
    "tree": [
      "(h2 / head-02\n    :ARG0 (p / person :name (n / name :op1 \"Conor\" :op2 \"Washington\")))\n    :ARG1 (g / game\n             :name (n3 / name\n                       :op1 \"Euro\"\n                       :op2 \"2016\")))",
      "(p2 / prepare-02\n    :ARG1 (p / person :name (n / name :op1 \"Conor\" :op2 \"Washington\")))\n    :ARG2 (h2 / head-02\n              :ARG0 p\n              :ARG1 (g / game\n                       :name (n3 / name\n                                 :op1 \"Euro\"\n                                 :op2 \"2016\"))))",
      "(c / count-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Conor\"\n                     :op2 \"Washington\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (t / team\n                              :name (n2 / name\n                                        :op1 \"Northern\"\n                                        :op2 \"Ireland\"))\n                     :ARG3 (s / striker)))\n   :ARG1 (l / lucky\n            :domain p))",
      "(c / count-02\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Conor\"\n                     :op2 \"Washington\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (t / team\n                              :name (n2 / name\n                                        :op1 \"Northern\"\n                                        :op2 \"Ireland\"))\n                     :ARG3 (s / striker)))\n   :ARG1 (l / lucky\n            :domain p)\n   :time (p2 / prepare-02\n             :ARG1 p\n             :ARG2 (h2 / head-02\n                       :ARG0 p\n                       :ARG1 (g / game\n                                :name (n3 / name\n                                          :op1 \"Euro\"\n                                          :op2 \"2016\")))))",
      "(c / count-02\n   :ARG1 (l / lucky\n            :domain (p / person :name (n / name :op1 \"Conor\" :op2 \"Washington\")))))",
      "(c / count-02\n   :time (p2 / prepare-02))"
    ],
    "smus": [
      "Conor Washington will head to Euro 2016.",
      "Conor Washington prepares to head to Euro 2016.",
      "Conor Washington counts as a Northern Ireland striker.",
      "As he prepares to head to Euro 2016, Northern Ireland striker Coron Washington counts himself lucky.",
      "Conor Washington counts as lucky.",
      "As preparations go, it counts."
    ]
  },
  {
    "instance_id": "pyrxsum-80",
    "summary": "The Reality Check team answers more of your questions about the implications of the UK's vote to leave the European Union.",
    "summary_trees": [
      "# ::snt The Reality Check team answers more of your questions about the implications of the UK's vote to leave the European Union.\n(a / answer-01\n      :ARG0 (t / team\n            :ARG0-of (c / check-01\n                  :ARG1 (r / reality)))\n      :ARG1 (q / question-01\n            :ARG0 (y / you)\n            :ARG1 (ii / implicate-01\n                  :ARG2 (v / vote-01\n                        :ARG0 (c2 / country\n                              :name (n / name\n                                    :op1 \"UK\"))\n                        :ARG1 (l / leave-15\n                              :ARG0 c2\n                              :ARG1 (o / organization\n                                    :name (n2 / name\n                                          :op1 \"European\"\n                                          :op2 \"Union\")))))\n            :quant (m / more)))"
    ],
    "tree": [
      "(l / leave-15\n   :ARG0 (c2 / country :name (n / name :op1 \"UK\"))\n   :ARG1 (o / organization\n            :name (n2 / name\n                      :op1 \"European\"\n                      :op2 \"Union\")))",
      "(v / vote-01\n   :ARG0 (c2 / country\n             :name (n / name\n                      :op1 \"UK\")))",
      "(v / vote-01\n   :ARG0 (c2 / country\n             :name (n / name\n                      :op1 \"UK\"))\n   :ARG1 (l / leave-15\n            :ARG0 c2\n            :ARG1 (o / organization\n                     :name (n2 / name\n                               :op1 \"European\"\n                               :op2 \"Union\"))))",
      "(v / vote-01\n   :ARG1 (l / leave-15\n            :ARG0 (c2 / country :name (n / name :op1 \"UK\"))\n            :ARG1 (o / organization\n                     :name (n2 / name\n                               :op1 \"European\"\n                               :op2 \"Union\"))))",
      "(q / question-01\n   :ARG1 (ii / implicate-01\n             :ARG2 (v / vote-01\n                      :ARG0 (c2 / country\n                                :name (n / name\n                                         :op1 \"UK\"))\n                      :ARG1 (l / leave-15\n                               :ARG0 c2\n                               :ARG1 (o / organization\n                                        :name (n2 / name\n                                                  :op1 \"European\"\n                                                  :op2 \"Union\"))))))",
      "(q / question-01\n   :ARG0 (y / you)\n   :ARG1 (ii / implicate-01\n             :ARG2 (v / vote-01\n                      :ARG0 (c2 / country\n                                :name (n / name\n                                         :op1 \"UK\"))\n                      :ARG1 (l / leave-15\n                               :ARG0 c2\n                               :ARG1 (o / organization\n                                        :name (n2 / name\n                                                  :op1 \"European\"\n                                                  :op2 \"Union\"))))))",
      "(q / question-01\n   :ARG0 (y / you))",
      "(c / check-01\n   :ARG1 (r / reality))",
      "(a / answer-01\n   :ARG0 (t / team\n            :ARG0 (c / check-01\n                     :ARG1 (r / reality)))\n   :ARG1 (q / question-01\n            :ARG0 (y / you)\n            :ARG1 (ii / implicate-01\n                      :ARG2 (v / vote-01\n                               :ARG0 (c2 / country\n                                         :name (n / name\n                                                  :op1 \"UK\"))\n                               :ARG1 (l / leave-15\n                                        :ARG0 c2\n                                        :ARG1 (o / organization\n                                                 :name (n2 / name\n                                                           :op1 \"European\"\n                                                           :op2 \"Union\")))))\n            :quant (m / more)))",
      "(a / answer-01\n   :ARG0 (t / team\n            :ARG0 (c / check-01\n                     :ARG1 (r / reality))))",
      "(a / answer-01\n   :ARG1 (q / question-01\n            :ARG0 (y / you)\n            :ARG1 (ii / implicate-01\n                      :ARG2 (v / vote-01\n                               :ARG0 (c2 / country\n                                         :name (n / name\n                                                  :op1 \"UK\"))\n                               :ARG1 (l / leave-15\n                                        :ARG0 c2\n                                        :ARG1 (o / organization\n                                                 :name (n2 / name\n                                                           :op1 \"European\"\n                                                           :op2 \"Union\")))))\n            :quant (m / more)))"
    ],
    "smus": [
      "The UK will leave the European Union.",
      "The UK's vote.",
      "The UK voted to leave the European Union.",
      "The vote to leave the European Union was taken by the UK.",
      "Questions about the implications of the UK's vote to leave the European Union.",
      "Your questions are about the implications of the UK's vote to leave the European Union.",
      "Your questions.",
      "Reality check.",
      "Reality check team answers more of your questions about the implications of the UK's vote to leave the European Union.",
      "The reality check team answers.",
      "Answers more of your questions about the implications of the UK's vote to leave the European Union."
    ]
  },
  {
    "instance_id": "pyrxsum-81",
    "summary": "Principality Stadium chief executive Martyn Phillips would relish the chance to host an Anthony Joshua bout at the 74,500 capacity Cardiff venue.",
    "summary_trees": [
      "# ::snt Principality Stadium chief executive Martyn Phillips would relish the chance to host an Anthony Joshua bout at the 74,500 capacity Cardiff venue.\n(r / relish-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Martyn\"\n                  :op2 \"Phillips\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (s / stadium\n                        :name (n2 / name\n                              :op1 \"Principality\"\n                              :op2 \"Stadium\"))\n                  :ARG2 (e / executive\n                        :mod (c / chief))))\n      :ARG1 (c2 / chance-02\n            :ARG0 p\n            :ARG1 (h2 / host-01\n                  :ARG0 p\n                  :ARG1 (b / bout\n                        :mod (p2 / person\n                              :name (n3 / name\n                                    :op1 \"Anthony\"\n                                    :op2 \"Joshua\")))\n                  :location (v / venue\n                        :ARG0-of (h3 / have-03\n                              :ARG1 (c3 / capacity\n                                    :quant 74500))\n                        :location (c4 / city\n                              :name (n4 / name\n                                    :op1 \"Cardiff\"))))))"
    ],
    "tree": [
      "(h3 / have-03\n    :ARG1 (c3 / capacity\n              :quant 74500))",
      "(h2 / host-01\n    :ARG0 (p / person :name (n / name :op1 \"Martyn\" :op2 \"Phillips\")))\n    :ARG1 (b / bout\n             :mod (p2 / person\n                      :name (n3 / name\n                                :op1 \"Anthony\"\n                                :op2 \"Joshua\"))))",
      "(c2 / chance-02\n    :ARG0 (p / person :name (n / name :op1 \"Martyn\" :op2 \"Phillips\")))\n    :ARG1 (h2 / host-01\n              :ARG0 p\n              :ARG1 (b / bout\n                       :mod (p2 / person\n                                :name (n3 / name\n                                          :op1 \"Anthony\"\n                                          :op2 \"Joshua\")))\n              :location (v / venue\n                           :ARG0 (h3 / have-03\n                                     :ARG1 (c3 / capacity\n                                               :quant 74500))\n                           :location (c4 / city\n                                         :name (n4 / name\n                                                   :op1 \"Cardiff\")))))",
      "(c2 / chance-02\n    :ARG1 (h2 / host-01\n              :ARG0 (p / person :name (n / name :op1 \"Martyn\" :op2 \"Phillips\")))\n              :ARG1 (b / bout\n                       :mod (p2 / person\n                                :name (n3 / name\n                                          :op1 \"Anthony\"\n                                          :op2 \"Joshua\")))\n              :location (v / venue\n                           :ARG0 (h3 / have-03\n                                     :ARG1 (c3 / capacity\n                                               :quant 74500))\n                           :location (c4 / city\n                                         :name (n4 / name\n                                                   :op1 \"Cardiff\")))))",
      "(r / relish-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Martyn\"\n                     :op2 \"Phillips\")\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (s / stadium\n                              :name (n2 / name\n                                        :op1 \"Principality\"\n                                        :op2 \"Stadium\"))\n                     :ARG2 (e / executive\n                              :mod (c / chief))))\n   :ARG1 (c2 / chance-02\n             :ARG0 p\n             :ARG1 (h2 / host-01\n                       :ARG0 p\n                       :ARG1 (b / bout\n                                :mod (p2 / person\n                                         :name (n3 / name\n                                                   :op1 \"Anthony\"\n                                                   :op2 \"Joshua\")))\n                       :location (v / venue\n                                    :ARG0 (h3 / have-03\n                                              :ARG1 (c3 / capacity\n                                                        :quant 74500))\n                                    :location (c4 / city\n                                                  :name (n4 / name\n                                                            :op1 \"Cardiff\"))))))"
    ],
    "smus": [
      "74500 capacity",
      "Martyn Phillips will host an Anthony Joshua bout.",
      "Martyn Phillips has a chance to host an Anthony Joshua bout at a 74,000 capacity venue in Cardiff.",
      "There's a chance that Martyn Phillips will host an Anthony Joshua bout at a 74,000 capacity venue in Cardiff.",
      "Principal Stadium CEO Martyn Phillips will relish the chance to host an Anthony Joshua bout at the 74,000 capacity venue in Cardiff."
    ]
  },
  {
    "instance_id": "pyrxsum-82",
    "summary": "Google's net income rose 17% to $3.93bn in the three months to June from the quarter last year, boosted by an 11% rise in revenues to $17.7bn.",
    "summary_trees": [
      "# ::snt Google's net income rose 17% to $3.93bn in the three months to June from the quarter last year, boosted by an 11% rise in revenues to $17.7bn.\n(r / rise-01\n      :ARG1 (ii / income\n            :mod (n / net)\n            :poss (c / company\n                  :name (n2 / name\n                        :op1 \"Google\")))\n      :ARG2 (p / percentage-entity\n            :value 17)\n      :ARG4 (m / monetary-quantity\n            :quant 3393000000000\n            :unit (d / dollar))\n      :time (d2 / date-entity\n            :month 6)\n      :time (q / quarter\n            :mod (l / last))\n      :ARG1-of (b / boost-01\n            :ARG0 (r2 / rise-01\n                  :ARG1 (r3 / revenue\n                        :poss c)\n                  :ARG2 (p2 / percentage-entity\n                        :value 11)\n                  :ARG4 (m2 / monetary-quantity\n                        :quant 170000000000\n                        :unit (d3 / dollar)))))"
    ],
    "tree": [
      "(r2 / rise-01\n    :ARG1 (r3 / revenue\n              :poss (c / company :name (n2 / name :op1 \"Google\"))))",
      "(r2 / rise-01\n    :ARG1 (r3 / revenue\n              :poss (c / company :name (n2 / name :op1 \"Google\")))\n    :ARG4 (m2 / monetary-quantity\n              :quant 170000000000\n              :unit (d3 / dollar)))",
      "(r / rise-01\n   :ARG1 (ii / income\n             :mod (n / net)\n             :poss (c / company\n                      :name (n2 / name\n                                :op1 \"Google\"))))",
      "(r / rise-01\n   :ARG1 (ii / income\n             :mod (n / net)\n             :poss (c / company\n                      :name (n2 / name\n                                :op1 \"Google\")))\n   :ARG4 (m / monetary-quantity\n            :quant 3393000000000\n            :unit (d / dollar)))",
      "(r / rise-01\n   :ARG1 (ii / income\n             :mod (n / net)\n             :poss (c / company\n                      :name (n2 / name\n                                :op1 \"Google\")))\n   :ARG2 (p / percentage-entity\n            :value 17)\n   :time (d2 / date-entity\n             :month 6))",
      "(r / rise-01\n   :ARG1 (ii / income\n             :mod (n / net)\n             :poss (c / company\n                      :name (n2 / name\n                                :op1 \"Google\")))\n   :ARG4 (m / monetary-quantity\n            :quant 3393000000000\n            :unit (d / dollar))\n   :time (d2 / date-entity\n             :month 6))",
      "(r / rise-01\n   :time (d2 / date-entity\n             :month 6))"
    ],
    "smus": [
      "Google's revenues have seen a rise.",
      "Google's revenues rose 17 billion dollars.",
      "Google's net income is going up.",
      "Google's net income rose by $339 billion in monetary terms.",
      "Google's net income rose 17% in June.",
      "Google's net income rose by $339 billion in June.",
      "The rise occurred in June."
    ]
  },
  {
    "instance_id": "pyrxsum-83",
    "summary": "Pregnant women should visit countries with a risk of malaria only if their trip is essential, experts are warning.",
    "summary_trees": [
      "# ::snt Pregnant women should visit countries with a risk of malaria only if their trip is essential, experts are warning.\n(w / warn-01\n      :ARG0 (p / person\n            :ARG1-of (e / expert-01))\n      :ARG1 (r / recommend-01\n            :ARG1 (v / visit-01\n                  :ARG0 (w2 / woman\n                        :ARG1-of (ii / impregnate-01))\n                  :ARG1 (c / country\n                        :ARG1-of (r2 / risk-01\n                              :ARG2 (m / malaria)))\n                  :condition (e2 / essential\n                        :mod (o / only))\n                  :domain-of e2)))"
    ],
    "tree": [
      "(r2 / risk-01\n    :ARG2 (m / malaria))",
      "(v / visit-01\n   :ARG0 (w2 / woman\n             :ARG1 (ii / impregnate-01))\n   :ARG1 (c / country\n            :ARG1 (r2 / risk-01\n                      :ARG2 (m / malaria))))",
      "(v / visit-01\n   :ARG0 (w2 / woman\n             :ARG1 (ii / impregnate-01)))",
      "(r / recommend-01\n   :ARG1 (v / visit-01\n            :ARG0 (w2 / woman\n                      :ARG1 (ii / impregnate-01))\n            :ARG1 (c / country\n                     :ARG1 (r2 / risk-01\n                               :ARG2 (m / malaria)))\n            :condition (e2 / essential\n                           :mod (o / only)\n                           :domain v)))",
      "(w / warn-01\n   :ARG0 (p / person\n            :ARG1 (e / expert-01))\n   :ARG1 (r / recommend-01\n            :ARG1 (v / visit-01\n                     :ARG0 (w2 / woman\n                               :ARG1 (ii / impregnate-01))\n                     :ARG1 (c / country\n                              :ARG1 (r2 / risk-01\n                                        :ARG2 (m / malaria)))\n                     :condition (e2 / essential\n                                    :mod (o / only)\n                                    :domain v))))",
      "(w / warn-01\n   :ARG1 (r / recommend-01\n            :ARG1 (v / visit-01\n                     :ARG0 (w2 / woman\n                               :ARG1 (ii / impregnate-01))\n                     :ARG1 (c / country\n                              :ARG1 (r2 / risk-01\n                                        :ARG2 (m / malaria)))\n                     :condition (e2 / essential\n                                    :mod (o / only)\n                                    :domain v))))"
    ],
    "smus": [
      "Malaria is a risk.",
      "Pregnancy women will visit countries at risk of malaria.",
      "Women pregnant will visit.",
      "Pregnancy women should visit countries at risk of malaria only if it is essential.",
      "Experts are warning pregnant women should visit countries at risk of malaria only if it is essential.",
      "warning that pregnant women should visit countries at risk of malaria only if it is essential."
    ]
  },
  {
    "instance_id": "pyrxsum-84",
    "summary": "In Africa's schools, old-fashioned, dusty textbooks are gradually being replaced by tablets, computers and mobile phones.",
    "summary_trees": [
      "# ::snt In Africa's schools, old-fashioned, dusty textbooks are gradually being replaced by tablets, computers and mobile phones.\n(r / replace-01\n      :ARG1 (t / textbook\n            :mod (d / dusty)\n            :mod (f / fashion\n                  :mod (o / old)))\n      :ARG2 (a / and\n            :op1 (t2 / tablet)\n            :op2 (c / computer)\n            :op3 (p / phone\n                  :ARG1-of (m / mobile-02)))\n      :manner (g / gradual)\n      :location (s / school\n            :location (c2 / continent\n                  :name (n / name\n                        :op1 \"Africa\"))))"
    ],
    "tree": [
      "(r / replace-01\n   :ARG1 (t / textbook\n            :mod (d / dusty)\n            :mod (f / fashion\n                    :mod (o / old)))\n   :ARG2 (a / and\n            :op1 (t2 / tablet)\n            :op2 (c / computer)\n            :op3 (p / phone\n                    :ARG1 (m / mobile-02))))",
      "(r / replace-01\n   :ARG1 (t / textbook\n            :mod (d / dusty)\n            :mod (f / fashion\n                    :mod (o / old))))",
      "(r / replace-01\n   :ARG1 (t / textbook\n            :mod (d / dusty)\n            :mod (f / fashion\n                    :mod (o / old)))\n   :ARG2 (t2 / tablet))",
      "(r / replace-01\n   :ARG1 (t / textbook\n            :mod (d / dusty)\n            :mod (f / fashion\n                    :mod (o / old)))\n   :ARG2 (c / computer))",
      "(r / replace-01\n   :ARG1 (t / textbook\n            :mod (d / dusty)\n            :mod (f / fashion\n                    :mod (o / old)))\n   :ARG2 (p / phone\n            :ARG1 (m / mobile-02)))"
    ],
    "smus": [
      "The old-fashion dusty textbooks were replaced by tablets, computers and mobile phones.",
      "The dusty old-fashioned textbooks were replaced.",
      "The old-fashion dusty textbooks were replaced with tablets.",
      "The old-fashion dusty textbooks were replaced by computers.",
      "The old-fashion dusty textbooks were replaced by mobile phones."
    ]
  },
  {
    "instance_id": "pyrxsum-85",
    "summary": "More than half of Scots have run out of money before pay day, according to a new report.",
    "summary_trees": [
      "# ::snt More than half of Scots have run out of money before pay day, according to a new report.\n(s / say-01\n      :ARG0 (r / report\n            :ARG1-of (n / new-01))\n      :ARG1 (r2 / run-out-05\n            :ARG1 (m / money)\n            :ARG2 (p / person\n                  :mod (c / country\n                        :name (n2 / name\n                              :op1 \"Scotland\"))\n                  :quant (m2 / more-than\n                        :op1 \"1/2\"))\n            :time (b / before\n                  :op1 (d / day\n                        :time-of (p2 / pay-01)))))"
    ],
    "tree": [
      "(r2 / run-out-05\n    :ARG1 (m / money))",
      "(r2 / run-out-05\n    :ARG1 (m / money)\n    :time (b / before\n             :op1 (d / day\n                     :time (p2 / pay-01))))",
      "(s / say-01\n   :ARG0 (r / report\n            :ARG1 (n / new-01))\n   :ARG1 (r2 / run-out-05\n             :ARG1 (m / money)\n             :ARG2 (p / person\n                      :mod (c / country\n                              :name (n2 / name\n                                        :op1 \"Scotland\"))\n                      :quant (m2 / more-than\n                                 :op1 \"1/2\"))\n             :time (b / before\n                      :op1 (d / day\n                              :time (p2 / pay-01)))))",
      "(r2 / run-out-05\n    :time (b / before\n             :op1 (d / day\n                     :time (p2 / pay-01))))"
    ],
    "smus": [
      "ran out of money.",
      "ran out of money before the pay day.",
      "The new report said more than half the Scots ran out of money before the day of the pay.",
      "Run out before the pay day."
    ]
  },
  {
    "instance_id": "pyrxsum-86",
    "summary": "The Taliban's capture of the strategically-located Sangin, once considered the deadliest battlefield for US and British troops in Afghanistan, will increase the group's mobility in the north of the province and give it control of an important supply line with the provincial capital Lashkar Gah",
    "summary_trees": [
      "# ::snt The Taliban's capture of the strategically-located Sangin, once considered the deadliest battlefield for US and British troops in Afghanistan, will increase the group's mobility in the north of the province and give it control of an important supply line with the provincial capital Lashkar Gah\n(a / and\n      :op1 (ii / increase-01\n            :ARG0 (c / capture-01\n                  :ARG0 (c2 / criminal-organization\n                        :name (n / name\n                              :op1 \"Taliban\"))\n                  :ARG1 (c3 / city\n                        :name (n2 / name\n                              :op1 \"Sangin\")\n                        :ARG1-of (l / locate-01\n                              :manner (s / strategic))\n                        :ARG1-of (c4 / consider-02\n                              :ARG2 (b / battlefield\n                                    :location (c5 / country\n                                          :name (n3 / name\n                                                :op1 \"Afghanistan\")\n                                          :part (n4 / north))\n                                    :beneficiary (a2 / and\n                                          :op1 (t / troop\n                                                :mod (c6 / country\n                                                      :name (n5 / name\n                                                            :op1 \"United\"\n                                                            :op2 \"States\")))\n                                          :op2 (t2 / troop\n                                                :mod (c7 / country\n                                                      :name (n6 / name\n                                                            :op1 \"Britain\"))))\n                                    :ARG1-of (h / have-degree-91\n                                          :ARG2 (k / kill-01\n                                                :ARG0 b)\n                                          :ARG3 (m / most)))\n                              :time (o / once))))\n            :ARG1 (m2 / mobility\n                  :poss c2\n                  :location n4))\n      :op2 (g / give-01\n            :ARG0 c\n            :ARG1 (c8 / control-01\n                  :ARG0 c2\n                  :ARG1 (l2 / line\n                        :ARG1-of (ii2 / important-01)\n                        :ARG3-of (s2 / supply-01\n                              :ARG2 (c9 / city\n                                    :name (n7 / name\n                                          :op1 \"Lashkar\"\n                                          :op2 \"Gah\")\n                                    :ARG0-of (h2 / have-org-role-91\n                                          :ARG1 (p / province\n                                                :ARG2 (c10 / capital)))))\n                        :ARG2 c2))))"
    ],
    "tree": [
      "(h2 / have-org-role-91\n    :ARG1 (p / province\n             :ARG2 (c10 / capital)))",
      "(s2 / supply-01\n    :ARG2 (c9 / city\n              :name (n7 / name\n                        :op1 \"Lashkar\"\n                        :op2 \"Gah\")\n              :ARG0 (h2 / have-org-role-91\n                        :ARG1 (p / province\n                                 :ARG2 (c10 / capital)))))",
      "(c8 / control-01\n    :ARG0 (c2 / criminal-organization :name (n / name :op1 \"Taliban\"))\n    :ARG1 (l2 / line\n              :ARG1 (ii2 / important-01)\n              :ARG3 (s2 / supply-01\n                        :ARG2 (c9 / city\n                                  :name (n7 / name\n                                            :op1 \"Lashkar\"\n                                            :op2 \"Gah\")\n                                  :ARG0 (h2 / have-org-role-91\n                                            :ARG1 (p / province\n                                                     :ARG2 (c10 / capital)))))\n              :ARG2 c2))",
      "(c8 / control-01\n    :ARG1 (l2 / line\n              :ARG1 (ii2 / important-01)\n              :ARG3 (s2 / supply-01\n                        :ARG2 (c9 / city\n                                  :name (n7 / name\n                                            :op1 \"Lashkar\"\n                                            :op2 \"Gah\")\n                                  :ARG0 (h2 / have-org-role-91\n                                            :ARG1 (p / province\n                                                     :ARG2 (c10 / capital)))))\n              :ARG2 (c2 / criminal-organization :name (n / name :op1 \"Taliban\"))))",
      "(g / give-01\n   :ARG0 (c / capture-01)\n   :ARG1 (c8 / control-01\n             :ARG0 (c2 / criminal-organization :name (n / name :op1 \"Taliban\"))\n             :ARG1 (l2 / line\n                       :ARG1 (ii2 / important-01)\n                       :ARG3 (s2 / supply-01\n                                 :ARG2 (c9 / city\n                                           :name (n7 / name\n                                                     :op1 \"Lashkar\"\n                                                     :op2 \"Gah\")\n                                           :ARG0 (h2 / have-org-role-91\n                                                     :ARG1 (p / province\n                                                              :ARG2 (c10 / capital)))))\n                       :ARG2 c2)))",
      "(g / give-01\n   :ARG1 (c8 / control-01\n             :ARG0 (c2 / criminal-organization :name (n / name :op1 \"Taliban\"))\n             :ARG1 (l2 / line\n                       :ARG1 (ii2 / important-01)\n                       :ARG3 (s2 / supply-01\n                                 :ARG2 (c9 / city\n                                           :name (n7 / name\n                                                     :op1 \"Lashkar\"\n                                                     :op2 \"Gah\")\n                                           :ARG0 (h2 / have-org-role-91\n                                                     :ARG1 (p / province\n                                                              :ARG2 (c10 / capital)))))\n                       :ARG2 c2)))",
      "(c / capture-01\n   :ARG0 (c2 / criminal-organization\n             :name (n / name\n                      :op1 \"Taliban\"))\n   :ARG1 (c3 / city\n             :name (n2 / name\n                       :op1 \"Sangin\")\n             :ARG1 (l / locate-01\n                      :manner (s / strategic))\n             :ARG1 (c4 / consider-02\n                       :ARG2 (b / battlefield\n                                :location (c5 / country\n                                              :name (n3 / name\n                                                        :op1 \"Afghanistan\")\n                                              :part (n4 / north))\n                                :beneficiary (a2 / and\n                                                 :op1 (t / troop\n                                                         :mod (c6 / country\n                                                                  :name (n5 / name\n                                                                            :op1 \"United\"\n                                                                            :op2 \"States\")))\n                                                 :op2 (t2 / troop\n                                                          :mod (c7 / country\n                                                                   :name (n6 / name\n                                                                             :op1 \"Britain\"))))\n                                :ARG1 (h / have-degree-91\n                                         :ARG2 (k / kill-01\n                                                  :ARG0 b)\n                                         :ARG3 (m / most)))\n                       :time (o / once))))",
      "(c / capture-01\n   :ARG1 (c3 / city\n             :name (n2 / name\n                       :op1 \"Sangin\")\n             :ARG1 (l / locate-01\n                      :manner (s / strategic))\n             :ARG1 (c4 / consider-02\n                       :ARG2 (b / battlefield\n                                :location (c5 / country\n                                              :name (n3 / name\n                                                        :op1 \"Afghanistan\")\n                                              :part (n4 / north))\n                                :beneficiary (a2 / and\n                                                 :op1 (t / troop\n                                                         :mod (c6 / country\n                                                                  :name (n5 / name\n                                                                            :op1 \"United\"\n                                                                            :op2 \"States\")))\n                                                 :op2 (t2 / troop\n                                                          :mod (c7 / country\n                                                                   :name (n6 / name\n                                                                             :op1 \"Britain\"))))\n                                :ARG1 (h / have-degree-91\n                                         :ARG2 (k / kill-01\n                                                  :ARG0 b)\n                                         :ARG3 (m / most)))\n                       :time (o / once))))",
      "(ii / increase-01\n    :ARG1 (m2 / mobility\n              :poss (c2 / criminal-organization :name (n / name :op1 \"Taliban\"))\n              :location (n4 / north)))",
      "(ii / increase-01\n    :ARG0 (c / capture-01\n             :ARG0 (c2 / criminal-organization\n                       :name (n / name\n                                :op1 \"Taliban\"))\n             :ARG1 (c3 / city\n                       :name (n2 / name\n                                 :op1 \"Sangin\")\n                       :ARG1 (l / locate-01\n                                :manner (s / strategic))\n                       :ARG1 (c4 / consider-02\n                                 :ARG2 (b / battlefield\n                                          :location (c5 / country\n                                                        :name (n3 / name\n                                                                  :op1 \"Afghanistan\")\n                                                        :part (n4 / north))\n                                          :beneficiary (a2 / and\n                                                           :op1 (t / troop\n                                                                   :mod (c6 / country\n                                                                            :name (n5 / name\n                                                                                      :op1 \"United\"\n                                                                                      :op2 \"States\")))\n                                                           :op2 (t2 / troop\n                                                                    :mod (c7 / country\n                                                                             :name (n6 / name\n                                                                                       :op1 \"Britain\"))))\n                                          :ARG1 (h / have-degree-91\n                                                   :ARG2 (k / kill-01\n                                                            :ARG0 b)\n                                                   :ARG3 (m / most)))\n                                 :time (o / once))))\n    :ARG1 (m2 / mobility\n              :poss c2\n              :location n4))",
      "(c / capture-01\n   :ARG0 (c2 / criminal-organization\n             :name (n / name\n                      :op1 \"Taliban\"))\n   :ARG1 (c3 / city\n             :name (n2 / name\n                       :op1 \"Sangin\")\n             :ARG1 (l / locate-01\n                      :manner (s / strategic))\n             :ARG1 (c4 / consider-02\n                       :ARG2 (b / battlefield\n                                :location (c5 / country\n                                              :name (n3 / name\n                                                        :op1 \"Afghanistan\")\n                                              :part (n4 / north))\n                                :beneficiary (t / troop\n                                                :mod (c6 / country\n                                                         :name (n5 / name\n                                                                   :op1 \"United\"\n                                                                   :op2 \"States\")))\n                                :ARG1 (h / have-degree-91\n                                         :ARG2 (k / kill-01\n                                                  :ARG0 b)\n                                         :ARG3 (m / most)))\n                       :time (o / once))))",
      "(c / capture-01\n   :ARG0 (c2 / criminal-organization\n             :name (n / name\n                      :op1 \"Taliban\"))\n   :ARG1 (c3 / city\n             :name (n2 / name\n                       :op1 \"Sangin\")\n             :ARG1 (l / locate-01\n                      :manner (s / strategic))\n             :ARG1 (c4 / consider-02\n                       :ARG2 (b / battlefield\n                                :location (c5 / country\n                                              :name (n3 / name\n                                                        :op1 \"Afghanistan\")\n                                              :part (n4 / north))\n                                :beneficiary (t2 / troop\n                                                 :mod (c7 / country\n                                                          :name (n6 / name\n                                                                    :op1 \"Britain\")))\n                                :ARG1 (h / have-degree-91\n                                         :ARG2 (k / kill-01\n                                                  :ARG0 b)\n                                         :ARG3 (m / most))\n                                :ARG1 h)\n                       :time (o / once))))",
      "(c / capture-01\n   :ARG1 (c3 / city\n             :name (n2 / name\n                       :op1 \"Sangin\")\n             :ARG1 (l / locate-01\n                      :manner (s / strategic))\n             :ARG1 (c4 / consider-02\n                       :ARG2 (b / battlefield\n                                :location (c5 / country\n                                              :name (n3 / name\n                                                        :op1 \"Afghanistan\")\n                                              :part (n4 / north))\n                                :beneficiary (t / troop\n                                                :mod (c6 / country\n                                                         :name (n5 / name\n                                                                   :op1 \"United\"\n                                                                   :op2 \"States\")))\n                                :ARG1 (h / have-degree-91\n                                         :ARG2 (k / kill-01\n                                                  :ARG0 b)\n                                         :ARG3 (m / most)))\n                       :time (o / once))))",
      "(c / capture-01\n   :ARG1 (c3 / city\n             :name (n2 / name\n                       :op1 \"Sangin\")\n             :ARG1 (l / locate-01\n                      :manner (s / strategic))\n             :ARG1 (c4 / consider-02\n                       :ARG2 (b / battlefield\n                                :location (c5 / country\n                                              :name (n3 / name\n                                                        :op1 \"Afghanistan\")\n                                              :part (n4 / north))\n                                :beneficiary (t2 / troop\n                                                 :mod (c7 / country\n                                                          :name (n6 / name\n                                                                    :op1 \"Britain\")))\n                                :ARG1 (h / have-degree-91\n                                         :ARG2 (k / kill-01\n                                                  :ARG0 b)\n                                         :ARG3 (m / most))\n                                :ARG1 h)\n                       :time (o / once))))",
      "(ii / increase-01\n    :ARG0 (c / capture-01\n             :ARG0 (c2 / criminal-organization\n                       :name (n / name\n                                :op1 \"Taliban\"))\n             :ARG1 (c3 / city\n                       :name (n2 / name\n                                 :op1 \"Sangin\")\n                       :ARG1 (l / locate-01\n                                :manner (s / strategic))\n                       :ARG1 (c4 / consider-02\n                                 :ARG2 (b / battlefield\n                                          :location (c5 / country\n                                                        :name (n3 / name\n                                                                  :op1 \"Afghanistan\")\n                                                        :part (n4 / north))\n                                          :beneficiary (t / troop\n                                                          :mod (c6 / country\n                                                                   :name (n5 / name\n                                                                             :op1 \"United\"\n                                                                             :op2 \"States\")))\n                                          :ARG1 (h / have-degree-91\n                                                   :ARG2 (k / kill-01\n                                                            :ARG0 b)\n                                                   :ARG3 (m / most)))\n                                 :time (o / once))))\n    :ARG1 (m2 / mobility\n              :poss c2\n              :location n4))",
      "(ii / increase-01\n    :ARG0 (c / capture-01\n             :ARG0 (c2 / criminal-organization\n                       :name (n / name\n                                :op1 \"Taliban\"))\n             :ARG1 (c3 / city\n                       :name (n2 / name\n                                 :op1 \"Sangin\")\n                       :ARG1 (l / locate-01\n                                :manner (s / strategic))\n                       :ARG1 (c4 / consider-02\n                                 :ARG2 (b / battlefield\n                                          :location (c5 / country\n                                                        :name (n3 / name\n                                                                  :op1 \"Afghanistan\")\n                                                        :part (n4 / north))\n                                          :beneficiary (t2 / troop\n                                                           :mod (c7 / country\n                                                                    :name (n6 / name\n                                                                              :op1 \"Britain\")))\n                                          :ARG1 (h / have-degree-91\n                                                   :ARG2 (k / kill-01\n                                                            :ARG0 b)\n                                                   :ARG3 (m / most))\n                                          :ARG1 h)\n                                 :time (o / once))))\n    :ARG1 (m2 / mobility\n              :poss c2\n              :location n4))"
    ],
    "smus": [
      "The province capital.",
      "The provincial capital, Lashkar Gah, is in supply.",
      "The Taliban have control of an important supply line to the provincial capital Lashkar Gah.",
      "The Taliban have control of an important supply line to the provincial capital Lashkar Gah.",
      "The capture would give the Taliban control of an important line of supply to the provincial capital Lashkar Gah.",
      "Give the Taliban control of an important line of supply to the provincial capital Lashkar Gah.",
      "Sangin was captured by the Taliban as a strategically located city once considered the deadliest battlefield in northern Afghanistan for American and British troops.",
      "Sangin was captured strategically positioned, once considered the deadliest battlefield in northern Afghanistan for American and British troops.",
      "Increase the Taliban's mobility in the north.",
      "The Taliban's capture of Sangin, strategically located, will increase the Taliban's mobility in northern Afghanistan, once considered the deadliest battlefield for American and British troops.",
      "Sangin was captured by the Taliban as a strategically located city once considered the deadliest battlefield in northern Afghanistan for American troops.",
      "Sangin was captured by the Taliban as a strategically located city once considered the deadliest battlefield in northern Afghanistan for British troops.",
      "Sangin was captured strategically located, once considered the deadliest battlefield in northern Afghanistan for American troops.",
      "Sangin was captured strategically positioned, once considered the deadliest battlefield in northern Afghanistan for British troops.",
      "The Taliban's capture of Sangin, strategically located, will increase the Taliban's mobility in the north of Afghanistan, once considered the deadliest battlefield for American troops.",
      "The Taliban's capture of Sangin, strategically located, will increase the Taliban's mobility in northern Afghanistan, once considered the deadliest battlefield for British troops."
    ]
  },
  {
    "instance_id": "pyrxsum-87",
    "summary": "Western Sahara is a sparsely-populated area of mostly desert situated on the northwest coast of Africa.",
    "summary_trees": [
      "# ::snt Western Sahara is a sparsely-populated area of mostly desert situated on the northwest coast of Africa.\n(a / area\n      :ARG1-of (p / populate-01\n            :manner (s / sparse))\n      :consist-of (d / desert\n            :quant (m / most))\n      :domain (c / country-region\n            :name (n / name\n                  :op1 \"Western\"\n                  :op2 \"Sahara\"))\n      :ARG1-of (s2 / situate-01\n            :ARG2 (c2 / coast\n                  :mod (n2 / northwest)\n                  :part-of (c3 / continent\n                        :name (n3 / name\n                              :op1 \"Africa\")))))"
    ],
    "tree": [
      "(s2 / situate-01\n    :ARG2 (c2 / coast\n              :mod (n2 / northwest)\n              :part (c3 / continent\n                        :name (n3 / name\n                                  :op1 \"Africa\"))))",
      "(p / populate-01\n   :manner (s / sparse))"
    ],
    "smus": [
      "located on Africa's northwest coast.",
      "sparsely populated."
    ]
  },
  {
    "instance_id": "pyrxsum-88",
    "summary": "Deputy First Minister John Swinney will give MSPs his response to a report into the death of Aberdeen schoolboy Bailey Gwynne next week.",
    "summary_trees": [
      "# ::snt Deputy First Minister John Swinney will give MSPs his response to a report into the death of Aberdeen schoolboy Bailey Gwynne next week.\n(g / give-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"John\"\n                  :op2 \"Swinney\")\n            :ARG0-of (h / have-org-role-91\n                  :ARG2 (m / minister\n                        :mod (d / deputy)\n                        :ord (o / ordinal-entity\n                              :value 1))))\n      :ARG1 (r / respond-01\n            :ARG0 p\n            :ARG1 (r2 / report-01\n                  :ARG1 (d2 / die-01\n                        :ARG1 (p2 / person\n                              :name (n2 / name\n                                    :op1 \"Bailey\"\n                                    :op2 \"Gwynne\")\n                              :mod (s / schoolboy)\n                              :location (c / city\n                                    :name (n3 / name\n                                          :op1 \"Aberdeen\"))))))\n      :ARG2 (p3 / person\n            :ARG0-of (h2 / have-org-role-91\n                  :ARG2 (m2 / member)))\n      :time (w / week\n            :mod (n4 / next)))"
    ],
    "tree": [
      "(h2 / have-org-role-91\n    :ARG2 (m2 / member))",
      "(d2 / die-01\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Bailey\"\n                        :op2 \"Gwynne\")\n              :mod (s / schoolboy)\n              :location (c / city\n                           :name (n3 / name\n                                     :op1 \"Aberdeen\"))))",
      "(r2 / report-01\n    :ARG1 (d2 / die-01\n              :ARG1 (p2 / person\n                        :name (n2 / name\n                                  :op1 \"Bailey\"\n                                  :op2 \"Gwynne\")\n                        :mod (s / schoolboy)\n                        :location (c / city\n                                     :name (n3 / name\n                                               :op1 \"Aberdeen\")))))",
      "(r / respond-01\n   :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\")))\n   :ARG1 (r2 / report-01\n             :ARG1 (d2 / die-01\n                       :ARG1 (p2 / person\n                                 :name (n2 / name\n                                           :op1 \"Bailey\"\n                                           :op2 \"Gwynne\")\n                                 :mod (s / schoolboy)\n                                 :location (c / city\n                                              :name (n3 / name\n                                                        :op1 \"Aberdeen\"))))))",
      "(r / respond-01\n   :ARG1 (r2 / report-01\n             :ARG1 (d2 / die-01\n                       :ARG1 (p2 / person\n                                 :name (n2 / name\n                                           :op1 \"Bailey\"\n                                           :op2 \"Gwynne\")\n                                 :mod (s / schoolboy)\n                                 :location (c / city\n                                              :name (n3 / name\n                                                        :op1 \"Aberdeen\"))))))",
      "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Swinney\")\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m / minister\n                              :mod (d / deputy)\n                              :ord (o / ordinal-entity\n                                      :value 1))))\n   :ARG1 (r / respond-01\n            :ARG0 p\n            :ARG1 (r2 / report-01\n                      :ARG1 (d2 / die-01\n                                :ARG1 (p2 / person\n                                          :name (n2 / name\n                                                    :op1 \"Bailey\"\n                                                    :op2 \"Gwynne\")\n                                          :mod (s / schoolboy)\n                                          :location (c / city\n                                                       :name (n3 / name\n                                                                 :op1 \"Aberdeen\")))))))",
      "(g / give-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"John\"\n                     :op2 \"Swinney\")\n            :ARG0 (h / have-org-role-91\n                     :ARG2 (m / minister\n                              :mod (d / deputy)\n                              :ord (o / ordinal-entity\n                                      :value 1))))\n   :ARG1 (r / respond-01\n            :ARG0 p\n            :ARG1 (r2 / report-01\n                      :ARG1 (d2 / die-01\n                                :ARG1 (p2 / person\n                                          :name (n2 / name\n                                                    :op1 \"Bailey\"\n                                                    :op2 \"Gwynne\")\n                                          :mod (s / schoolboy)\n                                          :location (c / city\n                                                       :name (n3 / name\n                                                                 :op1 \"Aberdeen\"))))))\n   :ARG2 (p3 / person\n             :ARG0 (h2 / have-org-role-91\n                       :ARG2 (m2 / member))))",
      "(g / give-01\n   :ARG1 (r / respond-01\n            :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\")))\n            :ARG1 (r2 / report-01\n                      :ARG1 (d2 / die-01\n                                :ARG1 (p2 / person\n                                          :name (n2 / name\n                                                    :op1 \"Bailey\"\n                                                    :op2 \"Gwynne\")\n                                          :mod (s / schoolboy)\n                                          :location (c / city\n                                                       :name (n3 / name\n                                                                 :op1 \"Aberdeen\"))))))\n   :ARG2 (p3 / person\n             :ARG0 (h2 / have-org-role-91\n                       :ARG2 (m2 / member))))",
      "(g / give-01\n   :ARG1 (r / respond-01\n            :ARG0 (p / person :name (n / name :op1 \"John\" :op2 \"Swinney\")))\n            :ARG1 (r2 / report-01\n                      :ARG1 (d2 / die-01\n                                :ARG1 (p2 / person\n                                          :name (n2 / name\n                                                    :op1 \"Bailey\"\n                                                    :op2 \"Gwynne\")\n                                          :mod (s / schoolboy)\n                                          :location (c / city\n                                                       :name (n3 / name\n                                                                 :op1 \"Aberdeen\")))))))"
    ],
    "smus": [
      "Member",
      "Schoolboy Bailey Gwynne in Aberdeen died.",
      "Report of the death of schoolboy Bailey Gwynne in Aberdeen",
      "John Swinney's response to a report of the death of schoolboy Bailey Gwynne in Aberdeen.",
      "In response to a report of the death of schoolboy Bailey Gwynne in Aberdeen.",
      "Deputy Minister John Swinney will give his response to a report of the death of schoolboy Bailey Gwynne in Aberdeen.",
      "John Swinney, the first Deputy Minister, will give a response to a report of the death of schoolboy Bailey Gwynne in Aberdeen.",
      "John Swinney's response to the report of the death of schoolboy Bailey Gwynne in Aberdeen will give members.",
      "John Swinney's response to the report of the death of schoolboy Bailey Gwynne in Aberdeen:"
    ]
  },
  {
    "instance_id": "pyrxsum-89",
    "summary": "Police at the Download Festival have kept their promise and have been posing for fan photos despite extra security.",
    "summary_trees": [
      "# ::snt Police at the Download Festival have kept their promise and have been posing for fan photos despite extra security.\n(a / and\n      :op1 (k / keep-01\n            :ARG0 (p / police\n                  :location (f / festival\n                        :name (n / name\n                              :op1 \"Download\"\n                              :op2 \"Festival\")))\n            :ARG1 (p2 / promise-01\n                  :ARG0 p))\n      :op2 (p3 / pose-01\n            :ARG0 p\n            :ARG2 (p4 / photo\n                  :mod (f2 / fan))\n            :concession (s / security\n                  :mod (e / extra))))"
    ],
    "tree": [
      "(p3 / pose-01\n    :ARG0 (p / police)\n    :ARG2 (p4 / photo\n              :mod (f2 / fan)))",
      "(k / keep-01\n   :ARG0 (p / police\n            :location (f / festival\n                         :name (n / name\n                                  :op1 \"Download\"\n                                  :op2 \"Festival\")))\n   :ARG1 (p2 / promise-01\n             :ARG0 p))",
      "(k / keep-01\n   :ARG0 (p / police\n            :location (f / festival\n                         :name (n / name\n                                  :op1 \"Download\"\n                                  :op2 \"Festival\"))))"
    ],
    "smus": [
      "Police posing with fan photos.",
      "Police at the Download Festival have kept their promise.",
      "Police at the Download Festival have kept."
    ]
  },
  {
    "instance_id": "pyrxsum-90",
    "summary": "Competition for nesting sites could explain why some birds and bumblebees are declining faster than others.",
    "summary_trees": [
      "# ::snt Competition for nesting sites could explain why some birds and bumblebees are declining faster than others.\n(p / possible-01\n      :ARG1 (e / explain-01\n            :ARG0 (c / compete-01\n                  :ARG2 (s / site\n                        :location-of (n / nest-01)))\n            :ARG1 (t / thing\n                  :ARG0-of (c2 / cause-01\n                        :ARG1 (d / decline-01\n                              :ARG1 (a / and\n                                    :op1 (b / bird\n                                          :mod (s2 / some))\n                                    :op2 (b2 / bee\n                                          :mod s2))\n                              :ARG1-of (h / have-degree-91\n                                    :ARG2 (f / fast-02)\n                                    :ARG3 (m / more)\n                                    :ARG4 (o / other)))))))"
    ],
    "tree": [
      "(h / have-degree-91\n   :ARG2 (f / fast-02)\n   :ARG3 (m / more)\n   :ARG4 (o / other))",
      "(d / decline-01\n   :ARG1 (a / and\n            :op1 (b / bird\n                    :mod (s2 / some))\n            :op2 (b2 / bee\n                     :mod s2)))",
      "(d / decline-01\n   :ARG1 (b / bird\n            :mod (s2 / some)))",
      "(d / decline-01\n   :ARG1 (b2 / bee\n             :mod (s2 / some)))"
    ],
    "smus": [
      "faster than others.",
      "Some birds and bees are declining.",
      "Some birds are declining.",
      "Some bees are declining."
    ]
  },
  {
    "instance_id": "pyrxsum-91",
    "summary": "The UK should not have to pay \"large\" sums to the EU to trade with it after Brexit, Boris Johnson has said.",
    "summary_trees": [
      "# ::snt The UK should not have to pay \"large\" sums to the EU to trade with it after Brexit, Boris Johnson has said.\n(s / say-01\n      :ARG0 (p / person\n            :name (n / name\n                  :op1 \"Boris\"\n                  :op2 \"Johnson\"))\n      :ARG1 (r / recommend-01\n            :ARG1 (o / obligate-01\n                  :polarity -\n                  :ARG1 (c / country\n                        :name (n2 / name\n                              :op1 \"UK\"))\n                  :ARG2 (p2 / pay-01\n                        :ARG0 c\n                        :ARG1 (s2 / sum\n                              :mod (l / large))\n                        :ARG2 (o2 / organization\n                              :name (n3 / name\n                                    :op1 \"EU\"))\n                        :purpose (t / trade-01\n                              :ARG0 c\n                              :ARG2 o2\n                              :time (a / after\n                                    :op1 (l2 / leave-15\n                                          :ARG0 c\n                                          :ARG1 o2)))))))"
    ],
    "tree": [
      "(l2 / leave-15\n    :ARG0 (c / country :name (n2 / name :op1 \"UK\"))\n    :ARG1 (o2 / organization :name (n3 / name :op1 \"EU\")))",
      "(t / trade-01\n   :ARG0 (c / country :name (n2 / name :op1 \"UK\"))\n   :ARG2 (o2 / organization :name (n3 / name :op1 \"EU\")))",
      "(p2 / pay-01\n    :ARG0 (c / country :name (n2 / name :op1 \"UK\"))\n    :ARG1 (s2 / sum\n              :mod (l / large)))",
      "(p2 / pay-01\n    :ARG1 (s2 / sum\n              :mod (l / large)))",
      "(p2 / pay-01\n    :ARG0 (c / country :name (n2 / name :op1 \"UK\"))\n    :ARG1 (s2 / sum\n              :mod (l / large))\n    :ARG2 (o2 / organization\n              :name (n3 / name\n                        :op1 \"EU\")))",
      "(p2 / pay-01\n    :ARG1 (s2 / sum\n              :mod (l / large))\n    :ARG2 (o2 / organization\n              :name (n3 / name\n                        :op1 \"EU\")))",
      "(p2 / pay-01\n    :ARG2 (o2 / organization\n              :name (n3 / name\n                        :op1 \"EU\")))",
      "(p2 / pay-01\n    :ARG0 (c / country :name (n2 / name :op1 \"UK\"))\n    :ARG1 (s2 / sum\n              :mod (l / large))\n    :purpose (t / trade-01\n                :ARG0 c\n                :ARG2 (o2 / organization :name (n3 / name :op1 \"EU\"))\n                :time (a / after\n                         :op1 (l2 / leave-15\n                                  :ARG0 c\n                                  :ARG1 o2))))",
      "(o / obligate-01\n   :ARG1 (c / country\n            :name (n2 / name\n                      :op1 \"UK\"))\n   :ARG2 (p2 / pay-01\n             :ARG0 c\n             :ARG1 (s2 / sum\n                       :mod (l / large))\n             :ARG2 (o2 / organization\n                       :name (n3 / name\n                                 :op1 \"EU\"))\n             :purpose (t / trade-01\n                         :ARG0 c\n                         :ARG2 o2\n                         :time (a / after\n                                  :op1 (l2 / leave-15\n                                           :ARG0 c\n                                           :ARG1 o2)))))",
      "(o / obligate-01\n   :ARG2 (p2 / pay-01\n             :ARG0 (c / country :name (n2 / name :op1 \"UK\"))\n             :ARG1 (s2 / sum\n                       :mod (l / large))\n             :ARG2 (o2 / organization\n                       :name (n3 / name\n                                 :op1 \"EU\"))\n             :purpose (t / trade-01\n                         :ARG0 c\n                         :ARG2 o2\n                         :time (a / after\n                                  :op1 (l2 / leave-15\n                                           :ARG0 c\n                                           :ARG1 o2)))))",
      "(r / recommend-01\n   :ARG1 (o / obligate-01\n            :polarity -\n            :ARG1 (c / country\n                     :name (n2 / name\n                               :op1 \"UK\"))\n            :ARG2 (p2 / pay-01\n                      :ARG0 c\n                      :ARG1 (s2 / sum\n                                :mod (l / large))\n                      :ARG2 (o2 / organization\n                                :name (n3 / name\n                                          :op1 \"EU\"))\n                      :purpose (t / trade-01\n                                  :ARG0 c\n                                  :ARG2 o2\n                                  :time (a / after\n                                           :op1 (l2 / leave-15\n                                                    :ARG0 c\n                                                    :ARG1 o2))))))",
      "(s / say-01\n   :ARG0 (p / person\n            :name (n / name\n                     :op1 \"Boris\"\n                     :op2 \"Johnson\"))\n   :ARG1 (r / recommend-01\n            :ARG1 (o / obligate-01\n                     :polarity -\n                     :ARG1 (c / country\n                              :name (n2 / name\n                                        :op1 \"UK\"))\n                     :ARG2 (p2 / pay-01\n                               :ARG0 c\n                               :ARG1 (s2 / sum\n                                         :mod (l / large))\n                               :ARG2 (o2 / organization\n                                         :name (n3 / name\n                                                   :op1 \"EU\"))\n                               :purpose (t / trade-01\n                                           :ARG0 c\n                                           :ARG2 o2\n                                           :time (a / after\n                                                    :op1 (l2 / leave-15\n                                                             :ARG0 c\n                                                             :ARG1 o2)))))))",
      "(p2 / pay-01\n    :purpose (t / trade-01))"
    ],
    "smus": [
      "The UK left the EU.",
      "The UK trades with the EU.",
      "The UK is paying large sums.",
      "Paying large sums.",
      "The UK is paying large sums to the EU.",
      "The EU is paying large sums.",
      "Paying for by the EU.",
      "The UK will pay large sums for trade with the EU after leaving the EU.",
      "The UK must pay large sums to the EU to trade with the EU after leaving the EU.",
      "The UK must pay large sums to the EU to trade after leaving the EU.",
      "The UK should not have to pay large sums to the EU to trade with the EU after leaving the EU.",
      "Boris Johnson has said that the UK should not have to pay large sums to the EU to trade with the EU after leaving the EU.",
      "Trade pay."
    ]
  },
  {
    "instance_id": "pyrxsum-92",
    "summary": "A grizzly bear has attacked and killed a cyclist just outside the Glacier National Park in the northern US state of Montana, police say.",
    "summary_trees": [
      "# ::snt A grizzly bear has attacked and killed a cyclist just outside the Glacier National Park in the northern US state of Montana, police say.\n(s / say-01\n      :ARG0 (p / police)\n      :ARG1 (a / and\n            :op1 (a2 / attack-01\n                  :ARG0 (b / bear\n                        :mod (g / grizzly))\n                  :ARG1 (p2 / person\n                        :ARG0-of (c / cycle-01)))\n            :op2 (k / kill-01\n                  :ARG0 b\n                  :ARG1 p2)\n            :location (o / outside\n                  :op1 (p3 / park\n                        :name (n / name\n                              :op1 \"Glacier\"\n                              :op2 \"National\"\n                              :op3 \"Park\")\n                        :location (n2 / north\n                              :part-of (s2 / state\n                                    :name (n3 / name\n                                          :op1 \"Montana\")\n                                    :location (c2 / country\n                                          :name (n4 / name\n                                                :op1 \"US\")))))\n                  :mod (j / just))))"
    ],
    "tree": [
      "(k / kill-01\n   :ARG0 (b / bear)\n   :ARG1 (p2 / person))",
      "(a2 / attack-01\n    :ARG0 (b / bear\n             :mod (g / grizzly)))",
      "(a2 / attack-01\n    :ARG0 (b / bear\n             :mod (g / grizzly))\n    :ARG1 (p2 / person\n              :ARG0 (c / cycle-01)))",
      "(a2 / attack-01\n    :ARG1 (p2 / person\n              :ARG0 (c / cycle-01)))",
      "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (a / and\n            :op1 (a2 / attack-01\n                     :ARG0 (b / bear\n                              :mod (g / grizzly))\n                     :ARG1 (p2 / person\n                               :ARG0 (c / cycle-01)))\n            :op2 (k / kill-01\n                    :ARG0 b\n                    :ARG1 p2)\n            :location (o / outside\n                         :op1 (p3 / park\n                                  :name (n / name\n                                           :op1 \"Glacier\"\n                                           :op2 \"National\"\n                                           :op3 \"Park\")\n                                  :location (n2 / north\n                                                :part (s2 / state\n                                                          :name (n3 / name\n                                                                    :op1 \"Montana\")\n                                                          :location (c2 / country\n                                                                        :name (n4 / name\n                                                                                  :op1 \"US\")))))\n                         :mod (j / just))))",
      "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (a2 / attack-01\n             :ARG0 (b / bear\n                      :mod (g / grizzly))\n             :ARG1 (p2 / person\n                       :ARG0 (c / cycle-01))))",
      "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (k / kill-01\n            :ARG0 (b / bear)\n            :ARG1 (p2 / person)\n            :location (o / outside\n                         :op1 (p3 / park\n                                  :name (n / name\n                                           :op1 \"Glacier\"\n                                           :op2 \"National\"\n                                           :op3 \"Park\")\n                                  :location (n2 / north\n                                                :part (s2 / state\n                                                          :name (n3 / name\n                                                                    :op1 \"Montana\")\n                                                          :location (c2 / country\n                                                                        :name (n4 / name\n                                                                                  :op1 \"US\")))))\n                         :mod (j / just))))"
    ],
    "smus": [
      "The bear killed people.",
      "The grizzly bear was attacked.",
      "A grizzly bear attacked a cyclist.",
      "The cyclists were attacked.",
      "Police say a grizzly bear attacked and killed a cyclist just outside Glacier National Park in northern Montana, US.",
      "Police say a grizzly bear attacked a cyclist.",
      "Police say a bear killed people just outside Glacier National Park in northern Montana, US."
    ]
  },
  {
    "instance_id": "pyrxsum-93",
    "summary": "A man has been arrested over the \"violent assault\" and rape of a woman in a railway station car park, police have said.",
    "summary_trees": [
      "# ::snt A man has been arrested over the \"violent assault\" and rape of a woman in a railway station car park, police have said.\n(s / say-01\n      :ARG0 (p / police)\n      :ARG1 (a / arrest-01\n            :ARG1 (m / man)\n            :ARG2 (a2 / and\n                  :op1 (a3 / assault-01\n                        :ARG0 m\n                        :ARG1 (w / woman)\n                        :mod (v / violent))\n                  :op2 (r / rape-01\n                        :ARG0 m\n                        :ARG1 w)\n                  :location (p2 / park\n                        :mod (c / car)\n                        :mod (s2 / station\n                              :mod (r2 / railway))))))"
    ],
    "tree": [
      "(r / rape-01\n   :ARG0 (m / man)\n   :ARG1 (w / woman))",
      "(a3 / assault-01\n    :mod (v / violent))",
      "(a3 / assault-01\n    :ARG0 (m / man)\n    :ARG1 (w / woman))",
      "(a3 / assault-01\n    :ARG1 (w / woman))",
      "(a / arrest-01\n   :ARG1 (m / man))",
      "(a / arrest-01\n   :ARG1 (m / man)\n   :ARG2 (a2 / and\n             :op1 (a3 / assault-01\n                      :ARG0 m\n                      :ARG1 (w / woman)\n                      :mod (v / violent))\n             :op2 (r / rape-01\n                     :ARG0 m\n                     :ARG1 w)\n             :location (p2 / park\n                           :mod (c / car)\n                           :mod (s2 / station\n                                    :mod (r2 / railway)))))",
      "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (a / arrest-01\n            :ARG1 (m / man)\n            :ARG2 (a2 / and\n                      :op1 (a3 / assault-01\n                               :ARG0 m\n                               :ARG1 (w / woman)\n                               :mod (v / violent))\n                      :op2 (r / rape-01\n                              :ARG0 m\n                              :ARG1 w)\n                      :location (p2 / park\n                                    :mod (c / car)\n                                    :mod (s2 / station\n                                             :mod (r2 / railway))))))",
      "(a / arrest-01\n   :ARG1 (m / man)\n   :ARG2 (a3 / assault-01\n             :ARG0 m\n             :ARG1 (w / woman)\n             :mod (v / violent)))",
      "(a / arrest-01\n   :ARG1 (m / man)\n   :ARG2 (r / rape-01\n            :ARG0 m\n            :ARG1 (w / woman)\n            :location (p2 / park\n                          :mod (c / car)\n                          :mod (s2 / station\n                                   :mod (r2 / railway)))))",
      "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (a / arrest-01\n            :ARG1 (m / man)\n            :ARG2 (a3 / assault-01\n                      :ARG0 m\n                      :ARG1 (w / woman)\n                      :mod (v / violent))))",
      "(s / say-01\n   :ARG0 (p / police)\n   :ARG1 (a / arrest-01\n            :ARG1 (m / man)\n            :ARG2 (r / rape-01\n                     :ARG0 m\n                     :ARG1 (w / woman)\n                     :location (p2 / park\n                                   :mod (c / car)\n                                   :mod (s2 / station\n                                            :mod (r2 / railway))))))"
    ],
    "smus": [
      "A man raping a woman.",
      "Violent assault.",
      "A man assaulted a woman.",
      "The woman was assaulted.",
      "The man was arrested.",
      "The man was arrested for a violent assault and rape against a woman in a car park at a railway station.",
      "Police said the man was arrested for a violent assault and rape against a woman in a car park at a railway station.",
      "The man was arrested for a violent assault on the woman.",
      "The man was arrested for raping a woman in a car park at a railway station.",
      "Police say a man was arrested for a violent assault on a woman.",
      "Police said a man was arrested for raping a woman in a car park at a railway station."
    ]
  },
  {
    "instance_id": "pyrxsum-94",
    "summary": "A diabetic MP who asked Coca-Cola not to take its Christmas truck to Leicester has been accused of hypocrisy for opening a sweet shop in the city.",
    "summary_trees": [
      "# ::snt A diabetic MP who asked Coca-Cola not to take its Christmas truck to Leicester has been accused of hypocrisy for opening a sweet shop in the city.\n(a / accuse-01\n      :ARG1 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (p2 / parliament)\n                  :ARG2 (m / member\n                        :mod (d / diabetes)))\n            :ARG0-of (a2 / ask-02\n                  :ARG1 (t / take-01\n                        :polarity -\n                        :ARG0 (c / company\n                              :name (n / name\n                                    :op1 \"Coke-Cola\"))\n                        :ARG1 (t2 / truck\n                              :mod (f / festival\n                                    :name (n2 / name\n                                          :op1 \"Christmas\"))\n                              :poss c)\n                        :ARG3 (c2 / city\n                              :name (n3 / name\n                                    :op1 \"Leicester\")))\n                  :ARG2 c))\n      :ARG2 (h2 / hypocrisy)\n      :ARG1-of (c3 / cause-01\n            :ARG0 (o / open-01\n                  :ARG0 p\n                  :ARG1 (s / shop\n                        :mod (s2 / sweet))\n                  :location c2)))"
    ],
    "tree": [
      "(o / open-01\n   :ARG1 (s / shop\n            :mod (s2 / sweet)))",
      "(o / open-01\n   :ARG0 (p / person)\n   :ARG1 (s / shop\n            :mod (s2 / sweet)))",
      "(t / take-01\n   :ARG0 (c / company\n            :name (n / name\n                     :op1 \"Coke-Cola\"))\n   :ARG1 (t2 / truck\n             :mod (f / festival\n                     :name (n2 / name\n                               :op1 \"Christmas\"))\n             :poss c))",
      "(t / take-01\n   :ARG1 (t2 / truck\n             :mod (f / festival\n                     :name (n2 / name\n                               :op1 \"Christmas\"))\n             :poss (c / company :name (n / name :op1 \"Coke-Cola\"))))",
      "(a2 / ask-02\n    :ARG1 (t / take-01\n             :polarity -\n             :ARG0 (c / company\n                      :name (n / name\n                               :op1 \"Coke-Cola\"))\n             :ARG1 (t2 / truck\n                       :mod (f / festival\n                               :name (n2 / name\n                                         :op1 \"Christmas\"))\n                       :poss c)\n             :ARG3 (c2 / city\n                       :name (n3 / name\n                                 :op1 \"Leicester\")))\n    :ARG2 c)",
      "(a / accuse-01\n   :ARG1 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (p2 / parliament)\n                     :ARG2 (m / member\n                              :mod (d / diabetes)))\n            :ARG0 (a2 / ask-02\n                      :ARG1 (t / take-01\n                               :polarity -\n                               :ARG0 (c / company\n                                        :name (n / name\n                                                 :op1 \"Coke-Cola\"))\n                               :ARG1 (t2 / truck\n                                         :mod (f / festival\n                                                 :name (n2 / name\n                                                           :op1 \"Christmas\"))\n                                         :poss c)\n                               :ARG3 (c2 / city\n                                         :name (n3 / name\n                                                   :op1 \"Leicester\")))\n                      :ARG2 c))\n   :ARG2 (h2 / hypocrisy))"
    ],
    "smus": [
      "Sweet shop open.",
      "People open a sweet shop.",
      "Coca-Cola will take their Christmas truck.",
      "Take Coke-Cola's Christmas truck.",
      "Coca-Cola didn't take their Christmas truck to Leicester, he asked.",
      "A diabetic MP has been accused of hypocrisy when asked not to take their Christmas truck to Leicester by Coke-Cola."
    ]
  },
  {
    "instance_id": "pyrxsum-95",
    "summary": "An Orlando mother who was found not guilty of murdering her two-year old daughter Caylee has broken her silence six years later.",
    "summary_trees": [
      "# ::snt An Orlando mother who was found not guilty of murdering her two-year old daughter Caylee has broken her silence six years later.\n(b / break-18\n      :ARG0 (p / person\n            :ARG0-of (h / have-rel-role-91\n                  :ARG2 (m / mother))\n            :location (c / city\n                  :name (n / name\n                        :op1 \"Orlando\"))\n            :ARG0-of (f / find-01\n                  :ARG1 (g / guilty-01\n                        :polarity -\n                        :ARG1 p\n                        :ARG2 (m2 / murder-01\n                              :ARG0 p\n                              :ARG1 (p2 / person\n                                    :name (n2 / name\n                                          :op1 \"Caylee\")\n                                    :ARG0-of (h2 / have-rel-role-91\n                                          :ARG1 p\n                                          :ARG2 (d / daughter))\n                                    :age (t / temporal-quantity\n                                          :quant 2\n                                          :unit (y / year)))))))\n      :ARG1 (s / silence\n            :poss p)\n      :time (a / after\n            :quant (t2 / temporal-quantity\n                  :quant 6\n                  :unit (y2 / year))))"
    ],
    "tree": [
      "(h2 / have-rel-role-91\n    :ARG1 (p / person)\n    :ARG2 (d / daughter))",
      "(m2 / murder-01\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Caylee\")\n              :ARG0 (h2 / have-rel-role-91\n                        :ARG1 (p / person)\n                        :ARG2 (d / daughter))\n              :age (t / temporal-quantity\n                      :quant 2\n                      :unit (y / year))))",
      "(m2 / murder-01\n    :ARG0 (p / person)\n    :ARG1 (p2 / person\n              :name (n2 / name\n                        :op1 \"Caylee\")\n              :ARG0 (h2 / have-rel-role-91\n                        :ARG1 p\n                        :ARG2 (d / daughter))\n              :age (t / temporal-quantity\n                      :quant 2\n                      :unit (y / year))))",
      "(g / guilty-01\n   :ARG1 (p / person)\n   :ARG2 (m2 / murder-01\n             :ARG0 p\n             :ARG1 (p2 / person\n                       :name (n2 / name\n                                 :op1 \"Caylee\")\n                       :ARG0 (h2 / have-rel-role-91\n                                 :ARG1 p\n                                 :ARG2 (d / daughter))\n                       :age (t / temporal-quantity\n                               :quant 2\n                               :unit (y / year)))))",
      "(f / find-01\n   :ARG1 (g / guilty-01\n            :polarity -\n            :ARG1 (p / person)\n            :ARG2 (m2 / murder-01\n                      :ARG0 p\n                      :ARG1 (p2 / person\n                                :name (n2 / name\n                                          :op1 \"Caylee\")\n                                :ARG0 (h2 / have-rel-role-91\n                                          :ARG1 p\n                                          :ARG2 (d / daughter))\n                                :age (t / temporal-quantity\n                                        :quant 2\n                                        :unit (y / year))))))",
      "(b / break-18\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (m / mother))\n            :location (c / city\n                         :name (n / name\n                                  :op1 \"Orlando\"))\n            :ARG0 (f / find-01\n                     :ARG1 (g / guilty-01\n                              :polarity -\n                              :ARG1 p\n                              :ARG2 (m2 / murder-01\n                                        :ARG0 p\n                                        :ARG1 (p2 / person\n                                                  :name (n2 / name\n                                                            :op1 \"Caylee\")\n                                                  :ARG0 (h2 / have-rel-role-91\n                                                            :ARG1 p\n                                                            :ARG2 (d / daughter))\n                                                  :age (t / temporal-quantity\n                                                          :quant 2\n                                                          :unit (y / year)))))))\n   :ARG1 (s / silence\n            :poss p))",
      "(b / break-18\n   :ARG1 (s / silence\n            :poss (p / person)))",
      "(b / break-18\n   :ARG0 (p / person\n            :ARG0 (h / have-rel-role-91\n                     :ARG2 (m / mother))\n            :location (c / city\n                         :name (n / name\n                                  :op1 \"Orlando\"))\n            :ARG0 (f / find-01\n                     :ARG1 (g / guilty-01\n                              :polarity -\n                              :ARG1 p\n                              :ARG2 (m2 / murder-01\n                                        :ARG0 p\n                                        :ARG1 (p2 / person\n                                                  :name (n2 / name\n                                                            :op1 \"Caylee\")\n                                                  :ARG0 (h2 / have-rel-role-91\n                                                            :ARG1 p\n                                                            :ARG2 (d / daughter))\n                                                  :age (t / temporal-quantity\n                                                          :quant 2\n                                                          :unit (y / year)))))))\n   :ARG1 (s / silence\n            :poss p)\n   :time (a / after\n            :quant (t2 / temporal-quantity\n                       :quant 6\n                       :unit (y2 / year))))",
      "(b / break-18\n   :time (a / after\n            :quant (t2 / temporal-quantity\n                       :quant 6\n                       :unit (y2 / year))))"
    ],
    "smus": [
      "The person has a daughter.",
      "Caylee, the daughter of the two, was murdered.",
      "Caylee, his two-year-old daughter, was murdered by the people.",
      "The person was guilty of murdering his two-year-old daughter, Caylee.",
      "The person was not found guilty of murdering his 2-year-old daughter, Caylee.",
      "A mother in Orlando has broken her silence after being found not guilty of murdering her two-year-old daughter, Caylee.",
      "The silence of the people has been broken.",
      "Six years later, a mother in Orlando, who has been found not guilty of murdering her two-year-old daughter, Caylee, broke her silence.",
      "Breaked six years later."
    ]
  },
  {
    "instance_id": "pyrxsum-96",
    "summary": "The devolution settlement for Wales is less fair than those offered to Scotland and Northern Ireland, the Archbishop of Wales has said.",
    "summary_trees": [
      "# ::snt The devolution settlement for Wales is less fair than those offered to Scotland and Northern Ireland, the Archbishop of Wales has said.\n(s / say-01\n      :ARG0 (p / person\n            :ARG0-of (h / have-org-role-91\n                  :ARG1 (c / country\n                        :name (n / name\n                              :op1 \"Wales\"))\n                  :ARG2 (a / archbishop)))\n      :ARG1 (f / fair-01\n            :ARG1 (s2 / settlement\n                  :mod (d / devolve-01)\n                  :beneficiary c)\n            :ARG2-of (h2 / have-degree-91\n                  :ARG1 s2\n                  :ARG3 (l / less)\n                  :ARG4 (s3 / settlement\n                        :ARG1-of (o / offer-01\n                              :ARG3 (a2 / and\n                                    :op1 (c2 / country\n                                          :name (n2 / name\n                                                :op1 \"Scotland\"))\n                                    :op2 (c3 / country\n                                          :name (n3 / name\n                                                :op1 \"Northern\"\n                                                :op2 \"Ireland\"))))))))"
    ],
    "tree": [
      "(o / offer-01\n   :ARG3 (a2 / and\n             :op1 (c2 / country\n                      :name (n2 / name\n                                :op1 \"Scotland\"))\n             :op2 (c3 / country\n                      :name (n3 / name\n                                :op1 \"Northern\"\n                                :op2 \"Ireland\"))))",
      "(h2 / have-degree-91\n    :ARG1 (s2 / settlement)\n    :ARG3 (l / less)\n    :ARG4 (s3 / settlement\n              :ARG1 (o / offer-01\n                       :ARG3 (a2 / and\n                                 :op1 (c2 / country\n                                          :name (n2 / name\n                                                    :op1 \"Scotland\"))\n                                 :op2 (c3 / country\n                                          :name (n3 / name\n                                                    :op1 \"Northern\"\n                                                    :op2 \"Ireland\"))))))",
      "(f / fair-01\n   :ARG1 (s2 / settlement\n             :mod (d / devolve-01)\n             :beneficiary (c / country :name (n / name :op1 \"Wales\"))))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (c / country\n                              :name (n / name\n                                       :op1 \"Wales\"))\n                     :ARG2 (a / archbishop)))\n   :ARG1 (f / fair-01\n            :ARG1 (s2 / settlement\n                      :mod (d / devolve-01)\n                      :beneficiary c)\n            :ARG2 (h2 / have-degree-91\n                      :ARG1 s2\n                      :ARG3 (l / less)\n                      :ARG4 (s3 / settlement\n                                :ARG1 (o / offer-01\n                                         :ARG3 (a2 / and\n                                                   :op1 (c2 / country\n                                                            :name (n2 / name\n                                                                      :op1 \"Scotland\"))\n                                                   :op2 (c3 / country\n                                                            :name (n3 / name\n                                                                      :op1 \"Northern\"\n                                                                      :op2 \"Ireland\"))))))))",
      "(o / offer-01\n   :ARG3 (c2 / country\n             :name (n2 / name\n                       :op1 \"Scotland\")))",
      "(o / offer-01\n   :ARG3 (c3 / country\n             :name (n3 / name\n                       :op1 \"Northern\"\n                       :op2 \"Ireland\")))",
      "(h2 / have-degree-91\n    :ARG1 (s2 / settlement)\n    :ARG3 (l / less)\n    :ARG4 (s3 / settlement\n              :ARG1 (o / offer-01\n                       :ARG3 (c2 / country\n                                 :name (n2 / name\n                                           :op1 \"Scotland\")))))",
      "(h2 / have-degree-91\n    :ARG1 (s2 / settlement)\n    :ARG3 (l / less)\n    :ARG4 (s3 / settlement\n              :ARG1 (o / offer-01\n                       :ARG3 (c3 / country\n                                 :name (n3 / name\n                                           :op1 \"Northern\"\n                                           :op2 \"Ireland\")))))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (c / country\n                              :name (n / name\n                                       :op1 \"Wales\"))\n                     :ARG2 (a / archbishop)))\n   :ARG1 (f / fair-01\n            :ARG1 (s2 / settlement\n                      :mod (d / devolve-01)\n                      :beneficiary c)\n            :ARG2 (h2 / have-degree-91\n                      :ARG1 s2\n                      :ARG3 (l / less)\n                      :ARG4 (s3 / settlement\n                                :ARG1 (o / offer-01\n                                         :ARG3 (c2 / country\n                                                   :name (n2 / name\n                                                             :op1 \"Scotland\")))))))",
      "(s / say-01\n   :ARG0 (p / person\n            :ARG0 (h / have-org-role-91\n                     :ARG1 (c / country\n                              :name (n / name\n                                       :op1 \"Wales\"))\n                     :ARG2 (a / archbishop)))\n   :ARG1 (f / fair-01\n            :ARG1 (s2 / settlement\n                      :mod (d / devolve-01)\n                      :beneficiary c)\n            :ARG2 (h2 / have-degree-91\n                      :ARG1 s2\n                      :ARG3 (l / less)\n                      :ARG4 (s3 / settlement\n                                :ARG1 (o / offer-01\n                                         :ARG3 (c3 / country\n                                                   :name (n3 / name\n                                                             :op1 \"Northern\"\n                                                             :op2 \"Ireland\")))))))"
    ],
    "smus": [
      "Scotland and Northern Ireland are offered.",
      "The settlement is less than the settlement offered to Scotland and Northern Ireland.",
      "A devolved settlement for Wales would be fair.",
      "Wales' Archbishop has said that a devolved settlement for Wales would be less fair than the settlement offered to Scotland and Northern Ireland.",
      "Scotland is offered.",
      "Northern Ireland is offered.",
      "The settlement is less than the one offered to Scotland.",
      "The settlement is less than the settlement offered to Northern Ireland.",
      "Wales' Archbishop has said that a devolved settlement for Wales would be less fair than the settlement offered to Scotland.",
      "Wales' Archbishop has said that a devolved settlement for Wales would be less fair than the settlement offered to Northern Ireland."
    ]
  },
  {
    "instance_id": "pyrxsum-97",
    "summary": "Labour will keep its election promises despite uncertainty over Brexit, but cuts to some services are inevitable, the first minister has warned.",
    "summary_trees": [
      "# ::snt Labour will keep its election promises despite uncertainty over Brexit, but cuts to some services are inevitable, the first minister has warned.\n(w / warn-01\n      :ARG0 (m / minister\n            :ord (o / ordinal-entity\n                  :value 1))\n      :ARG1 (h / have-concession-91\n            :ARG1 (p / possible-01\n                  :polarity -\n                  :ARG1 (a / avoid-01\n                        :ARG1 (c / cut-02\n                              :ARG1 (s / service\n                                    :mod (s2 / some)))))\n            :ARG2 (k / keep-01\n                  :ARG0 (p2 / political-party\n                        :name (n / name\n                              :op1 \"Labour\"))\n                  :ARG1 (p3 / promise-01\n                        :ARG0 p2\n                        :mod (e / elect-01))\n                  :concession (c2 / certain\n                        :polarity -\n                        :domain (l / leave-15\n                              :ARG1 (c3 / country\n                                    :name (n2 / name\n                                          :op1 \"Great\"\n                                          :op2 \"Britain\")))))))"
    ],
    "tree": [
      "(l / leave-15\n   :ARG1 (c3 / country\n             :name (n2 / name\n                       :op1 \"Great\"\n                       :op2 \"Britain\")))",
      "(k / keep-01\n   :ARG0 (p2 / political-party\n             :name (n / name\n                      :op1 \"Labour\"))\n   :ARG1 (p3 / promise-01\n             :ARG0 p2\n             :mod (e / elect-01)))",
      "(k / keep-01\n   :ARG0 (p2 / political-party\n             :name (n / name\n                      :op1 \"Labour\")))",
      "(c / cut-02\n   :ARG1 (s / service\n            :mod (s2 / some)))",
      "(p / possible-01\n   :ARG1 (a / avoid-01\n            :ARG1 (c / cut-02\n                     :ARG1 (s / service\n                              :mod (s2 / some)))))",
      "(h / have-concession-91\n   :ARG1 (p / possible-01\n            :polarity -\n            :ARG1 (a / avoid-01\n                     :ARG1 (c / cut-02\n                              :ARG1 (s / service\n                                       :mod (s2 / some)))))\n   :ARG2 (k / keep-01\n            :ARG0 (p2 / political-party\n                      :name (n / name\n                               :op1 \"Labour\"))\n            :ARG1 (p3 / promise-01\n                      :ARG0 p2\n                      :mod (e / elect-01))\n            :concession (c2 / certain\n                            :polarity -\n                            :domain (l / leave-15\n                                       :ARG1 (c3 / country\n                                                 :name (n2 / name\n                                                           :op1 \"Great\"\n                                                           :op2 \"Britain\"))))))",
      "(h / have-concession-91\n   :ARG1 (p / possible-01\n            :polarity -\n            :ARG1 (a / avoid-01\n                     :ARG1 (c / cut-02\n                              :ARG1 (s / service\n                                       :mod (s2 / some))))))",
      "(w / warn-01\n   :ARG0 (m / minister\n            :ord (o / ordinal-entity\n                    :value 1))\n   :ARG1 (h / have-concession-91\n            :ARG1 (p / possible-01\n                     :polarity -\n                     :ARG1 (a / avoid-01\n                              :ARG1 (c / cut-02\n                                       :ARG1 (s / service\n                                                :mod (s2 / some)))))\n            :ARG2 (k / keep-01\n                     :ARG0 (p2 / political-party\n                               :name (n / name\n                                        :op1 \"Labour\"))\n                     :ARG1 (p3 / promise-01\n                               :ARG0 p2\n                               :mod (e / elect-01))\n                     :concession (c2 / certain\n                                     :polarity -\n                                     :domain (l / leave-15\n                                                :ARG1 (c3 / country\n                                                          :name (n2 / name\n                                                                    :op1 \"Great\"\n                                                                    :op2 \"Britain\")))))))",
      "(w / warn-01\n   :ARG1 (h / have-concession-91\n            :ARG1 (p / possible-01\n                     :polarity -\n                     :ARG1 (a / avoid-01\n                              :ARG1 (c / cut-02\n                                       :ARG1 (s / service\n                                                :mod (s2 / some)))))\n            :ARG2 (k / keep-01\n                     :ARG0 (p2 / political-party\n                               :name (n / name\n                                        :op1 \"Labour\"))\n                     :ARG1 (p3 / promise-01\n                               :ARG0 p2\n                               :mod (e / elect-01))\n                     :concession (c2 / certain\n                                     :polarity -\n                                     :domain (l / leave-15\n                                                :ARG1 (c3 / country\n                                                          :name (n2 / name\n                                                                    :op1 \"Great\"\n                                                                    :op2 \"Britain\")))))))"
    ],
    "smus": [
      "Leave Britain.",
      "Labour will keep its election promises.",
      "Labour will keep.",
      "Some services are cut.",
      "Cuts to some services could be avoided.",
      "While leaving Britain isn't certain, Labour will keep its electoral promises, cuts to some services will be inevitable.",
      "Cuts to some services are inevitable, however.",
      "The first minister has warned that while leaving Britain is uncertain, cuts to some services are inevitable.",
      "Labour has kept its election promises, but it is uncertain whether Britain will leave, the party has been warned that cuts to some services are inevitable."
    ]
  },
  {
    "instance_id": "pyrxsum-98",
    "summary": "A convicted fraudster used an \"ingenious\" escape plot to trick prison wardens into letting him go free, a court has heard.",
    "summary_trees": [
      "# ::snt A convicted fraudster used an \"ingenious\" escape plot to trick prison wardens into letting him go free, a court has heard.\n(h / hear-01\n      :ARG0 (c / court)\n      :ARG1 (u / use-01\n            :ARG0 (p / person\n                  :ARG0-of (d / defraud-01)\n                  :ARG1-of (c2 / convict-01))\n            :ARG1 (p2 / plot-01\n                  :ARG0 p\n                  :ARG1 (e / escape-01\n                        :ARG0 p)\n                  :mod (ii / ingenious))\n            :ARG2 (t / trick-01\n                  :ARG0 p\n                  :ARG1 (w / warden\n                        :mod (p3 / prison))\n                  :ARG2 (l / let-01\n                        :ARG0 w\n                        :ARG1 (f / free-04\n                              :ARG1 p)))))"
    ],
    "tree": [
      "(l / let-01\n   :ARG0 (w / warden)\n   :ARG1 (f / free-04\n            :ARG1 (p / person)))",
      "(t / trick-01\n   :ARG0 (p / person)\n   :ARG1 (w / warden\n            :mod (p3 / prison)))",
      "(t / trick-01\n   :ARG0 (p / person)\n   :ARG1 (w / warden\n            :mod (p3 / prison))\n   :ARG2 (l / let-01\n            :ARG0 w\n            :ARG1 (f / free-04\n                     :ARG1 p)))",
      "(t / trick-01\n   :ARG1 (w / warden\n            :mod (p3 / prison))\n   :ARG2 (l / let-01\n            :ARG0 w\n            :ARG1 (f / free-04\n                     :ARG1 (p / person))))",
      "(p2 / plot-01\n    :ARG0 (p / person)\n    :ARG1 (e / escape-01\n             :ARG0 p))",
      "(p2 / plot-01\n    :ARG1 (e / escape-01\n             :ARG0 (p / person)))",
      "(p2 / plot-01\n    :mod (ii / ingenious))",
      "(u / use-01\n   :ARG0 (p / person\n            :ARG0 (d / defraud-01)\n            :ARG1 (c2 / convict-01))\n   :ARG1 (p2 / plot-01\n             :ARG0 p\n             :ARG1 (e / escape-01\n                      :ARG0 p)\n             :mod (ii / ingenious)))",
      "(u / use-01\n   :ARG1 (p2 / plot-01\n             :ARG0 (p / person)\n             :ARG1 (e / escape-01\n                      :ARG0 p)\n             :mod (ii / ingenious))\n   :ARG2 (t / trick-01\n            :ARG0 p\n            :ARG1 (w / warden\n                     :mod (p3 / prison))\n            :ARG2 (l / let-01\n                     :ARG0 w\n                     :ARG1 (f / free-04\n                              :ARG1 p))))",
      "(u / use-01\n   :ARG1 (p2 / plot-01\n             :ARG0 (p / person)\n             :ARG1 (e / escape-01\n                      :ARG0 p)\n             :mod (ii / ingenious)))",
      "(u / use-01\n   :ARG0 (p / person\n            :ARG0 (d / defraud-01)\n            :ARG1 (c2 / convict-01))\n   :ARG1 (p2 / plot-01\n             :ARG0 p\n             :ARG1 (e / escape-01\n                      :ARG0 p)\n             :mod (ii / ingenious))\n   :ARG2 (t / trick-01\n            :ARG0 p\n            :ARG1 (w / warden\n                     :mod (p3 / prison))\n            :ARG2 (l / let-01\n                     :ARG0 w\n                     :ARG1 (f / free-04\n                              :ARG1 p))))",
      "(u / use-01\n   :ARG0 (p / person\n            :ARG0 (d / defraud-01)\n            :ARG1 (c2 / convict-01)))",
      "(h / hear-01\n   :ARG0 (c / court)\n   :ARG1 (u / use-01\n            :ARG0 (p / person\n                     :ARG0 (d / defraud-01)\n                     :ARG1 (c2 / convict-01))\n            :ARG1 (p2 / plot-01\n                      :ARG0 p\n                      :ARG1 (e / escape-01\n                               :ARG0 p)\n                      :mod (ii / ingenious))\n            :ARG2 (t / trick-01\n                     :ARG0 p\n                     :ARG1 (w / warden\n                              :mod (p3 / prison))\n                     :ARG2 (l / let-01\n                              :ARG0 w\n                              :ARG1 (f / free-04\n                                       :ARG1 p)))))"
    ],
    "smus": [
      "Wardens are letting people be free.",
      "Trick the prison wardens.",
      "People are going to trick the prison wardens into letting them free.",
      "Prison wardens are going to trick the system into letting people free.",
      "People plot to escape.",
      "The plot was to escape.",
      "Ingenious plot.",
      "The fraudster used an ingenious plot to escape to get convicted.",
      "Ingenious plots of people to escape used to trick prison wardens into letting them free.",
      "The ingenious plot to escape was used.",
      "The fraudsters who were convicted used an ingenious plot to escape to trick the prison wardens into letting them free.",
      "Fraudsters used convictions.",
      "The court heard that the fraudster used his ingenious escape plot to trick the prison wardens into letting him free."
    ]
  },
  {
    "instance_id": "pyrxsum-99",
    "summary": "The M6 motorway between Wolverhampton and Walsall has reopened after a fatal crash.",
    "summary_trees": [
      "# ::snt The M6 motorway between Wolverhampton and Walsall has reopened after a fatal crash.\n(r / reopen-01\n      :ARG1 (r2 / road\n            :name (n / name\n                  :op1 \"M6\")\n            :location (b / between\n                  :op1 (c / city\n                        :name (n2 / name\n                              :op1 \"Wolverhampton\"))\n                  :op2 (c2 / city\n                        :name (n3 / name\n                              :op1 \"Walsall\")))\n            :mod (m / motorway))\n      :time (a / after\n            :op1 (c3 / crash-01\n                  :mod (f / fatal))))"
    ],
    "tree": [
      "(c3 / crash-01\n    :mod (f / fatal))",
      "(r / reopen-01\n   :ARG1 (r2 / road\n             :name (n / name\n                      :op1 \"M6\")\n             :location (b / between\n                          :op1 (c / city\n                                  :name (n2 / name\n                                            :op1 \"Wolverhampton\"))\n                          :op2 (c2 / city\n                                   :name (n3 / name\n                                             :op1 \"Walsall\")))\n             :mod (m / motorway)))",
      "(r / reopen-01\n   :ARG1 (r2 / road\n             :name (n / name\n                      :op1 \"M6\")\n             :location (b / between\n                          :op1 (c / city\n                                  :name (n2 / name\n                                            :op1 \"Wolverhampton\"))\n                          :op2 (c2 / city\n                                   :name (n3 / name\n                                             :op1 \"Walsall\")))\n             :mod (m / motorway))\n   :time (a / after\n            :op1 (c3 / crash-01\n                     :mod (f / fatal))))",
      "(r / reopen-01\n   :time (a / after\n            :op1 (c3 / crash-01\n                     :mod (f / fatal))))"
    ],
    "smus": [
      "A fatal crash occurred.",
      "The M6 motorway between Wolverhampton and Walsall has been reopened.",
      "The M6 motorway between Wolverhampton and Walsall has reopened after a fatal crash.",
      "Reopened after fatal crash"
    ]
  }
]